[
    {
        "record_id": 1861,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the school name and driver name for all school buses.",
            "List the names of schools along with the names of their drivers for all school buses.",
            "Provide the driver names alongside the names of the schools for each school bus.",
            "Display the school name together with the respective driver's name for all the school buses.",
            "Give me the names of schools and their associated drivers for all school bus routes."
        ],
        "ref_sql": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
        "MQL": "db.school.aggregate([\n  {\n    $lookup: {\n      from: \"driver\",\n      localField: \"School_ID\",\n      foreignField: \"school_bus.School_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"School\": 1,\n      \"Name\": \"$Docs1.Name\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3537,
        "db_id": "cinema",
        "nl_queries": [
            "Show name, opening year, and capacity for each cinema.",
            "List the names, opening years, and capacities of all cinemas.",
            "Provide the opening year, name, and capacity for each cinema available.",
            "Can you display the capacity, opening year, and names of the cinemas?",
            "Retrieve the names, capacities, and their respective opening years for every cinema in the database."
        ],
        "ref_sql": "SELECT name , openning_year , capacity FROM cinema",
        "MQL": "db.cinema.find({}, { \"Name\": 1, \"Openning_year\": 1, \"Capacity\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 765,
        "db_id": "pilot_record",
        "nl_queries": [
            "Show the most common nationality of pilots.",
            "What is the nationality that most pilots belong to?",
            "Find the nationality with the largest number of pilots.",
            "Identify the most frequently occurring nationality among pilots.",
            "Which nationality has the highest count of pilots?"
        ],
        "ref_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 210,
        "db_id": "college_3",
        "nl_queries": [
            "Find the first names of students whose first names contain letter \"a\".",
            "What are the first names for students who have an \"a\" in their first name?",
            "List the first names of all students that have the letter \"a\" in their first name.",
            "Provide the first names of students where the name includes the letter \"a\".",
            "Retrieve the first names of students whose names feature the letter \"a\"."
        ],
        "ref_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "MQL": "db.Student.find(\n  {\n    Fname: { $regex: \"a\", $options: \"i\" }\n  },\n  {\n    Fname: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 22,
        "db_id": "hr_1",
        "nl_queries": [
            "display all the information of those employees who did not have any job in the past.",
            "What is all the information about employees who have never had a job in the past?",
            "Show me all the details about employees who have never held any position previously.",
            "Provide the information for those employees who lack any prior job experience.",
            "Retrieve all relevant data about employees with no job history at all."
        ],
        "ref_sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"employees.EMPLOYEE_ID\",\n      foreignField: \"employees.EMPLOYEE_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      employee: {\n        $cond: [\n          {\n            $eq: [{ $size: \"$employees.job_history\" }, 0]\n          },\n          \"$employees\",\n          {\n            $cond: [\n              {\n                $eq: [{ $size: \"$Docs1.employees.job_history\" }, 0]\n              },\n              \"$Docs1.employees\",\n              false\n            ]\n          }\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      employee: { $ne: false }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employee.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employee.FIRST_NAME\",\n      LAST_NAME: \"$employee.LAST_NAME\",\n      EMAIL: \"$employee.EMAIL\",\n      PHONE_NUMBER: \"$employee.PHONE_NUMBER\",\n      HIRE_DATE: \"$employee.HIRE_DATE\",\n      JOB_ID: \"$employee.JOB_ID\",\n      SALARY: \"$employee.SALARY\",\n      COMMISSION_PCT: \"$employee.COMMISSION_PCT\",\n      MANAGER_ID: \"$employee.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employee.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 987,
        "db_id": "college_3",
        "nl_queries": [
            "Find the name of the department that has the fewest members.",
            "What is the name of the department with the fewest members?",
            "Identify the department that has the smallest number of members.",
            "Which department is associated with the least number of members?",
            "What department has the lowest member count?"
        ],
        "ref_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Member_of\"\n  },\n  {\n    $group: {\n      _id: \"$DName\",\n      memberCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { memberCount: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      DName: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1804,
        "db_id": "flight_1",
        "nl_queries": [
            "Show names for all aircraft with at least two flights.",
            "What are the names for all aircrafts with at least 2 flights?",
            "List the names of all aircraft that have two or more flights.",
            "Provide the names of aircraft with at least a pair of flights.",
            "Retrieve the names of all aircraft that are associated with a minimum of two flights."
        ],
        "ref_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "MQL": "db.aircraft.aggregate([\n  {\n    $project: {\n      name: 1,\n      count_flight: {\n        $size: \"$flight\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_flight: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 39,
        "db_id": "wine_1",
        "nl_queries": [
            "Give me the average prices of wines that are produced by appelations in Sonoma County.",
            "What is the average price of wines produced in appelations in Sonoma County?",
            "What is the average cost of wines from appellations situated in Sonoma County?",
            "Can you provide the average price for wines that come from Sonoma County appellations?",
            "How much do wines from appellations in Sonoma County typically cost on average?"
        ],
        "ref_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: \"Sonoma\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Price: {\n        $avg: \"$wine.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 218,
        "db_id": "wine_1",
        "nl_queries": [
            "List the names of all distinct wines in alphabetical order.",
            "What are the names of wines, sorted in alphabetical order?",
            "Retrieve all unique wine names listed in order from A to Z.",
            "Provide an alphabetical list of distinct wine names.",
            "Show the names of all wines, ensuring they are sorted alphabetically without duplicates."
        ],
        "ref_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      names: {\n        $addToSet: \"$wine.Name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$names\"\n  },\n  {\n    $sort: {\n      names: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$names\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2424,
        "db_id": "ship_1",
        "nl_queries": [
            "How many captains are in each rank?",
            "Count the number of captains that have each rank.",
            "What is the count of captains for each rank classification?",
            "How many captains exist for each rank category?",
            "Provide the total number of captains grouped by their rank."
        ],
        "ref_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1174,
        "db_id": "e_learning",
        "nl_queries": [
            "What is the name of each course and the corresponding number of student enrollment?",
            "List the name and the number of enrolled student for each course.",
            "Provide the names of all courses along with the total number of students enrolled in each.",
            "Show me each course name along with the corresponding count of student enrollments.",
            "Can you list each course along with how many students have signed up for it?"
        ],
        "ref_sql": "SELECT T1.course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
        "MQL": "db.Subjects.aggregate([\n  { \n    $unwind: \"$Courses\" \n  },\n  { \n    $unwind: \"$Courses.Student_Course_Enrolment\" \n  },\n  {\n    $group: {\n      _id: \"$Courses.course_name\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      course_name: \"$_id\",\n      COUNT: 1\n    }\n  }\n])\n"
    },
    {
        "record_id": 570,
        "db_id": "voter_2",
        "nl_queries": [
            "Find the last names of students with major 50.",
            "What are the last names of students studying major 50?",
            "Retrieve the last names of students enrolled in major 50.",
            "List the last names of students who are majoring in 50.",
            "What are the last names of students with a major code of 50?"
        ],
        "ref_sql": "SELECT LName FROM STUDENT WHERE Major = 50",
        "MQL": "db.Student.find(\n  { Major: 50 },\n  { LName: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2673,
        "db_id": "device",
        "nl_queries": [
            "How many devices are there?",
            "Count the number of devices.",
            "What is the total number of devices available?",
            "Determine how many devices exist in the database.",
            "Please calculate the total count of devices present."
        ],
        "ref_sql": "SELECT count(*) FROM device",
        "MQL": "db.device.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1514,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
            "What are the subject ID, subject name, and the number of available courses for each subject?",
            "List the subject ID, subject name, and the total courses available for each subject.",
            "Provide the subject ID, subject name, along with the count of courses present for each subject.",
            "What are the subject IDs, names, and how many courses are available for each subject?"
        ],
        "ref_sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id",
        "MQL": "db.Subjects.aggregate([\n  {\n    $project: {\n   _id: 0,\n   subject_id: 1,\n      subject_name: 1,\n      COUNT: { $size: \"$Courses\" }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2854,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find how many different affiliation types there are.",
            "Count the number of different affiliation types.",
            "How many unique types of affiliations are there?",
            "Determine the total number of distinct affiliation types available.",
            "What is the count of different affiliation categories present?"
        ],
        "ref_sql": "SELECT count(DISTINCT affiliation) FROM university",
        "MQL": "db.university.aggregate([\n  {\n    $group: {\n      _id: \"$Affiliation\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_affiliation\"\n  }\n]);\n"
    },
    {
        "record_id": 3599,
        "db_id": "ship_1",
        "nl_queries": [
            "Sort all captain names by their ages from old to young.",
            "What are the names of captains, sorted by age descending?",
            "List the names of captains arranged from the oldest to the youngest based on their age.",
            "Provide the names of all captains, ordered by age starting with the eldest.",
            "Show captain names sorted in descending order of their ages."
        ],
        "ref_sql": "SELECT name FROM captain ORDER BY age DESC",
        "MQL": "db.Ship.aggregate([\n  { $unwind: \"$captain\" },\n  { $sort: { \"captain.age\": -1 } },\n  { $project: { _id: 0, Name: \"$captain.Name\" } }\n]);\n"
    },
    {
        "record_id": 3538,
        "db_id": "cinema",
        "nl_queries": [
            "Show all the cinema names and opening years in descending order of opening year.",
            "List the names and opening years of all cinemas, sorted from the most recent to the oldest opening year.",
            "Provide a display of cinema names along with their opening years in reverse chronological order.",
            "Retrieve and show all cinema names and their respective opening years, arranged by opening year from newest to oldest.",
            "Highlight all the cinemas with their names and opening years, organized in descending order of their opening years."
        ],
        "ref_sql": "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC",
        "MQL": "db.cinema.find({}, { \"Name\": 1, \"Openning_year\": 1, \"_id\": 0 }).sort({ \"Openning_year\": -1 });\n"
    },
    {
        "record_id": 3891,
        "db_id": "university_basketball",
        "nl_queries": [
            "List all schools and their nicknames in the order of founded year.",
            "What are the different schools and their nicknames, ordered by their founding years?",
            "Retrieve a list of universities along with their nicknames, sorted by the year they were founded.",
            "Show all schools and their corresponding nicknames, arranged in chronological order of their establishment.",
            "Provide the names and nicknames of all the universities, ordered by their founding dates."
        ],
        "ref_sql": "SELECT school , nickname FROM university ORDER BY founded",
        "MQL": "db.university.find({}, { School: 1, Nickname: 1, _id: 0 }).sort({ Founded: 1 });\n"
    },
    {
        "record_id": 3206,
        "db_id": "hr_1",
        "nl_queries": [
            "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
            "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
            "Show the first and last names, hire date, salary, and department number for employees whose first names do not include the letter M.",
            "List the full names, hiring dates, salaries, and department IDs of employees that have first names which lack the letter M.",
            "Provide the first and last names, hire dates, salary amounts, and department identifiers for those employees whose first names are free of the letter M."
        ],
        "ref_sql": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.FIRST_NAME\": {\n        $not: {\n          $regex: \"M\",\n          $options: \"i\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      SALARY: \"$employees.SALARY\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1330,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the login name of the course author that teaches the course with name \"advanced database\".",
            "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
            "What is the login name of the instructor for the \"advanced database\" course?",
            "Can you provide the login name of the author teaching the course named \"advanced database\"?",
            "Who is the course author for \"advanced database\", and what is their login name?"
        ],
        "ref_sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"advanced database\"",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $match: {\n      \"Courses.course_name\": \"advanced database\"\n    }\n  },\n  {\n    $project: {\n      login_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3514,
        "db_id": "flight_1",
        "nl_queries": [
            "What is the name and distance for aircraft with id 12?",
            "What is the name and distance for the aircraft that has an id of 12?",
            "What are the name and distance of the aircraft that has the identifier 12?",
            "Can you provide the name and distance for the aircraft with ID 12?",
            "Show me the name and distance for the aircraft whose ID is 12."
        ],
        "ref_sql": "SELECT name , distance FROM Aircraft WHERE aid = 12",
        "MQL": "db.aircraft.aggregate([\n  {\n    $match: {\n      aid: 12\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      distance: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3210,
        "db_id": "hr_1",
        "nl_queries": [
            "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
            "Return the full names and salaries of employees with null commissions.",
            "List the first and last names along with salaries of employees who have no commission percentage recorded.",
            "Provide the full names and salary information for all workers without any commission values.",
            "Get the salaries and complete names of employees that do not have a commission percentage assigned."
        ],
        "ref_sql": "SELECT first_name , last_name , salary FROM employees WHERE commission_pct = \"null\"",
        "MQL": "db.jobs.aggregate([\n  {\n    $match: {\n      \"employees.COMMISSION_PCT\": { $exists: false }\n    }\n  },\n  {\n    $project: {\n      \"employees.FIRST_NAME\": 1,\n      \"employees.LAST_NAME\": 1,\n      \"employees.SALARY\": 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 23,
        "db_id": "hr_1",
        "nl_queries": [
            "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
            "What is all the information about employees with D or S in their first name, ordered by salary descending?",
            "Provide the complete information for employees whose first names contain either D or S, sorted by their salary in descending order.",
            "List all details of employees with the letters D or S in their first name, arranged from highest to lowest salary.",
            "Retrieve all employee information filtered by first names that include D or S, and display the results in descending order of salary."
        ],
        "ref_sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"employees.FIRST_NAME\": { $regex: \"D\", $options: \"i\" } },\n        { \"employees.FIRST_NAME\": { $regex: \"S\", $options: \"i\" } }\n      ]\n    }\n  },\n  {\n    $sort: { \"employees.SALARY\": -1 }\n  },\n  {\n    $project: {\n      _id: 0,\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      EMAIL: \"$employees.EMAIL\",\n      PHONE_NUMBER: \"$employees.PHONE_NUMBER\",\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      JOB_ID: \"$employees.JOB_ID\",\n      SALARY: \"$employees.SALARY\",\n      COMMISSION_PCT: \"$employees.COMMISSION_PCT\",\n      MANAGER_ID: \"$employees.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 883,
        "db_id": "school_player",
        "nl_queries": [
            "List the school color of the school that has the largest enrollment.",
            "What is the school color of the school with the largest enrollment?",
            "What are the colors of the school that enrolls the most students?",
            "Identify the school colors of the school with the highest student enrollment.",
            "Can you tell me the school colors for the institution that has the largest number of enrollments?"
        ],
        "ref_sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "MQL": "db.school.aggregate([\n  {\n    $sort: {\n      Enrollment: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      School_Colors: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2657,
        "db_id": "county_public_safety",
        "nl_queries": [
            "How many counties are there?",
            "Count the number of countries.",
            "What is the total number of counties in the database?",
            "Can you tell me how many counties exist?",
            "Determine the total count of counties available in the records."
        ],
        "ref_sql": "SELECT count(*) FROM county_public_safety",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1721,
        "db_id": "hr_1",
        "nl_queries": [
            "display the department name and number of employees in each of the department.",
            "Give the name of each department and the number of employees in each.",
            "Show the names of departments along with their corresponding employee counts.",
            "List each department along with the total number of employees working in it.",
            "Provide the department names together with how many employees are in each department."
        ],
        "ref_sql": "SELECT T2.department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT_NAME\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      DEPARTMENT_NAME: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1566,
        "db_id": "school_player",
        "nl_queries": [
            "Show the denomination of the school that has the most players.",
            "What is the denomination of the school the most players belong to?",
            "Identify the denomination of the school that fields the greatest number of players.",
            "What denomination is associated with the school having the highest player count?",
            "Which school's denomination has the largest total of players enrolled?"
        ],
        "ref_sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.school.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $group: {\n      _id: \"$Denomination\",\n      playerCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      playerCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Denomination: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2495,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "How many documents have expenses?",
            "Count the number of documents with expenses.",
            "What is the total number of documents that include expenses?",
            "How many documents contain expenses recorded?",
            "Determine the count of documents associated with expenses."
        ],
        "ref_sql": "SELECT count(*) FROM Documents_with_expenses",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.Documents_with_Expenses\": { $ne: [] }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 587,
        "db_id": "gas_company",
        "nl_queries": [
            "order all gas station locations by the opening year.",
            "What are the locations of all the gas stations ordered by opening year?",
            "List all gas station locations sorted by their year of opening.",
            "Show me the locations of all gas stations arranged in order of their opening year.",
            "What locations can be found for all gas stations, sorted by the year they opened?"
        ],
        "ref_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "MQL": "db.gas_station.find({}, { Location: 1, _id: 0 }).sort({ Open_Year: 1 });\n"
    },
    {
        "record_id": 222,
        "db_id": "musical",
        "nl_queries": [
            "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
            "Return the different nominees of musicals that have an award that is not the Tony Award.",
            "List the unique nominees for musicals that do not have the \"Tony Award\".",
            "Identify all distinct nominees from musicals that are not awarded a Tony Award.",
            "Provide the distinct list of nominees for musicals that received awards other than the Tony Award."
        ],
        "ref_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
        "MQL": "db.musical.aggregate([\n  {\n    $match: {\n      Award: { $ne: \"Tony Award\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Nominee\",\n    }\n  },\n  {\n    $project: {\n      Nominee: \"$_id\",\n      _id: 0\n    }\n  }\n]);"
    },
    {
        "record_id": 3189,
        "db_id": "university_basketball",
        "nl_queries": [
            "Show the enrollment and primary_conference of the oldest college.",
            "What are the enrollment and primary conference for the university which was founded the earliest?",
            "What is the enrollment and primary conference for the oldest university?",
            "Provide the enrollment figures and primary conference of the first established college.",
            "Can you tell me the enrollment and primary conference details for the university with the earliest founding date?"
        ],
        "ref_sql": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
        "MQL": "db.university.aggregate([\n  {\n    $sort: { Founded: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Enrollment: 1,\n      Primary_conference: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1454,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the project id and detail for the project with at least two documents?",
            "Return the ids and details corresponding to projects for which there are more than two documents.",
            "List the project IDs and their details for projects that have a minimum of two documents associated with them.",
            "Provide the IDs and details of projects that contain two or more documents.",
            "What are the project IDs and details for projects that include at least a couple of documents?"
        ],
        "ref_sql": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2",
        "MQL": "db.Projects.aggregate([\n  {\n    $project: {\n      Project_ID: 1,\n      Project_Details: 1,\n      count_Documents: {\n        $size: \"$Documents\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Documents: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      Project_ID: 1,\n      Project_Details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3231,
        "db_id": "flight_1",
        "nl_queries": [
            "Show the flight number and distance of the flight with maximum price.",
            "What is the flight number and its distance for the one with the maximum price?",
            "Provide the flight number and the distance for the flight that has the highest fare.",
            "What are the flight number and distance of the most expensive flight?",
            "Identify the flight number along with its distance for the flight that commands the highest price."
        ],
        "ref_sql": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $sort: {\n      \"flight.price\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      flno: \"$flight.flno\",\n      distance: \"$flight.distance\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3498,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
            "What is the name, city, country, and elevation for every airport in the city of New York?",
            "List the names, cities, countries, and elevation of all airports situated in New York.",
            "Show the airport names, along with their cities, countries, and altitude for those located in New York.",
            "Retrieve the details (name, city, country, and elevation) of every airport found in the city of New York."
        ],
        "ref_sql": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      city: \"New York\"\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      city: 1,\n      country: 1,\n      elevation: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3513,
        "db_id": "flight_1",
        "nl_queries": [
            "Show name and distance for all aircrafts.",
            "What are the names and distances for all airplanes?",
            "List the names and distances of every aircraft.",
            "Provide the names along with their distances for all airplanes.",
            "display the aircraft names and the distances they cover."
        ],
        "ref_sql": "SELECT name , distance FROM Aircraft",
        "MQL": "db.aircraft.find({}, { name: 1, distance: 1, _id: 0 });\n"
    },
    {
        "record_id": 3288,
        "db_id": "hr_1",
        "nl_queries": [
            "when is the hire date for those employees whose first name does not containing the letter M?",
            "On what dates were employees without the letter M in their first names hired?",
            "What are the hire dates for employees whose first names exclude the letter M?",
            "Identify the dates on which employees, who do not have the letter M in their first names, were hired.",
            "List the hiring dates for employees that have first names without the letter M."
        ],
        "ref_sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.FIRST_NAME\": {\n        $not: {\n          $regex: \"M\",\n          $options: \"i\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2678,
        "db_id": "journal_committee",
        "nl_queries": [
            "How many editors are there?",
            "What is the total number of editors in the database?",
            "Can you tell me the count of editors?",
            "How many editors exist within the collection?",
            "Please provide the number of editors available."
        ],
        "ref_sql": "SELECT count(*) FROM editor",
        "MQL": "db.editor.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1271,
        "db_id": "hr_1",
        "nl_queries": [
            "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
            "What the full names, ids of each employee and the name of the country they are in?",
            "List the full names and IDs of employees along with the name of the country they currently work in.",
            "Can you show me the first and last names, as well as the employee IDs and the associated country names for all employees?",
            "Provide the complete names (first and last) and IDs of each employee, including the name of the country in which they are employed."
        ],
        "ref_sql": "SELECT T1.first_name , T1.last_name , T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"regions\",\n      let: { location_id: \"$LOCATION_ID\" },\n      pipeline: [\n        { $unwind: \"$countries\" },\n        { $unwind: \"$countries.locations\" },\n        {\n          $match: {\n            $expr: {\n              $eq: [\"$countries.locations.LOCATION_ID\", \"$$location_id\"]\n            }\n          }\n        },\n        {\n          $project: {\n            COUNTRY_NAME: \"$countries.COUNTRY_NAME\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      COUNTRY_NAME: \"$Docs1.COUNTRY_NAME\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 347,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the distinct winery of wines having price between 50 and 100.",
            "What are the distinct wineries which produce wines costing between 50 and 100?",
            "Identify the unique wineries that offer wines priced between $50 and $100.",
            "List the distinct wineries producing wines that cost within the range of 50 to 100.",
            "What unique wineries create wines with prices ranging from 50 to 100 dollars?"
        ],
        "ref_sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Price\": {\n        $gte: 50,\n        $lte: 100\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$wine.Winery\"\n    }\n  },\n  {\n    $project: {\n      Winery: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 26,
        "db_id": "hr_1",
        "nl_queries": [
            "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
            "What is all the information regarding employees with salaries above the minimum and under 2500?",
            "Retrieve the details of employees earning between the lowest salary and 2500.",
            "Show all relevant information for employees with salaries higher than zero but less than or equal to 2500.",
            "Provide the complete records of employees whose salaries range from above the minimum up to 2500."
        ],
        "ref_sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.SALARY\": { $gt: 0, $lte: 2500 }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      EMAIL: \"$employees.EMAIL\",\n      PHONE_NUMBER: \"$employees.PHONE_NUMBER\",\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      JOB_ID: \"$employees.JOB_ID\",\n      SALARY: \"$employees.SALARY\",\n      COMMISSION_PCT: \"$employees.COMMISSION_PCT\",\n      MANAGER_ID: \"$employees.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3202,
        "db_id": "hr_1",
        "nl_queries": [
            "Display the first name, and department number for all employees whose last name is \"McEwen\".",
            "What are the first names and department numbers for employees with last name McEwen?",
            "Show me the first names and department IDs of all employees named McEwen.",
            "List the first names and department numbers for employees who have the last name McEwen.",
            "Provide the first names along with department IDs of employees whose last name is McEwen."
        ],
        "ref_sql": "SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: { \"employees.LAST_NAME\": \"McEwen\" }\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2438,
        "db_id": "flight_4",
        "nl_queries": [
            "How many cities are there that have more than 3 airports?",
            "What is the count of cities with more than 3 airports?",
            "What is the number of cities that host more than three airports?",
            "How many cities are there with an airport count greater than three?",
            "Can you tell me the total number of cities that have over three airports?"
        ],
        "ref_sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*) > 3)",
        "MQL": "db.airports.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 3 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 221,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
            "Give the distinct names of wines made before 2000 or after 2010.",
            "Retrieve the unique names of wines that were produced either prior to 2000 or subsequent to 2010.",
            "List the distinct names of wines made before the year 2000 or after 2010.",
            "Identify the unique names of wines created earlier than 2000 or later than 2010."
        ],
        "ref_sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010",
        "MQL": "db.grapes.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"wine.Year\": { $lt: 2000 } },\n        { \"wine.Year\": { $gt: 2010 } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$wine.Name\"\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3232,
        "db_id": "flight_1",
        "nl_queries": [
            "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
            "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
            "List the flight number, departure city, and destination for all flights sorted alphabetically by origin.",
            "Provide the flight number, origin, and destination of each flight arranged in order of the departure cities' names.",
            "Retrieve the flight details, including flight number, origin, and destination, sorted by the names of the departure cities."
        ],
        "ref_sql": "SELECT flno , origin , destination FROM Flight ORDER BY origin",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $project: {\n      flno: \"$flight.flno\",\n      origin: \"$flight.origin\",\n      destination: \"$flight.destination\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      origin: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 746,
        "db_id": "machine_repair",
        "nl_queries": [
            "Show the name of technicians aged either 36 or 37",
            "What are the names of the technicians aged either 36 or 37?",
            "List the names of technicians who are 36 or 37 years old.",
            "Can you provide the names of technicians aged 36 or 37?",
            "Retrieve the names of all technicians with ages of 36 or 37."
        ],
        "ref_sql": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
        "MQL": "db.technician.find(\n  {\n    Age: { $in: [36, 37] }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 585,
        "db_id": "county_public_safety",
        "nl_queries": [
            "What is the location shared by most counties?",
            "Which location has the most corresponding counties?",
            "Which location is associated with the highest number of counties?",
            "Identify the location that has the greatest number of counties.",
            "What is the location that the majority of counties belong to?"
        ],
        "ref_sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 74,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
            "What are the appelations for wines produced after 2008 but not in the Central Coast area?",
            "List the appelations that offer wines made after 2008, excluding any from the Central Coast region.",
            "What appelations exist for wines produced following the year 2008 that are not from the Central Coast area?",
            "Identify the appelations of wines that are from after 2008 and do not originate from the Central Coast territory."
        ],
        "ref_sql": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Year\": { $gt: 2008 },\n      \"Area\": { $ne: \"Central Coast\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Appelation\"\n    }\n  },\n  {\n    $project: {\n      Appelation: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 70,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all allergies with number of students affected.",
            "How many students have each different allergy?",
            "List all allergies along with the number of students suffering from each.",
            "What is the count of students associated with each allergy type?",
            "Provide a breakdown of allergies and how many students are affected by each one."
        ],
        "ref_sql": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $unwind: \"$Has_Allergy\"\n  },\n  {\n    $group: {\n      _id: \"$Has_Allergy.Allergy\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Allergy: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 957,
        "db_id": "allergy_1",
        "nl_queries": [
            "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
            "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
            "List the allergies and their types for the female student named Lisa, sorted by the names of the allergies.",
            "Identify the allergies along with their types that Lisa, a female student, has. Please order the results by allergy names.",
            "What allergies does Lisa, the girl student, possess and what are their types? Ensure the results are sorted by the names of the allergies."
        ],
        "ref_sql": "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Fname: \"Lisa\",\n      Sex: \"F\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Allergy_Type\",\n      localField: \"StuID\",\n      foreignField: \"Has_Allergy.StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Allergy: \"$Docs1.Allergy\",\n      AllergyType: \"$Docs1.AllergyType\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Allergy: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3616,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the names of the drivers without a school bus.",
            "List the names of drivers that do not have a school bus assigned.",
            "Provide the names of drivers who are without a school bus.",
            "Identify the drivers that do not possess any school bus.",
            "Give me the names of drivers lacking a school bus."
        ],
        "ref_sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "MQL": "db.driver.find({\n  \"school_bus\": { $exists: true, $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 576,
        "db_id": "gas_company",
        "nl_queries": [
            "Show all locations and the number of gas stations in each location ordered by the count.",
            "For each location, how many gas stations are there in order?",
            "List all locations along with the respective number of gas stations, sorted by the station count.",
            "What is the count of gas stations at each location, organized in descending order?",
            "Provide the number of gas stations found in each location, arranged by the total count."
        ],
        "ref_sql": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "MQL": "db.gas_station.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3352,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the login names of the students with family name \"Ward\"?",
            "Return the login names of the students whose family name is \"Ward\".",
            "Could you provide the login names of any students with the last name \"Ward\"?",
            "Please list the login names for students whose surname is \"Ward\".",
            "What are the usernames of students that have \"Ward\" as their family name?"
        ],
        "ref_sql": "SELECT login_name FROM Students WHERE family_name = \"Ward\"",
        "MQL": "db.Students.find(\n  { \"family_name\": \"Ward\" }, \n  { \"login_name\": 1, \"_id\": 0 }\n)\n"
    },
    {
        "record_id": 3615,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the name of drivers in descending order of age.",
            "List the names of drivers sorted by age in descending order.",
            "Retrieve all driver names arranged from oldest to youngest.",
            "Display the names of drivers, with the oldest listed first.",
            "Present the names of drivers, sorted from the highest to the lowest age."
        ],
        "ref_sql": "SELECT name FROM driver ORDER BY age DESC",
        "MQL": "db.driver.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n"
    },
    {
        "record_id": 1572,
        "db_id": "college_3",
        "nl_queries": [
            "Find the first name and last name of the instructor of course that has course name",
            "What is the full name of the instructor who has a course named COMPUTER LITERACY?",
            "Retrieve the first and last names of the teacher for the course titled COMPUTER LITERACY.",
            "Who is the instructor of the course named COMPUTER LITERACY, and what are their first and last names?",
            "Can you provide the full name of the instructor for the course called COMPUTER LITERACY?"
        ],
        "ref_sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\"",
        "MQL": "db.Faculty.find(\n  {\n    \"Course.CName\": \"COMPUTER LITERACY\"\n  },\n  {\n    \"Fname\": 1,\n    \"Lname\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 511,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show first name, last name, age for all female students. Their sex is F.",
            "What are the full names and ages for all female students whose sex is F?",
            "List the first names, last names, and ages of all students identifying as female.",
            "Provide the ages, along with the first and last names, for every female student.",
            "What are the ages and names (both first and last) of all students who are female?"
        ],
        "ref_sql": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'",
        "MQL": "db.Student.find(\n  { \"Sex\": \"F\" },\n  { \"Fname\": 1, \"LName\": 1, \"Age\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 699,
        "db_id": "journal_committee",
        "nl_queries": [
            "List the names of editors that are not on any journal committee.",
            "Retrieve the names of editors who are not affiliated with any journal committee.",
            "Show me the names of editors that do not belong to any journal committee.",
            "Identify the names of editors with no involvement in journal committees.",
            "List editors who are not part of any journal committee."
        ],
        "ref_sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "MQL": "db.editor.find({\n  \"journal_committee\": { $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1495,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show statement id, statement detail, account detail for accounts.",
            "What are the statement ids, statement details, and account details, for all accounts?",
            "List the statement IDs, details of the statements, and account information for each account.",
            "Can you provide the statement IDs along with their details and corresponding account details for all accounts?",
            "Retrieve the statement ID, statement information, and account details for all existing accounts."
        ],
        "ref_sql": "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Statements\"\n  },\n  {\n    $unwind: \"$Documents.Statements.Accounts\"\n  },\n  {\n    $project: {\n      Statement_ID: \"$Documents.Statements.Statement_ID\",\n      Statement_Details: \"$Documents.Statements.Statement_Details\",\n      Account_Details: \"$Documents.Statements.Accounts.Account_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 92,
        "db_id": "ship_1",
        "nl_queries": [
            "Which classes have more than two captains?",
            "Give the classes that have more than two captains.",
            "What ship classes have over two captains?",
            "List the ship classes that contain more than two captains.",
            "Identify the classes with a captain count exceeding two."
        ],
        "ref_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Class\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      Class: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3526,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the name, home city, and age for all drivers.",
            "Provide the names, home cities, and ages of every driver.",
            "List all drivers along with their names, cities of residence, and ages.",
            "Display the name, home city, and age of each driver in the database.",
            "Retrieve the names, hometowns, and ages for all drivers present in the driver collection."
        ],
        "ref_sql": "SELECT name , home_city , age FROM driver",
        "MQL": "db.driver.find({}, { \"Name\": 1, \"Home_city\": 1, \"Age\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2472,
        "db_id": "e_learning",
        "nl_queries": [
            "How many courses are there in total?",
            "Find the total number of courses offered.",
            "What is the overall number of courses available?",
            "Can you tell me the total amount of courses offered?",
            "How many courses are being provided in total?"
        ],
        "ref_sql": "SELECT count(*) FROM COURSES",
        "MQL": "db.Subjects.aggregate([\n  {\n    $project: {\n      count_Courses: {\n        $size: \"$Courses\"\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count_Courses: {\n        $sum: \"$count_Courses\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count_Courses\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 353,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all allergy types.",
            "What are the different allergy types?",
            "List all types of allergies available.",
            "Can you provide the different kinds of allergy types?",
            "What are the various allergy categories recorded?"
        ],
        "ref_sql": "SELECT DISTINCT allergytype FROM Allergy_type",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $group: {\n      _id: \"$AllergyType\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      AllergyType: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3547,
        "db_id": "flight_1",
        "nl_queries": [
            "Show name and salary for all employees sorted by salary.",
            "What is the name and salary of all employees in order of salary?",
            "List the names and salaries of all employees, arranged by their salary in ascending order.",
            "Provide the names and salary details for every employee sorted by salary.",
            "Display each employee's name alongside their salary, sorted from the lowest to the highest salary."
        ],
        "ref_sql": "SELECT name , salary FROM Employee ORDER BY salary",
        "MQL": "db.employee.find({}, { name: 1, salary: 1, _id: 0 }).sort({ salary: 1 });\n"
    },
    {
        "record_id": 5,
        "db_id": "hr_1",
        "nl_queries": [
            "Display all the information about the department Marketing.",
            "What is all the information about the Marketing department?",
            "Retrieve all details for the Marketing department.",
            "Can you provide the complete information regarding the Marketing department?",
            "Show me everything about the department named Marketing."
        ],
        "ref_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'",
        "MQL": "db.departments.find(\n  { \"DEPARTMENT_NAME\": \"Marketing\" },\n  { \"DEPARTMENT_ID\": 1, \"DEPARTMENT_NAME\": 1, \"MANAGER_ID\": 1, \"LOCATION_ID\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 452,
        "db_id": "college_3",
        "nl_queries": [
            "Find the name of the department that has no students minored in?",
            "What is the name of the department htat has no students minoring in it?",
            "What departments have no students enrolled in a minor?",
            "Identify the departments that do not have any students pursuing a minor program.",
            "List the names of departments without any students minoring in their courses."
        ],
        "ref_sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
        "MQL": "db.Department.aggregate([\n  {\n    $match: {\n      \"Minor_in\": { $exists: true, $eq: [] }\n    }\n  },\n  {\n    $project: {\n      DName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4264,
        "db_id": "voter_1",
        "nl_queries": [
            "Return the names of the contestants whose names contain the substring 'Al' .",
            "Provide the names of contestants that include the letters 'Al' in their names.",
            "List all contestants whose names have the substring 'Al' in them.",
            "Fetch the contestant names that feature 'Al' anywhere in the name.",
            "Show me the names of contestants containing the sequence 'Al'."
        ],
        "ref_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "MQL": "db.CONTESTANTS.find({\n  \"contestant_name\": { $regex: \"Al\", $options: \"i\" }\n}, { \"contestant_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 225,
        "db_id": "pilot_record",
        "nl_queries": [
            "List the distinct positions of pilots older than 30.",
            "Retrieve the unique positions held by pilots who are over the age of 30.",
            "Show the distinct titles of pilots aged more than 30 years.",
            "Identify the different positions of pilots with an age greater than 30.",
            "List all the unique roles of pilots who are older than thirty."
        ],
        "ref_sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age > 30",
        "MQL": "db.pilot.aggregate([\n  {\n    $match: {\n      Age: { $gt: 30 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Position\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Position: \"$_id\"\n    }\n  }\n])"
    },
    {
        "record_id": 2856,
        "db_id": "allergy_1",
        "nl_queries": [
            "How many different allergy types exist?",
            "How many distinct allergies are there?",
            "What is the total number of unique allergy types available?",
            "How many unique types of allergies can be found?",
            "Can you tell me the count of distinct allergy categories?"
        ],
        "ref_sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $group: {\n      _id: null,\n      distinctAllergyTypes: { $addToSet: \"$AllergyType\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_allergytype: { $size: \"$distinctAllergyTypes\" }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 395,
        "db_id": "school_bus",
        "nl_queries": [
            "Show all different home cities.",
            "List all unique home cities of drivers.",
            "Retrieve a list of different home cities from the driver records.",
            "Provide all distinct home cities where the drivers are based.",
            "Display every unique home city represented by the drivers."
        ],
        "ref_sql": "SELECT DISTINCT home_city FROM driver",
        "MQL": "db.driver.aggregate([\n  {\n    $group: {\n      _id: \"$Home_city\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Home_city: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3086,
        "db_id": "flight_1",
        "nl_queries": [
            "Show all destinations and the number of flights to each destination.",
            "What are the destinations and number of flights to each one?",
            "Provide a list of all destinations along with the total number of flights available to each.",
            "Can you give me the destinations and how many flights go to each one?",
            "List the destinations and the corresponding flight counts for each destination."
        ],
        "ref_sql": "SELECT destination , count(*) FROM Flight GROUP BY destination",
        "MQL": "db.aircraft.aggregate([\n  { $unwind: \"$flight\" },\n  {\n    $group: {\n      _id: \"$flight.destination\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      destination: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3749,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the party and the number of drivers in each party.",
            "List each party along with the total number of drivers in that party.",
            "Provide the name of each party and the count of drivers affiliated with it.",
            "Display the parties and the respective number of drivers in each party group.",
            "Present the party names alongside how many drivers belong to each one."
        ],
        "ref_sql": "SELECT party , count(*) FROM driver GROUP BY party",
        "MQL": "db.driver.aggregate([\n  {\n    $group: {\n      _id: \"$Party\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Party: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 607,
        "db_id": "college_3",
        "nl_queries": [
            "Find the last names of faculties in building Barton in alphabetic order.",
            "What are the last names of faculty in building Barton, sorted by last name?",
            "List the last names of faculty members who are situated in Barton, arranged in alphabetical order.",
            "What are the last names of the instructors located in the Barton building, sorted by their last names?",
            "Retrieve the last names of faculty working in the Barton building, ordered alphabetically."
        ],
        "ref_sql": "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname",
        "MQL": "db.Faculty.aggregate([\n  {\n    $match: {\n      Building: \"Barton\"\n    }\n  },\n  {\n    $sort: {\n      Lname: 1\n    }\n  },\n  {\n    $project: {\n      Lname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3499,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the name, city, and country of the airport that has the highest latitude.",
            "What is the name, city, and country of the airport with the highest elevation?",
            "What airport has the highest elevation, and what are its name, city, and country?",
            "Please provide the name, city, and country of the airport situated at the highest altitude.",
            "Identify the airport with the greatest elevation and list its name, city, and country."
        ],
        "ref_sql": "SELECT name , city , country FROM airports ORDER BY elevation DESC LIMIT 1",
        "MQL": "db.airports.aggregate([\n  {\n    $sort: { elevation: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      city: 1,\n      country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3889,
        "db_id": "university_basketball",
        "nl_queries": [
            "List all public schools and their locations.",
            "What are the public schools and what are their locations?",
            "Provide a list of public universities along with their respective locations.",
            "Could you show me the public schools and their corresponding locations?",
            "Please give me the names and locations of all the public affiliated schools."
        ],
        "ref_sql": "SELECT school , LOCATION FROM university WHERE affiliation = 'Public'",
        "MQL": "db.university.find(\n  {\n    Affiliation: \"Public\"\n  },\n  {\n    School: 1,\n    Location: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 958,
        "db_id": "wine_1",
        "nl_queries": [
            "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
            "What is the area for the appelation which produced the most wines prior to 2010?",
            "Which appellation area has the highest wine production count for wines made before 2010?",
            "Identify the area of the appellation with the greatest number of wines produced prior to the year 2010.",
            "What is the appellation area that has yielded the most wines before 2010?"
        ],
        "ref_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Year\": { $lt: 2010 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Area\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Area: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1887,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the type of school and the number of buses for each type.",
            "List the different types of schools and the total number of buses for each category.",
            "Provide the school types along with their respective counts of school buses.",
            "Identify each school type and indicate how many buses are associated with each type.",
            "Display the categories of schools and the quantity of buses available for each category."
        ],
        "ref_sql": "SELECT T2.type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
        "MQL": "db.school.aggregate([\n  {\n    $unwind: \"$school_bus\"\n  },\n  {\n    $group: {\n      _id: \"$Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3414,
        "db_id": "flight_4",
        "nl_queries": [
            "What is the maximum elevation of all airports in the country of Iceland?",
            "What is the highest elevation of an airport in the country of Iceland?",
            "What is the highest altitude of any airport situated in Iceland?",
            "Can you tell me the maximum height of airports within the country of Iceland?",
            "What is the greatest elevation recorded at an airport in Iceland?"
        ],
        "ref_sql": "SELECT max(elevation) FROM airports WHERE country = 'Iceland'",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      country: \"Iceland\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_elevation: { $max: \"$elevation\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_elevation: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3887,
        "db_id": "hr_1",
        "nl_queries": [
            "Find the salary and manager number for those employees who is working under a manager.",
            "What are the salaries and manager ids for employees who have managers?",
            "Retrieve the salaries and manager IDs for employees who report to a manager.",
            "List the salaries along with the manager IDs for employees that have a manager.",
            "What are the salaries and respective manager IDs of employees working under a manager?"
        ],
        "ref_sql": "SELECT salary , manager_id FROM employees WHERE manager_id != \"null\"",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.MANAGER_ID\": { $ne: null }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      SALARY: \"$employees.SALARY\",\n      MANAGER_ID: \"$employees.MANAGER_ID\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3209,
        "db_id": "hr_1",
        "nl_queries": [
            "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
            "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
            "Show the names and hire dates of all employees who work in Clara's department.",
            "List the full names and hiring dates for all staff members in the same department as Clara.",
            "Provide the first names, last names, and hiring dates of employees from Clara's department."
        ],
        "ref_sql": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.FIRST_NAME\": \"Clara\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"DEPARTMENT_ID\",\n      foreignField: \"DEPARTMENT_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.employees\"\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$Docs1.employees.FIRST_NAME\",\n      LAST_NAME: \"$Docs1.employees.LAST_NAME\",\n      HIRE_DATE: \"$Docs1.employees.HIRE_DATE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 785,
        "db_id": "device",
        "nl_queries": [
            "List the open date of open year of the shop named \"Apple\".",
            "What are the open dates and years for the shop named Apple?",
            "What is the opening date and year for the store called \"Apple\"?",
            "Provide the opening year and date of the shop named \"Apple\".",
            "Can you tell me the date and year when the Apple shop opened?"
        ],
        "ref_sql": "SELECT Open_Date , Open_Year FROM shop WHERE Shop_Name = \"Apple\"",
        "MQL": "db.shop.find(\n  { \"Shop_Name\": \"Apple\" },\n  { \"Open_Date\": 1, \"Open_Year\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 913,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all student IDs who have at least two allergies.",
            "What are the students ids of students who have more than one allergy?",
            "List all student IDs that have two or more allergies.",
            "Which student IDs correspond to individuals with more than one allergy?",
            "Provide the IDs of students who are affected by at least two different allergies."
        ],
        "ref_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$Has_Allergy\"\n  },\n  {\n    $group: {\n      _id: \"$StuID\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      StuID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3441,
        "db_id": "county_public_safety",
        "nl_queries": [
            "What are the minimum and maximum crime rate of counties?",
            "Return the minimum and maximum crime rates across all counties.",
            "What are the lowest and highest crime rates recorded among counties?",
            "Provide the minimum and maximum crime rates for all counties.",
            "Can you tell me the least and most severe crime rates across the counties?"
        ],
        "ref_sql": "SELECT min(Crime_rate) , max(Crime_rate) FROM county_public_safety",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_Crime_rate: { $min: \"$Crime_rate\" },\n      max_Crime_rate: { $max: \"$Crime_rate\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_Crime_rate: 1,\n      max_Crime_rate: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2666,
        "db_id": "customer_complaints",
        "nl_queries": [
            "How many customers are there in the customer type with the most customers?",
            "Count the number of customers that have the customer type that is most common.",
            "What is the total number of customers belonging to the customer type that has the highest count?",
            "Find out how many customers belong to the most prevalent customer type.",
            "How many customers are categorized under the customer type with the greatest number of individuals?"
        ],
        "ref_sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$customer_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 748,
        "db_id": "machine_repair",
        "nl_queries": [
            "List the names of technicians who have not been assigned to repair machines.",
            "What are the names of the technicians that have not been assigned to repair machines?",
            "Identify the names of technicians who are not currently assigned any repair jobs.",
            "Show me the names of technicians without any repair assignments.",
            "Retrieve the names of technicians that have no assigned repair tasks."
        ],
        "ref_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "MQL": "db.technician.aggregate([\n  {\n    $project: {\n      Name: 1,\n      count_repair_assignment: {\n        $size: \"$repair_assignment\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_repair_assignment: 0\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 641,
        "db_id": "wine_1",
        "nl_queries": [
            "List the names and scores of all wines.",
            "What are the names and scores of all wines?",
            "Provide the names and ratings of all wines available.",
            "Can you show me the names along with the scores of all wines?",
            "Please list all wines with their corresponding names and score values."
        ],
        "ref_sql": "SELECT Name , Score FROM WINE",
        "MQL": "db.grapes.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $project: {\n      Name: \"$wine.Name\",\n      Score: \"$wine.Score\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2360,
        "db_id": "voter_1",
        "nl_queries": [
            "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "List the names of all contestants except for 'Jessie Alloway'.",
            "Provide the names of contestants that are not named 'Jessie Alloway'.",
            "Which contestants have names other than 'Jessie Alloway'?",
            "Show the contestant names excluding 'Jessie Alloway'."
        ],
        "ref_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "MQL": "db.CONTESTANTS.find({\n  \"contestant_name\": { $ne: \"Jessie Alloway\" }\n}, { \"contestant_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1993,
        "db_id": "school_player",
        "nl_queries": [
            "Find the team of the player of the highest age.",
            "Which team has the oldest player?",
            "Identify the team of the oldest player in the league.",
            "What team does the player with the maximum age belong to?",
            "Which team features the player with the highest age?"
        ],
        "ref_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "MQL": "db.school.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $sort: {\n      \"player.Age\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Team: \"$player.Team\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3350,
        "db_id": "e_learning",
        "nl_queries": [
            "List all the login names and family names of course author and tutors.",
            "What are the login names and family names of course author and tutors?",
            "Provide the login and family names of all course authors and tutors.",
            "Can you give me the login names along with the family names of course authors and tutors?",
            "Show me the login and last names of all tutors and authors involved in the courses."
        ],
        "ref_sql": "SELECT login_name , family_name FROM Course_Authors_and_Tutors",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $project: {\n      login_name: 1,\n      family_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3385,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the maximum price and score of wines produced by St. Helena appelation?",
            "Give the maximum price and score for wines produced in the appelation St. Helena.",
            "What is the highest price and score for wines from the St. Helena appellation?",
            "Can you provide the top price and score of wines crafted in the St. Helena region?",
            "Find out the maximum score and price of wines associated with the St. Helena appellation."
        ],
        "ref_sql": "SELECT max(Price) , max(Score) FROM WINE WHERE Appelation = \"St. Helena\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      Appelation: \"St. Helena\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_Price: { $max: \"$wine.Price\" },\n      max_Score: { $max: \"$wine.Score\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Price: 1,\n      max_Score: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3351,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the common login name of course authors and students.",
            "What are the login names used both by some course authors and some students?",
            "List the login names that are shared by both course authors and students.",
            "Retrieve the login names that are common to some course authors and certain students.",
            "Identify the login names utilized by both course instructors and enrolled students."
        ],
        "ref_sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $lookup: {\n      from: \"Students\",\n      localField: \"login_name\",\n      foreignField: \"login_name\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      login_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3772,
        "db_id": "hr_1",
        "nl_queries": [
            "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
            "Return the phone numbers of employees with salaries between 8000 and 12000.",
            "What are the phone numbers for employees earning between 8000 and 12000?",
            "Can you provide the contact numbers of employees whose salaries fall within the 8000 to 12000 range?",
            "List the phone numbers of employees with salaries ranging from 8000 to 12000."
        ],
        "ref_sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.SALARY\": {\n        $gte: 8000,\n        $lte: 12000\n      }\n    }\n  },\n  {\n    $project: {\n      PHONE_NUMBER: \"$employees.PHONE_NUMBER\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 473,
        "db_id": "school_player",
        "nl_queries": [
            "Please show different denominations and the corresponding number of schools.",
            "For each denomination, return the denomination and the count of schools with that denomination.",
            "List the various denominations along with the total number of schools associated with each.",
            "Provide a breakdown of school denominations and the respective counts of schools for each denomination.",
            "Display all denominations together with the count of schools that belong to each denomination."
        ],
        "ref_sql": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination",
        "MQL": "db.school.aggregate([\n  {\n    $group: {\n      _id: \"$Denomination\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Denomination: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4250,
        "db_id": "voter_1",
        "nl_queries": [
            "List the vote ids, phone numbers and states of all votes.",
            "Provide a list of all vote IDs, along with the corresponding phone numbers and states of voters.",
            "Can you show me the vote IDs, phone numbers, and states for each voting entry?",
            "Generate a list that includes all vote IDs, together with phone numbers and their associated states.",
            "Retrieve the vote IDs, phone numbers, and states for all recorded votes."
        ],
        "ref_sql": "SELECT vote_id , phone_number , state FROM votes",
        "MQL": "db.CONTESTANTS.aggregate([\n  { $unwind: \"$VOTES\" },\n  { $project: {\n      _id: 0,\n      vote_id: \"$VOTES.vote_id\",\n      phone_number: \"$VOTES.phone_number\",\n      state: \"$VOTES.state\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 60,
        "db_id": "journal_committee",
        "nl_queries": [
            "Please show the most common age of editors.",
            "What is the age that appears most frequently among editors?",
            "Can you tell me the age that most editors have in common?",
            "Identify the age of editors that is reported the most often.",
            "What is the predominant age of editors in the dataset?"
        ],
        "ref_sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.editor.aggregate([\n  {\n    $group: {\n      _id: \"$Age\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, Age: \"$_id\" }\n  }\n])\n"
    },
    {
        "record_id": 693,
        "db_id": "county_public_safety",
        "nl_queries": [
            "List the name of the county with the largest population.",
            "What is the name of the county with the greatest population?",
            "Identify the county that has the highest number of residents.",
            "Which county has the most populous community?",
            "Name the county with the most significant population count."
        ],
        "ref_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $sort: { Population: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3048,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
            "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".",
            "List the most recent logon dates for students with the last names \"Jaskolski\" or \"Langosh\".",
            "What are the latest logon timestamps for students whose surnames are \"Jaskolski\" and \"Langosh\"?",
            "Provide the latest logon dates for students that have the family names \"Jaskolski\" or \"Langosh\"."
        ],
        "ref_sql": "SELECT date_of_latest_logon FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"",
        "MQL": "db.Students.aggregate([\n  {\n    $match: {\n      $or: [\n        { family_name: \"Jaskolski\" },\n        { family_name: \"Langosh\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      date_of_latest_logon: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 526,
        "db_id": "wine_1",
        "nl_queries": [
            "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
            "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
            "Retrieve the details of wines, specifically their grape types, appelations, and names, where the score exceeds 93, sorted by the name.",
            "Show me the grape, appelation, and name of wines that have scores greater than 93, ordered alphabetically by name.",
            "Provide a list of wines with scores above 93, including their grape varieties, appelations, and names, sorted by wine name."
        ],
        "ref_sql": "SELECT Grape , Appelation , Name FROM WINE WHERE Score > 93 ORDER BY Name",
        "MQL": "db.grapes.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Score\": { $gt: 93 }\n    }\n  },\n  {\n    $project: {\n      Grape: \"$wine.Grape\",\n      Appelation: \"$wine.Appelation\",\n      Name: \"$wine.Name\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1511,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the student ID and personal name of the student with at least two enrollments.",
            "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
            "List the student ID and personal name for students who have enrolled in two or more courses.",
            "Identify the students with at least two course enrollments, providing their student ID and personal name.",
            "Provide the student ID and personal name of those students that are enrolled in a minimum of two courses."
        ],
        "ref_sql": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2",
        "MQL": "db.Students.aggregate([\n  {\n    $project: {\n      student_id: 1,\n      personal_name: 1,\n      count_enrollment: {\n        $size: \"$Student_Course_Enrolment\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_enrollment: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      student_id: 1,\n      personal_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 453,
        "db_id": "college_3",
        "nl_queries": [
            "Find the department name that is in Building \"Mergenthaler\".",
            "What is the name of the department in the Building Mergenthaler?",
            "Identify the name of the department situated in the Mergenthaler building.",
            "What department is housed in the Building named Mergenthaler?",
            "Retrieve the department title located within the Mergenthaler building."
        ],
        "ref_sql": "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\"",
        "MQL": "db.Department.aggregate([\n  {\n    $match: {\n      Building: \"Mergenthaler\"\n    }\n  },\n  {\n    $project: {\n      DName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 671,
        "db_id": "county_public_safety",
        "nl_queries": [
            "What are the names of cities in ascending alphabetical order?",
            "Return the names of cities, ordered alphabetically.",
            "List the names of cities sorted in alphabetical order from A to Z.",
            "Provide the city names arranged in ascending order alphabetically.",
            "Show the names of cities ordered from A to Z."
        ],
        "ref_sql": "SELECT Name FROM city ORDER BY Name ASC",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$city.Name\"\n    }\n  },\n  {\n    $sort: {\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1496,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the statement id and the statement detail for the statement with most number of accounts.",
            "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
            "Provide the statement ID and details for the statement that has the highest number of associated accounts.",
            "What is the statement ID and detail of the statement with the greatest number of accounts linked to it?",
            "Identify the statement ID and details for the statement that corresponds to the most accounts."
        ],
        "ref_sql": "SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Statements\"\n  },\n  {\n    $group: {\n      _id: {\n        statement_id: \"$Documents.Statements.Statement_ID\",\n        statement_details: \"$Documents.Statements.Statement_Details\"\n      },\n      count_accounts: {\n        $sum: {\n          $size: \"$Documents.Statements.Accounts\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count_accounts: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Statement_ID: \"$_id.statement_id\",\n      Statement_Details: \"$_id.statement_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2034,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show all account ids and account details.",
            "What are the ids and details of all accounts?",
            "List all account IDs along with their respective details.",
            "Provide the IDs and details for every account.",
            "Retrieve all account identifiers and their associated information."
        ],
        "ref_sql": "SELECT account_id , account_details FROM Accounts",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Statements\"\n  },\n  {\n    $unwind: \"$Documents.Statements.Accounts\"\n  },\n  {\n    $project: {\n      Account_ID: \"$Documents.Statements.Accounts.Account_ID\",\n      Account_Details: \"$Documents.Statements.Accounts.Account_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2470,
        "db_id": "college_3",
        "nl_queries": [
            "How many courses are there in total?",
            "Count the number of courses.",
            "What is the total number of courses offered?",
            "Determine how many courses are available in total.",
            "How many courses can be found in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM COURSE",
        "MQL": "db.Department.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: { $size: \"$Course\" } }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 757,
        "db_id": "pilot_record",
        "nl_queries": [
            "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
            "Can you provide a list of the nationalities of pilots along with the number of pilots from each nationality?",
            "What nationalities are represented by the pilots, and how many pilots belong to each nationality?",
            "Please display the various nationalities of pilots, including the count of pilots for each nationality.",
            "List the different nationalities of pilots and indicate the total number of pilots for each nationality."
        ],
        "ref_sql": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\",\n      COUNT: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 380,
        "db_id": "cinema",
        "nl_queries": [
            "Show all directors.",
            "Who are all the directors?",
            "List all the unique directors.",
            "Who are the directors of the films?",
            "Provide a list of all directors in the database."
        ],
        "ref_sql": "SELECT DISTINCT directed_by FROM film",
        "MQL": "db.film.aggregate([\n  {\n    $group: {\n      _id: \"$Directed_by\"\n    }\n  },\n  {\n    $project: {\n      Directed_by: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3284,
        "db_id": "gas_company",
        "nl_queries": [
            "List all headquarters and the number of companies in each headquarter.",
            "For each headquarter, what are the headquarter and how many companies are centered there?",
            "Show the headquarters along with the total number of companies based there.",
            "Identify each headquarters and the count of companies located at that site.",
            "Provide a list of all headquarters with the corresponding number of associated companies."
        ],
        "ref_sql": "SELECT headquarters , count(*) FROM company GROUP BY headquarters",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: \"$Headquarters\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Headquarters: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 674,
        "db_id": "climbing",
        "nl_queries": [
            "List the names of climbers whose country is not Switzerland.",
            "What are the names of climbers who are not from the country of Switzerland?",
            "Provide the names of climbers who are not citizens of Switzerland.",
            "Can you list the names of climbers that do not hail from Switzerland?",
            "Identify the climbers' names that are from countries other than Switzerland."
        ],
        "ref_sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $match: {\n      \"climber.Country\": { $ne: \"Switzerland\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$climber.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 122,
        "db_id": "college_3",
        "nl_queries": [
            "Find the number of students that have at least one grade \"B\".",
            "How many students have had at least one \"B\" grade?",
            "How many distinct students have received a grade of \"B\" in any course?",
            "Count the number of students who have been awarded at least one \"B\" grade.",
            "What is the total number of students who hold at least one course grade of \"B\"?"
        ],
        "ref_sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      \"Enrolled_in.Grade\": \"B\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT_DISTINCT_StuID\": { $addToSet: \"$StuID\" }\n    },\n  },\n  {\n    $project: {\n      \"_id\": 0,\n      \"COUNT_DISTINCT_StuID\": { $size: \"$COUNT_DISTINCT_StuID\" }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 673,
        "db_id": "climbing",
        "nl_queries": [
            "List the names of climbers in descending order of points.",
            "What are the names of the climbers, ordered by points descending?",
            "Provide the climbers' names sorted by their points in descending order.",
            "Can you give me the names of climbers ranked by their points from highest to lowest?",
            "Show me the list of climbers, arranged in order of their points, starting with the highest."
        ],
        "ref_sql": "SELECT Name FROM climber ORDER BY Points DESC",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $sort: {\n      \"climber.Points\": -1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$climber.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1698,
        "db_id": "gas_company",
        "nl_queries": [
            "Show the company name with the number of gas station.",
            "For each company id, what are the companies and how many gas stations does each one operate?",
            "List the names of companies along with the total number of gas stations they have.",
            "For each company, how many gas stations are associated with it, and what are the company names?",
            "Provide a breakdown of each company name together with the count of gas stations they operate."
        ],
        "ref_sql": "SELECT T2.company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
        "MQL": "db.company.aggregate([\n  {\n    $lookup: {\n      from: \"gas_station\",\n      let: { companyId: \"$Company_ID\" },\n      pipeline: [\n        { $unwind: \"$station_company\" },\n        { $match: { $expr: { $eq: [\"$station_company.Company_ID\", \"$$companyId\"] } } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Company\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Company: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1679,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all allergy type with number of students affected.",
            "How many students are affected by each allergy type?",
            "List each allergy type along with the total number of affected students.",
            "What is the count of students for each type of allergy?",
            "Provide the number of students impacted by every allergy type."
        ],
        "ref_sql": "SELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $unwind: \"$Has_Allergy\"\n  },\n  {\n    $group: {\n      _id: \"$AllergyType\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      AllergyType: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 619,
        "db_id": "voter_2",
        "nl_queries": [
            "What are the majors of male (sex is M) students?",
            "List the major of each male student.",
            "Can you provide the majors pursued by male students?",
            "Show me the majors for all male students.",
            "What majors do male students study?"
        ],
        "ref_sql": "SELECT Major FROM STUDENT WHERE Sex = \"M\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Sex: \"M\"\n    }\n  },\n  {\n    $project: {\n      Major: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2358,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the number of complaints with Product Failure type for each complaint status.",
            "Of complaints with the type code \"Product Failure\", how many had each different status code?",
            "What is the count of complaints categorized as Product Failure for each status code?",
            "How many complaints with the type \"Product Failure\" correspond to each status code?",
            "Provide the number of Product Failure complaints for each distinct status."
        ],
        "ref_sql": "SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Complaints\"\n  },\n  {\n    $match: {\n      \"Complaints.complaint_type_code\": \"Product Failure\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Complaints.complaint_status_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      complaint_status_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3374,
        "db_id": "university_basketball",
        "nl_queries": [
            "What is the maximum enrollment across all schools?",
            "Return the maximum enrollment across all schools.",
            "What is the highest enrollment number among all universities?",
            "Could you provide the peak enrollment across every school?",
            "Find and display the maximum enrollment recorded in the university database."
        ],
        "ref_sql": "SELECT max(Enrollment) FROM university",
        "MQL": "db.university.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Enrollment: { $max: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Enrollment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 183,
        "db_id": "climbing",
        "nl_queries": [
            "What are the countries of mountains with height bigger than 5000?",
            "Return the countries of the mountains that have a height larger than 5000.",
            "Which countries have mountains that rise above 5000 meters?",
            "List the countries where the mountains exceed a height of 5000 meters.",
            "Identify the countries that contain mountains taller than 5000 meters."
        ],
        "ref_sql": "SELECT Country FROM mountain WHERE Height > 5000",
        "MQL": "db.mountain.aggregate([\n  {\n    $match: {\n      Height: { $gt: 5000 }\n    }\n  },\n  {\n    $project: {\n      Country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4070,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the last name of the staff member who processed the complaint of the cheapest product.",
            "What is the last name of the staff member in charge of the complaint on the product with the lowest price?",
            "Who is the last staff member that dealt with the complaint for the least expensive product?",
            "Identify the surname of the staff member responsible for the issue related to the product with the lowest cost.",
            "What is the last name of the employee who handled the complaint for the cheapest product available?"
        ],
        "ref_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1",
        "MQL": "db.Products.aggregate([\n  {\n    $sort: {\n      product_price: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Staff\",\n      localField: \"Complaints.staff_id\",\n      foreignField: \"staff_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      last_name: {\n        $arrayElemAt: [\"$Docs1.last_name\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 770,
        "db_id": "musical",
        "nl_queries": [
            "Please show the nominee who has been nominated the greatest number of times.",
            "Who is the nominee who has been nominated for the most musicals?",
            "Identify the nominee with the highest number of nominations.",
            "Who has received the most nominations among the nominees?",
            "Name the nominee that has been nominated the most times."
        ],
        "ref_sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.musical.aggregate([\n  {\n    $group: {\n      _id: \"$Nominee\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Nominee: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1791,
        "db_id": "flight_1",
        "nl_queries": [
            "Show aircraft names and number of flights for each aircraft.",
            "What is the name of each aircraft and how many flights does each one complete?",
            "Provide the names of the aircraft and the flight count associated with each.",
            "List aircraft along with the total number of flights each has operated.",
            "What are the names of all aircraft and how many flights does each one have?"
        ],
        "ref_sql": "SELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1230,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
            "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.",
            "What are the creation dates for documents that include both 'GV' and 'SF' budget types?",
            "List the dates of documents associated with expenses of both budget types, 'GV' and 'SF'.",
            "Provide the document dates that correspond to expenses classified under both 'GV' and 'SF' budget codes."
        ],
        "ref_sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $project: {\n      Document_Date: \"$Documents.Document_Date\",\n      budget_types: \"$Documents.Documents_with_Expenses.Budget_Type_Code\"\n    }\n  },\n  {\n    $match: {\n      budget_types: {\n        $all: [\"GV\", \"SF\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Document_Date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3290,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the home city with the most number of drivers.",
            "Which home city has the highest number of drivers?",
            "Identify the home city that contains the most drivers.",
            "Find out the home city with the largest count of drivers.",
            "What is the home city with the greatest number of drivers?"
        ],
        "ref_sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.driver.aggregate([\n  { \n    $group: {\n      _id: \"$Home_city\",\n      count: { $sum: 1 }\n    }\n  },\n  { \n    $sort: { count: -1 }\n  },\n  { \n    $limit: 1 \n  },\n  {\n    $project: {\n      _id: 0,\n      Home_city: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2049,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all advisors and corresponding number of students.",
            "How many students does each advisor have?",
            "List each advisor along with the total number of students they oversee.",
            "Provide the count of students assigned to each advisor.",
            "Display all advisors with the number of students under their guidance."
        ],
        "ref_sql": "SELECT advisor , count(*) FROM Student GROUP BY advisor",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Advisor: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1702,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the names of courses taught by the tutor who has personal name \"Julio\".",
            "What are the names of the courses taught by the tutor whose personal name is \"Julio\"?",
            "List the titles of courses instructed by the tutor named \"Julio\".",
            "Could you provide the names of courses offered by the tutor whose personal name is \"Julio\"?",
            "What courses are taught by the instructor known as \"Julio\"?"
        ],
        "ref_sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = \"Julio\"",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $match: {\n      personal_name: \"Julio\"\n    }\n  },\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $project: {\n      course_name: \"$Courses.course_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 141,
        "db_id": "musical",
        "nl_queries": [
            "What are the characters and duration of actors?",
            "Return the characters and durations for each actor.",
            "List the characters along with their corresponding durations for all actors.",
            "Provide the characters and their durations from the actors' data.",
            "Show the characters and lengths of performances for each actor."
        ],
        "ref_sql": "SELECT Character , Duration FROM actor",
        "MQL": "db.actor.aggregate([\n  {\n    $project: {\n      Character: 1,\n      Duration: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 981,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the country of all appelations who have at most three wines.",
            "What are the countries for appelations with at most 3 wines?",
            "List the counties of appellations that have three or fewer types of wines.",
            "Show the counties of all appellations containing at most three wines.",
            "Retrieve the counties where appellations are associated with no more than three different wines."
        ],
        "ref_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count(*) <= 3",
        "MQL": "db.appellations.aggregate([\n  {\n    $project: {\n      County: 1,\n      count_wine: {\n        $size: \"$wine\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_wine: {\n        $lte: 3\n      }\n    }\n  },\n  {\n    $project: {\n      County: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1274,
        "db_id": "hr_1",
        "nl_queries": [
            "Display the first name and department name for each employee.",
            "What are the first name and department name of all employees?",
            "Provide a list of employees along with their first names and the names of their respective departments.",
            "Can you show the first name of each employee alongside their department name?",
            "What are the first names of employees and the corresponding department names for all of them?"
        ],
        "ref_sql": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      DEPARTMENT_ID: \"$DEPARTMENT_ID\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"DEPARTMENT_ID\",\n      foreignField: \"DEPARTMENT_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      FIRST_NAME: 1,\n      DEPARTMENT_NAME: \"$Docs1.DEPARTMENT_NAME\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4002,
        "db_id": "university_basketball",
        "nl_queries": [
            "What is the total and minimum enrollment of all schools?",
            "Return the total and minimum enrollments across all schools.",
            "Could you provide the total enrollment and the lowest enrollment figures for all universities?",
            "What are the total and minimum enrollment numbers for every school in the database?",
            "Give me the sum and minimum enrollment statistics for all educational institutions."
        ],
        "ref_sql": "SELECT sum(enrollment) , min(enrollment) FROM university",
        "MQL": "db.university.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_enrollment: { $sum: \"$Enrollment\" },\n      min_enrollment: { $min: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enrollment: 1,\n      min_enrollment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1949,
        "db_id": "flight_1",
        "nl_queries": [
            "Show names for all aircrafts of which John Williams has certificates.",
            "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
            "List the names of all aircraft that are certified for John Williams.",
            "Provide the names of all aircraft for which John Williams holds the necessary certifications.",
            "What are the names of the aircraft that John Williams is certified to operate?"
        ],
        "ref_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $lookup: {\n      from: \"employee\",\n      localField: \"certificate.aid\",\n      foreignField: \"certificate.aid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"John Williams\"\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2134,
        "db_id": "journal_committee",
        "nl_queries": [
            "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
            "What is the mean sales figure for journals edited by individuals whose work type is classified as 'Photo'?",
            "Can you provide the average sales amount for journals where the editor's work type is 'Photo'?",
            "Determine the average sales for journals featuring editors categorized under the 'Photo' work type.",
            "How much do the journals with editors identified as having a 'Photo' work type average in sales?"
        ],
        "ref_sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'",
        "MQL": "db.journal.aggregate([\n  {\n    $unwind: \"$journal_committee\"\n  },\n  {\n    $match: { \"journal_committee.Work_Type\": \"Photo\" }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Sales: { $avg: \"$Sales\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Sales: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 857,
        "db_id": "climbing",
        "nl_queries": [
            "Show the range that has the most number of mountains.",
            "Which range contains the most mountains?",
            "Identify the mountain range with the greatest number of peaks.",
            "Which mountain range has the highest count of individual mountains?",
            "What is the name of the range that features the most mountains?"
        ],
        "ref_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.mountain.aggregate([\n  {\n    $group: {\n      _id: \"$Range\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Range: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 697,
        "db_id": "journal_committee",
        "nl_queries": [
            "Show the names of editors of age either 24 or 25.",
            "List the names of editors who are either 24 or 25 years old.",
            "Retrieve the names of all editors aged 24 or 25.",
            "Obtain the names of editors with ages of 24 or 25.",
            "Display the names of editors that are aged either 24 or 25."
        ],
        "ref_sql": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
        "MQL": "db.editor.find({\n  $or: [\n    { \"Age\": 24 },\n    { \"Age\": 25 }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3474,
        "db_id": "ship_1",
        "nl_queries": [
            "what are the names and classes of the ships that do not have any captain yet?",
            "Return the names and classes of ships that do not have a captain?",
            "List the names and classifications of ships that currently have no captain assigned.",
            "Provide the names and classes of ships that lack a captain.",
            "Show the names and types of ships that do not yet have a captain associated with them."
        ],
        "ref_sql": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "MQL": "db.Ship.find(\n  {\n    $or: [\n      { captain: { $exists: false } },\n      { captain: { $size: 0 } }\n    ]\n  },\n  {\n    Name: 1,\n    Class: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 892,
        "db_id": "device",
        "nl_queries": [
            "List the software platform shared by the greatest number of devices.",
            "What is the software platform that is most common amongst all devices?",
            "Identify the software platform that is utilized by the most devices.",
            "Which software platform has the highest number of devices associated with it?",
            "Determine the most frequently used software platform across all devices."
        ],
        "ref_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.device.aggregate([\n  {\n    $group: {\n      _id: \"$Software_Platform\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      Software_Platform: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 3395,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
            "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?",
            "What is the highest price of wines from the Central Coast region that were made prior to 2005?",
            "Identify the maximum price for wines sourced from appelations within the Central Coast area and produced before the year 2005.",
            "Determine the top price of wines from the appelations in the Central Coast area that were crafted before 2005."
        ],
        "ref_sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"Central Coast\" AND T2.year < 2005",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      Area: \"Central Coast\",\n      \"wine.Year\": { $lt: 2005 }\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Year\": { $lt: 2005 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_Price: { $max: \"$wine.Price\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 248,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
            "Find the white grape used to produce wines with scores above 90.",
            "Identify the varieties of white grapes that are utilized for wines with scores exceeding 90.",
            "What white grape cultivars are used to create wines rated higher than 90?",
            "List the white grapes that produce wines with a score greater than 90."
        ],
        "ref_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\" AND T2.score > 90",
        "MQL": "db.grapes.aggregate([\n  {\n    $match: {\n      Color: \"White\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Score\": { $gt: 90 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Grape\",\n      Grape: { $first: \"$Grape\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Grape: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3234,
        "db_id": "flight_1",
        "nl_queries": [
            "Show flight number for all flights with more than 2000 distance.",
            "What are the numbers of all flights that can cover a distance of more than 2000?",
            "List the flight numbers for all flights that exceed a distance of 2000.",
            "Provide the numbers for flights that are capable of traveling over 2000 distance.",
            "Retrieve the flight numbers for any flights that cover a distance greater than 2000."
        ],
        "ref_sql": "SELECT flno FROM Flight WHERE distance > 2000",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.distance\": { $gt: 2000 }\n    }\n  },\n  {\n    $project: {\n      flno: \"$flight.flno\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3219,
        "db_id": "hr_1",
        "nl_queries": [
            "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
            "Provide the full names of employees earning more than the employee with id 163.",
            "Who are the employees with full names that earn a salary higher than that of the employee identified by ID 163?",
            "List the full names of employees whose salaries exceed that of the employee with ID 163.",
            "Which employees have a higher salary than the employee with ID 163? Please provide their full names."
        ],
        "ref_sql": "SELECT first_name , last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 )",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.EMPLOYEE_ID\": 163\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      salary: \"$employees.SALARY\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"jobs\",\n      let: { salary: \"$salary\" },\n      pipeline: [\n        { $unwind: \"$employees\" },\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$employees.SALARY\", \"$$salary\"]\n            }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            FIRST_NAME: \"$employees.FIRST_NAME\",\n            LAST_NAME: \"$employees.LAST_NAME\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$Docs1.FIRST_NAME\",\n      LAST_NAME: \"$Docs1.LAST_NAME\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1995,
        "db_id": "school_player",
        "nl_queries": [
            "What are the teams of the players, sorted in ascending alphabetical order?",
            "Find the team of each player and sort them in ascending alphabetical order.",
            "List the teams for all players and arrange them in alphabetical order from A to Z.",
            "Retrieve each player's team and present them sorted in ascending alphabetical order.",
            "Show the teams associated with players, sorted alphabetically in ascending sequence."
        ],
        "ref_sql": "SELECT Team FROM player ORDER BY Team ASC",
        "MQL": "db.school.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Team: \"$player.Team\"\n    }\n  },\n  {\n    $sort: {\n      Team: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 709,
        "db_id": "climbing",
        "nl_queries": [
            "What is the name of the highest mountain?",
            "Return the name of the mountain with the greatest height.",
            "What is the name of the mountain that has the tallest height?",
            "Please provide the name of the mountain with the highest elevation.",
            "Identify the mountain known for having the greatest height."
        ],
        "ref_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "MQL": "db.mountain.aggregate([\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Height: -1\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 313,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the names of all distinct wines that have appellations in North Coast area.",
            "What are the distinct names of wines that have appellations in the North Coast area?",
            "List all unique wine names associated with appellations located in the North Coast region.",
            "What unique names of wines come from appellations in the North Coast area?",
            "Provide the distinct names of wines that are linked to appellations within the North Coast zone."
        ],
        "ref_sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"North Coast\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      Area: \"North Coast\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$wine.Name\"\n    }\n  },\n  {\n    $unwind: \"$Name\"\n  },\n  {\n    $group: {\n      _id: \"$Name\"\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3047,
        "db_id": "e_learning",
        "nl_queries": [
            "List all the dates of enrollment and completion of students.",
            "What are all the dates of enrollment and completion in record?",
            "Can you provide all enrollment and completion dates for students?",
            "Show me the dates when students enrolled and completed their courses.",
            "What are the recorded enrollment and completion dates for all students?"
        ],
        "ref_sql": "SELECT date_of_enrolment , date_of_completion FROM Student_Course_Enrolment",
        "MQL": "db.Students.aggregate([\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $project: {\n      date_of_enrolment: \"$Student_Course_Enrolment.date_of_enrolment\",\n      date_of_completion: \"$Student_Course_Enrolment.date_of_completion\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 519,
        "db_id": "college_3",
        "nl_queries": [
            "Find the first name of students in the descending order of age.",
            "What are the first names of students, ordered by age from greatest to least?",
            "List the first names of students sorted by age from oldest to youngest.",
            "Retrieve the first names of students, arranged in descending order of their age.",
            "Show all student first names ordered by age, starting with the highest."
        ],
        "ref_sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
        "MQL": "db.Student.find({}, { Fname: 1, _id: 0 }).sort({ Age: -1 });\n"
    },
    {
        "record_id": 3070,
        "db_id": "hr_1",
        "nl_queries": [
            "display the department name and number of employees in each of the department.",
            "What are the department names and how many employees work in each of them?",
            "List the names of departments along with the total number of employees in each.",
            "Show the department names and the corresponding employee counts for every department.",
            "Provide the names of all departments and indicate how many employees are assigned to each one."
        ],
        "ref_sql": "SELECT department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT_NAME\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      DEPARTMENT_NAME: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 971,
        "db_id": "wine_1",
        "nl_queries": [
            "What is the color of the grape whose wine products has the highest average price?",
            "Give the color of the grape whose wine products have the highest average price?",
            "What color is associated with the grape that produces wine with the highest average price?",
            "Identify the color of the grape which has the most expensive wine on average.",
            "Can you tell me the color of the grape that yields wine with the highest average cost?"
        ],
        "ref_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
        "MQL": "db.grapes.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: {\n        grape: \"$Grape\",\n        color: \"$Color\"\n      },\n      avg_price: {\n        $avg: \"$wine.Price\"\n      }\n    }\n  },\n  {\n    $sort: {\n      avg_price: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Color: \"$_id.color\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2501,
        "db_id": "flight_1",
        "nl_queries": [
            "How many employees have salary between 100000 and 200000?",
            "What is the number of employees that have a salary between 100000 and 200000?",
            "What is the total number of employees earning between 100,000 and 200,000?",
            "Count how many employees receive a salary in the range of 100,000 to 200,000.",
            "How many employees fall within the salary range of 100,000 to 200,000?"
        ],
        "ref_sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "MQL": "db.employee.aggregate([\n  {\n    $match: {\n      salary: {\n        $gte: 100000,\n        $lte: 200000\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 115,
        "db_id": "e_learning",
        "nl_queries": [
            "How many students have personal names that contain the word \"son\"?",
            "Find the number of students who have the word \"son\" in their personal names.",
            "What is the total number of students whose personal names include the term \"son\"?",
            "Count the students that have \"son\" as part of their personal names.",
            "How many students feature the substring \"son\" in their personal names?"
        ],
        "ref_sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"",
        "MQL": "db.Students.aggregate([\n  {\n    $match: {\n      personal_name: {\n        $regex: \"son\",\n        $options: \"i\" \n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4071,
        "db_id": "customer_complaints",
        "nl_queries": [
            "What is the last name of the staff who has handled the first ever complaint?",
            "Return the last name of the staff member who handled the complaint with the earliest date raised.",
            "Who is the staff member that dealt with the very first customer complaint, and what is their last name?",
            "Can you provide the last name of the staff who was in charge of the earliest raised complaint?",
            "Identify the last name of the staff member who addressed the complaint that was filed first."
        ],
        "ref_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Complaints\"\n  },\n  {\n    $sort: {\n      \"Complaints.date_complaint_raised\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Staff\",\n      localField: \"Complaints.staff_id\",\n      foreignField: \"staff_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      last_name: \"$Docs1.last_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3133,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "List document type codes and the number of documents in each code.",
            "How many documents are there of each type?",
            "Provide a list of document type codes along with the total number of documents for each type.",
            "What is the count of documents categorized by their type codes?",
            "Show the number of documents associated with each document type code."
        ],
        "ref_sql": "SELECT document_type_code , count(*) FROM Documents GROUP BY document_type_code",
        "MQL": "db.Projects.aggregate([\n  { $unwind: \"$Documents\" },\n  {\n    $group: {\n      _id: \"$Documents.Document_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Document_Type_Code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 581,
        "db_id": "cinema",
        "nl_queries": [
            "Find the locations that have more than one movie theater with capacity above 300.",
            "In which locations are there more than one movie theater with capacity above 300?",
            "Identify locations where there is at least one movie theater with a capacity larger than 300, and there are multiple theaters present.",
            "List the locations that have two or more cinemas with a capacity exceeding 300.",
            "Which locations feature more than one cinema that can accommodate more than 300 people?"
        ],
        "ref_sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1",
        "MQL": "db.cinema.aggregate([\n  {\n    $match: {\n      Capacity: { $gt: 300 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2600,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the number of routes that have destination John F Kennedy International Airport.",
            "What is the number of routes that end at John F Kennedy International Airport?",
            "How many routes are there that terminate at John F Kennedy International Airport?",
            "Count the routes that have their destination as John F Kennedy International Airport.",
            "What is the total number of routes leading to John F Kennedy International Airport?"
        ],
        "ref_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'",
        "MQL": "db.airlines.aggregate([\n  {\n    $unwind: \"$routes\"\n  },\n  {\n    $match: {\n      \"routes.dst_ap\": \"JFK\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2808,
        "db_id": "voter_1",
        "nl_queries": [
            "What are the number of votes from state 'NY' or 'CA'?",
            "How many votes have been cast from the states of New York and California?",
            "What is the total number of votes from either NY or CA?",
            "Can you tell me the count of votes originating from the states NY and CA?",
            "What’s the vote tally for contestants from New York and California?"
        ],
        "ref_sql": "SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
        "MQL": "db.CONTESTANTS.aggregate([\n  { $unwind: \"$VOTES\" },\n  { $match: { \"VOTES.state\": { $in: [\"NY\", \"CA\"] } } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 2178,
        "db_id": "cinema",
        "nl_queries": [
            "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
            "What are the average, minimum, and maximum capacities of cinemas that opened in 2011 or afterward?",
            "Provide the average, lowest, and highest cinema capacities for establishments that opened in the year 2011 and later.",
            "Can you give me the average capacity along with the minimum and maximum capacities for cinemas launched from 2011 onward?",
            "Display the average, minimum, and maximum capacity figures for all cinemas established in or after 2011."
        ],
        "ref_sql": "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011",
        "MQL": "db.cinema.aggregate([\n  {\n    $match: {\n      \"Openning_year\": { $gte: 2011 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_capacity: { $avg: \"$Capacity\" },\n      min_capacity: { $min: \"$Capacity\" },\n      max_capacity: { $max: \"$Capacity\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_capacity: 1,\n      min_capacity: 1,\n      max_capacity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 24,
        "db_id": "hr_1",
        "nl_queries": [
            "display all the details from Employees table for those employees who was hired before 2002-06-21.",
            "What is all the information about employees hired before June 21, 2002?",
            "Provide all the details of employees who were hired prior to June 21, 2002.",
            "Retrieve complete information on employees that joined before the date 2002-06-21.",
            "List all the employee records for those who were hired before June 21, 2002."
        ],
        "ref_sql": "SELECT * FROM employees WHERE hire_date < '2002-06-21'",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.HIRE_DATE\": { $lt: \"2002-06-21\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      EMAIL: \"$employees.EMAIL\",\n      PHONE_NUMBER: \"$employees.PHONE_NUMBER\",\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      JOB_ID: \"$employees.JOB_ID\",\n      SALARY: \"$employees.SALARY\",\n      COMMISSION_PCT: \"$employees.COMMISSION_PCT\",\n      MANAGER_ID: \"$employees.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3113,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What are the ids of documents which don't have expense budgets?",
            "Return the ids of documents that do not have expenses.",
            "List the document IDs that are not associated with any expense budgets.",
            "Provide the IDs of the documents that lack expense entries.",
            "Show me the identifiers of documents that do not have any budget expenses linked to them."
        ],
        "ref_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $project: {\n      Document_ID: \"$Documents.Document_ID\",\n      has_expense: {\n        $size: \"$Documents.Documents_with_Expenses\"\n      }\n    }\n  },\n  {\n    $match: {\n      has_expense: 0\n    }\n  },\n  {\n    $project: {\n      Document_ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3617,
        "db_id": "school_bus",
        "nl_queries": [
            "List names for drivers from Hartford city and younger than 40.",
            "Provide the names of drivers who reside in Hartford and are younger than 40 years.",
            "Find the names of drivers from the city of Hartford who are below the age of 40.",
            "Can you list the names of drivers aged under 40 living in Hartford?",
            "Show the names of drivers that are under 40 and hail from Hartford city."
        ],
        "ref_sql": "SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40",
        "MQL": "db.driver.find({\n  \"Home_city\": \"Hartford\",\n  \"Age\": { $lt: 40 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 665,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the names of all wines produced in 2008.",
            "What are the names of all wines produced in 2008?",
            "List the names of all wines that were produced in the year 2008.",
            "Provide the names of wines made in the year 2008.",
            "Can you tell me the names of the wines that were created in 2008?"
        ],
        "ref_sql": "SELECT Name FROM WINE WHERE YEAR = \"2008\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Year\": 2008\n    }\n  },\n  {\n    $project: {\n      Name: \"$wine.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2454,
        "db_id": "flight_1",
        "nl_queries": [
            "How many aircrafts have distance between 1000 and 5000?",
            "What is the count of aircrafts that have a distance between 1000 and 5000?",
            "What is the number of aircraft that travel a distance between 1000 and 5000?",
            "How many planes have distances ranging from 1000 to 5000?",
            "Count the aircraft that have a distance within the range of 1000 to 5000."
        ],
        "ref_sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "MQL": "db.aircraft.aggregate([\n  {\n    $match: {\n      distance: {\n        $gte: 1000,\n        $lte: 5000\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3564,
        "db_id": "flight_1",
        "nl_queries": [
            "Show the name of employees with three lowest salaries.",
            "What is the name of the 3 employees who get paid the least?",
            "Provide the names of the three employees earning the lowest salaries.",
            "List the names of the three employees with the least compensation.",
            "Who are the three employees with the smallest salaries? Show their names."
        ],
        "ref_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "MQL": "db.employee.aggregate([\n  {\n    $sort: { salary: 1 }  \n  },\n  {\n    $limit: 3  \n  },\n  {\n    $project: {\n      name: 1,  \n      _id: 0    \n    }\n  }\n]);\n"
    },
    {
        "record_id": 3856,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
            "What are the ranks of captains that are both in the Cutter and Armed schooner classes?",
            "Identify the ranks of captains who serve on both Cutter and Armed schooner vessels.",
            "Which captain ranks consist of individuals from the Cutter and Armed schooner classes?",
            "List the ranks of captains associated with both Cutter and Armed schooner ship types."
        ],
        "ref_sql": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"captain.Class\": \"Cutter\" },\n        { \"captain.Class\": \"Armed schooner\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      classes: {\n        $addToSet: \"$captain.Class\"\n      }\n    }\n  },\n  {\n    $match: {\n      classes: {\n        $all: [\"Cutter\", \"Armed schooner\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 694,
        "db_id": "county_public_safety",
        "nl_queries": [
            "List the names of counties that do not have any cities.",
            "What are the names of counties that do not contain any cities?",
            "Identify the counties that have no cities associated with them.",
            "Provide a list of county names that lack any city entries.",
            "Give me the names of counties that do not include any cities."
        ],
        "ref_sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "MQL": "db.county_public_safety.find({\n  city: {\n    $not: {\n      $exists: true,\n      $ne: []\n    }\n  }\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 454,
        "db_id": "college_3",
        "nl_queries": [
            "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
            "What are the names of departments either in division AS, or in division EN and in building NEB?",
            "Retrieve the names of departments that belong to either the AS division or the EN division located in the NEB building.",
            "List the department names that are either part of the AS division, or are part of the EN division while also being in the NEB building.",
            "What are the names of the departments that are in the AS division or, for the EN division, located in the NEB building?"
        ],
        "ref_sql": "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\"",
        "MQL": "db.Department.find({\n  $or: [\n    { Division: \"AS\" },\n    { $and: [{ Division: \"EN\" }, { Building: \"NEB\" }] }\n  ]\n}, {\n  DName: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3456,
        "db_id": "gas_company",
        "nl_queries": [
            "Show minimum, maximum, and average market value for all companies.",
            "What is the minimum, maximum, and average market value for every company?",
            "Provide the lowest, highest, and average market values across all companies.",
            "What are the minimum, maximum, and mean market values for all companies in total?",
            "Can you show the minimum, maximum, and overall average market value for each company?"
        ],
        "ref_sql": "SELECT min(market_value) , max(market_value) , avg(market_value) FROM company",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_market_value: { $min: \"$Market_Value\" },\n      max_market_value: { $max: \"$Market_Value\" },\n      avg_market_value: { $avg: \"$Market_Value\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_market_value: 1,\n      max_market_value: 1,\n      avg_market_value: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 98,
        "db_id": "college_3",
        "nl_queries": [
            "Which courses are taught on days MTW?",
            "What are the course names for courses taught on MTW?",
            "What courses are available on Monday, Tuesday, and Wednesday?",
            "Can you list the names of courses that take place on MTW?",
            "Which courses are offered on the days of Monday, Tuesday, and Wednesday?"
        ],
        "ref_sql": "SELECT CName FROM COURSE WHERE Days = \"MTW\"",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $match: {\n      \"Course.Days\": \"MTW\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      CName: \"$Course.CName\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3138,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the document type code with fewer than 3 documents.",
            "What are the codes corresponding to document types for which there are less than 3 documents?",
            "List the document type codes that have less than 3 associated documents.",
            "Identify the codes for document types that contain fewer than 3 documents.",
            "Provide the document type codes for which there are under 3 documents available."
        ],
        "ref_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.Document_Type_Code\",\n      documentCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      documentCount: { $lt: 3 }\n    }\n  },\n  {\n    $project: {\n      Document_Type_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 899,
        "db_id": "machine_repair",
        "nl_queries": [
            "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
            "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
            "Identify the starting years for technicians who are part of both the \"CLE\" and \"CWS\" teams.",
            "What starting years are common among technicians working in teams \"CLE\" and \"CWS\"?",
            "List the starting years that technicians from the \"CLE\" and \"CWS\" teams have in common."
        ],
        "ref_sql": "SELECT Starting_Year FROM technician WHERE Team = \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team = \"CWS\"",
        "MQL": "db.technician.aggregate([\n  {\n    $match: {\n      Team: { $in: [\"CLE\", \"CWS\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Starting_Year\",\n      teams: { $addToSet: \"$Team\" }\n    }\n  },\n  {\n    $match: {\n      teams: { $all: [\"CLE\", \"CWS\"] }\n    }\n  },\n  {\n    $project: {\n      Starting_Year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2355,
        "db_id": "gas_company",
        "nl_queries": [
            "Show company name and main industry without a gas station.",
            "What are the main industries of the companies without gas stations and what are the companies?",
            "List the names of companies and their primary industries that do not have any gas stations.",
            "Identify the companies and their main industries that are not associated with any gas stations.",
            "Provide the company names along with their main industries for those companies that lack gas stations."
        ],
        "ref_sql": "SELECT company , main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "MQL": "db.company.aggregate([\n  {\n    $lookup: {\n      from: \"gas_station\",\n      localField: \"Company_ID\",\n      foreignField: \"station_company.Company_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      Company: 1,\n      Main_Industry: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2322,
        "db_id": "flight_4",
        "nl_queries": [
            "List the cities which have more than 2 airports sorted by the number of airports.",
            "What are the cities that have more than 2 airports sorted by number of airports?",
            "Identify the cities with over two airports, arranged by the number of airports.",
            "Can you provide a list of cities that possess more than two airports, sorted by their airport counts?",
            "Show me the cities that have more than two airports, ordered by the total number of airports."
        ],
        "ref_sql": "SELECT city FROM airports GROUP BY city HAVING count(*) > 2 ORDER BY count(*)",
        "MQL": "db.airports.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2853,
        "db_id": "allergy_1",
        "nl_queries": [
            "How many different advisors are listed?",
            "How many advisors are there?",
            "What is the total number of unique advisors?",
            "Can you tell me how many distinct advisors are available?",
            "How many unique advisors do we have in the records?"
        ],
        "ref_sql": "SELECT count(DISTINCT advisor) FROM Student",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_advisor\"\n  }\n]);\n"
    },
    {
        "record_id": 3500,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the name, city, and country of the airport that has the lowest altitude.",
            "What is the name, city, and country of the airport with the lowest altitude?",
            "Could you provide the name, city, and country of the airport situated at the lowest elevation?",
            "What are the name, city, and country of the airport that has the least altitude?",
            "Please tell me the airport's name, city, and country with the lowest height above sea level."
        ],
        "ref_sql": "SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1",
        "MQL": "db.airports.aggregate([\n  {\n    $sort: { elevation: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      city: 1,\n      country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1601,
        "db_id": "musical",
        "nl_queries": [
            "Show names of musicals and the number of actors who have appeared in the musicals.",
            "How many actors have appeared in each musical?",
            "List the musicals along with the total number of actors who participated in each production.",
            "For each musical, how many actors have performed?",
            "Provide the titles of the musicals and the corresponding count of actors involved in them."
        ],
        "ref_sql": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID",
        "MQL": "db.actor.aggregate([\n  {\n    $lookup: {\n      from: \"musical\",\n      localField: \"Musical_ID\",\n      foreignField: \"Musical_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: {\n        Musical_ID: \"$Docs1.Musical_ID\",\n        Name: \"$Docs1.Name\"\n      },\n      COUNT: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id.Name\",\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1561,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show the crime rate of counties with a city having white percentage more than 90.",
            "What are the crime rates of counties that contain cities that have white percentages of over 90?",
            "Retrieve the crime rates for counties where at least one city has a White population exceeding 90%.",
            "What are the crime rates in counties that include cities with more than 90% White residents?",
            "List the crime rates of counties that feature cities with a White demographic above 90%."
        ],
        "ref_sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90",
        "MQL": "db.county_public_safety.find({\n  city: {\n    $elemMatch: {\n      White: { $gt: 90 }\n    }\n  }\n}, {\n  Crime_rate: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3558,
        "db_id": "flight_1",
        "nl_queries": [
            "Show the name of aircrafts with top three lowest distances.",
            "What are the aircrafts with top 3 shortest lengthes? List their names.",
            "Identify the names of the three aircraft that have the shortest distances.",
            "List the names of the top three aircraft with the least distance traveled.",
            "What are the names of the three aircraft with the smallest distances?"
        ],
        "ref_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "MQL": "db.aircraft.aggregate([\n  {\n    $project: {\n      name: 1,\n      distance: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      distance: 1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 196,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show the crime rates of counties in ascending order of number of police officers.",
            "What are the crime rates of counties sorted by number of offices ascending?",
            "List the crime rates for counties, ordered by the number of police officers in ascending order.",
            "What are the crime rates for counties arranged from the fewest to the most police officers?",
            "Display the crime rates of counties sorted by the ascending count of police personnel."
        ],
        "ref_sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "MQL": "db.county_public_safety.find({}, { \"Crime_rate\": 1, \"_id\": 0 }).sort({ \"Police_officers\": 1 });\n"
    },
    {
        "record_id": 3938,
        "db_id": "gas_company",
        "nl_queries": [
            "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
            "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
            "List the IDs, locations, and manager names of all gas stations, sorted by the year they were opened.",
            "Provide gas station IDs, their locations, and the names of managers, arranged by the opening year of each station.",
            "Retrieve the station IDs, locations, and manager names for each gas station, in order of when they were opened."
        ],
        "ref_sql": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
        "MQL": "db.gas_station.find({}, { Station_ID: 1, Location: 1, Manager_Name: 1, _id: 0 }).sort({ Open_Year: 1 });\n"
    },
    {
        "record_id": 3323,
        "db_id": "hr_1",
        "nl_queries": [
            "Find the job ID for those jobs which average salary is above 8000.",
            "What are the job ids corresponding to jobs with average salary above 8000?",
            "List the job IDs for positions where the average salary exceeds 8000.",
            "What job IDs are associated with jobs that have an average salary higher than 8000?",
            "Identify the job IDs belonging to careers with an average salary above 8000."
        ],
        "ref_sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $group: {\n      _id: \"$JOB_ID\",\n      avg_SALARY: {\n        $avg: \"$employees.SALARY\"\n      }\n    }\n  },\n  {\n    $match: {\n      avg_SALARY: { $gt: 8000 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      JOB_ID: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3359,
        "db_id": "gas_company",
        "nl_queries": [
            "List the main industry with highest total market value and its number of companies.",
            "For each main industry, what is the total number of companies for the industry with the highest total market value?",
            "Identify the main industry that has the largest total market value and indicate how many companies are involved.",
            "Which main industry has the highest market value and what is the total number of companies associated with it?",
            "Find the industry with the maximum total market value and provide the count of companies within that sector."
        ],
        "ref_sql": "SELECT main_industry , count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: \"$Main_Industry\",\n      total_market_value: { $sum: \"$Market_Value\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { total_market_value: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Main_Industry: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1353,
        "db_id": "flight_1",
        "nl_queries": [
            "what is the salary and name of the employee who has the most number of aircraft certificates?",
            "What is the salaray and name of the employee that is certified to fly the most planes?",
            "Who is the employee with the highest number of aircraft certificates, and what is their salary?",
            "Identify the name and salary of the employee that holds the most aircraft certifications.",
            "What is the name and salary of the employee certified to operate the largest number of aircraft?"
        ],
        "ref_sql": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.employee.aggregate([\n  {\n    $project: {\n      name: 1,\n      salary: 1,\n      count_certificate: { $size: \"$certificate\" }\n    }\n  },\n  {\n    $sort: { count_certificate: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      salary: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1041,
        "db_id": "musical",
        "nl_queries": [
            "Show names of actors in descending order of the year their musical is awarded.",
            "What are the names of actors ordered descending by the year in which their musical was awarded?",
            "List the names of actors sorted in reverse chronological order based on the year their musical received an award.",
            "Provide the names of actors arranged in descending order according to the year their musical was honored.",
            "Display the names of actors, ordered from most recent to oldest based on the year their musical achieved an award."
        ],
        "ref_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
        "MQL": "db.actor.aggregate([\n  {\n    $sort: {\n      Musical_ID: -1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1596,
        "db_id": "school_player",
        "nl_queries": [
            "Show the locations of schools that have more than 1 player.",
            "Which schools have more than 1 player? Give me the school locations.",
            "Retrieve the locations of all schools that enroll more than one player.",
            "Can you provide the school locations for those that have more than a single player?",
            "List the locations of schools where the number of players exceeds one."
        ],
        "ref_sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1",
        "MQL": "db.school.aggregate([\n  {\n    $match: {\n      $expr: {\n        $gt: [\n          { $size: \"$player\" },\n          1\n        ]\n      }\n    }\n  },\n  {\n    $project: {\n      Location: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1451,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the project detail for the project with document \"King Book\"?",
            "Give the details of the project with the document name 'King Book'.",
            "Could you provide the project details for the document titled \"King Book\"?",
            "What are the details of the project associated with the document named \"King Book\"?",
            "Please share the project information for the document called \"King Book\"."
        ],
        "ref_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = \"King Book\"",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.Document_Name\": \"King Book\"\n    }\n  },\n  {\n    $project: {\n      Project_Details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4202,
        "db_id": "cinema",
        "nl_queries": [
            "Show the title and director for all films.",
            "What are the title and director of each film?",
            "Retrieve the titles and directors of all available films.",
            "Can you provide the title and director for each film in the collection?",
            "List the titles along with their respective directors for every film."
        ],
        "ref_sql": "SELECT title , directed_by FROM film",
        "MQL": "db.film.find({}, { Title: 1, Directed_by: 1, _id: 0 });\n"
    },
    {
        "record_id": 2033,
        "db_id": "university_basketball",
        "nl_queries": [
            "What is the highest acc percent score in the competition?",
            "Return the highest acc percent across all basketball matches.",
            "What is the maximum accuracy percentage recorded in the basketball competition?",
            "Find the top ACC percentage among all the basketball games played.",
            "Retrieve the highest acc percent achieved in the entire basketball season."
        ],
        "ref_sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "MQL": "db.university.aggregate([\n  {\n    $unwind: \"$basketball_match\"\n  },\n  {\n    $group: {\n      _id: null,\n      highest_acc_percent: {\n        $max: \"$basketball_match.ACC_Percent\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      ACC_Percent: \"$highest_acc_percent\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 315,
        "db_id": "climbing",
        "nl_queries": [
            "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
            "What are the different names of mountains ascended by climbers from the country of West Germany?",
            "List the unique names of mountains that have been climbed by climbers from West Germany.",
            "Provide the distinct mountain names scaled by climbers hailing from West Germany.",
            "Identify all unique mountain names that climbers from the country of West Germany have ascended."
        ],
        "ref_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $match: {\n      \"climber.Country\": \"West Germany\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Name\"\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 95,
        "db_id": "college_3",
        "nl_queries": [
            "List the course name of courses sorted by credits.",
            "What are the course names, ordered by credits?",
            "Provide a list of course titles arranged in ascending order according to their credit values.",
            "Can you give me the names of courses sorted by their credit hours?",
            "Show the course names sorted by the number of credits they offer."
        ],
        "ref_sql": "SELECT CName FROM COURSE ORDER BY Credits",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $project: {\n      CName: \"$Course.CName\",\n      Credits: \"$Course.Credits\"\n    }\n  },\n  {\n    $sort: {\n      Credits: 1\n    }\n  },\n  {\n    $project: {\n      CName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2410,
        "db_id": "flight_4",
        "nl_queries": [
            "How many airports are there per country? Order the countries by decreasing number of airports.",
            "What is the number of airports per country, ordered from most to least?",
            "What is the count of airports for each country, listed in descending order?",
            "Provide the number of airports by country, arranged from the country with the most airports to the one with the least.",
            "How many airports exist in each country? Please sort the results so that countries with more airports appear first."
        ],
        "ref_sql": "SELECT count(*) , country FROM airports GROUP BY country ORDER BY count(*) DESC",
        "MQL": "db.airports.aggregate([\n  {\n    $group: {\n      _id: \"$country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2518,
        "db_id": "flight_1",
        "nl_queries": [
            "How many flights do we have?",
            "What is the number of flights?",
            "What is the total number of flights available?",
            "Can you tell me the count of all flights?",
            "How many total flights are there?"
        ],
        "ref_sql": "SELECT count(*) FROM Flight",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 520,
        "db_id": "voter_2",
        "nl_queries": [
            "Find the first names of students with age above 22.",
            "What are the first names of all the students aged above 22?",
            "List the first names of all students who are older than 22.",
            "Retrieve the first names of students aged above 22 years.",
            "What are the first names of students who have an age greater than 22?"
        ],
        "ref_sql": "SELECT Fname FROM STUDENT WHERE Age > 22",
        "MQL": "db.Student.find(\n  { Age: { $gt: 22 } },\n  { Fname: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2910,
        "db_id": "ship_1",
        "nl_queries": [
            "How many different captain ranks are there?",
            "Count the number of different ranks of captain.",
            "What is the total number of unique ranks among the captains?",
            "How many distinct ranks exist for captains?",
            "Determine the count of various captain ranks available."
        ],
        "ref_sql": "SELECT count(DISTINCT rank) FROM captain",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_rank\"\n  }\n]);\n"
    },
    {
        "record_id": 2631,
        "db_id": "cinema",
        "nl_queries": [
            "How many cinema do we have?",
            "Count the number of cinemas.",
            "What is the total count of cinemas available?",
            "How many cinema locations are there in total?",
            "Please provide the total number of cinemas listed."
        ],
        "ref_sql": "SELECT count(*) FROM cinema",
        "MQL": "db.cinema.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3332,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the last name of the staff whose email address contains \"wrau\".",
            "What are the last names of staff with email addressed containing the substring \"wrau\"?",
            "Retrieve the last names of staff members whose email addresses include the substring \"wrau\".",
            "List the last names of staff with email addresses that contain \"wrau\".",
            "What are the last names of employees whose emails have the substring \"wrau\" in them?"
        ],
        "ref_sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "MQL": "db.Staff.find(\n  {\n    email_address: { $regex: \"wrau\", $options: \"i\" }\n  },\n  {\n    last_name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2218,
        "db_id": "customer_complaints",
        "nl_queries": [
            "What is the average price of the products for each category?",
            "Return the average price of products that have each category code.",
            "What is the average cost of products in each category?",
            "Calculate the average product price for every category code.",
            "Provide the average pricing of products according to their category."
        ],
        "ref_sql": "SELECT avg(product_price) , product_category_code FROM products GROUP BY product_category_code",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_category_code\",\n      avg_product_price: { $avg: \"$product_price\" }\n    }\n  },\n  {\n    $project: {\n      avg_product_price: 1,\n      product_category_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 597,
        "db_id": "device",
        "nl_queries": [
            "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
            "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
            "Identify the locations where there are shops that opened both after 2012 and before 2008.",
            "List the locations that have both shops established in the years following 2012 and those that opened prior to 2008.",
            "Retrieve locations that host shops opened after 2012 along with those that were launched before the year 2008."
        ],
        "ref_sql": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
        "MQL": "db.shop.aggregate([\n  {\n    $match: {\n      $or: [\n        { Open_Year: { $gt: 2012 } },\n        { Open_Year: { $lt: 2008 } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2323,
        "db_id": "flight_4",
        "nl_queries": [
            "Return the cities with more than 3 airports in the United States.",
            "What is the number of cities in the United States with more than 3 airports?",
            "List the cities in the United States that have over three airports.",
            "Identify all cities in the US with more than three airports.",
            "How many cities in the United States feature more than three airports?"
        ],
        "ref_sql": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count(*) > 3",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      country: \"United States\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$city\",\n      airportCount: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      airportCount: {\n        $gt: 3\n      }\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 219,
        "db_id": "wine_1",
        "nl_queries": [
            "List the names of all distinct wines ordered by price.",
            "What are the names of wines, sorted by price ascending?",
            "Show the names of all unique wines arranged by their price in ascending order.",
            "Provide a list of wine names, sorted from the least expensive to the most expensive.",
            "Can you give me the distinct names of wines sorted by their prices in increasing order?"
        ],
        "ref_sql": "SELECT DISTINCT Name FROM WINE ORDER BY price",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $sort: {\n      \"wine.Price\": 1\n    }\n  },\n  {\n    $group: {\n      _id: \"$wine.Name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3364,
        "db_id": "allergy_1",
        "nl_queries": [
            "Which major has most number of students?",
            "What is the largest major?",
            "Which academic major boasts the highest student enrollment?",
            "Identify the major with the greatest number of students.",
            "What is the major that has the largest student population?"
        ],
        "ref_sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\",\n      totalStudents: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { totalStudents: -1 }\n  },\n  {\n    $project: {\n      Major: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 142,
        "db_id": "musical",
        "nl_queries": [
            "What are the characters of actors in descending order of age?",
            "Return the characters for actors, ordered by age descending.",
            "List the characters portrayed by actors, sorted by their age from oldest to youngest.",
            "What characters are played by actors, arranged in order of descending age?",
            "Provide the characters of actors in a list organized by age in decreasing order."
        ],
        "ref_sql": "SELECT Character FROM actor ORDER BY age DESC",
        "MQL": "db.actor.find({}, { \"Character\": 1, \"_id\": 0 }).sort({ \"age\": -1 });\n"
    },
    {
        "record_id": 169,
        "db_id": "climbing",
        "nl_queries": [
            "Please show the countries and the number of climbers from each country.",
            "How many climbers are from each country?",
            "List all the countries along with the number of associated climbers for each.",
            "What is the count of climbers from different countries?",
            "Provide the number of climbers categorized by their respective countries."
        ],
        "ref_sql": "SELECT Country , COUNT(*) FROM climber GROUP BY Country",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $group: {\n      _id: \"$climber.Country\",\n      \"COUNT\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      COUNT: \"$COUNT\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 135,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show the case burden of counties in descending order of population.",
            "What are the case burdens of counties, ordered descending by population?",
            "List the case burdens of counties sorted by population in descending order.",
            "Provide the case burden statistics for counties, arranged from highest to lowest population.",
            "Display the case burdens of counties, emphasizing a descending order based on their population figures."
        ],
        "ref_sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $sort: { Population: -1 }\n  },\n  {\n    $project: {\n      Case_burden: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 616,
        "db_id": "voter_2",
        "nl_queries": [
            "Report all majors that have less than 3 students.",
            "What are the majors only less than three students are studying?",
            "List all majors that have fewer than three enrolled students.",
            "Identify majors with a student count of less than three.",
            "Show the majors where the number of students is below three."
        ],
        "ref_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $lt: 3 }\n    }\n  },\n  {\n    $project: {\n      Major: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3838,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the ids for projects with at least 2 documents.",
            "What are project ids of projects that have 2 or more corresponding documents?",
            "List the project IDs that contain two or more documents.",
            "Provide the IDs of projects with a minimum of 2 associated documents.",
            "Retrieve the project IDs for those projects that have at least two documents linked to them."
        ],
        "ref_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2",
        "MQL": "db.Projects.aggregate([\n  {\n    $project: {\n      Project_ID: 1,\n      count_document: {\n        $size: \"$Documents\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_document: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      Project_ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3230,
        "db_id": "ship_1",
        "nl_queries": [
            "Which flag is most widely used among all ships?",
            "Return the flag that is most common among all ships.",
            "What is the most prevalent flag found on the ships?",
            "Identify the flag that appears most frequently among the ships.",
            "Which flag is the most common across all ships in the database?"
        ],
        "ref_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$Flag\"\n  },\n  {\n    $group: {\n      _id: \"$Flag\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Flag: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1994,
        "db_id": "school_player",
        "nl_queries": [
            "List the teams of the players with the top 5 largest ages.",
            "What are the teams that have the 5 oldest players?",
            "Provide the names of the teams for the five players who are the oldest.",
            "Identify the teams that represent the five players with the highest ages.",
            "What teams do the top five oldest players belong to?"
        ],
        "ref_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "MQL": "db.school.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $sort: {\n      \"player.Age\": -1\n    }\n  },\n  {\n    $limit: 5\n  },\n  {\n    $group: {\n      _id: \"$player.Team\"\n    }\n  },\n  {\n    $project: {\n      Team: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1567,
        "db_id": "college_3",
        "nl_queries": [
            "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
            "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
            "What is the name of the department and the room where the course INTRODUCTION TO COMPUTER SCIENCE is held?",
            "Could you provide the department and room details for the course INTRODUCTION TO COMPUTER SCIENCE?",
            "List the department name and the room number for the course titled INTRODUCTION TO COMPUTER SCIENCE."
        ],
        "ref_sql": "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $match: {\n      \"Course.CName\": \"INTRODUCTION TO COMPUTER SCIENCE\"\n    }\n  },\n  {\n    $project: {\n      DName: 1,\n      Room: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1882,
        "db_id": "cinema",
        "nl_queries": [
            "What are the title and maximum price of each film?",
            "Give me the title and highest price for each film.",
            "What titles do the films have, and what is the highest ticket price for each?",
            "Can you provide the title along with the maximum price for every film?",
            "Show me each film's title and its corresponding maximum price."
        ],
        "ref_sql": "SELECT T2.title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id",
        "MQL": "db.film.aggregate([\n  {\n    $unwind: \"$schedule\"\n  },\n  {\n    $group: {\n      _id: \"$Title\",\n      max_Price: { $max: \"$schedule.Price\" }\n    }\n  },\n  {\n    $project: {\n      Title: \"$_id\",\n      \"max_Price\": 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1173,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
            "Return the descriptions and names of the courses that have more than two students enrolled in.",
            "List the names and descriptions of courses that have more than two students enrolled.",
            "Identify the course names and their descriptions for courses with an enrollment exceeding two students.",
            "What are the names and descriptions of courses that have an enrollment count greater than two students?"
        ],
        "ref_sql": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $project: {\n      course_description: \"$Courses.course_description\",\n      course_name: \"$Courses.course_name\",\n      enrollment_count: {\n        $size: {\n          $filter: {\n            input: \"$Courses.Student_Course_Enrolment\",\n            as: \"enrollment\",\n            cond: {\n              $ne: [\"$$enrollment.student_id\", null]\n            }\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      enrollment_count: {\n        $gt: 2\n      }\n    }\n  },\n  {\n    $project: {\n      course_description: 1,\n      course_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3108,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the ids and names of all documents.",
            "What are the ids and names for each of the documents?",
            "Provide the identifiers and titles of all documents available.",
            "List the document IDs along with their corresponding names.",
            "Fetch the Document_IDs and Document_Names for each document in the collection."
        ],
        "ref_sql": "SELECT document_id , document_name FROM Documents",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $project: {\n      Document_ID: \"$Documents.Document_ID\",\n      Document_Name: \"$Documents.Document_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3582,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the name of the airports located in Cuba or Argentina.",
            "What are the names of all airports in Cuba or Argentina?",
            "List the names of airports situated in either Cuba or Argentina.",
            "Can you provide the names of all the airports located in Cuba or Argentina?",
            "What are the names of airports found in Cuba and Argentina?"
        ],
        "ref_sql": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'",
        "MQL": "db.airports.find(\n  { \n    country: { $in: [\"Cuba\", \"Argentina\"] } \n  },\n  { \n    name: 1, \n    _id: 0 \n  }\n);\n"
    },
    {
        "record_id": 1111,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
            "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.",
            "Retrieve the addresses of authors who instruct the \"operating system\" or \"data structure\" courses.",
            "What addresses are associated with course authors teaching the courses titled \"operating system\" or \"data structure\"?",
            "List the addresses of authors for courses named \"operating system\" or \"data structure\"."
        ],
        "ref_sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"operating system\" OR T2.course_name = \"data structure\"",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Courses.course_name\": \"operating system\" },\n        { \"Courses.course_name\": \"data structure\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      address_line_1: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3167,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
            "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
            "Retrieve the email addresses and phone numbers of every customer, arranged by email and phone number.",
            "List all customers' emails and phone numbers, sorted by their email address and phone number.",
            "What are the email and phone details for all customers, organized by email address and phone number?"
        ],
        "ref_sql": "SELECT email_address , phone_number FROM customers ORDER BY email_address , phone_number",
        "MQL": "db.Customers.aggregate([\n  {\n    $project: {\n      email_address: 1,\n      phone_number: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      email_address: 1,\n      phone_number: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 580,
        "db_id": "cinema",
        "nl_queries": [
            "Show all the locations where no cinema has capacity over 800.",
            "List all locations where no cinema has a capacity greater than 800.",
            "Provide the names of locations that have only cinemas with a maximum capacity of 800 or less.",
            "Identify all the locations where every cinema's capacity does not exceed 800.",
            "Display all the locations with cinemas that are capped at a maximum of 800 in capacity."
        ],
        "ref_sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
        "MQL": "db.cinema.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      max_Capacity: { $max: \"$Capacity\" }\n    }\n  },\n  {\n    $match: {\n      max_Capacity: { $lte: 800 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3179,
        "db_id": "hr_1",
        "nl_queries": [
            "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a ’T’.",
            "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
            "List the employee IDs along with their first and last names for all staff members who belong to departments where at least one employee's name features a 'T'.",
            "Provide the employee numbers and full names of individuals working in departments that include someone with a first name that has a 'T'.",
            "Show the IDs and names (first and last) of employees in any department that has an employee whose first name contains the letter T."
        ],
        "ref_sql": "SELECT employee_id , first_name , last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "MQL": "db.departments.aggregate([\n  {\n    $match: {\n      \"employees.FIRST_NAME\": {\n        $regex: \"T\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 885,
        "db_id": "device",
        "nl_queries": [
            "What are the names and location of the shops in ascending alphabetical order of name.",
            "Return the names and locations of shops, ordered by name in alphabetical order.",
            "List the shops along with their locations, sorted by name in ascending order.",
            "Provide the names and locations of the shops, arranged alphabetically according to their names.",
            "Display the shop names and their respective locations, ordered by name from A to Z."
        ],
        "ref_sql": "SELECT Shop_Name , LOCATION FROM shop ORDER BY Shop_Name ASC",
        "MQL": "db.shop.find({}, { Shop_Name: 1, Location: 1, _id: 0 }).sort({ Shop_Name: 1 });\n"
    },
    {
        "record_id": 1918,
        "db_id": "pilot_record",
        "nl_queries": [
            "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
            "List the names of pilots along with the fleet series of the aircraft they have flown, sorted by pilot rank in ascending order.",
            "Provide the names of pilots and the fleet series for the aircraft they operated, arranged in ascending order by their rank.",
            "Retrieve a list of pilots' names and the corresponding fleet series of their aircraft, organized by rank from lowest to highest.",
            "Display the names of pilots alongside the fleet series of aircraft they have piloted, ordered by the ascending rank of the pilots."
        ],
        "ref_sql": "SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank",
        "MQL": "db.pilot.aggregate([\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"Pilot_ID\",\n      foreignField: \"pilot_record.Pilot_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $sort: { \"Rank\": 1 }\n  },\n  {\n    $project: {\n      \"Pilot_name\": 1,\n      \"Fleet_Series\": \"$Docs1.Fleet_Series\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1010,
        "db_id": "school_player",
        "nl_queries": [
            "Show locations and nicknames of schools.",
            "What are the location and nickname of each school?",
            "Provide the locations and nicknames associated with each school.",
            "List the location and nickname for every school in the database.",
            "What are the nicknames of schools along with their respective locations?"
        ],
        "ref_sql": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
        "MQL": "db.school.aggregate([\n  {\n    $unwind: \"$school_details\"\n  },\n  {\n    $project: {\n      Location: 1,\n      Nickname: \"$school_details.Nickname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 131,
        "db_id": "device",
        "nl_queries": [
            "What are the carriers of devices whose software platforms are not \"Android\"?",
            "Return the device carriers that do not have Android as their software platform.",
            "List the carriers of devices which are not utilizing the Android software platform.",
            "What carriers are associated with devices that do not run on Android?",
            "Provide the device carriers for all devices whose software platforms exclude Android."
        ],
        "ref_sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
        "MQL": "db.device.find(\n  { Software_Platform: { $ne: \"Android\" } },\n  { Carrier: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3805,
        "db_id": "customer_complaints",
        "nl_queries": [
            "What is the description of the product named \"Chocolate\"?",
            "Return the description of the product called \"Chocolate\".",
            "Can you provide the description for the product known as \"Chocolate\"?",
            "Please give me the details of the product titled \"Chocolate.\"",
            "What is the description available for the product labeled \"Chocolate\"?"
        ],
        "ref_sql": "SELECT product_description FROM products WHERE product_name = \"Chocolate\"",
        "MQL": "db.Products.find(\n  { product_name: \"Chocolate\" },\n  { product_description: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 572,
        "db_id": "allergy_1",
        "nl_queries": [
            "What is the last name of the youngest student?",
            "Provide the last name of the youngest student.",
            "Could you tell me the last name of the student who is the youngest?",
            "What is the surname of the youngest student enrolled?",
            "Can you give me the last name of the student with the lowest age?"
        ],
        "ref_sql": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)",
        "MQL": "db.Student.aggregate([\n  {\n    $sort: { Age: 1 }  \n  },\n  {\n    $limit: 1  \n  },\n  {\n    $project: {\n      _id: 0,  \n      LName: 1  \n    }\n  }\n]);\n"
    },
    {
        "record_id": 712,
        "db_id": "climbing",
        "nl_queries": [
            "List the names of mountains that do not have any climber.",
            "What are the names of countains that no climber has climbed?",
            "Retrieve the names of mountains that have not been climbed by any climbers.",
            "What are the names of mountains that lack any climbing records?",
            "Show the names of mountains that do not have climbers associated with them."
        ],
        "ref_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "MQL": "db.mountain.aggregate([\n  {\n    $match: {\n      climber: { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2768,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the number of routes with destination airports in Italy.",
            "What is the number of routes whose destinations are Italian airports?",
            "How many routes lead to airports located in Italy?",
            "Count the number of flight routes that have their destinations set in Italian airports.",
            "What is the total number of routes that end at airports within Italy?"
        ],
        "ref_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'",
        "MQL": "db.airlines.aggregate([\n  {\n    $unwind: \"$routes\"\n  },\n  {\n    $lookup: {\n      from: \"airports\",\n      localField: \"routes.dst_apid\",\n      foreignField: \"apid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.country\": \"Italy\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1662,
        "db_id": "device",
        "nl_queries": [
            "Show the name of the shop that have the largest quantity of devices in stock.",
            "What is the name of the shop that has the greatest quantity of devices in stock?",
            "Which shop has the highest number of devices in stock?",
            "Identify the shop with the maximum quantity of available devices.",
            "What is the name of the shop with the largest inventory of devices?"
        ],
        "ref_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "MQL": "db.shop.aggregate([\n  {\n    $unwind: \"$stock\"\n  },\n  {\n    $group: {\n      _id: \"$Shop_ID\",\n      sum_Quantity: { $sum: \"$stock.Quantity\" }\n    }\n  },\n  {\n    $sort: { sum_Quantity: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"shop\",\n      localField: \"_id\",\n      foreignField: \"Shop_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Shop_Name: \"$Docs1.Shop_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2579,
        "db_id": "e_learning",
        "nl_queries": [
            "How many students did not have any course enrollment?",
            "Count the number of students who did not enroll in any course.",
            "What is the total number of students that are not enrolled in any courses?",
            "How many students have yet to enroll in a course?",
            "Determine the number of students without any course enrollment."
        ],
        "ref_sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
        "MQL": "db.Students.aggregate([\n  {\n    $project: {\n      count: {\n        $cond: {\n          if: {\n            $eq: [{ $size: \"$Student_Course_Enrolment\" }, 0]\n          },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: \"$count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 130,
        "db_id": "device",
        "nl_queries": [
            "List the carriers of devices that have no devices in stock.",
            "What are the carriers of devices that are not in stock anywhere?",
            "Identify the carriers for devices that are out of stock in all shops.",
            "What carriers correspond to devices that have no available stock in any store?",
            "Provide the list of carriers for devices that aren't available in stock at any location."
        ],
        "ref_sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "MQL": "db.device.aggregate([\n  {\n    $lookup: {\n      from: \"shop\",\n      localField: \"Device_ID\",\n      foreignField: \"stock.Device_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      Carrier: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 521,
        "db_id": "college_3",
        "nl_queries": [
            "Find the first name of students not enrolled in any course.",
            "What are the first names of all students that are not enrolled in courses?",
            "List the first names of students who are not registered in any courses.",
            "Show me the first names of all students that are currently not taking any courses.",
            "Retrieve the first names of students with no course enrollments."
        ],
        "ref_sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Enrolled_in: {\n        $size: 0\n      }\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3434,
        "db_id": "school_bus",
        "nl_queries": [
            "What is the maximum, minimum and average years spent working on a school bus?",
            "What are the maximum, minimum, and average years that drivers have worked on the school bus service?",
            "Can you provide the highest, lowest, and average number of years worked by drivers on school buses?",
            "How many years have drivers spent on average, at a minimum, and at a maximum working with school buses?",
            "What is the range and average of years that drivers have dedicated to working on school buses?"
        ],
        "ref_sql": "SELECT max(years_working) , min(years_working) , avg(years_working) FROM school_bus",
        "MQL": "db.driver.aggregate([\n  {\n    $unwind: \"$school_bus\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_years_working: { $max: \"$school_bus.Years_Working\" },\n      min_years_working: { $min: \"$school_bus.Years_Working\" },\n      avg_years_working: { $avg: \"$school_bus.Years_Working\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_years_working: 1,\n      min_years_working: 1,\n      avg_years_working: 1\n    }\n  }\n])\n"
    },
    {
        "record_id": 3890,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the school name and type for schools without a school bus.",
            "List the names and types of schools that lack a school bus.",
            "Provide the school names and their types for those institutions without a school bus.",
            "Identify the schools and their types where there is no school bus available.",
            "Display the names and types of schools that do not have a school bus assigned."
        ],
        "ref_sql": "SELECT school , TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
        "MQL": "db.school.find({\n  $or: [\n    { \"school_bus\": { $exists: false } },\n    { \"school_bus\": { $size: 0 } }\n  ]\n}, { \"School\": 1, \"Type\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2052,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all ages and corresponding number of students.",
            "How old is each student and how many students are each age?",
            "Provide a list of all student ages along with how many students belong to each age.",
            "What is the age distribution of students, including the count for each specific age?",
            "Display the ages of students and the number of students at each age level."
        ],
        "ref_sql": "SELECT age , count(*) FROM Student GROUP BY age",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Age\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Age: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2597,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the number of routes operated by American Airlines.",
            "How many routes does American Airlines operate?",
            "How many routes are operated by American Airlines?",
            "What is the total number of routes for American Airlines?",
            "Can you tell me the count of routes that American Airlines operates?"
        ],
        "ref_sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      name: \"American Airlines\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$routes\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2563,
        "db_id": "voter_2",
        "nl_queries": [
            "Find the number of students in total.",
            "How many students are there in total?",
            "What is the total count of students enrolled?",
            "Count how many students are present in the database.",
            "How many students are registered in total?"
        ],
        "ref_sql": "SELECT count(*) FROM STUDENT",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3071,
        "db_id": "flight_1",
        "nl_queries": [
            "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
            "What are the departure and arrival dates of all flights from LA to Honolulu?",
            "Provide the departure and arrival dates for all flights traveling from Los Angeles to Honolulu.",
            "Can you list the departure and arrival dates for flights flying out of LA to Honolulu?",
            "What are the dates for the departures and arrivals of all flights going from Los Angeles to Honolulu?"
        ],
        "ref_sql": "SELECT departure_date , arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.origin\": \"Los Angeles\",\n      \"flight.destination\": \"Honolulu\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      departure_date: \"$flight.departure_date\",\n      arrival_date: \"$flight.arrival_date\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 582,
        "db_id": "cinema",
        "nl_queries": [
            "Show all the locations with at least two cinemas with capacity above 300.",
            "Which locations have 2 or more cinemas with capacity over 300?",
            "List all the locations that have two or more cinemas with a capacity exceeding 300.",
            "Identify the locations where there are at least two cinemas that can hold more than 300 people.",
            "Which areas contain a minimum of two cinemas with a capacity higher than 300?"
        ],
        "ref_sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2",
        "MQL": "db.cinema.aggregate([\n  {\n    $match: {\n      Capacity: { $gt: 300 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3816,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the name and category of the most expensive product.",
            "What is the name and category code of the product with the highest price?",
            "Identify the most costly product along with its name and category code.",
            "What is the name and category of the product that has the highest price?",
            "Retrieve the name and category of the product priced the highest."
        ],
        "ref_sql": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "MQL": "db.Products.aggregate([\n  {\n    $sort: {\n      product_price: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      product_name: 1,\n      product_category_code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2889,
        "db_id": "flight_1",
        "nl_queries": [
            "How many employees have certificate.",
            "What is the count of distinct employees with certificates?",
            "How many employees hold a certificate?",
            "What is the total number of distinct employees who have certificates?",
            "Can you tell me the number of unique employees that possess a certificate?"
        ],
        "ref_sql": "SELECT count(DISTINCT eid) FROM Certificate",
        "MQL": "db.employee.aggregate([\n  {\n    $match: {\n      \"certificate.0\": { $exists: true }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_eid: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_eid: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4097,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
            "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?",
            "List the names of ships that have captains ranked as both Midshipman and Lieutenant.",
            "Which ships are helmed by captains with the ranks of Midshipman and Lieutenant?",
            "Provide the names of vessels that are overseen by a captain of Midshipman rank as well as a captain of Lieutenant rank."
        ],
        "ref_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      midshipman_count: {\n        $sum: {\n          $cond: [\n            { $eq: [\"$captain.Rank\", \"Midshipman\"] },\n            1,\n            0\n          ]\n        }\n      },\n      lieutenant_count: {\n        $sum: {\n          $cond: [\n            { $eq: [\"$captain.Rank\", \"Lieutenant\"] },\n            1,\n            0\n          ]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      midshipman_count: { $gt: 0 },\n      lieutenant_count: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2947,
        "db_id": "flight_4",
        "nl_queries": [
            "Which countries has the most number of airlines?",
            "What is the name of the country with the most number of home airlines?",
            "Which country hosts the greatest number of airlines?",
            "Identify the country with the largest count of domestic airlines.",
            "What country has the highest number of airlines registered?"
        ],
        "ref_sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.airlines.aggregate([\n  {\n    $group: {\n      _id: \"$country\",\n      airlineCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      airlineCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3601,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the name of captains whose rank are either Midshipman or Lieutenant.",
            "What are the names of captains that have either the rank Midshipman or Lieutenant?",
            "Retrieve the names of captains holding the ranks Midshipman or Lieutenant.",
            "List the names of captains with either a Midshipman or Lieutenant rank.",
            "What are the names of the captains ranked as either Midshipman or Lieutenant?"
        ],
        "ref_sql": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $match: {\n      \"captain.Rank\": { $in: [\"Midshipman\", \"Lieutenant\"] }\n    }\n  },\n  {\n    $project: {\n      Name: \"$captain.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 217,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all majors.",
            "What are the different majors?",
            "List all the available majors.",
            "Can you provide the different majors offered?",
            "What majors can students choose from?"
        ],
        "ref_sql": "SELECT DISTINCT Major FROM Student",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Major: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2164,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show the average age for male and female students.",
            "What are the average ages for male and female students?",
            "What is the average age of students categorized by their sex?",
            "Please provide the average ages for both male and female students.",
            "Can you tell me the mean age for male and female students?"
        ],
        "ref_sql": "SELECT avg(age) , sex FROM Student GROUP BY sex",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Sex\",\n      avg_age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      Sex: \"$_id\",\n      avg_age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 714,
        "db_id": "musical",
        "nl_queries": [
            "What are the names of musicals with nominee \"Bob Fosse\"?",
            "Return the names of musicals who have the nominee Bob Fosse.",
            "List the titles of musicals that nominated Bob Fosse.",
            "What musicals are associated with the nominee Bob Fosse?",
            "Can you provide the names of musicals where Bob Fosse is listed as a nominee?"
        ],
        "ref_sql": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"",
        "MQL": "db.musical.find(\n  { \"Nominee\": \"Bob Fosse\" },\n  { \"Name\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 828,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show the police force shared by counties with location on the east and west.",
            "Which police forces operate in both counties that are located in the East and in the West?",
            "Identify the police departments that serve counties situated in both the Eastern and Western regions.",
            "List the police forces that are present in counties located both in the East and the West.",
            "What are the police forces common to counties found in the eastern and western locations?"
        ],
        "ref_sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\"",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $match: {\n      $or: [\n        { Location: \"East\" },\n        { Location: \"West\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Police_force\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Police_force: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 618,
        "db_id": "voter_2",
        "nl_queries": [
            "What is the most common major among female (sex is F) students?",
            "Find the major that is studied by the most female students.",
            "Which major is most frequently pursued by female students?",
            "Identify the major that has the largest population of female students.",
            "What is the leading major among female students in terms of enrollment?"
        ],
        "ref_sql": "SELECT Major FROM STUDENT WHERE Sex = \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Sex: \"F\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Major\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Major: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2253,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show budget type codes and the number of documents in each budget type.",
            "What are the different budget type codes, and how many documents are there for each?",
            "List the different budget type codes along with the total count of documents associated with each code.",
            "Provide a summary of budget type codes, including how many documents exist for each type.",
            "What are the unique budget type codes, and what is the document count for each of those codes?"
        ],
        "ref_sql": "SELECT budget_type_code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Documents_with_Expenses\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.Documents_with_Expenses.Budget_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Budget_Type_Code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3135,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show all document type codes, document type names, document type descriptions.",
            "What are the codes, names, and descriptions of the different document types?",
            "List all the codes, names, and descriptions associated with document types.",
            "Provide the document type codes, names, and their corresponding descriptions.",
            "Can you display the various document types along with their codes, names, and descriptions?"
        ],
        "ref_sql": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
        "MQL": "db.Ref_Document_Types.aggregate([\n  {\n    $project: {\n      _id: 0,\n      Document_Type_Code: 1,\n      Document_Type_Name: 1,\n      Document_Type_Description: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 226,
        "db_id": "voter_2",
        "nl_queries": [
            "What are the distinct president votes on 08/30/2015?",
            "Show all the distinct president votes made on 08/30/2015.",
            "What unique votes did students cast for president on 08/30/2015?",
            "List all distinct presidential votes from the election on 08/30/2015.",
            "Can you provide the different president votes recorded on 08/30/2015?"
        ],
        "ref_sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = \"08/30/2015\"",
        "MQL": "db.Student.aggregate([\n  { \n    $unwind: \"$Voting_record\"\n  },\n  { \n    $match: { \n      \"Voting_record.Registration_Date\": \"08/30/2015\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Voting_record.President_Vote\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      President_Vote: \"$_id\"\n    }\n  }\n]);"
    },
    {
        "record_id": 3177,
        "db_id": "hr_1",
        "nl_queries": [
            "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
            "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
            "List the employee IDs, names (both first and last), and job titles of employees whose salaries exceed that of any employee working as PU_MAN.",
            "Provide the employee IDs, full names, and job titles for any employees earning more than the top salary of those with the PU_MAN job title.",
            "Show the details (employee ID, first and last name, job title) of employees who have a salary higher than any employee holding the PU_MAN job position."
        ],
        "ref_sql": "SELECT employee_id , first_name , last_name , job_id FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' )",
        "MQL": "db.jobs.aggregate([\n  { $unwind: \"$employees\" },\n  {\n    $match: {\n      \"employees.JOB_ID\": \"PU_MAN\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_SALARY: { $max: \"$employees.SALARY\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"jobs\",\n      let: { max_SALARY: \"$max_SALARY\" },\n      pipeline: [\n        { $unwind: \"$employees\" },\n        {\n          $match: {\n            $expr: { $gt: [\"$employees.SALARY\", \"$$max_SALARY\"] }\n          }\n        },\n        {\n          $project: {\n            EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n            FIRST_NAME: \"$employees.FIRST_NAME\",\n            LAST_NAME: \"$employees.LAST_NAME\",\n            JOB_ID: \"$employees.JOB_ID\",\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: 1,\n      FIRST_NAME: 1,\n      LAST_NAME: 1,\n      JOB_ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3448,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show the minimum, average, and maximum age of all students.",
            "What is the minimum, mean, and maximum age across all students?",
            "What are the minimum, average, and maximum ages of the student population?",
            "Provide the minimum, mean, and maximum ages among all students.",
            "Can you display the youngest, average, and oldest ages of students?"
        ],
        "ref_sql": "SELECT min(age) , avg(age) , max(age) FROM Student",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_age: { $min: \"$Age\" },\n      avg_age: { $avg: \"$Age\" },\n      max_age: { $max: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_age: 1,\n      avg_age: 1,\n      max_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3610,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show the names of cities in counties that have a crime rate less than 100.",
            "What are the names of cities that are in counties that have a crime rate below 100?",
            "List the names of cities in counties where the crime rate is under 100.",
            "Identify the cities located in counties with a crime rate of less than 100.",
            "Provide the names of cities within counties that exhibit a crime rate below 100."
        ],
        "ref_sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $match: {\n      Crime_rate: { $lt: 100 }\n    }\n  },\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$city.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 513,
        "db_id": "college_3",
        "nl_queries": [
            "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
            "What are the full names of faculties with sex M and who live in building NEB?",
            "List the first and last names of male faculty members residing in the NEB building.",
            "Retrieve the full names of male faculty who are based in the NEB building.",
            "What are the first and last names of male instructors located in the building NEB?"
        ],
        "ref_sql": "SELECT Fname , Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\"",
        "MQL": "db.Faculty.find(\n  {\n    \"Sex\": \"M\",\n    \"Building\": \"NEB\"\n  },\n  {\n    \"Fname\": 1,\n    \"Lname\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 595,
        "db_id": "school_player",
        "nl_queries": [
            "List the locations of schools in descending order of founded year.",
            "What is the list of school locations sorted in descending order of school foundation year?",
            "Show me the locations of schools ordered by their foundation year from most recent to oldest.",
            "Provide a list of school locations sorted by the year they were established, starting with the latest.",
            "Can you give me the school locations sorted in descending order based on when they were founded?"
        ],
        "ref_sql": "SELECT LOCATION FROM school ORDER BY Founded DESC",
        "MQL": "db.school.find({}, { Location: 1, _id: 0 }).sort({ Founded: -1 });\n"
    },
    {
        "record_id": 747,
        "db_id": "machine_repair",
        "nl_queries": [
            "List the name of technicians whose team is not \"NYY\".",
            "What is the name of the technician whose team is not 'NYY'?",
            "Retrieve the names of all technicians who are not part of the NYY team.",
            "Provide a list of technician names that do not belong to the \"NYY\" team.",
            "Show the names of technicians whose teams exclude \"NYY\"."
        ],
        "ref_sql": "SELECT Name FROM technician WHERE Team != \"NYY\"",
        "MQL": "db.technician.find(\n  { Team: { $ne: \"NYY\" } },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 594,
        "db_id": "school_player",
        "nl_queries": [
            "List the locations of schools in ascending order of enrollment.",
            "What is the list of school locations sorted in ascending order of school enrollment?",
            "Provide the locations of schools ordered by their enrollment numbers from lowest to highest.",
            "Can you show a list of school locations sorted by enrollment in ascending order?",
            "What are the locations of the schools arranged by increasing enrollment figures?"
        ],
        "ref_sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
        "MQL": "db.school.find({}, { Location: 1, _id: 0 }).sort({ Enrollment: 1 });\n"
    },
    {
        "record_id": 1280,
        "db_id": "flight_1",
        "nl_queries": [
            "Show all flight numbers with aircraft Airbus A340-300.",
            "What are the flight numbers for the aircraft Airbus A340-300?",
            "List the flight numbers for the Airbus A340-300 aircraft.",
            "Provide all the flight numbers associated with the Airbus A340-300.",
            "Can you give me the flight numbers of the Airbus A340-300?"
        ],
        "ref_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $match: {\n      name: \"Airbus A340-300\"\n    }\n  },\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $project: {\n      flno: \"$flight.flno\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1943,
        "db_id": "gas_company",
        "nl_queries": [
            "Show the manager name for gas stations belonging to the ExxonMobil company.",
            "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
            "Retrieve the names of the managers for gas stations under the ExxonMobil brand.",
            "What are the manager names for gas stations that belong to ExxonMobil?",
            "List the names of managers associated with gas stations owned by ExxonMobil."
        ],
        "ref_sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'",
        "MQL": "db.gas_station.aggregate([\n  {\n    $lookup: {\n      from: \"company\",\n      localField: \"station_company.Company_ID\",\n      foreignField: \"Company_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Company\": \"ExxonMobil\"\n    }\n  },\n  {\n    $project: {\n      Manager_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 52,
        "db_id": "voter_2",
        "nl_queries": [
            "Report all advisors that advise more than 2 students.",
            "Which advisors have more than two students?",
            "List all advisors supervising more than two students.",
            "Identify advisors that have more than two students under their guidance.",
            "Which advisors are responsible for advising over two students?"
        ],
        "ref_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      total_students: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      total_students: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      Advisor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2489,
        "db_id": "college_3",
        "nl_queries": [
            "What is the number of departments in Division \"AS\"?",
            "How many departments are in the division AS?",
            "How many departments are there in the \"AS\" division?",
            "What is the total number of departments categorized under Division AS?",
            "Can you tell me the count of departments that belong to the AS Division?"
        ],
        "ref_sql": "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\"",
        "MQL": "db.Department.aggregate([\n  {\n    $match: {\n      Division: \"AS\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3126,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Find names and ids of all documents with document type code BK.",
            "What are the names and ids of documents that have the type code BK?",
            "List the names and identifiers of all documents that are classified under the document type code BK.",
            "Retrieve the document names and IDs for all documents with the type code BK.",
            "Show the names and IDs of any documents associated with the document type code BK."
        ],
        "ref_sql": "SELECT document_name , document_id FROM Documents WHERE document_type_code = \"BK\"",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.Document_Type_Code\": \"BK\"\n    }\n  },\n  {\n    $project: {\n      Document_Name: \"$Documents.Document_Name\",\n      Document_ID: \"$Documents.Document_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2183,
        "db_id": "flight_1",
        "nl_queries": [
            "What is the average distance and average price for flights from Los Angeles.",
            "What is the average distance and price for all flights from LA?",
            "What are the average price and distance for flights departing from Los Angeles?",
            "Can you tell me the average distance and cost for flights that originate in LA?",
            "Calculate the mean distance and average fare for all flights flying out of Los Angeles."
        ],
        "ref_sql": "SELECT avg(distance) , avg(price) FROM Flight WHERE origin = \"Los Angeles\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.origin\": \"Los Angeles\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_distance: {\n        $avg: \"$flight.distance\"\n      },\n      avg_price: {\n        $avg: \"$flight.price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_distance: 1,\n      avg_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2423,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "How many documents are with document type code BK for each product id?",
            "Count the number of documents with the type code BK that correspond to each product id.",
            "What is the total number of documents classified under the type code BK for every project ID?",
            "How many documents exist with the BK type code for each unique project ID?",
            "Provide a count of documents associated with the BK document type code for all project IDs."
        ],
        "ref_sql": "SELECT count(*) , project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.Document_Type_Code\": \"BK\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Project_ID\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Project_ID: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2800,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find how many school locations have the word 'NY'.",
            "How many universities have a location that contains NY?",
            "What is the total number of universities located in New York?",
            "How many schools have their locations featuring 'NY'?",
            "Count the number of universities whose location includes the substring 'NY'."
        ],
        "ref_sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "MQL": "db.university.aggregate([\n  {\n    $match: {\n      Location: {\n        $regex: \"NY\",\n        $options: \"i\"  \n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2863,
        "db_id": "flight_4",
        "nl_queries": [
            "How many different cities do have some airport in the country of Greenland?",
            "In how many cities are there airports in the country of Greenland?",
            "What is the total number of unique cities that contain airports in Greenland?",
            "How many cities in Greenland have airports?",
            "Can you tell me the number of distinct cities with airports located in Greenland?"
        ],
        "ref_sql": "SELECT count(DISTINCT city) FROM airports WHERE country = 'Greenland'",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      country: \"Greenland\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$city\",\n      count_DISTINCT_city: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_city: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_city: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2456,
        "db_id": "allergy_1",
        "nl_queries": [
            "How many allergies have type animal?",
            "How many animal type allergies exist?",
            "What is the total number of allergies classified as animal?",
            "How many allergies are categorized under the animal type?",
            "Can you provide the count of allergies that fall into the animal category?"
        ],
        "ref_sql": "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\"",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $match: {\n      AllergyType: \"animal\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1997,
        "db_id": "machine_repair",
        "nl_queries": [
            "Please show the team that has the most number of technicians.",
            "What are the teams with the most technicians?",
            "Identify the team that has the largest number of technicians.",
            "Which team employs the most technicians?",
            "Name the team with the highest count of technicians assigned."
        ],
        "ref_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.technician.aggregate([\n  {\n    $group: {\n      _id: \"$Team\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Team: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 539,
        "db_id": "county_public_safety",
        "nl_queries": [
            "What are the percentage of hispanics in cities with the black percentage higher than 10?",
            "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
            "What is the percentage of Hispanic individuals in cities where the Black population percentage exceeds 10?",
            "Provide the Hispanic demographic percentage in cities that have more than 10% Black residents.",
            "List the Hispanic population percentage for cities with a Black percentage greater than 10."
        ],
        "ref_sql": "SELECT Hispanic FROM city WHERE Black > 10",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $match: {\n      \"city.Black\": { $gt: 10 }\n    }\n  },\n  {\n    $project: {\n      Hispanic: \"$city.Hispanic\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3161,
        "db_id": "flight_1",
        "nl_queries": [
            "Show ids for all employees who don't have a certificate.",
            "What are the ids of all employees that don't have certificates?",
            "List the IDs of all employees who lack a certificate.",
            "Retrieve the ids of employees without any certificates.",
            "Find the employee IDs for those who do not have certificates assigned."
        ],
        "ref_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "MQL": "db.employee.find({\n  $or: [\n    { certificate: { $exists: false } },\n    { certificate: { $size: 0 } }\n  ]\n}, { eid: 1, _id: 0 });\n"
    },
    {
        "record_id": 337,
        "db_id": "college_3",
        "nl_queries": [
            "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
            "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
            "List the unique first names of students who have a grade point average of 3.8 or higher in any course.",
            "What unique first names can we find for students with a grade point of 3.8 or greater in at least one of their courses?",
            "Retrieve the distinct first names of all students who achieved a grade point of at least 3.8 in one or more courses."
        ],
        "ref_sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Gradeconversion\",\n      localField: \"Enrolled_in.Grade\",\n      foreignField: \"lettergrade\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Enrolled_in\"\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.gradepoint\": { $gte: 3.8 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Fname\"\n    }\n  },\n  {\n    $project: {\n      Fname: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 227,
        "db_id": "county_public_safety",
        "nl_queries": [
            "List the distinct police forces of counties whose location is not on east side.",
            "What are the different police forces of counties that are not located in the East?",
            "Identify the unique police forces from counties that are not situated in the East.",
            "Provide a list of different police departments from counties whose location is outside the eastern area.",
            "Retrieve the various police forces of counties located elsewhere than the East."
        ],
        "ref_sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $match: {\n      Location: { $ne: \"East\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Police_force\"\n    }\n  },\n  {\n    $project: {\n      Police_force: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2691,
        "db_id": "cinema",
        "nl_queries": [
            "How many films have the word 'Dummy' in their titles?",
            "Count the number of films whose title contains the word 'Dummy'.",
            "What is the total number of films that include the word 'Dummy' in their titles?",
            "Can you tell me how many films have 'Dummy' as part of their title?",
            "Count all the films with the word 'Dummy' featured in their titles."
        ],
        "ref_sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "MQL": "db.film.aggregate([\n  {\n    $match: {\n      Title: {\n        $regex: \"Dummy\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2051,
        "db_id": "allergy_1",
        "nl_queries": [
            "Which advisor has most number of students?",
            "Give the advisor with the most students.",
            "Identify the advisor who supervises the largest number of students.",
            "Find out which advisor has the highest student count.",
            "Who is the advisor with the greatest number of students under their guidance?"
        ],
        "ref_sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Advisor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2548,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the number of projects.",
            "How many projects are there?",
            "How many projects exist in the database?",
            "What is the total count of projects?",
            "Please provide the total number of projects available."
        ],
        "ref_sql": "SELECT count(*) FROM Projects",
        "MQL": "db.Projects.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3366,
        "db_id": "gas_company",
        "nl_queries": [
            "Show the manager name with most number of gas stations opened after 2000.",
            "What is the name of the manager with the most gas stations that opened after 2000?",
            "Identify the manager who has opened the most gas stations since the year 2000.",
            "Which manager oversees the highest number of gas stations that began operating after 2000?",
            "Name the manager responsible for the greatest number of gas stations launched post-2000."
        ],
        "ref_sql": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.gas_station.aggregate([\n  {\n    $match: {\n      Open_Year: { $gt: 2000 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Manager_Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Manager_Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3168,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the email and phone number of the customers who have never filed a complaint before.",
            "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
            "Retrieve the email addresses and phone numbers of customers that have not made any complaints.",
            "What are the contact details (email and phone number) of customers with no complaint history?",
            "List the emails and phone numbers of customers who have never submitted a complaint."
        ],
        "ref_sql": "SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      Complaints: { $exists: true, $size: 0 }\n    }\n  },\n  {\n    $project: {\n      email_address: 1,\n      phone_number: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2255,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the description for the budget type with code ORG?",
            "Return the description of the budget type that has the code ORG.",
            "Can you provide me with the description for the budget type coded as ORG?",
            "What is the description associated with the budget type that has the code ORG?",
            "Please return the budget type description corresponding to the code ORG."
        ],
        "ref_sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = \"ORG\"",
        "MQL": "db.Ref_Budget_Codes.aggregate([\n  {\n    $match: {\n      Budget_Type_Code: \"ORG\"\n    }\n  },\n  {\n    $project: {\n      Budget_Type_Description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2963,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the descriptions of the courses with name \"database\"?",
            "Return the description for the courses named \"database\".",
            "Can you provide the descriptions of courses titled \"database\"?",
            "Please show me the descriptions for the courses that are named \"database.\"",
            "What descriptions do the courses that bear the name \"database\" have?"
        ],
        "ref_sql": "SELECT course_description FROM COURSES WHERE course_name = \"database\"",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $match: {\n      \"Courses.course_name\": \"database\"\n    }\n  },\n  {\n    $project: {\n      course_description: \"$Courses.course_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 794,
        "db_id": "pilot_record",
        "nl_queries": [
            "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
            "List the positions held by pilots, ensuring there are pilots who joined before 2000 and others who joined after 2005.",
            "Identify the pilot roles that have at least one pilot joining before the year 2000 and one pilot who joined after 2005.",
            "Provide the positions that consist of pilots recruited both prior to 2000 and after 2005.",
            "Display the pilot positions encompassing at least one pilot who joined before the year 2000 and another who joined following 2005."
        ],
        "ref_sql": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Position\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Position: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2321,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the cities which have exactly two airports.",
            "What are the cities with exactly two airports?",
            "List the cities that possess precisely two airports.",
            "Identify cities with a total of two airports.",
            "Which cities have a total of exactly two airports?"
        ],
        "ref_sql": "SELECT city FROM airports GROUP BY city HAVING count(*) = 2",
        "MQL": "db.airports.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: 2\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1162,
        "db_id": "voter_1",
        "nl_queries": [
            "What are the contestant numbers and names of the contestants who had at least two votes?",
            "List the contestant numbers and names of those who have received two or more votes.",
            "Identify the contestants who garnered at least two votes along with their corresponding numbers and names.",
            "Provide the names and numbers of contestants that have obtained no fewer than two votes.",
            "What are the names and contestant numbers of all contestants with a minimum of two votes?"
        ],
        "ref_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
        "MQL": "db.CONTESTANTS.aggregate([\n  {\n    $unwind: \"$VOTES\"\n  },\n  {\n    $group: {\n      _id: \"$contestant_number\",\n      contestant_name: { $first: \"$contestant_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      contestant_number: \"$_id\",\n      contestant_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 668,
        "db_id": "musical",
        "nl_queries": [
            "List the name of actors whose age is not 20.",
            "What are the names of actors who are not 20 years old?",
            "Provide the names of actors who are older or younger than 20.",
            "Can you list the actors that are not aged 20?",
            "Show me the names of all actors except those who are 20 years old."
        ],
        "ref_sql": "SELECT Name FROM actor WHERE Age != 20",
        "MQL": "db.actor.find(\n  { age: { $ne: 20 } },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3125,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
            "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
            "Provide the names and dates of documents associated with the project titled 'Graph Database project'.",
            "List the document names along with their corresponding dates for all documents related to the 'Graph Database project'.",
            "What are the document names and their dates for the project that is described as 'Graph Database project'?"
        ],
        "ref_sql": "SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'",
        "MQL": "db.Projects.aggregate([\n  {\n    $match: {\n      Project_Details: \"Graph Database project\"\n    }\n  },\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $project: {\n      Document_Name: \"$Documents.Document_Name\",\n      Document_Date: \"$Documents.Document_Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3371,
        "db_id": "voter_2",
        "nl_queries": [
            "What are the maximum and minimum age of students with major 600?",
            "Tell me the ages of the oldest and youngest students studying major 600.",
            "Can you provide the ages of the youngest and oldest students majoring in 600?",
            "What are the oldest and youngest ages for students enrolled in major 600?",
            "Please tell me the minimum and maximum ages of students who are in major 600."
        ],
        "ref_sql": "SELECT max(Age) , min(Age) FROM STUDENT WHERE Major = 600",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Major: 600\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_Age: { $max: \"$Age\" },\n      min_Age: { $min: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Age: 1,\n      min_Age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3254,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find the founded year of the newest non public school.",
            "What is the founded year of the non public school that was founded most recently?",
            "What year was the latest non-public school established?",
            "Retrieve the founding year of the most recently established school that is not public.",
            "What is the founding year of the most recently founded school that isn’t affiliated with the public system?"
        ],
        "ref_sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "MQL": "db.university.aggregate([\n  {\n    $match: {\n      Affiliation: { $ne: \"Public\" }\n    }\n  },\n  {\n    $sort: {\n      Founded: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Founded: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1660,
        "db_id": "device",
        "nl_queries": [
            "Show names of shops that have more than one kind of device in stock.",
            "What are the names of shops that have more than a single kind of device in stock?",
            "List the names of shops that stock at least two different types of devices.",
            "Which shops have more than one type of device available in their inventory?",
            "Identify the shops that carry a variety of devices, specifically those with over one type in stock."
        ],
        "ref_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1",
        "MQL": "db.shop.aggregate([\n  {\n    $unwind: \"$stock\"\n  },\n  {\n    $group: {\n      _id: \"$Shop_ID\",\n      Shop_Name: { $first: \"$Shop_Name\" },\n      distinctDevices: { $addToSet: \"$stock.Device_ID\" }\n    }\n  },\n  {\n    $project: {\n      Shop_Name: 1,\n      deviceCount: { $size: \"$distinctDevices\" }\n    }\n  },\n  {\n    $match: {\n      deviceCount: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Shop_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 713,
        "db_id": "musical",
        "nl_queries": [
            "List the name of musicals that do not have actors.",
            "What are the names of musicals who have no actors?",
            "Provide a list of musicals that do not feature any actors.",
            "Identify the names of musicals which have no cast members.",
            "Could you tell me the titles of musicals that lack actors?"
        ],
        "ref_sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "MQL": "db.musical.aggregate([\n  {\n    $lookup: {\n      from: \"actor\",\n      localField: \"Musical_ID\",\n      foreignField: \"Musical_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 56,
        "db_id": "journal_committee",
        "nl_queries": [
            "What are the different ages of editors? Show each age along with the number of editors of that age.",
            "List the unique ages of editors along with the total count of editors at each age.",
            "Can you provide the various ages of editors and the number of editors corresponding to each age?",
            "What ages do editors have? Please indicate how many editors belong to each age.",
            "Show each distinct age of editors and the count of how many editors fall into that age category."
        ],
        "ref_sql": "SELECT Age , COUNT(*) FROM editor GROUP BY Age",
        "MQL": "db.editor.aggregate([\n  {\n    $group: {\n      _id: \"$Age\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Age: \"$_id\",\n      \"COUNT\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2252,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "List all budget type codes and descriptions.",
            "What are the type codes and descriptions of each budget type?",
            "Provide a comprehensive list of all budget type codes along with their descriptions.",
            "Can you show me the budget type codes and their corresponding descriptions?",
            "Compile the type codes and descriptions for every budget type available."
        ],
        "ref_sql": "SELECT budget_type_code , budget_type_description FROM Ref_budget_codes",
        "MQL": "db.Ref_Budget_Codes.find({}, { Budget_Type_Code: 1, Budget_Type_Description: 1, _id: 0 });\n"
    },
    {
        "record_id": 3235,
        "db_id": "flight_1",
        "nl_queries": [
            "Show all flight number from Los Angeles.",
            "What are the numbers of all flights coming from Los Angeles?",
            "List all flight numbers for departures from Los Angeles.",
            "What are the flight numbers for flights that start in Los Angeles?",
            "Provide the numbers of all flights originating from Los Angeles."
        ],
        "ref_sql": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.origin\": \"Los Angeles\"\n    }\n  },\n  {\n    $project: {\n      flno: \"$flight.flno\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 518,
        "db_id": "college_3",
        "nl_queries": [
            "Find the first names of faculties of rank Professor in alphabetic order.",
            "What are the first names for all faculty professors, ordered by first name?",
            "List the first names of professors within the faculty, sorted in alphabetical order.",
            "What first names do faculty members of the rank of Professor have, arranged by their first names?",
            "Compile the first names of all faculty professors, ordered alphabetically by their first names."
        ],
        "ref_sql": "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname",
        "MQL": "db.Faculty.aggregate([\n  {\n    $match: {\n      Rank: \"Professor\"\n    }\n  },\n  {\n    $sort: {\n      Fname: 1\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3764,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the common personal name of course authors and students.",
            "What are the personal names used both by some course authors and some students?",
            "Identify the personal names that course authors and students share.",
            "List the personal names that appear for both course authors and students.",
            "Which personal names are common among the authors of courses and the students?"
        ],
        "ref_sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $lookup: {\n      from: \"Students\",\n      localField: \"personal_name\",\n      foreignField: \"personal_name\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      personal_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 692,
        "db_id": "county_public_safety",
        "nl_queries": [
            "List the names of counties in descending order of population.",
            "What are the names of the counties of public safety, ordered by population descending?",
            "Provide a list of county names sorted from the most populous to the least populous.",
            "Show the names of counties in order of their population, starting with the largest.",
            "Retrieve the names of all counties, arranged by their population in descending order."
        ],
        "ref_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
        "MQL": "db.county_public_safety.find({}, { Name: 1, _id: 0 }).sort({ Population: -1 });\n"
    },
    {
        "record_id": 2871,
        "db_id": "customer_complaints",
        "nl_queries": [
            "How many distinct complaint type codes are there in the database?",
            "Count the number of different complaint type codes.",
            "What is the total number of unique complaint type codes recorded in the database?",
            "Determine how many distinct types of complaint codes are available.",
            "Can you provide the count of various complaint type codes in the system?"
        ],
        "ref_sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Complaints\"\n  },\n  {\n    $group: {\n      _id: \"$Complaints.complaint_type_code\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_complaint_type_code: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3398,
        "db_id": "college_3",
        "nl_queries": [
            "What is the maximum and minimum grade point of students who live in NYC?",
            "Give the maximum and minimum gradepoints for students living in NYC?",
            "What are the highest and lowest grade points for students residing in New York City?",
            "Find the maximum and minimum grade points achieved by students living in NYC.",
            "Can you provide the maximum and minimum grade point values for students from NYC?"
        ],
        "ref_sql": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      city_code: \"NYC\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Gradeconversion\",\n      localField: \"Enrolled_in.Grade\",\n      foreignField: \"lettergrade\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_Ggradepoint: { $max: \"$Docs1.gradepoint\" },\n      min_gradepoint: { $min: \"$Docs1.gradepoint\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Ggradepoint: 1,\n      min_gradepoint: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2417,
        "db_id": "ship_1",
        "nl_queries": [
            "Group by ships by flag, and return number of ships that have each flag.",
            "What are the different ship flags, and how many ships have each?",
            "Count the number of ships for each distinct flag.",
            "Show the different ship flags along with the total number of ships for each flag.",
            "List the ship flags and indicate how many ships are associated with each one."
        ],
        "ref_sql": "SELECT count(*) , flag FROM ship GROUP BY flag",
        "MQL": "db.Ship.aggregate([\n  {\n    $group: {\n      _id: \"$Flag\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Flag: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 887,
        "db_id": "device",
        "nl_queries": [
            "List the name of the shop with the latest open year.",
            "What is the shop name corresponding to the shop that opened in the most recent year?",
            "What is the name of the shop that was established in the most recent year?",
            "Identify the shop name of the most recently opened store.",
            "Which shop has the latest opening year, and what is its name?"
        ],
        "ref_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
        "MQL": "db.shop.aggregate([\n  {\n    $sort: {\n      Open_Year: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Shop_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1042,
        "db_id": "musical",
        "nl_queries": [
            "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
            "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
            "List the names of actors who have performed in the musical called \"The Phantom of the Opera\".",
            "Can you provide the names of all actors that appeared in the musical titled \"The Phantom of the Opera\"?",
            "What are the names of the actors featured in the musical \"The Phantom of the Opera\"?"
        ],
        "ref_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"",
        "MQL": "db.actor.aggregate([\n  {\n    $lookup: {\n      from: \"musical\",\n      localField: \"Musical_ID\",\n      foreignField: \"Musical_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Name\": \"The Phantom of the Opera\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1919,
        "db_id": "pilot_record",
        "nl_queries": [
            "Show the names of pilots and models of aircrafts they have flied with.",
            "List the names of pilots along with the models of the aircraft they have piloted.",
            "Provide a display of pilot names and the corresponding aircraft models they have operated.",
            "Identify the pilots and the types of aircraft models they have flown.",
            "Present the names of pilots together with the aircraft models they have been associated with."
        ],
        "ref_sql": "SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID",
        "MQL": "db.pilot.aggregate([\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"Pilot_ID\",\n      foreignField: \"pilot_record.Pilot_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Pilot_name\": 1,\n      \"Model\": \"$Docs1.Model\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2471,
        "db_id": "college_3",
        "nl_queries": [
            "How many courses have more than 2 credits?",
            "Count the number of courses with more than 2 credits.",
            "What is the total number of courses that offer more than 2 credits?",
            "How many courses are there that have credit values exceeding 2?",
            "Determine the count of courses with more than 2 credits available."
        ],
        "ref_sql": "SELECT count(*) FROM COURSE WHERE Credits > 2",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $match: {\n      \"Course.Credits\": { $gt: 2 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 575,
        "db_id": "cinema",
        "nl_queries": [
            "Show each location and the number of cinemas there.",
            "Provide a list of all locations along with the total number of cinemas in each.",
            "For each location, display how many cinemas are situated there.",
            "List every location and the count of cinemas available at those sites.",
            "Present each location and indicate the number of cinemas present in that area."
        ],
        "ref_sql": "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION",
        "MQL": "db.cinema.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1494,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
            "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
            "Retrieve the statement details along with the names of the documents for those statements labeled as 'Private Project'.",
            "What statement details exist for documents categorized under 'Private Project', and what are the corresponding document names?",
            "List the details of statements referred to as 'Private Project', including the names of the related documents."
        ],
        "ref_sql": "SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Statements\"\n  },\n  {\n    $match: {\n      \"Documents.Statements.Statement_Details\": \"Private Project\"\n    }\n  },\n  {\n    $project: {\n      Statement_Details: \"$Documents.Statements.Statement_Details\",\n      Document_Name: \"$Documents.Document_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4038,
        "db_id": "university_basketball",
        "nl_queries": [
            "What is the primary conference of the school that has the lowest acc percent score in the competition?",
            "Return the primary conference of the school with the lowest acc percentage score.",
            "What is the primary conference for the university with the lowest ACC percentage in the match?",
            "Identify the primary conference associated with the school that has the lowest ACC score.",
            "What is the primary conference of the university ranked with the lowest ACC percentage in the competition?"
        ],
        "ref_sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "MQL": "db.university.aggregate([\n  {\n    $unwind: \"$basketball_match\"\n  },\n  {\n    $project: {\n      School_ID: 1,\n      Primary_conference: 1,\n      ACC_Percent: {\n        $toDouble: \"$basketball_match.ACC_Percent\"\n      }\n    }\n  },\n  {\n    $sort: {\n      ACC_Percent: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Primary_conference: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 475,
        "db_id": "school_player",
        "nl_queries": [
            "Show the denomination shared by more than one school.",
            "What are the denomination more than one school have?",
            "List the denominations that are affiliated with multiple schools.",
            "What denominations are represented by more than one school?",
            "Identify the denominations that have more than one school associated with them."
        ],
        "ref_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1",
        "MQL": "db.school.aggregate([\n  {\n    $group: {\n      _id: \"$Denomination\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Denomination: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 710,
        "db_id": "climbing",
        "nl_queries": [
            "What are the names of mountains in ascending alphabetical order?",
            "Give the names of mountains in alphabetical order.",
            "Can you provide the mountain names sorted in alphabetical order?",
            "List the names of the mountains in ascending order by name.",
            "What are the mountain names arranged alphabetically?"
        ],
        "ref_sql": "SELECT Name FROM mountain ORDER BY Name ASC",
        "MQL": "db.mountain.find({}, { Name: 1, _id: 0 }).sort({ Name: 1 });\n"
    },
    {
        "record_id": 2357,
        "db_id": "gas_company",
        "nl_queries": [
            "List the company name and rank for all companies in the decreasing order of their sales.",
            "What is the name and rank of every company ordered by descending number of sales?",
            "Provide the names and ranks of companies, sorted by sales in descending order.",
            "Show all companies’ names and their corresponding ranks ordered from highest to lowest sales.",
            "Retrieve the company name along with its rank, arranged by sales figures in a decreasing fashion."
        ],
        "ref_sql": "SELECT company , rank FROM company ORDER BY Sales_billion DESC",
        "MQL": "db.company.find({}, { Company: 1, Rank: 1, _id: 0 }).sort({ Sales_billion: -1 });\n"
    },
    {
        "record_id": 3287,
        "db_id": "gas_company",
        "nl_queries": [
            "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
            "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
            "List all headquarters that have companies in both the banking sector and the oil and gas sector.",
            "Identify the headquarters that are home to companies operating in both the banking and oil & gas industries.",
            "Provide the headquarters where there are companies present in both the banking and oil and gas fields."
        ],
        "ref_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
        "MQL": "db.company.aggregate([\n  {\n    $match: {\n      $or: [\n        { Main_Industry: \"Banking\" },\n        { Main_Industry: \"Oil and gas\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Headquarters\",\n      industries: { $addToSet: \"$Main_Industry\" }\n    }\n  },\n  {\n    $match: {\n      industries: { $all: [\"Banking\", \"Oil and gas\"] }\n    }\n  },\n  {\n    $project: {\n      Headquarters: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3134,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
            "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
            "Provide the document type code, name, and description for documents titled 'Noel CV' or 'King Book'.",
            "Can you show me the document type code, name, and description for the documents named 'Noel CV' or 'King Book'?",
            "What are the document type code, name, and description for the documents that are either called 'Noel CV' or 'King Book'?"
        ],
        "ref_sql": "SELECT document_type_code , document_name , document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Documents.Document_Name\": \"Noel CV\" },\n        { \"Documents.Document_Name\": \"King Book\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      Document_Type_Code: \"$Documents.Document_Type_Code\",\n      Document_Name: \"$Documents.Document_Name\",\n      Document_Description: \"$Documents.Document_Description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 71,
        "db_id": "allergy_1",
        "nl_queries": [
            "Which allergy has most number of students affected?",
            "Which allergy is the most common?",
            "What is the allergy affecting the greatest number of students?",
            "Which allergy is seen in the highest number of students?",
            "Identify the most prevalent allergy among students."
        ],
        "ref_sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $unwind: \"$Has_Allergy\"\n  },\n  {\n    $group: {\n      _id: \"$Allergy\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Allergy: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2602,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the number of airports whose name contain the word 'International'.",
            "How many airports' names have the word Interanation in them?",
            "How many airports have the term 'International' included in their names?",
            "Count the airports that feature the word 'International' in their names.",
            "What is the total number of airports whose names incorporate 'International'?"
        ],
        "ref_sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      name: { $regex: \"International\", $options: \"i\" }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2574,
        "db_id": "allergy_1",
        "nl_queries": [
            "How many students are age 18?",
            "How many students are 18 years old?",
            "What is the total count of students who are 18 years old?",
            "How many students are currently 18?",
            "Can you tell me the number of students who have an age of 18?"
        ],
        "ref_sql": "SELECT count(*) FROM Student WHERE age = 18",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Age: 18\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3518,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
            "What are the names and flags of ships that do not have a captain with the rank of Midshipman?",
            "List the names and flags of vessels that lack a captain holding the rank of Midshipman.",
            "Show me the names and flags of ships which don’t have any captains ranked as Midshipman.",
            "Can you provide the names and flags of ships without a captain who has the Midshipman rank?"
        ],
        "ref_sql": "SELECT name , flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')",
        "MQL": "db.Ship.find({\n  captain: {\n    $not: {\n      $elemMatch: { Rank: \"Midshipman\" }\n    }\n  }\n}, {\n  Name: 1,\n  Flag: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 37,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
            "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
            "What is the average price and case count for Zinfandel wines from the year 2009?",
            "Provide the average cases and pricing for wines made from Zinfandel grapes in 2009.",
            "Can you tell me the average cost and number of cases of 2009 Zinfandel wines?"
        ],
        "ref_sql": "SELECT AVG(Price) , AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = \"Zinfandel\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Year\": 2009,\n      \"wine.Grape\": \"Zinfandel\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      AVG_Price: { $avg: \"$wine.Price\" },\n      AVG_Cases: { $avg: \"$wine.Cases\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"AVG_Price\": 1,\n      \"AVG_Cases\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 617,
        "db_id": "voter_2",
        "nl_queries": [
            "Which major has the most students?",
            "Find the major that is studied by the largest number of students.",
            "What is the major with the highest enrollment of students?",
            "Identify the field of study that has the largest student population.",
            "Which area of study is most popular among students in terms of enrollment?"
        ],
        "ref_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Major: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 898,
        "db_id": "machine_repair",
        "nl_queries": [
            "What is the starting year of the oldest technicians?",
            "What is the starting year for the oldest technician?",
            "When did the oldest technician start working?",
            "What year did the oldest technician begin their career?",
            "Can you tell me the starting year for the technician with the highest age?"
        ],
        "ref_sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "MQL": "db.technician.aggregate([\n  {\n    $sort: {\n      Age: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Starting_Year: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1375,
        "db_id": "flight_1",
        "nl_queries": [
            "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
            "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
            "List the names of all employees certified to operate both the Boeing 737-800 and the Airbus A340-300.",
            "Can you provide the names of employees who hold certificates for both the Boeing 737-800 and the Airbus A340-300?",
            "Identify all employees who are qualified to fly both the Boeing 737-800 and the Airbus A340-300."
        ],
        "ref_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\"",
        "MQL": "db.employee.aggregate([\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"certificate.aid\",\n      foreignField: \"aid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"Boeing 737-800\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"Airbus A340-300\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$name\"\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2356,
        "db_id": "gas_company",
        "nl_queries": [
            "Show the company name and the main industry for all companies whose headquarters are not from USA.",
            "What are the companies and main industries of all companies that are not headquartered in the United States?",
            "List the names and main industries of companies whose headquarters are located outside of the USA.",
            "Provide the company names and their primary industries for all companies that are not based in the United States.",
            "Identify the companies and their main sectors that do not have their headquarters in the USA."
        ],
        "ref_sql": "SELECT company , main_industry FROM company WHERE headquarters != 'USA'",
        "MQL": "db.company.find(\n  { Headquarters: { $ne: \"USA\" } },\n  { Company: 1, Main_Industry: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 121,
        "db_id": "climbing",
        "nl_queries": [
            "How many distinct countries are the climbers from?",
            "Count the number of different countries that climbers are from.",
            "What is the total number of unique countries represented by climbers?",
            "How many unique countries do the climbers come from?",
            "Determine the count of distinct countries where the climbers originate."
        ],
        "ref_sql": "SELECT COUNT(DISTINCT Country) FROM climber",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $group: {\n      _id: \"$climber.Country\"\n    },\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT_DISTINCT_Country\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT_DISTINCT_Country\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2592,
        "db_id": "musical",
        "nl_queries": [
            "How many actors are there?",
            "Count the number of actors.",
            "What is the total number of actors available?",
            "Please provide the count of all actors.",
            "How many actors exist in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM actor",
        "MQL": "db.actor.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 832,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the prices of wines produced before the year of 2010?",
            "Return the prices of wines produced before 2010.",
            "List the prices of wines made prior to 2010.",
            "Provide the prices for wines that were produced before the year 2010.",
            "What are the prices for wines that have a production year earlier than 2010?"
        ],
        "ref_sql": "SELECT Price FROM WINE WHERE YEAR < 2010",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Year\": { $lt: 2010 }\n    }\n  },\n  {\n    $project: {\n      Price: \"$wine.Price\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2403,
        "db_id": "flight_4",
        "nl_queries": [
            "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
            "How many airports are there per city in the US ordered from most to least?",
            "What is the number of airports in each city across the United States, arranged from highest to lowest?",
            "List the number of airports for each city in the US, sorting the cities by the number of airports from most to least.",
            "Provide the counts of airports for each city in the United States, ordered in descending order based on the count."
        ],
        "ref_sql": "SELECT count(*) , city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY count(*) DESC",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      country: \"United States\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$city\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2801,
        "db_id": "university_basketball",
        "nl_queries": [
            "How many schools do not participate in the basketball match?",
            "Count the number of universities that do not participate in the baketball match.",
            "What is the total number of universities that are not involved in any basketball matches?",
            "How many colleges do not have any basketball matches listed?",
            "Find out the number of schools that lack participation in basketball games."
        ],
        "ref_sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "MQL": "db.university.aggregate([\n  {\n    $match: {\n      basketball_match: {\n        $size: 0\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3384,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the maximum price and score of wines in each year?",
            "What are the maximum price and score of wines for each year?",
            "Can you provide the highest price and score of wines for each year?",
            "What is the highest wine price and score recorded for every year?",
            "Show me the maximum price and score for wines categorized by year."
        ],
        "ref_sql": "SELECT max(Price) , max(Score) , YEAR FROM WINE GROUP BY YEAR",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: \"$wine.Year\",\n      max_Price: { $max: \"$wine.Price\" },\n      max_Score: { $max: \"$wine.Score\" }\n    }\n  },\n  {\n    $project: {\n      max_Price: 1,\n      max_Score: 1,\n      Year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3067,
        "db_id": "hr_1",
        "nl_queries": [
            "display the department id and the total salary for those departments which contains at least two employees.",
            "What are total salaries and department id for each department that has more than 2 employees?",
            "Show the department ID along with the total salary for departments that have two or more employees.",
            "List the department IDs and their corresponding total salaries for departments with a minimum of two employees.",
            "Provide the total salary and department ID for each department that employs at least two staff members."
        ],
        "ref_sql": "SELECT department_id , SUM(salary) FROM employees GROUP BY department_id HAVING count(*) >= 2",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT_ID\",\n      SUM_salary: { $sum: \"$employees.SALARY\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      DEPARTMENT_ID: \"$_id\",\n      SUM_salary: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2263,
        "db_id": "ship_1",
        "nl_queries": [
            "In which year were most of ships built?",
            "What is the year in which most ships were built?",
            "Which year saw the highest number of ships being constructed?",
            "During which year were the largest number of ships completed?",
            "In what year did the most ships enter into service?"
        ],
        "ref_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ship.aggregate([\n  {\n    $group: {\n      _id: \"$Built_Year\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Built_Year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3160,
        "db_id": "flight_1",
        "nl_queries": [
            "Show the id and salary of Mark Young.",
            "What is the id and salary of the employee named Mark Young?",
            "Retrieve the employee ID and salary for Mark Young.",
            "Can you provide the ID and salary of the employee called Mark Young?",
            "What are the employee ID and salary for Mark Young?"
        ],
        "ref_sql": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young'",
        "MQL": "db.employee.find(\n  { name: \"Mark Young\" },\n  { eid: 1, salary: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3162,
        "db_id": "flight_1",
        "nl_queries": [
            "Show ids for all employees with at least 100000 salary.",
            "What is the id of every employee who has at least a salary of 100000?",
            "List the IDs of all employees earning at least 100,000.",
            "Provide the employee IDs for those who have a salary of 100,000 or more.",
            "Retrieve the IDs of employees whose salaries are equal to or exceed 100,000."
        ],
        "ref_sql": "SELECT eid FROM Employee WHERE salary > 100000",
        "MQL": "db.employee.aggregate([\n  {\n    $match: {\n      salary: { $gte: 100000 }\n    }\n  },\n  {\n    $project: {\n      eid: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2368,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the numbers of wines for different grapes?",
            "How many wines are there for each grape?",
            "Can you tell me the count of wines available for each type of grape?",
            "What is the total number of wines classified under different grape varieties?",
            "How many different wines correspond to each grape variety?"
        ],
        "ref_sql": "SELECT count(*) , Grape FROM WINE GROUP BY Grape",
        "MQL": "db.grapes.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: \"$Grape\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grape: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 817,
        "db_id": "pilot_record",
        "nl_queries": [
            "List the names of pilots that do not have any record.",
            "Retrieve the names of pilots with no associated records.",
            "Show the names of pilots who lack any entries in the pilot record.",
            "Provide a list of pilots that have no records at all.",
            "Find pilots whose record list is empty and display their names."
        ],
        "ref_sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
        "MQL": "db.pilot.find({\n  \"pilot_record\": { $size: 0 }\n}, { \"Pilot_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3473,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the name, class and rank of all captains.",
            "What are the names, classes, and ranks of all captains?",
            "List the names, classes, and ranks of every captain.",
            "Retrieve the captain names, their classifications, and ranks for all ships.",
            "Show me the names, classes, and ranks of all ship captains."
        ],
        "ref_sql": "SELECT name , CLASS , rank FROM captain",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $project: {\n      Name: \"$captain.Name\",\n      Class: \"$captain.Class\",\n      Rank: \"$captain.Rank\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 816,
        "db_id": "pilot_record",
        "nl_queries": [
            "List the names of pilots in ascending order of rank.",
            "Provide a list of pilot names sorted by their rank in ascending order.",
            "Retrieve the names of pilots and arrange them according to their rank from lowest to highest.",
            "Show the names of all pilots ranked in ascending order.",
            "Display a list of pilot names sorted by rank in increasing order."
        ],
        "ref_sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
        "MQL": "db.pilot.find({}, { \"Pilot_name\": 1, \"_id\": 0 }).sort({ \"Rank\": 1 });\n"
    },
    {
        "record_id": 97,
        "db_id": "college_3",
        "nl_queries": [
            "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
            "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
            "List the names of courses that offer 3 credits or have 1 credit and are scheduled for 4 hours.",
            "What course names correspond to either 3 credits, or 1 credit along with 4 hours of instruction?",
            "Please provide the course names for those courses that either have 3 credits or grant 1 credit but require 4 hours of attendance."
        ],
        "ref_sql": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Course.Credits\": 3 },\n        { $and: [ { \"Course.Credits\": 1 }, { \"Course.Hours\": \"4\" } ] }\n      ]\n    }\n  },\n  {\n    $project: {\n      CName: \"$Course.CName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2888,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the number of different airports which are the destinations of the American Airlines.",
            "What is the number of different different airports that are destinations for American Airlines?",
            "How many unique airports are served as destinations by American Airlines?",
            "What is the total count of distinct airports that American Airlines flies to?",
            "Determine the number of unique destination airports for American Airlines."
        ],
        "ref_sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      name: \"American Airlines\"\n    }\n  },\n  {\n    $unwind: \"$routes\"\n  },\n  {\n    $group: {\n      _id: \"$routes.dst_apid\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_dst_apid: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_dst_apid: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2676,
        "db_id": "school_bus",
        "nl_queries": [
            "How many drivers are there?",
            "What is the total number of drivers in the database?",
            "How many drivers are recorded?",
            "Can you tell me the count of drivers available?",
            "What is the number of drivers present in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM driver",
        "MQL": "db.driver.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 54,
        "db_id": "voter_2",
        "nl_queries": [
            "Who are the advisors for students that live in a city with city code \"BAL\"?",
            "Show the advisors of the students whose city of residence has city code \"BAL\".",
            "What are the names of the advisors for students residing in the city designated by the code \"BAL\"?",
            "List the advisors associated with students who live in the area marked with city code \"BAL\".",
            "Who serves as the advisors for students from the city identified by the code \"BAL\"?"
        ],
        "ref_sql": "SELECT Advisor FROM STUDENT WHERE city_code = \"BAL\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      city_code: \"BAL\"\n    }\n  },\n  {\n    $project: {\n      Advisor: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 50,
        "db_id": "voter_2",
        "nl_queries": [
            "For each advisor, report the total number of students advised by him or her.",
            "How many students does each advisor have?",
            "Provide the count of students assigned to each advisor.",
            "List how many students are under the guidance of each advisor.",
            "What is the student count for every advisor?"
        ],
        "ref_sql": "SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Advisor: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1924,
        "db_id": "device",
        "nl_queries": [
            "Show names of shops and the carriers of devices they have in stock.",
            "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
            "List the names of shops along with the carriers of the devices that they currently stock.",
            "Provide the names of device shops and the corresponding carriers of the devices available in their inventory.",
            "What are the shop names and the device carriers they stock?"
        ],
        "ref_sql": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
        "MQL": "db.shop.aggregate([\n  {\n    $lookup: {\n      from: \"device\",\n      localField: \"stock.Device_ID\",\n      foreignField: \"Device_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Shop_Name: 1,\n      Carrier: \"$Docs1.Carrier\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1510,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the student ID and middle name for all the students with at most two enrollments.",
            "What are the student IDs and middle names of the students enrolled in at most two courses?",
            "List the middle names and student IDs of students who have been enrolled in no more than two courses.",
            "Show the student IDs and their middle names for students with at most two enrollments in courses.",
            "Identify the student IDs along with their middle names for those students who are enrolled in a maximum of two classes."
        ],
        "ref_sql": "SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2",
        "MQL": "db.Students.aggregate([\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $group: {\n      _id: \"$student_id\",\n      middle_name: { $first: \"$middle_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $lte: 2 }\n    }\n  },\n  {\n    $project: {\n      student_id: \"$_id\",\n      middle_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 923,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show student ids for all male students.",
            "What are the student ids for all male students?",
            "List the student IDs of all students who are male.",
            "What student IDs correspond to male students?",
            "Provide the student IDs for every male student."
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE Sex = 'M'",
        "MQL": "db.Student.find(\n  { \"Sex\": \"M\" },\n  { \"StuID\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 55,
        "db_id": "allergy_1",
        "nl_queries": [
            "Who is the advisor of student with ID 1004?",
            "Who advises student 1004?",
            "Who is the advisor assigned to the student with the ID of 1004?",
            "Can you tell me the name of the advisor for student ID 1004?",
            "What is the name of the advisor for the student numbered 1004?"
        ],
        "ref_sql": "SELECT Advisor FROM Student WHERE StuID = 1004",
        "MQL": "db.Student.find(\n  { StuID: 1004 },\n  { Advisor: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 596,
        "db_id": "school_player",
        "nl_queries": [
            "List the locations of schools that do not have any player.",
            "Which schools do not have any player? Give me the school locations.",
            "Identify the locations of schools that lack any enrolled players.",
            "What are the locations of schools without any players enrolled?",
            "Show me the locations of schools that do not have players associated with them."
        ],
        "ref_sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
        "MQL": "db.school.find({\n  player: {\n    $not: {\n      $elemMatch: {}\n    }\n  }\n}, {\n  Location: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2020,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the wineries that have at least four wines.",
            "Which wineries produce at least four wines?",
            "List the wineries that offer four or more types of wine.",
            "Identify wineries that have produced at least four different wines.",
            "Which wineries are known for having a minimum of four wines available?"
        ],
        "ref_sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*) >= 4",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: \"$wine.Winery\",\n      wineCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      wineCount: { $gte: 4 }\n    }\n  },\n  {\n    $project: {\n      Winery: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3148,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the document type description for document type named Film?",
            "Return the description of the document type name 'Film'.",
            "Can you provide the description for the document type labeled as Film?",
            "What is the description associated with the document type called 'Film'?",
            "Please return the details of the document type named Film."
        ],
        "ref_sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = \"Film\"",
        "MQL": "db.Ref_Document_Types.aggregate([\n  {\n    $match: {\n      Document_Type_Name: \"Film\"\n    }\n  },\n  {\n    $project: {\n      Document_Type_Description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 490,
        "db_id": "school_player",
        "nl_queries": [
            "What are the enrollments of schools whose denomination is not \"Catholic\"?",
            "List the enrollment for each school that does not have \"Catholic\" as denomination.",
            "Provide the enrollment figures for schools that do not belong to the Catholic denomination.",
            "Extract the enrollment data of schools whose denomination isn't \"Catholic.\"",
            "Show the enrollment numbers for each school that has a denomination other than \"Catholic.\""
        ],
        "ref_sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
        "MQL": "db.school.find(\n  { \"Denomination\": { $ne: \"Catholic\" } },\n  { \"Enrollment\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 2398,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
            "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?",
            "How many universities have an enrollment above 20,000 for each type of affiliation?",
            "Can you provide the counts of universities with enrollments greater than 20,000, categorized by their affiliations?",
            "Please list the various affiliations along with the number of universities that exceed an enrollment of 20,000 for each affiliation."
        ],
        "ref_sql": "SELECT count(*) , affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation",
        "MQL": "db.university.aggregate([\n  {\n    $match: {\n      Enrollment: { $gt: 20000 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Affiliation\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      Affiliation: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 886,
        "db_id": "device",
        "nl_queries": [
            "What are the names of shops in ascending order of open year?",
            "Return the names of shops, ordered by year of opening ascending.",
            "List the shop names sorted by the year they were established in ascending order.",
            "Provide the names of the shops organized by their opening years from oldest to newest.",
            "Show the names of shops arranged in order of their opening year, starting with the earliest."
        ],
        "ref_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "MQL": "db.shop.find({}, { Shop_Name: 1, _id: 0 }).sort({ Open_Year: 1 });\n"
    },
    {
        "record_id": 3117,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show ids for all documents in type CV without expense budgets.",
            "What are the ids of documents with the type code CV that do not have expenses.",
            "List the IDs of all documents categorized as type CV that lack associated expense budgets.",
            "What are the identifiers of CV-type documents that do not include any expense allocations?",
            "Provide the document IDs for those classified under the CV type without any budget-related expenses."
        ],
        "ref_sql": "SELECT document_id FROM Documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.Document_Type_Code\": \"CV\",\n      \"Documents.Documents_with_Expenses\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Document_ID: \"$Documents.Document_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2570,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "How many statements do we have?",
            "Count the number of statements.",
            "What is the total count of statements recorded?",
            "Can you provide the number of statements available?",
            "How many total statements exist in the documents?"
        ],
        "ref_sql": "SELECT count(*) FROM Statements",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Statements\"\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4194,
        "db_id": "e_learning",
        "nl_queries": [
            "List each test result and its count in descending order of count.",
            "For each distinct test result, find the number of students who got the result.",
            "Provide a list of all test outcomes along with their frequency, sorted from highest to lowest.",
            "Show the number of students for each unique test score in descending order by the count.",
            "Display each distinct result from the tests and how many students achieved that result, arranged in descending order of the result counts."
        ],
        "ref_sql": "SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "MQL": "db.Students.aggregate([\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $unwind: \"$Student_Course_Enrolment.Student_Tests_Taken\"\n  },\n  {\n    $group: {\n      _id: \"$Student_Course_Enrolment.Student_Tests_Taken.test_result\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { COUNT: -1 }\n  },\n  {\n    $project: {\n      test_result: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3253,
        "db_id": "university_basketball",
        "nl_queries": [
            "When was the school with the largest enrollment founded?",
            "Return the founded year for the school with the largest enrollment.",
            "What year was the university with the highest enrollment established?",
            "Provide the founding year for the university that has the most students enrolled.",
            "Can you tell me when the university with the largest number of enrollees was founded?"
        ],
        "ref_sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "MQL": "db.university.aggregate([\n  {\n    $sort: { \"Enrollment\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Founded: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 514,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show first name and last name for all students.",
            "What are the full names of all students",
            "Provide the first and last names of every student enrolled.",
            "List out the complete names of all students.",
            "Display the first name together with the last name for all students in the database."
        ],
        "ref_sql": "SELECT Fname , Lname FROM Student",
        "MQL": "db.Student.find({}, { Fname: 1, LName: 1, _id: 0 });\n"
    },
    {
        "record_id": 14,
        "db_id": "university_basketball",
        "nl_queries": [
            "List all information regarding the basketball match.",
            "What is all the information about the basketball match?",
            "Provide all details about the basketball matches for the teams.",
            "Show me the complete information related to the basketball matches.",
            "Can you list every detail concerning the basketball match statistics?"
        ],
        "ref_sql": "SELECT * FROM basketball_match",
        "MQL": "db.university.aggregate([\n  {\n    $unwind: \"$basketball_match\"\n  },\n  {\n    $project: {\n      Team_ID: \"$basketball_match.Team_ID\",\n      School_ID: \"$basketball_match.School_ID\",\n      Team_Name: \"$basketball_match.Team_Name\",\n      ACC_Regular_Season: \"$basketball_match.ACC_Regular_Season\",\n      ACC_Percent: \"$basketball_match.ACC_Percent\",\n      ACC_Home: \"$basketball_match.ACC_Home\",\n      ACC_Road: \"$basketball_match.ACC_Road\",\n      All_Games: \"$basketball_match.All_Games\",\n      All_Games_Percent: \"$basketball_match.All_Games_Percent\",\n      All_Home: \"$basketball_match.All_Home\",\n      All_Road: \"$basketball_match.All_Road\",\n      All_Neutral: \"$basketball_match.All_Neutral\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2211,
        "db_id": "flight_1",
        "nl_queries": [
            "What is the average price for flights from Los Angeles to Honolulu.",
            "What is the average price for flights from LA to Honolulu?",
            "What is the average cost of flights departing from Los Angeles and arriving in Honolulu?",
            "Can you tell me the average fare for flights from LA to Honolulu?",
            "How much does a flight from Los Angeles to Honolulu typically cost on average?"
        ],
        "ref_sql": "SELECT avg(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.origin\": \"Los Angeles\",\n      \"flight.destination\": \"Honolulu\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_price: {\n        $avg: \"$flight.price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2054,
        "db_id": "flight_1",
        "nl_queries": [
            "Show the id and name of the aircraft with the maximum distance.",
            "What is the id and name of the aircraft that can cover the maximum distance?",
            "Identify the aircraft ID and name for the one that has the greatest distance range.",
            "What are the ID and name of the aircraft with the longest flying distance?",
            "Please provide the ID and name of the aircraft capable of the maximum travel distance."
        ],
        "ref_sql": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "MQL": "db.aircraft.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_distance: { $max: \"$distance\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"max_distance\",\n      foreignField: \"distance\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      aid: \"$Docs1.aid\",\n      name: \"$Docs1.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 96,
        "db_id": "college_3",
        "nl_queries": [
            "List all names of courses with 1 credit?",
            "What are the names of courses with 1 credit?",
            "Show me all course names that are worth 1 credit.",
            "Can you provide the names of all courses that have 1 credit?",
            "Identify the names of courses that offer 1 credit."
        ],
        "ref_sql": "SELECT CName FROM COURSE WHERE Credits = 1",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $match: {\n      \"Course.Credits\": 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      CName: \"$Course.CName\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2941,
        "db_id": "flight_4",
        "nl_queries": [
            "List all countries and their number of airlines in the descending order of number of airlines.",
            "How many airlines operate out of each country in descending order?",
            "Provide a list of countries and the corresponding number of airlines, sorted from the highest to the lowest count.",
            "Show the number of airlines available in each country, ordered by the total count in descending order.",
            "Can you list every country along with its airline count, arranged in descending order by the number of airlines?"
        ],
        "ref_sql": "SELECT country , count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",
        "MQL": "db.airlines.aggregate([\n  {\n    $group: {\n      _id: \"$country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $project: {\n      country: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3953,
        "db_id": "e_learning",
        "nl_queries": [
            "List all the subject names.",
            "What are the names of all the subjects.",
            "Retrieve the names of all available subjects.",
            "Show me the list of subject names.",
            "Provide a compilation of all subject names."
        ],
        "ref_sql": "SELECT subject_name FROM SUBJECTS",
        "MQL": "db.Subjects.find({}, { subject_name: 1, _id: 0 });\n"
    },
    {
        "record_id": 2215,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the average price of wines that are not produced from Sonoma county.",
            "What is the average price for wines not produced in Sonoma county?",
            "Calculate the average cost of wines produced outside of Sonoma County.",
            "What is the mean price of wines that do not come from Sonoma County?",
            "Determine the average pricing of wines that are not sourced from Sonoma County."
        ],
        "ref_sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: { $ne: \"Sonoma\" }\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_price: { $avg: \"$wine.Price\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3207,
        "db_id": "hr_1",
        "nl_queries": [
            "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
            "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
            "Provide the first and last names, hire date, salary, and department ID of employees whose first names do not include the letter \"M\", sorted by department ID in ascending order.",
            "List the full names, hire dates, salaries, and department numbers for employees that do not have \"M\" in their first names, in ascending order of their department IDs.",
            "Retrieve the first and last names, along with hire date, salary, and department ID for those employees whose first name lacks the letter \"M\", arranged in ascending order by department ID."
        ],
        "ref_sql": "SELECT first_name , last_name , hire_date , salary , department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.FIRST_NAME\": {\n        $not: {\n          $regex: \"M\",\n          $options: \"i\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      SALARY: \"$employees.SALARY\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      DEPARTMENT_ID: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3291,
        "db_id": "school_bus",
        "nl_queries": [
            "Show home city where at least two drivers older than 40 are from.",
            "List the home cities that have two or more drivers above the age of 40.",
            "Identify the cities where at least two drivers aged over 40 reside.",
            "Find home cities with a minimum of two drivers who are older than 40 years.",
            "Display the cities where there are at least two drivers who are more than 40 years old."
        ],
        "ref_sql": "SELECT home_city FROM driver WHERE age > 40 GROUP BY home_city HAVING count(*) >= 2",
        "MQL": "db.driver.aggregate([\n  { \n    $match: { \"Age\": { $gt: 40 } } \n  },\n  {\n    $group: {\n      _id: \"$Home_city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: { count: { $gte: 2 } }\n  },\n  {\n    $project: { \"_id\": 0, \"Home_city\": \"$_id\" }\n  }\n]);\n"
    },
    {
        "record_id": 1581,
        "db_id": "climbing",
        "nl_queries": [
            "Show the height of the mountain climbed by the climber with the maximum points.",
            "What is the height of the mountain climbined by the climbing who had the most points?",
            "What is the height of the mountain ascended by the climber with the highest points?",
            "Provide the height of the mountain scaled by the climber who earned the most points.",
            "Tell me the height of the mountain that the climber with the greatest points climbed."
        ],
        "ref_sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_Points: { $max: \"$climber.Points\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"mountain\",\n      localField: \"max_Points\",\n      foreignField: \"climber.Points\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Height: \"$Docs1.Height\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1996,
        "db_id": "machine_repair",
        "nl_queries": [
            "Show the team that have at least two technicians.",
            "What is the team with at least 2 technicians?",
            "List the teams that comprise at least two technicians.",
            "Identify teams that have a minimum of two technicians.",
            "Which teams feature two or more technicians in their group?"
        ],
        "ref_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2",
        "MQL": "db.technician.aggregate([\n  {\n    $group: {\n      _id: \"$Team\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Team: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3836,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show project ids and the number of documents in each project.",
            "How many documents correspond with each project id?",
            "List the project IDs along with the total number of documents associated with each project.",
            "What is the count of documents for each project ID?",
            "Provide the number of documents linked to every project ID."
        ],
        "ref_sql": "SELECT project_id , count(*) FROM Documents GROUP BY project_id",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Project_ID\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Project_ID: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1800,
        "db_id": "cinema",
        "nl_queries": [
            "What is total number of show times per dat for each cinema?",
            "How many total show times does each cinema have per day?",
            "What is the daily total of show times for every cinema?",
            "Can you provide the total number of daily show times for each cinema?",
            "What are the total show times per day across different cinemas?"
        ],
        "ref_sql": "SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id",
        "MQL": "db.cinema.aggregate([\n  { $unwind: \"$schedule\" },\n  {\n    $group: {\n      _id: \"$Name\",\n      sum_Show_times_per_day: { $sum: \"$schedule.Show_times_per_day\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\",\n      \"sum_Show_times_per_day\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1177,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the names of the courses that have exactly 1 student enrollment?",
            "Find the names of the courses that have just one student enrollment.",
            "List the names of the courses which have only one student enrolled.",
            "What courses have just a single enrollment by a student?",
            "Show me the course names that are registered by exactly one student."
        ],
        "ref_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $project: {\n      course_name: \"$Courses.course_name\",\n      count_Student_Course_Enrolment: {\n        $size: \"$Courses.Student_Course_Enrolment\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Student_Course_Enrolment: 1\n    }\n  },\n  {\n    $project: {\n      course_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 890,
        "db_id": "device",
        "nl_queries": [
            "Please show different software platforms and the corresponding number of devices using each.",
            "What are the different software platforms for devices, and how many devices have each?",
            "List the various software platforms along with how many devices are associated with each one.",
            "Identify the unique software platforms for the devices and the number of devices that use each platform.",
            "Can you provide the different software platforms and the total count of devices utilizing each platform?"
        ],
        "ref_sql": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform",
        "MQL": "db.device.aggregate([\n  {\n    $group: {\n      _id: \"$Software_Platform\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Software_Platform: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2057,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all allergy types and the number of allergies in each type.",
            "What are the allergy types and how many allergies correspond to each one?",
            "List every type of allergy along with the number of allergies for each type.",
            "Can you provide the different allergy types and the count of allergies associated with each?",
            "Identify the various allergy types and indicate how many allergies fall under each category."
        ],
        "ref_sql": "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $group: {\n      _id: \"$AllergyType\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      AllergyType: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1098,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show white percentages of cities and the crime rates of counties they are in.",
            "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
            "Present the percentage of white residents in various cities alongside the crime rates of their counties.",
            "What are the white population percentages for cities, together with the crime rates of their corresponding counties?",
            "Display the white demographic figures for cities along with the related crime rates of the counties they belong to."
        ],
        "ref_sql": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $project: {\n      White: \"$city.White\",\n      Crime_rate: \"$Crime_rate\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2361,
        "db_id": "voter_1",
        "nl_queries": [
            "List the contestant numbers and names, ordered by contestant name descending.",
            "Provide the list of contestant names and their corresponding numbers, arranged in descending order by name.",
            "Show the contestant numbers alongside their names, sorted from highest to lowest by contestant name.",
            "Retrieve contestant names and numbers, listed in reverse alphabetical order of names.",
            "Gather the contestant numbers and names, ordered descending with respect to contestant names."
        ],
        "ref_sql": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
        "MQL": "db.CONTESTANTS.find({}, { \"contestant_number\": 1, \"contestant_name\": 1, \"_id\": 0 }).sort({ \"contestant_name\": -1 });\n"
    },
    {
        "record_id": 1266,
        "db_id": "hr_1",
        "nl_queries": [
            "What is the first name and job id for all employees in the Finance department?",
            "Give the first name and job id for all employees in the Finance department.",
            "Can you provide the first names and job IDs of all staff members in the Finance department?",
            "Retrieve the first names and job IDs for every employee associated with the Finance department.",
            "What are the first names and job IDs of employees working within the Finance division?"
        ],
        "ref_sql": "SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'",
        "MQL": "db.departments.aggregate([\n  {\n    $match: {\n      DEPARTMENT_NAME: \"Finance\"\n    }\n  },\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      JOB_ID: \"$employees.JOB_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2314,
        "db_id": "flight_4",
        "nl_queries": [
            "List the cities which have more than one airport and number of airports.",
            "What are the names of all cities with more than one airport and how many airports do they have?",
            "Identify the cities that contain more than one airport along with their total number of airports.",
            "Which cities have multiple airports, and what is the airport count for each of those cities?",
            "Provide a list of cities with more than one airport, including the number of airports in each city."
        ],
        "ref_sql": "SELECT city , count(*) FROM airports GROUP BY city HAVING count(*) > 1",
        "MQL": "db.airports.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2453,
        "db_id": "flight_1",
        "nl_queries": [
            "How many aircrafts do we have?",
            "How many aircrafts exist in the database?",
            "What is the total number of aircraft in our inventory?",
            "Can you tell me how many aircraft are in the database?",
            "How many aircraft do we have stored in our records?"
        ],
        "ref_sql": "SELECT count(*) FROM Aircraft",
        "MQL": "db.aircraft.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 698,
        "db_id": "journal_committee",
        "nl_queries": [
            "List the names of editors who are older than 25.",
            "Retrieve the names of editors aged above 25.",
            "Find the names of all editors who are more than 25 years old.",
            "Provide a list of editors whose ages exceed 25.",
            "Show me the names of editors that are older than 25 years."
        ],
        "ref_sql": "SELECT Name FROM editor WHERE Age > 25",
        "MQL": "db.editor.find({\n  \"Age\": { $gt: 25 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 484,
        "db_id": "musical",
        "nl_queries": [
            "What is the duration of the oldest actor?",
            "Return the duration of the actor with the greatest age.",
            "What is the length of time the oldest actor has performed?",
            "Give me the duration associated with the actor who is the oldest.",
            "Can you provide the performance duration of the actor with the highest age?"
        ],
        "ref_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "MQL": "db.actor.aggregate([\n  {\n    $sort: { age: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Duration: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 888,
        "db_id": "device",
        "nl_queries": [
            "List the names of shops that have no devices in stock.",
            "What are the names of shops that do not have any devices in stock?",
            "Identify the names of the shops that currently do not carry any devices in their inventory.",
            "Provide a list of shop names that have an empty stock of devices.",
            "Can you tell me which shops have no devices available in their stock?"
        ],
        "ref_sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "MQL": "db.shop.aggregate([\n  {\n    $lookup: {\n      from: \"device\",\n      localField: \"Shop_ID\",\n      foreignField: \"stock.Shop_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      Shop_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 527,
        "db_id": "wine_1",
        "nl_queries": [
            "List the grapes and appelations of all wines.",
            "What are the grapes and appelations of each wine?",
            "Provide a list of all grapes along with their associated appellations for each wine.",
            "Show the grape varieties and their corresponding appellations for every wine in the dataset.",
            "Can you list the grape types and the appellations associated with each wine?"
        ],
        "ref_sql": "SELECT Grape , Appelation FROM WINE",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $project: {\n      Grape: \"$wine.Grape\",\n      Appelation: \"$Appelation\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3212,
        "db_id": "hr_1",
        "nl_queries": [
            "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
            "Return the full names and salaries for employees with first names that end with the letter m.",
            "List the first and last names along with salaries of employees whose first names conclude with the letter m.",
            "Retrieve the names and salaries of employees with first names that finish with the letter m.",
            "Show the salaries along with the first and last names of employees whose first names end in the letter m."
        ],
        "ref_sql": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.FIRST_NAME\": {\n        $regex: \"m$\",\n        $options: \"i\"  \n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      SALARY: \"$employees.SALARY\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1703,
        "db_id": "voter_1",
        "nl_queries": [
            "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "Can you provide the dates, states, and phone numbers of the votes cast for the contestant 'Tabatha Gehling'?",
            "List the creation dates, states, and phone numbers for the votes that supported 'Tabatha Gehling'.",
            "What are the phone numbers, states, and created timestamps of votes for 'Tabatha Gehling'?",
            "Please show the voting dates, respective states, and phone contacts for votes made for the contestant named 'Tabatha Gehling'."
        ],
        "ref_sql": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
        "MQL": "db.CONTESTANTS.aggregate([\n  { $match: { \"contestant_name\": \"Tabatha Gehling\" } },\n  { $unwind: \"$VOTES\" },\n  { $project: { \"created\": \"$VOTES.created\", \"state\": \"$VOTES.state\", \"phone_number\": \"$VOTES.phone_number\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 925,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all student ids who are older than 20.",
            "What are the student ids for students over 20 years old?",
            "List all student IDs for those who are above 20 years of age.",
            "Identify the student IDs of individuals older than 20.",
            "Retrieve the IDs of students who are 21 years old and above."
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE age > 20",
        "MQL": "db.Student.find(\n  {\n    Age: { $gt: 20 }\n  },\n  {\n    StuID: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 75,
        "db_id": "wine_1",
        "nl_queries": [
            "List the area and county of all appelations.",
            "What are the areas and counties for all appelations?",
            "Provide the area and county information for each appelation.",
            "Can you show me the counties and areas associated with all appelations?",
            "What are the areas and counties listed for every appelation?"
        ],
        "ref_sql": "SELECT Area , County FROM APPELLATIONS",
        "MQL": "db.appellations.aggregate([\n  {\n    $project: {\n      Area: 1,\n      County: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 344,
        "db_id": "journal_committee",
        "nl_queries": [
            "Show the distinct themes of journals.",
            "Retrieve the unique themes found in the journals.",
            "Provide a list of all the distinct journal themes.",
            "What are the different themes available in the journal collection?",
            "List the unique themes of all journals published."
        ],
        "ref_sql": "SELECT DISTINCT Theme FROM journal",
        "MQL": "db.journal.aggregate([\n  {\n    $group: {\n      _id: \"$Theme\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Theme: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1916,
        "db_id": "machine_repair",
        "nl_queries": [
            "Show names of technicians who are assigned to repair machines with value point more than 70.",
            "What are the names of the technicians that are assigned to repair machines with more point values than 70?",
            "List the names of technicians responsible for repairing machines that have value points exceeding 70.",
            "Identify the technicians assigned to the maintenance of machines with value points above 70.",
            "Provide the names of technicians who work on machines that hold more than 70 value points."
        ],
        "ref_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70",
        "MQL": "db.technician.aggregate([\n  {\n    $lookup: {\n      from: \"repair\",\n      localField: \"repair_assignment.repair_ID\",\n      foreignField: \"repair_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"machine\",\n      localField: \"repair_assignment.Machine_ID\",\n      foreignField: \"Machine_ID\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $match: {\n      \"Docs2.value_points\": { $gt: 70 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 571,
        "db_id": "college_3",
        "nl_queries": [
            "Find the last name of female (sex is F) students in the descending order of age.",
            "What are the last names of female students, ordered by age descending?",
            "Retrieve the surnames of female students, sorted from oldest to youngest.",
            "List the last names of female students in order of descending age.",
            "What last names do female students have, arranged by their age from highest to lowest?"
        ],
        "ref_sql": "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC",
        "MQL": "db.Student.find(\n  { \"Sex\": \"F\" },\n  { \"LName\": 1, \"_id\": 0 }\n).sort(\n  { \"Age\": -1 }\n);\n"
    },
    {
        "record_id": 1050,
        "db_id": "journal_committee",
        "nl_queries": [
            "Show the names of editors that are on at least two journal committees.",
            "List the names of editors who serve on two or more journal committees.",
            "Retrieve the names of any editors involved with at least two journal committees.",
            "Can you provide the names of editors that are part of a minimum of two journal committees?",
            "Identify editors who participate in two or more journal committees and show their names."
        ],
        "ref_sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2",
        "MQL": "db.editor.aggregate([\n  \n  { $unwind: \"$journal_committee\" },\n  \n  \n  {\n    $group: {\n      _id: \"$Editor_ID\",\n      journalCount: { $sum: 1 }\n    }\n  },\n  \n  \n  {\n    $match: {\n      journalCount: { $gte: 2 }\n    }\n  },\n  \n  \n  {\n    $lookup: {\n      from: \"editor\",\n      localField: \"_id\",\n      foreignField: \"Editor_ID\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 476,
        "db_id": "school_player",
        "nl_queries": [
            "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
            "What are the denominations used by both schools founded before 1890 and schools founded after 1900?",
            "List the denominations that are common to schools established prior to 1890 and those established after 1900.",
            "Identify the denominations associated with schools that were founded both before the year 1890 and after 1900.",
            "What denominations are used by schools founded in the period before 1890 and also by schools founded after 1900?"
        ],
        "ref_sql": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
        "MQL": "db.school.aggregate([\n  {\n    $match: {\n      $or: [\n        { Founded: { $lt: 1890 } },\n        { Founded: { $gt: 1900 } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Denomination\",\n      foundedBefore1890: {\n        $addToSet: {\n          $cond: [{ $lt: [\"$Founded\", 1890] }, \"$Founded\", null]\n        }\n      },\n      foundedAfter1900: {\n        $addToSet: {\n          $cond: [{ $gt: [\"$Founded\", 1900] }, \"$Founded\", null]\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Denomination: \"$_id\",\n      foundedBefore1890: {\n        $filter: {\n          input: \"$foundedBefore1890\",\n          as: \"year\",\n          cond: { $ne: [\"$$year\", null] }\n        }\n      },\n      foundedAfter1900: {\n        $filter: {\n          input: \"$foundedAfter1900\",\n          as: \"year\",\n          cond: { $ne: [\"$$year\", null] }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { \"foundedBefore1890.0\": { $exists: true } },\n        { \"foundedAfter1900.0\": { $exists: true } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Denomination: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1906,
        "db_id": "machine_repair",
        "nl_queries": [
            "Show names of technicians and series of machines they are assigned to repair.",
            "What are the names of technicians and the machine series that they repair?",
            "List the names of the technicians along with the series of machines they are tasked with repairing.",
            "Can you provide the names of the technicians and the respective series of machines under their repair assignments?",
            "What names correspond to technicians, and which machine series do they handle for repairs?"
        ],
        "ref_sql": "SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID",
        "MQL": "db.technician.aggregate([\n  {\n    $unwind: \"$repair_assignment\"\n  },\n  {\n    $lookup: {\n      from: \"machine\",\n      localField: \"repair_assignment.Machine_ID\",\n      foreignField: \"Machine_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: 1,\n      Machine_series: \"$Docs1.Machine_series\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2354,
        "db_id": "gas_company",
        "nl_queries": [
            "Show all company names and headquarters in the descending order of market value.",
            "What are the names and headquarters of all companies ordered by descending market value?",
            "List all company names along with their headquarters, sorted by market value from highest to lowest.",
            "Provide the names and headquarters of every company, arranged in order of decreasing market value.",
            "Retrieve the names and locations of all companies, organized in descending order based on their market value."
        ],
        "ref_sql": "SELECT company , headquarters FROM company ORDER BY market_value DESC",
        "MQL": "db.company.find({}, { Company: 1, Headquarters: 1, _id: 0 }).sort({ Market_Value: -1 });\n"
    },
    {
        "record_id": 1022,
        "db_id": "climbing",
        "nl_queries": [
            "Show the names of climbers and the heights of mountains they climb.",
            "What are the names of climbers and the corresponding heights of the mountains that they climb?",
            "List the climbers’ names along with the heights of the mountains they have ascended.",
            "Provide the names of climbers together with the heights of the mountains they have scaled.",
            "Display the names of the climbers along with the respective heights of the mountains that they climbed."
        ],
        "ref_sql": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $project: {\n      Name: \"$climber.Name\",\n      Height: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1002,
        "db_id": "college_3",
        "nl_queries": [
            "Find the full names of faculties who are members of department with department number 520.",
            "What are the full names of faculty members who are a part of department 520?",
            "List the complete names of faculty who are affiliated with the department numbered 520.",
            "Retrieve the full names of faculty members that belong to the department with ID 520.",
            "Can you provide the full names of the faculty associated with department number 520?"
        ],
        "ref_sql": "SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520",
        "MQL": "db.Faculty.find({\n  \"Member_of.DNO\": 520\n}, {\n  \"Fname\": 1,\n  \"Lname\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 1623,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
            "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
            "List the wines priced under 50 that are associated with appellations in Monterey county.",
            "What are the names of wines that cost less than 50 and originate from appellations in Monterey county?",
            "Provide the names of wines available for under 50 that are linked to the appellations of Monterey county."
        ],
        "ref_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Price\": { $lt: 50 },\n      \"County\": \"Monterey\"\n    }\n  },\n  {\n    $project: {\n      Name: \"$wine.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2058,
        "db_id": "allergy_1",
        "nl_queries": [
            "Which allergy type has least number of allergies?",
            "Which allergy type is the least common?",
            "What is the allergy type with the fewest cases reported?",
            "Which allergy type occurs the least among the students?",
            "Identify the allergy type that is the least frequently encountered."
        ],
        "ref_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $group: {\n      _id: \"$AllergyType\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      AllergyType: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 20,
        "db_id": "hr_1",
        "nl_queries": [
            "Return all the information for all employees without any department number.",
            "What are all the employees without a department number?",
            "Fetch details for employees who do not have an assigned department.",
            "List all employees that are not associated with any department number.",
            "Provide information on all employees lacking a department ID."
        ],
        "ref_sql": "SELECT * FROM employees WHERE department_id = \"null\"",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.DEPARTMENT_ID\": { $exists: false }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      EMAIL: \"$employees.EMAIL\",\n      PHONE_NUMBER: \"$employees.PHONE_NUMBER\",\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      JOB_ID: \"$employees.JOB_ID\",\n      SALARY: \"$employees.SALARY\",\n      COMMISSION_PCT: \"$employees.COMMISSION_PCT\",\n      MANAGER_ID: \"$employees.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3208,
        "db_id": "hr_1",
        "nl_queries": [
            "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.",
            "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
            "Retrieve the full names and hire dates of all employees, apart from Clara, who work in Clara's department.",
            "List the names and hiring dates of employees sharing the same department as Clara, excluding her from the results.",
            "What are the first and last names along with hire dates of the employees in the same department as Clara, except for Clara herself?"
        ],
        "ref_sql": "SELECT first_name , last_name , hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.FIRST_NAME\": \"Clara\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"DEPARTMENT_ID\",\n      foreignField: \"DEPARTMENT_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.employees\"\n  },\n  {\n    $match: {\n      \"Docs1.employees.FIRST_NAME\": { $ne: \"Clara\" }\n    }\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$Docs1.employees.FIRST_NAME\",\n      LAST_NAME: \"$Docs1.employees.LAST_NAME\",\n      HIRE_DATE: \"$Docs1.employees.HIRE_DATE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2254,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the budget type code with most number of documents.",
            "Give the budget type code that is most common among documents with expenses.",
            "Which budget type code appears most frequently in documents that have expenses?",
            "Identify the budget type code that is represented the most among expense-related documents.",
            "What is the most prevalent budget type code found in documents containing expenses?"
        ],
        "ref_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Documents_with_Expenses\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.Documents_with_Expenses.Budget_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Budget_Type_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1614,
        "db_id": "journal_committee",
        "nl_queries": [
            "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
            "Provide the names and ages of the editors along with the corresponding journal themes they are involved with, sorted by theme in alphabetical order.",
            "List the editor names, their ages, and the themes of the journals for which they are committee members, arranged in ascending order by theme.",
            "Display the names and ages of editors together with the themes of the journals they work on, ordered alphabetically by theme.",
            "Retrieve and show the editor names and ages alongside the journal themes they serve, organized in alphabetical order based on the theme."
        ],
        "ref_sql": "SELECT T2.Name , T2.age , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC",
        "MQL": "db.editor.aggregate([\n  {\n    $lookup: {\n      from: \"journal\",\n      localField: \"Editor_ID\",\n      foreignField: \"journal_committee.Editor_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      Age: 1,\n      Theme: \"$Docs1.Theme\"\n    }\n  },\n  {\n    $sort: {\n      Theme: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3416,
        "db_id": "college_3",
        "nl_queries": [
            "Find the max and min grade point for all letter grade.",
            "What are the maximum and minumum grade points?",
            "What is the range of grade points, including the highest and lowest values?",
            "Can you provide the maximum and minimum grade points from the letter grades?",
            "Identify the highest and lowest grade points recorded for letter grades."
        ],
        "ref_sql": "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION",
        "MQL": "db.Gradeconversion.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_gradepoint: { $max: \"$gradepoint\" },\n      min_gradepoint: { $min: \"$gradepoint\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_gradepoint: 1,\n      min_gradepoint: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1990,
        "db_id": "machine_repair",
        "nl_queries": [
            "What are the team and starting year of technicians?",
            "What is the team and starting year for each technician?",
            "Can you provide the team and starting year associated with each technician?",
            "What team and starting year does each technician belong to?",
            "List the team and starting year for every technician in the database."
        ],
        "ref_sql": "SELECT Team , Starting_Year FROM technician",
        "MQL": "db.technician.find({}, { Team: 1, Starting_Year: 1, _id: 0 });\n"
    },
    {
        "record_id": 2767,
        "db_id": "flight_4",
        "nl_queries": [
            "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
            "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
            "How many routes does American Airlines operate to airports located in Italy?",
            "Count the number of flight paths that American Airlines has to Italy.",
            "What is the total number of routes from American Airlines that reach Italian airports?"
        ],
        "ref_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      name: \"American Airlines\"\n    }\n  },\n  {\n    $unwind: \"$routes\"\n  },\n  {\n    $lookup: {\n      from: \"airports\",\n      localField: \"routes.dst_apid\",\n      foreignField: \"apid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.country\": \"Italy\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 882,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "List all statement ids and statement details.",
            "What are the ids and details of all statements?",
            "Provide a list of all statement IDs along with their details.",
            "Can you give me the IDs and details for each statement available?",
            "What are the details and IDs of every statement in the records?"
        ],
        "ref_sql": "SELECT STATEMENT_ID , statement_details FROM Statements",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Statements\"\n  },\n  {\n    $project: {\n      Statement_ID: \"$Documents.Statements.Statement_ID\",\n      Statement_Details: \"$Documents.Statements.Statement_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3185,
        "db_id": "hr_1",
        "nl_queries": [
            "display the ID for those employees who did two or more jobs in the past.",
            "What are the employee ids for employees who have held two or more jobs?",
            "What are the employee ids for those who had two or more jobs.",
            "Provide the employee IDs of individuals who have previously occupied two or more job positions.",
            "List the IDs of employees with a history of holding at least two jobs."
        ],
        "ref_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $unwind: \"$employees.job_history\"\n  },\n  {\n    $group: {\n      _id: \"$employees.EMPLOYEE_ID\",\n      jobCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      jobCount: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 455,
        "db_id": "college_3",
        "nl_queries": [
            "What are the phones of departments in Room 268?",
            "Give the phones for departments in room 268.",
            "What are the contact numbers for the departments located in Room 268?",
            "Show me the department phone numbers for those in room 268.",
            "Can you provide the telephone numbers of the departments situated in Room 268?"
        ],
        "ref_sql": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
        "MQL": "db.Department.aggregate([\n  {\n    $match: {\n      Room: \"268\"\n    }\n  },\n  {\n    $project: {\n      DPhone: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2331,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all cities and corresponding number of students.",
            "How many students live in each city?",
            "List all cities along with the total number of students in each.",
            "Provide the count of students residing in every city.",
            "Display each city and how many students live there."
        ],
        "ref_sql": "SELECT city_code , count(*) FROM Student GROUP BY city_code",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$city_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      city_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2184,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the average elevation of all airports for each country.",
            "For each country, what is the average elevation of that country's airports?",
            "What is the average elevation of airports for each country?",
            "Calculate the mean elevation of airports grouped by their respective countries.",
            "For every country, what is the average elevation of the airports located within it?"
        ],
        "ref_sql": "SELECT avg(elevation) , country FROM airports GROUP BY country",
        "MQL": "db.airports.aggregate([\n  {\n    $group: {\n      _id: \"$country\",\n      avg_elevation: { $avg: \"$elevation\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      country: \"$_id\",\n      avg_elevation: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3372,
        "db_id": "voter_2",
        "nl_queries": [
            "Find the maximum age of all the students.",
            "What is the oldest age among the students?",
            "What is the highest age recorded among all students?",
            "Determine the maximum age of students in the database.",
            "Identify the oldest student age present in the records."
        ],
        "ref_sql": "SELECT max(Age) FROM STUDENT",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Age: { $max: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2359,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Which complaint status has more than 3 records on file?",
            "Return complaint status codes have more than 3 corresponding complaints?",
            "What are the complaint status codes that exceed three recorded complaints?",
            "Identify the complaint statuses with more than three associated records.",
            "List the complaint status codes that have a record of over three complaints."
        ],
        "ref_sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Complaints\"\n  },\n  {\n    $group: {\n      _id: \"$Complaints.complaint_status_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 3 }\n    }\n  },\n  {\n    $project: {\n      complaint_status_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1805,
        "db_id": "flight_1",
        "nl_queries": [
            "What is the aircraft name for the flight with number 99",
            "What is the name of the aircraft that was on flight number 99?",
            "Can you tell me the name of the aircraft used for flight number 99?",
            "What is the name of the airplane assigned to flight number 99?",
            "Identify the aircraft name associated with flight 99."
        ],
        "ref_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99",
        "MQL": "db.aircraft.find(\n  { \"flight.flno\": 99 },\n  { \"name\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 2571,
        "db_id": "allergy_1",
        "nl_queries": [
            "How many students are there?",
            "What is the total number of students?",
            "What is the headcount of students enrolled?",
            "Can you provide the total count of students?",
            "How many students are currently registered in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM Student",
        "MQL": "db.Student.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1894,
        "db_id": "college_3",
        "nl_queries": [
            "Find the student first and last names and grade points of all enrollments.",
            "What are the full names and gradepoints for all enrollments?",
            "List the first and last names of students along with their corresponding grade points for every enrollment.",
            "Provide the full names and grade points associated with all student enrollments.",
            "Show me the first and last names of all students along with their grade points for each enrollment."
        ],
        "ref_sql": "SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$Enrolled_in\"\n  },\n  {\n    $lookup: {\n      from: \"Gradeconversion\",\n      localField: \"Enrolled_in.Grade\",\n      foreignField: \"lettergrade\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Fname: 1,\n      LName: 1,\n      gradepoint: \"$Docs1.gradepoint\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3159,
        "db_id": "flight_1",
        "nl_queries": [
            "Show the id and name of the employee with maximum salary.",
            "What is the id and name of the employee with the highest salary?",
            "Retrieve the ID and name of the employee earning the highest salary.",
            "Who is the employee with the top salary, and what are their ID and name?",
            "Find the employee with the maximum salary and provide their ID and name."
        ],
        "ref_sql": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1",
        "MQL": "db.employee.aggregate([\n  {\n    $sort: { salary: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      eid: 1,\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 982,
        "db_id": "wine_1",
        "nl_queries": [
            "Find the county where produces the most number of wines with score higher than 90.",
            "What is the county that produces the most wines scoring higher than 90?",
            "Identify the county with the highest production of wines that have scores exceeding 90.",
            "Which county has the largest number of wines rated above 90?",
            "Determine the county that produces the most wines with a score greater than 90."
        ],
        "ref_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Score\": { $gt: 90 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$County\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      County: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2598,
        "db_id": "flight_4",
        "nl_queries": [
            "How many airlines does Russia has?",
            "What is the number of airlines based in Russia?",
            "What is the total number of airlines operating in Russia?",
            "How many different airlines are registered in Russia?",
            "Can you tell me the count of airlines that are located in Russia?"
        ],
        "ref_sql": "SELECT count(*) FROM airlines WHERE country = 'Russia'",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      country: \"Russia\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3211,
        "db_id": "hr_1",
        "nl_queries": [
            "display the full name (first and last name), and salary of those employees who working in any department located in London.",
            "What are full names and salaries of employees working in the city of London?",
            "List the first and last names along with the salaries of employees employed in departments situated in London.",
            "Show me the full names and salary information of staff members who are working in any department found in the city of London.",
            "Provide the first name, last name, and salary details for employees who are in departments located in London."
        ],
        "ref_sql": "SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'",
        "MQL": "db.departments.aggregate([\n  {\n    $lookup: {\n      from: \"regions\",\n      let: { location_id: \"$LOCATION_ID\" },\n      pipeline: [\n        { $unwind: \"$countries\" },\n        { $unwind: \"$countries.locations\" },\n        {\n          $match: {\n            $expr: {\n              $and: [\n                { $eq: [\"$countries.locations.LOCATION_ID\", \"$$location_id\"] },\n                { $eq: [\"$countries.locations.CITY\", \"London\"] }\n              ]\n            }\n          }\n        },\n        { $project: { _id: 0, \"countries.locations.CITY\": 1 } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: { \"Docs1\": { $ne: [] } }\n  },\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      SALARY: \"$employees.SALARY\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1691,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the budget type code and description and the corresponding document id.",
            "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
            "Provide the budget type codes, their descriptions, and the document IDs associated with documents that include expenses.",
            "List the document IDs along with their respective budget type codes and descriptions for documents containing expenses.",
            "Display the budget type code, corresponding description, and the document ID for each document that has expenses."
        ],
        "ref_sql": "SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Documents_with_Expenses\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Budget_Codes\",\n      localField: \"Documents.Documents_with_Expenses.Budget_Type_Code\",\n      foreignField: \"Budget_Type_Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Budget_Type_Code: \"$Documents.Documents_with_Expenses.Budget_Type_Code\",\n      Budget_Type_Description: \"$Docs1.Budget_Type_Description\",\n      Document_ID: \"$Documents.Document_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2446,
        "db_id": "wine_1",
        "nl_queries": [
            "How many appelations are in Napa Country?",
            "Count the number of appelations in Napa County.",
            "What is the total number of appelations located in Napa County?",
            "How many appelations can be found in Napa County?",
            "Provide the count of appelations that exist in Napa County."
        ],
        "ref_sql": "SELECT count(*) FROM APPELLATIONS WHERE County = \"Napa\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: \"Napa\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1984,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the types of schools that have two schools.",
            "Identify the school types that have a total of two schools.",
            "List the types of schools that each have two representatives.",
            "What are the school categories that consist of exactly two schools?",
            "Display the types of schools where there are exactly two schools available."
        ],
        "ref_sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*) = 2",
        "MQL": "db.school.aggregate([\n  {\n    $group: {\n      _id: \"$Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: 2\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2056,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all allergies and their types.",
            "What are the allergies and their types?",
            "Please provide the list of allergies along with their corresponding types.",
            "Can you display all the allergies and the types associated with them?",
            "What allergies exist and what are their respective types?"
        ],
        "ref_sql": "SELECT allergy , allergytype FROM Allergy_type",
        "MQL": "db.Allergy_Type.find({}, { Allergy: 1, AllergyType: 1, _id: 0 });\n"
    },
    {
        "record_id": 2575,
        "db_id": "allergy_1",
        "nl_queries": [
            "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
            "How many students are over 18 and do not have allergy to food type or animal type?",
            "How many students aged above 18 do not have allergies related to food or animals?",
            "Count the number of students who are over 18 and have no allergies to either food or animal sources.",
            "What is the total count of students older than 18 years without any allergies to food or animals?"
        ],
        "ref_sql": "SELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Age: { $gt: 18 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Allergy_Type\",\n      localField: \"StuID\",\n      foreignField: \"Has_Allergy.StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $addFields: {\n      has_food_or_animal_allergy: {\n        $anyElementTrue: {\n          $map: {\n            input: \"$Docs1\",\n            as: \"allergy\",\n            in: {\n              $or: [\n                { $eq: [\"$$allergy.AllergyType\", \"food\"] },\n                { $eq: [\"$$allergy.AllergyType\", \"animal\"] }\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      has_food_or_animal_allergy: false\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 745,
        "db_id": "machine_repair",
        "nl_queries": [
            "List the names of technicians in ascending order of age.",
            "What are the names of the technicians by ascending order of age?",
            "Provide the names of technicians sorted by age in increasing order.",
            "What names do technicians have when arranged from the youngest to the oldest?",
            "Show the technician names in order of age, starting from the least to the greatest."
        ],
        "ref_sql": "SELECT Name FROM technician ORDER BY Age ASC",
        "MQL": "db.technician.find({}, { Name: 1, _id: 0 }).sort({ Age: 1 });\n"
    },
    {
        "record_id": 1515,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
            "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.",
            "Retrieve the subject ID, subject name, and the total count of courses for every subject, then arrange the results by the count of courses in ascending order.",
            "Show the subject ID, name, and how many courses are offered for each subject, sorted by the course count from least to greatest.",
            "Display each subject's ID and name along with the number of courses related to that subject, ensuring the list is sorted in ascending order by the course totals."
        ],
        "ref_sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",
        "MQL": "db.Subjects.aggregate([\n  {\n    $project: {\n      subject_id: 1,\n      subject_name: 1,\n      COUNT: { $size: \"$Courses\" }\n    }\n  },\n  {\n    $sort: { COUNT: 1 }\n  },\n  {\n    $project: {\n      subject_id: 1,\n      subject_name: 1,\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4115,
        "db_id": "customer_complaints",
        "nl_queries": [
            "List the name of all products along with the number of complaints that they have received.",
            "What are all the different product names, and how many complains has each received?",
            "Provide a list of all products and the total number of complaints each has received.",
            "Can you show me the names of all products along with the counts of complaints associated with them?",
            "What are the names of different products and how many complaints does each one have?"
        ],
        "ref_sql": "SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_name\",\n      count: {\n        $sum: {\n          $size: \"$Complaints\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      product_name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 438,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Which products has been complained by the customer who has filed least amount of complaints?",
            "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.",
            "What products did the customer with the fewest complaints file complaints about?",
            "Retrieve the names of the products associated with complaints from the customer who has made the least number of complaints.",
            "List the products that have been reported by the customer with the smallest number of complaints."
        ],
        "ref_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Complaints\"\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.Complaints\"\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"Docs1.Complaints.product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $unwind: \"$Docs2\"\n  },\n  {\n    $group: {\n      _id: \"$Docs2.product_id\",\n      product_name: { $first: \"$Docs2.product_name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1624,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the wines that have prices higher than 50 and made of Red color grapes?",
            "What are the names of wines made from red grapes and with prices above 50?",
            "List the names of wines produced from red grapes that cost more than 50.",
            "Identify the wines that are derived from red grapes and have a price exceeding 50.",
            "What wines have a price greater than 50 and are made from red grapes?"
        ],
        "ref_sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\" AND T2.price > 50",
        "MQL": "db.grapes.aggregate([\n  {\n    $match: {\n      Color: \"Red\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Price\": { $gt: 50 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$wine.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1619,
        "db_id": "journal_committee",
        "nl_queries": [
            "Show the names of editors and the theme of journals for which they serve on committees.",
            "For each journal_committee, find the editor name and the journal theme.",
            "List the names of all editors along with the themes of the journals they are involved with in committees.",
            "Identify each editor and the corresponding journal themes they work with on the journal committees.",
            "Display the names of editors together with the themes of the journals where they serve as committee members."
        ],
        "ref_sql": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
        "MQL": "db.editor.aggregate([\n  {\n    $lookup: {\n      from: \"journal\",\n      localField: \"Editor_ID\",\n      foreignField: \"journal_committee.Editor_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: 1,\n      Theme: \"$Docs1.Theme\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3565,
        "db_id": "flight_1",
        "nl_queries": [
            "Show names for all employees with salary more than the average.",
            "What are the names of all employees who have a salary higher than average?",
            "List the names of employees whose salaries exceed the average salary.",
            "Provide the names of all employees earning more than the average.",
            "Who are the employees that have salaries above the average salary? Please show their names."
        ],
        "ref_sql": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)",
        "MQL": "db.employee.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_salary: { $avg: \"$salary\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"employee\",\n      let: { avg_salary: \"$avg_salary\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$salary\", \"$$avg_salary\"] }\n          }\n        },\n        {\n          $project: { name: 1, _id: 0 }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  },\n  {\n    $project: { name: 1, _id: 0 }\n  }\n]);\n"
    },
    {
        "record_id": 672,
        "db_id": "county_public_safety",
        "nl_queries": [
            "List the names of the city with the top 5 white percentages.",
            "What are the names of the five cities with the greatest proportion of white people?",
            "Provide the names of the five cities with the highest percentages of white residents.",
            "Identify the top five cities ranked by the proportion of white individuals.",
            "What are the names of the five cities where the white population percentage is the greatest?"
        ],
        "ref_sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $sort: {\n      \"city.White\": -1\n    }\n  },\n  {\n    $limit: 5\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$city.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2046,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
            "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
            "Retrieve the first and second lines of the address for the customer with the email address \"vbogisich@example.org\".",
            "What are the address lines 1 and 2 for the customer whose email is \"vbogisich@example.org\"?",
            "Show me address line 1 and address line 2 of the customer corresponding to the email \"vbogisich@example.org\"."
        ],
        "ref_sql": "SELECT address_line_1 , address_line_2 FROM customers WHERE email_address = \"vbogisich@example.org\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      email_address: \"vbogisich@example.org\"\n    }\n  },\n  {\n    $project: {\n      address_line_1: 1,\n      address_line_2: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3730,
        "db_id": "flight_1",
        "nl_queries": [
            "Which origin has most number of flights?",
            "What place has the most flights coming from there?",
            "Which departure location sees the highest frequency of flights?",
            "From which origin do the most flights operate?",
            "Identify the origin with the greatest number of departing flights."
        ],
        "ref_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $group: {\n      _id: \"$flight.origin\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      origin: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 918,
        "db_id": "allergy_1",
        "nl_queries": [
            "What are the student ids of students who don't have any allergies?",
            "Which students are unaffected by allergies?",
            "List the student IDs of individuals with no allergies recorded.",
            "Provide the names of students who do not have any allergies.",
            "Identify students who are free from any allergic conditions."
        ],
        "ref_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "MQL": "db.Student.find({\n  \"Has_Allergy\": []\n}, {\n  \"StuID\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 231,
        "db_id": "climbing",
        "nl_queries": [
            "List the distinct ranges of the mountains with the top 3 prominence.",
            "What are the different ranges of the 3 mountains with the highest prominence?",
            "What are the unique mountain ranges of the three tallest mountains by prominence?",
            "Identify the different ranges associated with the top three mountains that have the highest prominence.",
            "Can you provide the distinct ranges for the three mountains with the greatest prominence?"
        ],
        "ref_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "MQL": "db.mountain.aggregate([\n  {\n    $sort: {\n      Prominence: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      _id: 0,\n      Range: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3406,
        "db_id": "voter_1",
        "nl_queries": [
            "What are the maximum and minimum values of area codes?",
            "Can you provide the highest and lowest area code values?",
            "What are the extreme values for area codes, including both the maximum and minimum?",
            "Retrieve the maximum and minimum area codes from the dataset.",
            "What is the range of area codes in terms of the highest and lowest numbers?"
        ],
        "ref_sql": "SELECT max(area_code) , min(area_code) FROM area_code_state",
        "MQL": "db.AREA_CODE_STATE.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_area_code: { $max: \"$area_code\" },\n      min_area_code: { $min: \"$area_code\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_area_code: 1,\n      min_area_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3184,
        "db_id": "hr_1",
        "nl_queries": [
            "Find the employee id for all employees who earn more than the average salary.",
            "What are the employee ids for employees who make more than the average?",
            "List the employee IDs of those who earn above the average salary.",
            "Identify the employee IDs for individuals with salaries greater than the average salary.",
            "Can you provide the employee IDs for employees whose pay exceeds the average salary?"
        ],
        "ref_sql": "SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_SALARY: { $avg: \"$employees.SALARY\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"jobs\",\n      let: { avg_SALARY: \"$avg_SALARY\" },\n      pipeline: [\n        {\n          $unwind: \"$employees\"\n        },\n        {\n          $match: {\n            $expr: { $gt: [\"$employees.SALARY\", \"$$avg_SALARY\"] }\n          }\n        },\n        {\n          $project: {\n            EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 2578,
        "db_id": "e_learning",
        "nl_queries": [
            "How many tests have result \"Fail\"?",
            "Count the number of tests with \"Fail\" result.",
            "What is the total number of tests that have a \"Fail\" result?",
            "How many tests resulted in a failure?",
            "Count the total occurrences of tests classified as \"Fail.\""
        ],
        "ref_sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result = \"Fail\"",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $unwind: \"$Courses.Student_Course_Enrolment\"\n  },\n  {\n    $unwind: \"$Courses.Student_Course_Enrolment.Student_Tests_Taken\"\n  },\n  {\n    $match: {\n      \"Courses.Student_Course_Enrolment.Student_Tests_Taken.test_result\": \"Fail\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2951,
        "db_id": "flight_4",
        "nl_queries": [
            "Which country is the airport that has the highest altitude located in?",
            "What is the country of the airport with the highest elevation?",
            "In which country can the airport with the highest elevation be found?",
            "What country is home to the airport at the greatest altitude?",
            "Identify the country of the airport that is situated at the highest elevation."
        ],
        "ref_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "MQL": "db.airports.aggregate([\n  {\n    $sort: {\n      elevation: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1946,
        "db_id": "cinema",
        "nl_queries": [
            "Show cinema name, film title, date, and price for each record in schedule.",
            "Provide the cinema name, film title, show date, and ticket price for each entry in the schedule.",
            "List the names of cinemas along with the corresponding film titles, dates, and prices for every record in the schedule.",
            "Display the cinema's name, the title of the film, the date of the showing, and the associated price for all scheduled films.",
            "Retrieve and show the name of the cinema, the movie title, the date of screening, and the ticket price for each schedule item."
        ],
        "ref_sql": "SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id",
        "MQL": "db.cinema.aggregate([\n  {\n    $unwind: \"$schedule\"\n  },\n  {\n    $lookup: {\n      from: \"film\",\n      localField: \"schedule.Film_ID\",\n      foreignField: \"Film_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Title\": \"$Docs1.Title\",\n      \"Date\": \"$schedule.Date\",\n      \"Price\": \"$schedule.Price\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3285,
        "db_id": "gas_company",
        "nl_queries": [
            "Show all headquarters without a company in banking industry.",
            "What are the headquarters without companies that are in the banking industry?",
            "List all headquarters that are not associated with any companies in the banking sector.",
            "Provide the names of headquarters that do not host companies belonging to the banking industry.",
            "Retrieve headquarters which have no companies involved in the banking industry."
        ],
        "ref_sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: \"$Headquarters\",\n      industries: { $addToSet: \"$Main_Industry\" }\n    }\n  },\n  {\n    $match: {\n      industries: { $ne: \"Banking\" }\n    }\n  },\n  {\n    $project: {\n      Headquarters: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3583,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the name of airports whose altitude is between -50 and 50.",
            "What are the names of all airports whose elevation is between -50 and 50?",
            "List the names of airports that are situated at elevations within the range of -50 to 50.",
            "Which airports have elevations between -50 and 50? Provide their names.",
            "Can you provide the names of all airports whose altitudes are in the range of -50 to 50?"
        ],
        "ref_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      elevation: {\n        $gte: -50,\n        $lte: 50\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 427,
        "db_id": "voter_1",
        "nl_queries": [
            "What are the distinct states and create time of all votes?",
            "Can you provide the unique states along with the timestamps of all voting instances?",
            "What are the unique combinations of states and the times at which votes were cast?",
            "Show me the different states and the corresponding times when votes were made.",
            "Please list the distinct states together with the creation times for each vote recorded."
        ],
        "ref_sql": "SELECT DISTINCT state , created FROM votes",
        "MQL": "db.CONTESTANTS.aggregate([\n  { $unwind: \"$VOTES\" },\n  { $group: {\n      _id: { state: \"$VOTES.state\", created: \"$VOTES.created\" }\n    }\n  },\n  { $project: {\n      _id: 0,\n      state: \"$_id.state\",\n      created: \"$_id.created\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 583,
        "db_id": "cinema",
        "nl_queries": [
            "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
            "List all the locations that have cinemas opened in both 2010 and 2011.",
            "Identify the locations where some cinemas began operating in both the years 2010 and 2011.",
            "Find all cinema locations that were opened during both the years 2010 and 2011.",
            "Provide the locations where cinemas have been established in the years 2010 and 2011."
        ],
        "ref_sql": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
        "MQL": "db.cinema.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      opening_years: { $addToSet: \"$Openning_year\" }\n    }\n  },\n  {\n    $match: {\n      opening_years: { $all: [2010, 2011] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4087,
        "db_id": "school_bus",
        "nl_queries": [
            "find the name of driver who is driving the school bus with the longest working history.",
            "Identify the name of the driver who has the most years of experience driving a school bus.",
            "Who is the driver with the longest service history in operating a school bus?",
            "Retrieve the name of the driver that has spent the most time working with a school bus.",
            "What is the name of the driver that has the greatest tenure driving a school bus?"
        ],
        "ref_sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id ORDER BY years_working DESC LIMIT 1",
        "MQL": "db.driver.aggregate([\n  { $unwind: \"$school_bus\" },\n  { $sort: { \"school_bus.Years_Working\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Name\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2500,
        "db_id": "flight_1",
        "nl_queries": [
            "How many employees do we have?",
            "What is the number of employees?",
            "What is the total count of employees in the organization?",
            "Can you tell me how many employees there are?",
            "Please provide the number of employees on staff."
        ],
        "ref_sql": "SELECT count(*) FROM Employee",
        "MQL": "db.employee.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1235,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the document type name and the document type description and creation date for all the documents?",
            "Return the type name, type description, and date of creation for each document.",
            "Can you provide the name and description of each document type along with the date it was created for all documents?",
            "Retrieve the creation date, type name, and type description for every document.",
            "What are the document type names, their descriptions, and the corresponding creation dates for all documents available?"
        ],
        "ref_sql": "SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Document_Types\",\n      localField: \"Documents.Document_Type_Code\",\n      foreignField: \"Document_Type_Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Document_Type_Name: \"$Docs1.Document_Type_Name\",\n      Document_Type_Description: \"$Docs1.Document_Type_Description\",\n      Document_Date: \"$Documents.Document_Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1217,
        "db_id": "e_learning",
        "nl_queries": [
            "List the dates of enrollment and completion of the student with personal name \"Karson\".",
            "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
            "Provide the enrollment and completion dates for the student named \"Karson\".",
            "What are the dates of course enrollment and completion for the student with the name \"Karson\"?",
            "Show the dates when the student \"Karson\" enrolled in and completed their courses."
        ],
        "ref_sql": "SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = \"Karson\"",
        "MQL": "db.Students.aggregate([\n  {\n    $match: {\n      personal_name: \"Karson\"\n    }\n  },\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $project: {\n      date_of_enrolment: \"$Student_Course_Enrolment.date_of_enrolment\",\n      date_of_completion: \"$Student_Course_Enrolment.date_of_completion\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 378,
        "db_id": "hr_1",
        "nl_queries": [
            "Find the ids of the departments where any manager is managing 4 or more employees.",
            "What are department ids for departments with managers managing more than 3 employees?",
            "What are the unique ids of those departments where any manager is managing 4 or more employees.",
            "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
            "List the department ids for those departments where a manager oversees four or more employees."
        ],
        "ref_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT(employee_id) >= 4",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $group: {\n      _id: {\n        DEPARTMENT_ID: \"$DEPARTMENT_ID\",\n        MANAGER_ID: \"$employees.MANAGER_ID\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 4 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$_id.DEPARTMENT_ID\"\n    }\n  },\n  {\n    $project: {\n      DEPARTMENT_ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2493,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "How many documents do not have any expense?",
            "Count the number of documents that do not have expenses.",
            "What is the total number of documents without any associated expenses?",
            "Determine how many documents lack expense records.",
            "Find the count of documents that do not carry any expense information."
        ],
        "ref_sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $project: {\n      document_id: \"$Documents.Document_ID\",\n      count_Documents_with_Expenses: {\n        $size: \"$Documents.Documents_with_Expenses\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Documents_with_Expenses: 0\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1087,
        "db_id": "school_player",
        "nl_queries": [
            "For each player, show the team and the location of school they belong to.",
            "What are the team and the location of school each player belongs to?",
            "List each player along with their corresponding team and the school's location.",
            "What team does each player play for, and where is their school located?",
            "Show the team affiliation of every player together with the location of the school they belong to."
        ],
        "ref_sql": "SELECT T1.Team , T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID",
        "MQL": "db.school.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $project: {\n      Team: \"$player.Team\",\n      Location: \"$Location\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1178,
        "db_id": "e_learning",
        "nl_queries": [
            "What is the name of the course that has the most student enrollment?",
            "Which course is enrolled in by the most students? Give me the course name.",
            "Which course has the highest number of student registrations?",
            "Name the course that boasts the most student enrollments.",
            "What course is the most popular among students in terms of enrollment?"
        ],
        "ref_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $unwind: \"$Courses.Student_Course_Enrolment\"\n  },\n  {\n    $group: {\n      _id: {\n        course_id: \"$Courses.course_id\",\n        course_name: \"$Courses.course_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      course_name: \"$_id.course_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1915,
        "db_id": "machine_repair",
        "nl_queries": [
            "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
            "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
            "List the names of technicians sorted by the ascending quality rank of the machines they handle.",
            "Provide the names of technicians ordered by the quality rank of their assigned machines, from lowest to highest.",
            "Display the names of technicians in the order of increasing quality rank for the machines they are responsible for."
        ],
        "ref_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank",
        "MQL": "db.technician.aggregate([\n  {\n    $lookup: {\n      from: \"machine\",\n      localField: \"technician_id\",\n      foreignField: \"repair_assignment.technician_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $sort: {\n      \"Docs1.quality_rank\": 1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2677,
        "db_id": "school_bus",
        "nl_queries": [
            "How many drivers are from Hartford city or younger than 40?",
            "What is the total number of drivers either living in Hartford or under the age of 40?",
            "Count all drivers who are from the city of Hartford or are younger than 40 years old.",
            "How many drivers meet the criteria of being from Hartford or being less than 40 years old?",
            "Find the number of drivers who either hail from Hartford or are below the age of 40."
        ],
        "ref_sql": "SELECT count(*) FROM driver WHERE home_city = 'Hartford' OR age < 40",
        "MQL": "db.driver.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Home_city\": \"Hartford\" },\n        { \"Age\": { $lt: 40 } }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1509,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the student ID and login name of the student with the most course enrollments",
            "What are the student ID and login name of the student who are enrolled in the most courses?",
            "Retrieve the student ID and username of the student with the highest number of course enrollments.",
            "Who is the student with the most course enrollments, and what are their ID and login name?",
            "Show the student ID and login name for the student who has enrolled in the greatest number of courses."
        ],
        "ref_sql": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Students.aggregate([\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $group: {\n      _id: {\n        student_id: \"$student_id\",\n        login_name: \"$login_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      student_id: \"$_id.student_id\",\n      login_name: \"$_id.login_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2552,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "How many budget types do we have?",
            "Count the number of budget codes.",
            "What is the total number of budget types in the database?",
            "How many different budget codes are there?",
            "Can you tell me the count of available budget types?"
        ],
        "ref_sql": "SELECT count(*) FROM Ref_budget_codes",
        "MQL": "db.Ref_Budget_Codes.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3453,
        "db_id": "flight_1",
        "nl_queries": [
            "What is the minimum, average, and maximum distance of all aircrafts.",
            "Return the minimum, average and maximum distances traveled across all aircrafts.",
            "Can you provide the minimum, average, and maximum distances of all aircrafts?",
            "What are the minimum, average, and maximum distances recorded for the entire fleet of aircraft?",
            "Show me the minimum, average, and maximum distance covered by all the aircraft in the database."
        ],
        "ref_sql": "SELECT min(distance) , avg(distance) , max(distance) FROM Aircraft",
        "MQL": "db.aircraft.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_distance: { $min: \"$distance\" },\n      avg_distance: { $avg: \"$distance\" },\n      max_distance: { $max: \"$distance\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_distance: 1,\n      avg_distance: 1,\n      max_distance: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 856,
        "db_id": "musical",
        "nl_queries": [
            "List the most common result of the musicals.",
            "Return the most frequent result across all musicals.",
            "Identify the result that appears most often in musicals.",
            "What is the result with the highest occurrence in the musicals?",
            "Find the result that is the most prevalent among all musicals."
        ],
        "ref_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.musical.aggregate([\n  {\n    $group: {\n      _id: \"$Result\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Result: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 184,
        "db_id": "climbing",
        "nl_queries": [
            "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
            "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
            "Identify the countries that feature mountains exceeding 5600 meters in height as well as those below 5200 meters.",
            "Which countries have mountains with altitudes greater than 5600 and also those with altitudes under 5200?",
            "List the countries that possess mountains taller than 5600 meters and shorter than 5200 meters."
        ],
        "ref_sql": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
        "MQL": "db.mountain.aggregate([\n  {\n    $match: {\n      $or: [\n        { Height: { $gt: 5600 } },\n        { Height: { $lt: 5200 } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 },\n      heights: { $push: \"$Height\" }\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { \"heights\": { $elemMatch: { $gt: 5600 } } },\n        { \"heights\": { $elemMatch: { $lt: 5200 } } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2111,
        "db_id": "wine_1",
        "nl_queries": [
            "What are the average price and score of wines grouped by appelation?",
            "What are the average price and score of wines for each appelation?",
            "Can you provide the average price and average score of wines for each appelation?",
            "What are the average values for price and score of wines categorized by appelation?",
            "Please list the average wine price and score grouped according to appelation."
        ],
        "ref_sql": "SELECT avg(Price) , avg(Score) , Appelation FROM WINE GROUP BY Appelation",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: \"$wine.Appelation\",\n      avg_Price: { $avg: \"$wine.Price\" },\n      avg_Score: { $avg: \"$wine.Score\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Appelation: \"$_id\",\n      avg_Price: 1,\n      avg_Score: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 8,
        "db_id": "college_3",
        "nl_queries": [
            "List all information about courses sorted by credits in the ascending order.",
            "What is all the information about courses, ordered by credits ascending?",
            "Provide a list of all course details sorted by the number of credits in ascending order.",
            "Show all the details regarding courses arranged by credits from lowest to highest.",
            "Retrieve complete information about courses sorted in ascending order by their credit values."
        ],
        "ref_sql": "SELECT * FROM COURSE ORDER BY Credits",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $project: {\n      CID: \"$Course.CID\",\n      CName: \"$Course.CName\",\n      Credits: \"$Course.Credits\",\n      Instructor: \"$Course.Instructor\",\n      Days: \"$Course.Days\",\n      Hours: \"$Course.Hours\",\n      DNO: \"$Course.DNO\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Credits: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3056,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the dates of the tests taken with result \"Pass\".",
            "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
            "List the dates on which students successfully completed their tests with the result \"Pass.\"",
            "What are the dates of the tests that resulted in a passing score?",
            "Retrieve the dates for all tests that students have passed."
        ],
        "ref_sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = \"Pass\"",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $unwind: {\n      path: \"$Courses.Student_Course_Enrolment\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $unwind: {\n      path: \"$Courses.Student_Course_Enrolment.Student_Tests_Taken\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $match: {\n      \"Courses.Student_Course_Enrolment.Student_Tests_Taken.test_result\": \"Pass\"\n    }\n  },\n  {\n    $project: {\n      date_test_taken: \"$Courses.Student_Course_Enrolment.Student_Tests_Taken.date_test_taken\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2060,
        "db_id": "allergy_1",
        "nl_queries": [
            "What is the type of allergy Cat?",
            "What is allergy type of a cat allergy?",
            "What category of allergy corresponds to cats?",
            "Can you tell me the allergy type for a cat allergy?",
            "What allergy classification is associated with cats?"
        ],
        "ref_sql": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\"",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $match: {\n      Allergy: \"Cat\"\n    }\n  },\n  {\n    $project: {\n      AllergyType: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2925,
        "db_id": "e_learning",
        "nl_queries": [
            "How many distinct students are enrolled in courses?",
            "Find the number of distinct students enrolled in courses.",
            "What is the total number of unique students enrolled in the courses?",
            "Can you tell me how many unique students are registered for courses?",
            "Determine the count of distinct students participating in course enrollments."
        ],
        "ref_sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "MQL": "db.Students.aggregate([\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $group: {\n      _id: \"$Student_Course_Enrolment.student_id\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_student_id: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_student_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2916,
        "db_id": "university_basketball",
        "nl_queries": [
            "How many schools are in the basketball match?",
            "Count the number of schools that have had basketball matches.",
            "What is the total number of schools that participate in basketball matches?",
            "How many different schools have taken part in basketball games?",
            "Can you tell me the count of schools involved in basketball matches?"
        ],
        "ref_sql": "SELECT count(DISTINCT school_id) FROM basketball_match",
        "MQL": "db.university.aggregate([\n  {\n    $unwind: \"$basketball_match\"\n  },\n  {\n    $group: {\n      _id: \"$School_ID\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_school_id\"\n  }\n]);\n"
    },
    {
        "record_id": 962,
        "db_id": "college_3",
        "nl_queries": [
            "What are the name of courses that have at least five enrollments?",
            "Give the names of the courses with at least five enrollments.",
            "List the names of the courses that have five or more students enrolled.",
            "What are the titles of courses with a minimum enrollment of five?",
            "Provide the names of courses that are attended by at least five students."
        ],
        "ref_sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $project: {\n      CName: \"$Course.CName\",\n      count_Enrolled_in: {\n        $size: \"$Course.Enrolled_in\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Enrolled_in: {\n        $gte: 5\n      }\n    }\n  },\n  {\n    $project: {\n      CName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2334,
        "db_id": "allergy_1",
        "nl_queries": [
            "Which city does the student whose last name is \"Kim\" live in?",
            "Give the city that the student whose family name is Kim lives in.",
            "What city is the student named Kim residing in?",
            "Can you tell me the city where the student with the last name Kim lives?",
            "Identify the city in which the student whose surname is Kim is located."
        ],
        "ref_sql": "SELECT city_code FROM Student WHERE LName = \"Kim\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      LName: \"Kim\"\n    }\n  },\n  {\n    $project: {\n      city_code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 878,
        "db_id": "college_3",
        "nl_queries": [
            "Find the rooms of faculties with rank professor who live in building NEB.",
            "What are the rooms for members of the faculty who are professors and who live in building NEB?",
            "What rooms do professors occupy in the NEB building?",
            "Can you list the rooms assigned to faculty members designated as professors in the NEB building?",
            "Identify the room numbers for professors residing in the NEB building."
        ],
        "ref_sql": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\"",
        "MQL": "db.Faculty.find(\n  {\n    Rank: \"Professor\",\n    Building: \"NEB\"\n  },\n  {\n    Room: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 1573,
        "db_id": "college_3",
        "nl_queries": [
            "What are the first names and last names of the students that minor in the department with DNO 140.",
            "What are the full names of students minoring in department 140?",
            "Which students have declared a minor in the department with DNO 140, and what are their first and last names?",
            "Can you provide the full names of students who are minoring in the department numbered 140?",
            "List the first and last names of all students minoring in the department associated with DNO 140."
        ],
        "ref_sql": "SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      \"Minor_in.DNO\": 140\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      LName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1110,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the addresses and author IDs of the course authors that teach at least two courses.",
            "Which course authors teach two or more courses? Give me their addresses and author IDs.",
            "List the addresses and author IDs of those who instruct at least two courses.",
            "Can you provide the addresses and IDs of course authors who are teaching two or more courses?",
            "Show me the author IDs along with their addresses for those instructors who offer at least two courses."
        ],
        "ref_sql": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $group: {\n      _id: \"$author_id\",\n      address_line_1: { $first: \"$address_line_1\" },\n      count_course: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count_course: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      address_line_1: 1,\n      author_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3765,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the personal names of students not enrolled in any course.",
            "Which students not enrolled in any course? Find their personal names.",
            "Retrieve the personal names of students who are not enrolled in any courses.",
            "List the names of students who have not signed up for any courses.",
            "Can you provide the personal names of those students without any course enrollments?"
        ],
        "ref_sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
        "MQL": "db.Students.find(\n  {\n    \"Student_Course_Enrolment\": { $size: 0 }\n  },\n  {\n    \"personal_name\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 4144,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
            "What are the names of teams from universities that have a below average enrollment?",
            "List the names of teams representing universities with enrollments that are less than the average.",
            "Identify the team names from universities whose student enrollment is below the average size.",
            "What are the team names associated with universities that have an enrollment figure smaller than the average?"
        ],
        "ref_sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT avg(enrollment) FROM university)",
        "MQL": "db.university.aggregate([\n  {\n    $lookup: {\n      from: \"university\",\n      let: { avg_Enrollment: { $avg: \"$Enrollment\" } },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $lt: [\"$Enrollment\", \"$$avg_Enrollment\"] }\n          }\n        },\n        {\n          $unwind: \"$basketball_match\"\n        },\n        {\n          $project: {\n            _id: 0,\n            Team_Name: \"$basketball_match.Team_Name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Team_Name: \"$Docs1.Team_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4095,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the name of the ships that have more than one captain.",
            "What are the names of ships that have more than one captain?",
            "List the names of ships that possess multiple captains.",
            "Identify the ships that have more than one captain and provide their names.",
            "Which ships are captained by more than one individual? Show their names."
        ],
        "ref_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1166,
        "db_id": "flight_4",
        "nl_queries": [
            "For each country and airline name, how many routes are there?",
            "What is the total number of routes for each country and airline in that country?",
            "How many routes are operated by each airline in every country?",
            "What is the route count for each airline in their respective countries?",
            "Can you provide the total number of routes for every airline categorized by country?"
        ],
        "ref_sql": "SELECT T1.country , T1.name , count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country , T1.name",
        "MQL": "db.airlines.aggregate([\n  {\n    $unwind: \"$routes\"\n  },\n  {\n    $group: {\n      _id: {\n        country: \"$country\",\n        name: \"$name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      country: \"$_id.country\",\n      name: \"$_id.name\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2048,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
            "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
            "Can you provide the addresses for course authors or tutors named \"Cathrine\"?",
            "List the addresses of tutors and authors who have the personal name \"Cathrine.\"",
            "What are the address details for course authors or tutors identified as \"Cathrine\"?"
        ],
        "ref_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = \"Cathrine\"",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $match: {\n      personal_name: \"Cathrine\"\n    }\n  },\n  {\n    $project: {\n      address_line_1: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1254,
        "db_id": "hr_1",
        "nl_queries": [
            "display the employee ID and job name for all those jobs in department 80.",
            "what are the employee ids and job titles for employees in department 80?",
            "Provide the employee IDs along with the job titles for all individuals working in department 80.",
            "List the employee IDs and their corresponding job titles for staff members in department 80.",
            "Show the employee identification numbers and job titles of employees assigned to department 80."
        ],
        "ref_sql": "SELECT T1.employee_id , T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80",
        "MQL": "db.departments.aggregate([\n  {\n    $match: {\n      DEPARTMENT_ID: 80\n    }\n  },\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"jobs\",\n      localField: \"employees.JOB_ID\",\n      foreignField: \"JOB_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      JOB_TITLE: \"$Docs1.JOB_TITLE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3286,
        "db_id": "gas_company",
        "nl_queries": [
            "Show headquarters with at least two companies in the banking industry.",
            "What are the headquarters with at least two companies in the banking industry?",
            "List the headquarters that host two or more companies within the banking sector.",
            "Identify headquarters where there are at least two companies operating in the banking industry.",
            "What headquarters have a minimum of two companies in the banking field?"
        ],
        "ref_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count(*) >= 2",
        "MQL": "db.company.aggregate([\n  {\n    $match: {\n      Main_Industry: \"Banking\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Headquarters\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Headquarters: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 791,
        "db_id": "pilot_record",
        "nl_queries": [
            "What are the positions and teams of pilots?",
            "Can you provide the list of pilot positions along with their respective teams?",
            "What positions do the pilots hold and which teams are they associated with?",
            "Show me the roles of the pilots and the teams they belong to.",
            "What are the various positions and team affiliations of the pilots?"
        ],
        "ref_sql": "SELECT POSITION , Team FROM pilot",
        "MQL": "db.pilot.find({}, { \"Position\": 1, \"Team\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3118,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What are the document ids for the budget type code 'SF'?",
            "Give the ids of documents with expenses that have the budget code 'SF'.",
            "Can you provide the document IDs associated with the budget type code 'SF'?",
            "What are the IDs of the documents that fall under the budget code 'SF'?",
            "List the document identifiers for those expenses categorized with the budget type 'SF'."
        ],
        "ref_sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'",
        "MQL": "db.Ref_Budget_Codes.aggregate([\n  {\n    $unwind: \"$Documents_with_Expenses\"\n  },\n  {\n    $match: {\n      \"Documents_with_Expenses.Budget_Type_Code\": \"SF\"\n    }\n  },\n  {\n    $project: {\n      Document_ID: \"$Documents_with_Expenses.Document_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1593,
        "db_id": "college_3",
        "nl_queries": [
            "Find the last names of faculties who are members of computer science department.",
            "What are the last names of faculty who are part of the computer science department?",
            "List the surnames of faculty members affiliated with the Computer Science department.",
            "What are the surnames of faculty who belong to the Computer Science department?",
            "Identify the last names of instructors who are part of the Computer Science department."
        ],
        "ref_sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\"",
        "MQL": "db.Faculty.aggregate([\n  {\n    $lookup: {\n      from: \"Department\",\n      localField: \"FacID\",\n      foreignField: \"Member_of.FacID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.Member_of\"\n  },\n  {\n    $match: {\n      \"Docs1.DName\": \"Computer Science\"\n    }\n  },\n  {\n    $project: {\n      Lname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3382,
        "db_id": "climbing",
        "nl_queries": [
            "What is the maximum point for climbers whose country is United Kingdom?",
            "Return the maximum number of points for climbers from the United Kingdom.",
            "What is the highest score achieved by climbers from the United Kingdom?",
            "Find the top points earned by climbers whose nationality is United Kingdom.",
            "What is the highest number of points recorded for climbers representing the United Kingdom?"
        ],
        "ref_sql": "SELECT max(Points) FROM climber WHERE Country = \"United Kingdom\"",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $match: {\n      \"climber.Country\": \"United Kingdom\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_Points: { $max: \"$climber.Points\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Points: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3363,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all majors and corresponding number of students.",
            "How many students are there for each major?",
            "Provide a list of all majors and the total number of students enrolled in each.",
            "Can you show the count of students for each field of study?",
            "What are the majors along with the respective student counts?"
        ],
        "ref_sql": "SELECT major , count(*) FROM Student GROUP BY major",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Major: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1941,
        "db_id": "gas_company",
        "nl_queries": [
            "Show all locations where a gas station for company with market value greater than 100 is located.",
            "What are the locations that have gas stations owned by a company with a market value greater than 100?",
            "List all the locations of gas stations operated by companies with a market value above 100.",
            "Provide the locations for gas stations affiliated with companies that have a market value exceeding 100.",
            "Identify the locations where gas stations are run by companies whose market value is greater than 100."
        ],
        "ref_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100",
        "MQL": "db.gas_station.aggregate([\n  {\n    $lookup: {\n      from: \"company\",\n      localField: \"station_company.Company_ID\",\n      foreignField: \"Company_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Market_Value\": { $gt: 100 }\n    }\n  },\n  {\n    $project: {\n      Location: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 818,
        "db_id": "pilot_record",
        "nl_queries": [
            "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
            "Retrieve the names of pilots associated with either the \"Bradley\" or \"Fordham\" team.",
            "List the names of pilots from teams \"Bradley\" and \"Fordham\".",
            "What are the names of the pilots belonging to the \"Bradley\" or \"Fordham\" teams?",
            "Provide the names of pilots who are part of either the \"Bradley\" team or the \"Fordham\" team."
        ],
        "ref_sql": "SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\"",
        "MQL": "db.pilot.find({\n  $or: [\n    { \"Team\": \"Bradley\" },\n    { \"Team\": \"Fordham\" }\n  ]\n}, { \"Pilot_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3411,
        "db_id": "voter_1",
        "nl_queries": [
            "What is last date created of votes from the state 'CA'?",
            "What is the most recent date that votes were recorded in California?",
            "Can you tell me the latest creation date of votes cast from the state 'CA'?",
            "What is the latest date for vote creation for contestants from California?",
            "Find the most recent date on which votes were created for the state 'CA'."
        ],
        "ref_sql": "SELECT max(created) FROM votes WHERE state = 'CA'",
        "MQL": "db.CONTESTANTS.aggregate([\n  { $unwind: \"$VOTES\" },\n  { $match: { \"VOTES.state\": \"CA\" } },\n  { $group: { _id: null, max_created: { $max: \"$VOTES.created\" } } },\n  { $project: { _id: 0, max_created: 1 } }\n]);\n"
    },
    {
        "record_id": 1215,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the completion dates of all the tests that have result \"Fail\"?",
            "Return the completion date for all the tests that have \"Fail\" result.",
            "Can you provide the completion dates for all tests that resulted in a \"Fail\"?",
            "What are the dates of completion for tests that have received a failing result?",
            "List the completion dates of tests that resulted in failure."
        ],
        "ref_sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $unwind: \"$Courses.Student_Course_Enrolment\"\n  },\n  {\n    $unwind: \"$Courses.Student_Course_Enrolment.Student_Tests_Taken\"\n  },\n  {\n    $match: {\n      \"Courses.Student_Course_Enrolment.Student_Tests_Taken.test_result\": \"Fail\"\n    }\n  },\n  {\n    $project: {\n      date_of_completion: \"$Courses.Student_Course_Enrolment.date_of_completion\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1255,
        "db_id": "hr_1",
        "nl_queries": [
            "Find employee with ID and name of the country presently where (s)he is working.",
            "What are all the employee ids and the names of the countries in which they work?",
            "List the employee IDs along with the names of the countries they are currently employed in.",
            "Retrieve the IDs of all employees and the country names corresponding to their current job locations.",
            "Show me the employee identification numbers alongside the names of the countries where they currently work."
        ],
        "ref_sql": "SELECT T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"regions\",\n      let: { location_id: \"$LOCATION_ID\" },\n      pipeline: [\n        { $unwind: \"$countries\" },\n        { $unwind: \"$countries.locations\" },\n        {\n          $match: {\n            $expr: { $eq: [\"$countries.locations.LOCATION_ID\", \"$$location_id\"] }\n          }\n        },\n        {\n          $project: {\n            COUNTRY_NAME: \"$countries.COUNTRY_NAME\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      COUNTRY_NAME: \"$Docs1.COUNTRY_NAME\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3213,
        "db_id": "hr_1",
        "nl_queries": [
            "List the full name (first and last name), and salary for those employees who earn below 6000.",
            "What are the full names and salaries for any employees earning less than 6000?",
            "Provide the first and last names along with the salaries of employees who make less than 6000.",
            "Can you give me the full names and salary details for employees earning below 6000?",
            "Show the full names and salaries of those employees with a salary under 6000."
        ],
        "ref_sql": "SELECT first_name , last_name , salary FROM employees WHERE salary < 6000",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.SALARY\": { $lt: 6000 }\n    }\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      SALARY: \"$employees.SALARY\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1556,
        "db_id": "device",
        "nl_queries": [
            "Show the carriers of devices in stock at more than one shop.",
            "What are the carriers of devices that are in stock in more than a single shop?",
            "List the carriers for devices available in stock at multiple stores.",
            "Identify the carriers of devices that are stocked in more than one retail location.",
            "Which carriers offer devices that can be found in stock across several shops?"
        ],
        "ref_sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1",
        "MQL": "db.device.aggregate([\n  {\n    $unwind: \"$stock\"\n  },\n  {\n    $group: {\n      _id: {\n        Device_ID: \"$Device_ID\",\n        Carrier: \"$Carrier\"\n      },\n      shopCount: { $addToSet: \"$stock.Shop_ID\" }\n    }\n  },\n  {\n    $project: {\n      Carrier: \"$_id.Carrier\",\n      shopCount: { $size: \"$shopCount\" }\n    }\n  },\n  {\n    $match: {\n      shopCount: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Carrier: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3763,
        "db_id": "e_learning",
        "nl_queries": [
            "List the personal names and family names of all the students in alphabetical order of family name.",
            "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.",
            "Provide a list of students' personal and family names, ordered alphabetically by their family names.",
            "Can you show me the personal and family names of all students, sorted in ascending order of family name?",
            "Retrieve the personal and family names of every student, sorted alphabetically according to their family names."
        ],
        "ref_sql": "SELECT personal_name , family_name FROM Students ORDER BY family_name",
        "MQL": "db.Students.find({}, { personal_name: 1, family_name: 1, _id: 0 }).sort({ family_name: 1 });\n"
    },
    {
        "record_id": 4000,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find the total student enrollment for different affiliation type schools.",
            "What are the total enrollments of universities of each affiliation type?",
            "What is the total number of students enrolled in schools grouped by their affiliation types?",
            "Calculate the overall enrollment figures for universities classified by affiliation type.",
            "Provide the total enrollments for various types of affiliated universities."
        ],
        "ref_sql": "SELECT sum(enrollment) , affiliation FROM university GROUP BY affiliation",
        "MQL": "db.university.aggregate([\n  {\n    $group: {\n      _id: \"$Affiliation\",\n      sum_enrollment: { $sum: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      sum_enrollment: 1,\n      Affiliation: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2047,
        "db_id": "e_learning",
        "nl_queries": [
            "List the addresses of all the course authors or tutors.",
            "What is the address of each course author or tutor?",
            "Retrieve the addresses for all course authors and tutors.",
            "Show me the address for each author or tutor of a course.",
            "Can you provide the addresses of all course instructors and tutors?"
        ],
        "ref_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "MQL": "db.Course_Authors_and_Tutors.find({}, { address_line_1: 1, _id: 0 });\n"
    },
    {
        "record_id": 3750,
        "db_id": "school_bus",
        "nl_queries": [
            "Show the party with drivers from Hartford and drivers older than 40.",
            "What political party do drivers from Hartford who are older than 40 belong to?",
            "Identify the parties represented by drivers from Hartford aged over 40.",
            "List the political affiliations of drivers who reside in Hartford and are older than 40 years.",
            "Which party do drivers from Hartford, who are over 40 years old, represent?"
        ],
        "ref_sql": "SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40",
        "MQL": "db.driver.find({\n  \"Home_city\": \"Hartford\",\n  \"Age\": { $gt: 40 }\n}, { \"Party\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 212,
        "db_id": "cinema",
        "nl_queries": [
            "What are all the locations with a cinema?",
            "Find the distinct locations that has a cinema.",
            "List all unique locations that have a cinema.",
            "Retrieve all the different locations where cinemas are located.",
            "What locations are available that feature a cinema?"
        ],
        "ref_sql": "SELECT DISTINCT LOCATION FROM cinema",
        "MQL": "db.cinema.aggregate([\n  {\n    $group: {\n      _id: \"$Location\"\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3563,
        "db_id": "flight_1",
        "nl_queries": [
            "Show names for all employees who do not have certificate of Boeing 737-800.",
            "What are the names of all employees who are not certified to fly Boeing 737-800s?",
            "List the names of employees lacking certification for the Boeing 737-800.",
            "Provide the names of all staff who do not hold a certificate for Boeing 737-800 aircraft.",
            "Identify the names of employees who are not qualified to operate Boeing 737-800s."
        ],
        "ref_sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"",
        "MQL": "db.employee.aggregate([\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"certificate.aid\",\n      foreignField: \"aid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": { $ne: \"Boeing 737-800\" }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3839,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the id of the project with least number of documents?",
            "Return the id of the project that has the fewest corresponding documents.",
            "Identify the project ID that has the smallest number of associated documents.",
            "What is the project ID of the project with the minimum document count?",
            "Provide the ID of the project that contains the least amount of documents."
        ],
        "ref_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Projects.aggregate([\n  {\n    $project: {\n      Project_ID: 1,\n      count: {\n        $size: \"$Documents\"\n      }\n    }\n  },\n  {\n    $sort: {\n      count: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Project_ID: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 891,
        "db_id": "device",
        "nl_queries": [
            "Please show the software platforms of devices in descending order of the count.",
            "What are the different software platforms for devices, ordered by frequency descending?",
            "Can you provide a list of software platforms for devices sorted by the number of occurrences in descending order?",
            "What software platforms are available for devices, listed from most to least frequent?",
            "Show me the software platforms of the devices arranged by their count in descending order."
        ],
        "ref_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "MQL": "db.device.aggregate([\n  {\n    $group: {\n      _id: \"$Software_Platform\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      Software_Platform: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 528,
        "db_id": "wine_1",
        "nl_queries": [
            "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
            "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
            "Retrieve the grape varieties, wineries, and years for wines priced above 100, arranged by year.",
            "Show the names of grapes, associated wineries, and the years of the wines that have a price exceeding 100, sorted in chronological order.",
            "Identify the grape types, wineries, and vintage years of wines that cost more than 100, ordered by the year of production."
        ],
        "ref_sql": "SELECT Grape , Winery , YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Price\": { $gt: 100 }\n    }\n  },\n  {\n    $project: {\n      Grape: \"$wine.Grape\",\n      Winery: \"$wine.Winery\",\n      Year: \"$wine.Year\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Year: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3548,
        "db_id": "flight_1",
        "nl_queries": [
            "What is the name and salary for employee with id 242518965?",
            "What is the name and salary of the employee with the id 242518965?",
            "Can you provide the name and salary of the employee whose ID is 242518965?",
            "Please tell me the name and salary for the employee with ID 242518965.",
            "What is the salary and the name of the employee that has the id 242518965?"
        ],
        "ref_sql": "SELECT name , salary FROM Employee WHERE eid = 242518965",
        "MQL": "db.employee.find(\n  { eid: 242518965 },\n  { name: 1, salary: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2425,
        "db_id": "ship_1",
        "nl_queries": [
            "How many captains with younger than 50 are in each rank?",
            "Count the number of captains younger than 50 of each rank.",
            "What is the count of captains aged below 50 for each rank?",
            "How many captains are there under 50 years old for every captain's rank?",
            "Can you provide the number of captains younger than 50, broken down by rank?"
        ],
        "ref_sql": "SELECT count(*) , rank FROM captain WHERE age < 50 GROUP BY rank",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $match: {\n      \"captain.age\": { $lt: \"50\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3581,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the name of the airport in the city of Goroka.",
            "What are the names of the airports in the city of Goroka?",
            "List the names of airports located in Goroka.",
            "Can you provide the names of the airport(s) in Goroka?",
            "What are the names of any airports situated in the city of Goroka?"
        ],
        "ref_sql": "SELECT name FROM airports WHERE city = 'Goroka'",
        "MQL": "db.airports.find(\n  { city: \"Goroka\" },\n  { name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2188,
        "db_id": "university_basketball",
        "nl_queries": [
            "What are the average enrollment size of the universities that are founded before 1850?",
            "Return the average enrollment of universities founded before 1850.",
            "What is the average number of enrollees at universities that were established prior to the year 1850?",
            "Calculate the average enrollment for universities founded before the year 1850.",
            "Determine the mean enrollment size of universities that came into existence before 1850."
        ],
        "ref_sql": "SELECT avg(enrollment) FROM university WHERE founded < 1850",
        "MQL": "db.university.aggregate([\n  {\n    $match: {\n      Founded: { $lt: 1850 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_enrollment: { $avg: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_enrollment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 631,
        "db_id": "journal_committee",
        "nl_queries": [
            "What are the names and ages of editors?",
            "Can you provide the names and ages of all the editors?",
            "What are the ages and names of the editors in the database?",
            "List the editors along with their corresponding ages.",
            "Show me the names and ages for each editor."
        ],
        "ref_sql": "SELECT Name , Age FROM editor",
        "MQL": "db.editor.find({}, { \"Name\": 1, \"Age\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 11,
        "db_id": "e_learning",
        "nl_queries": [
            "List all the information about course authors and tutors in alphabetical order of the personal name.",
            "Sort the information about course authors and tutors in alphabetical order of the personal name.",
            "Retrieve all details of course authors and tutors ordered alphabetically by their personal names.",
            "Provide the complete information about course authors and tutors sorted in ascending order based on their personal names.",
            "Display the information concerning course authors and tutors, arranged in alphabetical order according to their personal names."
        ],
        "ref_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "MQL": "db.Course_Authors_and_Tutors.aggregate([\n  {\n    $project: {\n      author_id: 1,\n      author_tutor_ATB: 1,\n      login_name: 1,\n      password: 1,\n      personal_name: 1,\n      middle_name: 1,\n      family_name: 1,\n      gender_mf: 1,\n      address_line_1: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      personal_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2637,
        "db_id": "climbing",
        "nl_queries": [
            "How many climbers are there?",
            "Count the number of climbers.",
            "What is the total number of climbers recorded?",
            "Determine how many climbers are in the database.",
            "How many unique climbers have been noted?"
        ],
        "ref_sql": "SELECT count(*) FROM climber",
        "MQL": "db.mountain.aggregate([\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $group: {\n      _id: \"$climber.Climber_ID\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1987,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the ship type that are used by both ships with Panama and Malta flags.",
            "What types of ships have both ships that have Panama Flags and Malta flags?",
            "Determine which ship types have flags from both Panama and Malta.",
            "Identify the types of ships that carry both the Panama and Malta flags.",
            "What ship types are associated with vessels featuring both Panama and Malta flags?"
        ],
        "ref_sql": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
        "MQL": "db.Ship.aggregate([\n  {\n    $match: {\n      Flag: { $in: [\"Panama\", \"Malta\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Type\",\n      flags: { $addToSet: \"$Flag\" }\n    }\n  },\n  {\n    $match: {\n      flags: { $all: [\"Panama\", \"Malta\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3892,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find the schools that were either founded after 1850 or public.",
            "What are the schools that were either founded before 1850 or are public?",
            "List the universities that were established after 1850 or are publicly funded.",
            "What universities are either founded post-1850 or designated as public institutions?",
            "Identify the schools that have a founding date later than 1850 or that are affiliated as public schools."
        ],
        "ref_sql": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'",
        "MQL": "db.university.find(\n  {\n    $or: [\n      { Founded: { $gt: 1850 } },\n      { Affiliation: \"Public\" }\n    ]\n  },\n  {\n    School: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3731,
        "db_id": "flight_1",
        "nl_queries": [
            "Show origins of all flights with destination Honolulu.",
            "What are the origins of all flights that are headed to Honolulu?",
            "What are the departure locations for flights that go to Honolulu?",
            "List all the origins of the flights that are traveling to Honolulu.",
            "Identify the starting points of flights with Honolulu as their destination."
        ],
        "ref_sql": "SELECT origin FROM Flight WHERE destination = \"Honolulu\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.destination\": \"Honolulu\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      origin: \"$flight.origin\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 250,
        "db_id": "voter_2",
        "nl_queries": [
            "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
            "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
            "Retrieve the unique last names of students who voted for president and are assigned to advisor 8741.",
            "List the distinct last names of all students who participated in the presidential election and whose advisor ID is 8741.",
            "What are the unique last names of students with president votes under advisor number 8741?"
        ],
        "ref_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Advisor: 8741,\n      \"Voting_record.President_Vote\": { $ne: null } \n    }\n  },\n  {\n    $project: {\n      LName: 1\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      distinctLastNames: { $addToSet: \"$LName\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      LName: \"$distinctLastNames\"\n    }\n  },\n  {\n    $unwind: \"$LName\"\n  }\n]);\n"
    },
    {
        "record_id": 1570,
        "db_id": "pilot_record",
        "nl_queries": [
            "Show the fleet series of the aircrafts flied by pilots younger than 34",
            "List the fleet series of aircraft operated by pilots under the age of 34.",
            "What fleet series are associated with pilots who are younger than 34 years?",
            "Provide the fleet series for aircraft flown by pilots aged less than 34.",
            "Give the fleet series details of aircraft piloted by individuals under 34 years old."
        ],
        "ref_sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34",
        "MQL": "db.aircraft.aggregate([\n  {\n    $lookup: {\n      from: \"pilot\",\n      localField: \"pilot_record.Pilot_ID\",\n      foreignField: \"Pilot_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Age\": { $lt: 34 }\n    }\n  },\n  {\n    $project: {\n      \"Fleet_Series\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4124,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find the location and all games score of the school that has Clemson as its team name.",
            "What are the all games score and location of the school called Clemson?",
            "Provide the location of the university with the team named Clemson along with its total games score.",
            "What is the total score for all games and the location of the institution known as Clemson?",
            "Can you tell me the school’s location and the all games score for the Clemson basketball team?"
        ],
        "ref_sql": "SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "MQL": "db.university.aggregate([\n  {\n    $unwind: \"$basketball_match\"\n  },\n  {\n    $match: {\n      \"basketball_match.Team_Name\": \"Clemson\"\n    }\n  },\n  {\n    $project: {\n      All_Games: \"$basketball_match.All_Games\",\n      Location: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2632,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show the number of cities in counties that have a population more than 20000.",
            "How many cities are in counties that have populations of over 20000?",
            "What is the total number of cities within counties that boast a population exceeding 20,000?",
            "Count the cities located in counties where the population is greater than 20,000.",
            "How many cities can be found in counties with populations above 20,000?"
        ],
        "ref_sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $match: {\n      Population: { $gt: 20000 }\n    }\n  },\n  {\n    $project: {\n      count_city: { $size: \"$city\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count_city: { $sum: \"$count_city\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count_city\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3727,
        "db_id": "flight_1",
        "nl_queries": [
            "Show all origins and the number of flights from each origin.",
            "For each origin, how many flights came from there?",
            "List all origins along with the corresponding number of flights departing from each.",
            "What is the flight count for each origin point?",
            "Provide a summary of origin locations and how many flights each has."
        ],
        "ref_sql": "SELECT origin , count(*) FROM Flight GROUP BY origin",
        "MQL": "db.aircraft.aggregate([\n  { $unwind: \"$flight\" },\n  {\n    $group: {\n      _id: \"$flight.origin\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      origin: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4181,
        "db_id": "university_basketball",
        "nl_queries": [
            "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
            "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
            "Provide a list of basketball teams, arranged in order of their total home game scores from highest to lowest.",
            "Can you give me the names of all the teams in the basketball league, sorted by their home game performance in descending order?",
            "Show me the team names from the basketball competition, listed according to their home game scores in decreasing order."
        ],
        "ref_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "MQL": "db.university.aggregate([\n  {\n    $unwind: \"$basketball_match\"\n  },\n  {\n    $sort: {\n      \"basketball_match.All_Home\": -1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Team_Name: \"$basketball_match.Team_Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1357,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the names of the top 10 airlines that operate the most number of routes.",
            "For the airline ids with the top 10 most routes operated, what are their names?",
            "List the names of the 10 airlines with the highest number of routes.",
            "What are the names of the top 10 airlines based on the number of routes they operate?",
            "Identify the airline IDs and names of the 10 airlines that have the most routes available."
        ],
        "ref_sql": "SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "MQL": "db.airlines.aggregate([\n  {\n    $unwind: \"$routes\"\n  },\n  {\n    $group: {\n      _id: {\n        alid: \"$alid\",\n        name: \"$name\"\n      },\n      routeCount: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      routeCount: -1\n    }\n  },\n  {\n    $limit: 10\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id.name\",\n      alid: \"$_id.alid\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 881,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show all statement id and the number of accounts for each statement.",
            "What are the different statement ids on accounts, and the number of accounts for each?",
            "List all statement IDs along with the total number of accounts associated with each statement.",
            "Provide the unique statement IDs related to accounts and the count of accounts for each one.",
            "What are the statement IDs for accounts, and how many accounts are linked to each statement ID?"
        ],
        "ref_sql": "SELECT STATEMENT_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Statements\"\n  },\n  {\n    $unwind: \"$Documents.Statements.Accounts\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.Statements.Statement_ID\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Statement_ID: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4203,
        "db_id": "cinema",
        "nl_queries": [
            "What are the title and director of the films without any schedule?",
            "Can you provide the titles and directors of films that lack a showtime schedule?",
            "What titles and directors belong to films that do not have any scheduled showtimes?",
            "List the directors and titles of films that do not feature a schedule.",
            "Please tell me the titles and directors of movies without any associated showtimes."
        ],
        "ref_sql": "SELECT title , directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
        "MQL": "db.film.find({\n  \"schedule\": { $exists: false }\n}, { \"Title\": 1, \"Directed_by\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 666,
        "db_id": "wine_1",
        "nl_queries": [
            "List the names of all distinct wines that have scores higher than 90.",
            "What are the names of wines with scores higher than 90?",
            "Identify the distinct wine names that have received scores above 90.",
            "Provide the names of all wines with scores that exceed 90.",
            "What distinct wines have a rating higher than 90?"
        ],
        "ref_sql": "SELECT Name FROM WINE WHERE score > 90",
        "MQL": "db.grapes.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $match: {\n      \"wine.Score\": {\n        $gt: 90\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$wine.Name\"\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3218,
        "db_id": "hr_1",
        "nl_queries": [
            "What are the first and last name for those employees who works either in department 70 or 90?",
            "What are the full names of employees who with in department 70 or 90?",
            "Can you provide the first and last names of employees working in departments 70 and 90?",
            "Who are the employees in department 70 or 90, and what are their first and last names?",
            "List the full names of employees associated with either department 70 or department 90."
        ],
        "ref_sql": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
        "MQL": "db.departments.aggregate([\n  {\n    $match: {\n      DEPARTMENT_ID: { $in: [70, 90] }\n    }\n  },\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $project: {\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3163,
        "db_id": "hr_1",
        "nl_queries": [
            "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
            "What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?",
            "List the email addresses of employees in department 50 who do not receive a commission and have a salary ranging from 7000 to 12000.",
            "Provide the emails of employees working in department 50 with no commission percentage and a salary between 7000 and 12000.",
            "Show the email addresses of employees from department 50 who have a salary within the range of 7000 to 12000 and do not have a commission percentage."
        ],
        "ref_sql": "SELECT email FROM employees WHERE commission_pct = \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "MQL": "db.departments.aggregate([\n  {\n    $match: {\n      DEPARTMENT_ID: 50,\n      \"employees.COMMISSION_PCT\": null,\n      \"employees.SALARY\": {\n        $gte: 7000,\n        $lte: 12000\n      }\n    }\n  },\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.COMMISSION_PCT\": null,\n      \"employees.SALARY\": {\n        $gte: 7000,\n        $lte: 12000\n      }\n    }\n  },\n  {\n    $project: {\n      EMAIL: \"$employees.EMAIL\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2055,
        "db_id": "flight_1",
        "nl_queries": [
            "Show ids for all aircrafts with more than 1000 distance.",
            "What are the ids of all aircrafts that can cover a distance of more than 1000?",
            "List the ids of all aircraft that have a distance greater than 1000.",
            "Retrieve the ids for aircraft capable of flying more than 1000 distance.",
            "Provide the identifiers for all aircraft with a distance exceeding 1000."
        ],
        "ref_sql": "SELECT aid FROM Aircraft WHERE distance > 1000",
        "MQL": "db.aircraft.find(\n  {\n    distance: { $gt: 1000 }\n  },\n  {\n    aid: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 4143,
        "db_id": "university_basketball",
        "nl_queries": [
            "What is the team name and acc regular season score of the school that was founded for the longest time?",
            "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
            "What is the name of the team and their ACC regular season performance for the oldest founded school?",
            "Provide the team name along with the ACC regular season score for the institution that has been around the longest.",
            "Retrieve the team name and the ACC record during the regular season for the university established the earliest."
        ],
        "ref_sql": "SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1",
        "MQL": "db.university.aggregate([\n  {\n    $sort: { Founded: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$basketball_match\"\n  },\n  {\n    $project: {\n      Team_Name: \"$basketball_match.Team_Name\",\n      ACC_Regular_Season: \"$basketball_match.ACC_Regular_Season\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2144,
        "db_id": "college_3",
        "nl_queries": [
            "Find the average grade point of student whose last name is Smith.",
            "What is the average gradepoint for students with the last name Smith?",
            "What is the mean grade point for students named Smith?",
            "Determine the average grade point for anyone with the last name Smith.",
            "Calculate the average grade point associated with students who have Smith as their last name."
        ],
        "ref_sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      LName: \"Smith\"\n    }\n  },\n  {\n    $unwind: \"$Enrolled_in\"\n  },\n  {\n    $lookup: {\n      from: \"Gradeconversion\",\n      localField: \"Enrolled_in.Grade\",\n      foreignField: \"lettergrade\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$LName\",\n      avg_gradepoint: {\n        $avg: \"$Docs1.gradepoint\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_gradepoint: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 182,
        "db_id": "climbing",
        "nl_queries": [
            "List the countries that have more than one mountain.",
            "Which countries have more than one mountain?",
            "Identify the countries that feature more than one mountain.",
            "What are the countries that have at least two mountains?",
            "Can you provide a list of countries with multiple mountains?"
        ],
        "ref_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1",
        "MQL": "db.mountain.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2491,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show the number of documents.",
            "Count the number of documents.",
            "How many documents do we have?",
            "Can you tell me the total number of documents?",
            "What is the overall count of documents available?"
        ],
        "ref_sql": "SELECT count(*) FROM Documents",
        "MQL": "db.Projects.aggregate([\n  {\n    $project: {\n      count_Documents: { $size: \"$Documents\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count_Documents: { $sum: \"$count_Documents\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count_Documents\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 924,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show the student id of the oldest student.",
            "What student id corresponds to the oldest student?",
            "What is the student ID of the student who is the oldest?",
            "Can you provide the student ID for the oldest student?",
            "Identify the student ID associated with the oldest student."
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)",
        "MQL": "db.Student.aggregate([\n  {\n    $sort: { Age: -1 }  \n  },\n  {\n    $limit: 1  \n  },\n  {\n    $project: {\n      StuID: 1,  \n      _id: 0  \n    }\n  }\n]);\n"
    },
    {
        "record_id": 1374,
        "db_id": "flight_1",
        "nl_queries": [
            "Show names for all employees who have certificate of Boeing 737-800.",
            "What are the names of all employees who have a certificate to fly Boeing 737-800?",
            "List the names of all employees certified to operate a Boeing 737-800.",
            "Can you provide the names of employees who hold a certificate for flying the Boeing 737-800?",
            "Identify the names of those employees who possess certification for the Boeing 737-800 aircraft."
        ],
        "ref_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"",
        "MQL": "db.employee.aggregate([\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"certificate.aid\",\n      foreignField: \"aid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"Boeing 737-800\"\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1175,
        "db_id": "e_learning",
        "nl_queries": [
            "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
            "What are the names and descriptions of the all courses under the \"Computer Science\" subject?",
            "What are the titles and summaries of the courses offered in the subject \"Computer Science\"?",
            "List the names along with their descriptions for all courses related to the \"Computer Science\" subject.",
            "Provide the names and course outlines for the offerings in the \"Computer Science\" field of study."
        ],
        "ref_sql": "SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = \"Computer Science\"",
        "MQL": "db.Subjects.aggregate([\n  {\n    $match: {\n      subject_name: \"Computer Science\"\n    }\n  },\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $project: {\n      course_name: \"$Courses.course_name\",\n      course_description: \"$Courses.course_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1384,
        "db_id": "flight_4",
        "nl_queries": [
            "Find the name of airline which runs the most number of routes.",
            "What is the name of the airline with the most routes?",
            "Identify the airline that has the highest number of routes.",
            "What airline operates the greatest number of routes?",
            "Which airline runs the largest number of routes?"
        ],
        "ref_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.airlines.aggregate([\n  {\n    $unwind: \"$routes\"\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      routeCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      routeCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3837,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "List ids and details for all projects.",
            "What are the ids and details for each project?",
            "Provide the identifiers and details for every project.",
            "Can you show me the project IDs along with their corresponding details?",
            "Retrieve the project IDs and related details for all available projects."
        ],
        "ref_sql": "SELECT project_id , project_details FROM Projects",
        "MQL": "db.Projects.find({}, { Project_ID: 1, Project_Details: 1, _id: 0 });\n"
    },
    {
        "record_id": 3825,
        "db_id": "customer_complaints",
        "nl_queries": [
            "Find the prices of products which has never received a single complaint.",
            "What are the prices of products that have never gotten a complaint?",
            "List the prices of products that have not received any complaints at all.",
            "What are the product prices for items that have not had any complaints registered?",
            "Show me the prices of all products that have a clean record with no complaints."
        ],
        "ref_sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "MQL": "db.Products.find({\n  \"Complaints\": { $size: 0 }\n}, {\n  \"product_price\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 1717,
        "db_id": "e_learning",
        "nl_queries": [
            "What is the date of enrollment of the course named \"Spanish\"?",
            "Find the the date of enrollment of the \"Spanish\" course.",
            "What date did students enroll in the Spanish course?",
            "Provide the enrollment date for the course titled \"Spanish.\"",
            "When is the enrollment date for the course called \"Spanish\"?"
        ],
        "ref_sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"",
        "MQL": "db.Subjects.aggregate([\n  {\n    $unwind: \"$Courses\"\n  },\n  {\n    $match: {\n      \"Courses.course_name\": \"Spanish\"\n    }\n  },\n  {\n    $unwind: \"$Courses.Student_Course_Enrolment\"\n  },\n  {\n    $project: {\n      date_of_enrolment: \"$Courses.Student_Course_Enrolment.date_of_enrolment\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1731,
        "db_id": "cinema",
        "nl_queries": [
            "Show director with the largest number of show times in total.",
            "Identify the director with the highest total number of showtimes.",
            "Who is the director that has the most showtimes overall?",
            "Find the director associated with the greatest number of showtimes.",
            "Which director records the largest total of showtimes?"
        ],
        "ref_sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
        "MQL": "db.cinema.aggregate([\n  { $unwind: \"$schedule\" },\n  {\n    $lookup: {\n      from: \"film\",\n      localField: \"schedule.Film_ID\",\n      foreignField: \"Film_ID\",\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  {\n    $group: {\n      _id: \"$Docs1.Directed_by\",\n      sum_Show_times_per_day: { $sum: \"$schedule.Show_times_per_day\" }\n    }\n  },\n  { $sort: { sum_Show_times_per_day: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      Directed_by: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 667,
        "db_id": "musical",
        "nl_queries": [
            "List the name of actors in ascending alphabetical order.",
            "What are the names of actors, ordered alphabetically?",
            "Retrieve the names of actors sorted in alphabetical order from A to Z.",
            "Provide a list of actor names arranged in ascending order.",
            "Show the names of all actors, organized alphabetically."
        ],
        "ref_sql": "SELECT Name FROM actor ORDER BY Name ASC",
        "MQL": "db.actor.find({}, { Name: 1, _id: 0 }).sort({ Name: 1 });\n"
    },
    {
        "record_id": 352,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all allergies with type food.",
            "What are all the different food allergies?",
            "List all types of allergies related to food.",
            "What food allergies are there?",
            "Provide a list of all allergies categorized as food."
        ],
        "ref_sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\"",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $match: {\n      AllergyType: \"food\"\n    }\n  },\n  {\n    $project: {\n      Allergy: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1929,
        "db_id": "voter_1",
        "nl_queries": [
            "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "Identify the area codes where voting occurred for both 'Tabatha Gehling' and 'Kelly Clauss'.",
            "Find the area codes that show votes for both contestants 'Tabatha Gehling' and 'Kelly Clauss'.",
            "Can you list the area codes from which voters supported both 'Tabatha Gehling' and 'Kelly Clauss'?",
            "What are the area codes in which votes were cast for both 'Tabatha Gehling' and 'Kelly Clauss'?"
        ],
        "ref_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
        "MQL": "db.CONTESTANTS.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"contestant_name\": \"Tabatha Gehling\" },\n        { \"contestant_name\": \"Kelly Clauss\" }\n      ]\n    }\n  },\n  {\n    $lookup: {\n      from: \"AREA_CODE_STATE\",\n      localField: \"VOTES.state\",\n      foreignField: \"state\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.area_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      area_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 711,
        "db_id": "climbing",
        "nl_queries": [
            "Show the names of mountains with height more than 5000 or prominence more than 1000.",
            "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
            "List the names of mountains that have a height greater than 5000 meters or a prominence exceeding 1000 meters.",
            "Give me the names of mountains whose height is more than 5000 or prominence is above 1000.",
            "Identify the mountains that are either taller than 5000 meters or have a prominence higher than 1000 meters; provide their names."
        ],
        "ref_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
        "MQL": "db.mountain.find({\n  $or: [\n    { Height: { $gt: 5000 } },\n    { Prominence: { $gt: 1000 } }\n  ]\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3559,
        "db_id": "flight_1",
        "nl_queries": [
            "Show names for all aircrafts with distances more than the average.",
            "What are the names of all aircrafts that can cover more distances than average?",
            "List the names of all aircraft that have a distance capability exceeding the average distance.",
            "What are the names of aircraft that can travel greater distances than the calculated average?",
            "Provide the names of all aircraft whose distances surpass the average distance."
        ],
        "ref_sql": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)",
        "MQL": "db.aircraft.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_distance: { $avg: \"$distance\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"aircraft\",\n      let: { avg_distance: \"$avg_distance\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$distance\", \"$$avg_distance\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            name: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$Docs1.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2835,
        "db_id": "device",
        "nl_queries": [
            "How many different software platforms are there for devices?",
            "Count the number of different software platforms.",
            "What is the total number of unique software platforms available for devices?",
            "Determine how many distinct software platforms are present for the devices.",
            "How many individual software platforms can be found for the devices?"
        ],
        "ref_sql": "SELECT count(DISTINCT Software_Platform) FROM device",
        "MQL": "db.device.aggregate([\n  {\n    $group: {\n      _id: \"$Software_Platform\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Software_Platform: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Software_Platform: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3609,
        "db_id": "county_public_safety",
        "nl_queries": [
            "Show the name of cities in the county that has the largest number of police officers.",
            "What are the names of cities that are in the county with the most police officers?",
            "Retrieve the names of cities located in the county with the highest count of police officers.",
            "What cities can be found in the county that employs the most police officers?",
            "List the names of cities within the county that has the greatest number of police personnel."
        ],
        "ref_sql": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
        "MQL": "db.county_public_safety.aggregate([\n  {\n    $sort: { Police_officers: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$city.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2227,
        "db_id": "flight_1",
        "nl_queries": [
            "What is average and maximum salary of all employees.",
            "What is the average and largest salary of all employees?",
            "Can you tell me the average and the highest salary among all employees?",
            "What are the average salary and the highest salary for all staff members?",
            "Determine the average and maximum salaries that employees earn overall."
        ],
        "ref_sql": "SELECT avg(salary) , max(salary) FROM Employee",
        "MQL": "db.employee.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_salary: { $avg: \"$salary\" },\n      max_salary: { $max: \"$salary\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_salary: 1,\n      max_salary: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1571,
        "db_id": "college_3",
        "nl_queries": [
            "What are the first and last names of the instructors who teach the top 3 number of courses?",
            "What are the full names of the 3 instructors who teach the most courses?",
            "Who are the three instructors with the highest number of courses taught, and what are their full names?",
            "Can you tell me the first and last names of the top three faculty members in terms of course load?",
            "List the full names of the three faculty members who are responsible for teaching the largest number of courses."
        ],
        "ref_sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "MQL": "db.Faculty.aggregate([\n  {\n    $unwind: \"$Course\"\n  },\n  {\n    $group: {\n      _id: \"$FacID\",\n      courseCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { courseCount: -1 }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $lookup: {\n      from: \"Faculty\",\n      localField: \"_id\",\n      foreignField: \"FacID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Fname: \"$Docs1.Fname\",\n      Lname: \"$Docs1.Lname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2576,
        "db_id": "allergy_1",
        "nl_queries": [
            "How many students live in HKG or CHI?",
            "Give the number of students living in either HKG or CHI.",
            "What is the total count of students living in either Hong Kong or Chicago?",
            "How many students are there in HKG and CHI combined?",
            "Count the number of students that reside in either HKG or CHI."
        ],
        "ref_sql": "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      city_code: {\n        $in: [\"HKG\", \"CHI\"]\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3489,
        "db_id": "ship_1",
        "nl_queries": [
            "Find the name, type, and flag of the ship that is built in the most recent year.",
            "What is the name, type, and flag of the ship that was built in the most recent year?",
            "What are the name, type, and flag of the newest ship?",
            "Retrieve the name, type, and flag for the ship constructed in the latest year.",
            "Identify the name, type, and flag of the ship that was built most recently."
        ],
        "ref_sql": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
        "MQL": "db.Ship.aggregate([\n  {\n    $sort: { Built_Year: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Type: 1,\n      Flag: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1233,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What are the ids of documents with letter 's' in the name with any expense budgets.",
            "Give the ids of documents that have expenses and contain the letter s in their names.",
            "What are the document IDs for documents that include the letter 's' in their names and have associated expense budgets?",
            "List the IDs of any documents possessing the letter 's' in their names that also report expenses.",
            "Identify the document IDs of documents with names containing the letter 's' that come with expenses."
        ],
        "ref_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.Document_Name\": {\n        $regex: \"s\",\n        $options: \"i\"\n      },\n      \"Documents.Documents_with_Expenses\": {\n        $exists: true,\n        $not: {\n          $size: 0\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      Document_ID: \"$Documents.Document_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3325,
        "db_id": "hr_1",
        "nl_queries": [
            "display job title and average salary of employees.",
            "What is the average salary for each job title?",
            "Show the average salary corresponding to each job title for employees.",
            "List the job titles along with the average salaries of their respective employees.",
            "What are the average salaries for all job titles among employees?"
        ],
        "ref_sql": "SELECT job_title , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $group: {\n      _id: \"$JOB_TITLE\",\n      AVG_salary: { $avg: \"$employees.SALARY\" }\n    }\n  },\n  {\n    $project: {\n      JOB_TITLE: \"$_id\",\n      AVG_salary: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 129,
        "db_id": "device",
        "nl_queries": [
            "List the carriers of devices in ascending alphabetical order.",
            "What are the different carriers for devices, listed in alphabetical order?",
            "Provide an alphabetical list of the device carriers.",
            "Show all unique carriers for devices sorted in ascending order.",
            "What are the distinct carriers of devices, arranged alphabetically?"
        ],
        "ref_sql": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "MQL": "db.device.aggregate([\n  {\n    $group: {\n      _id: \"$Carrier\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      Carrier: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2651,
        "db_id": "voter_1",
        "nl_queries": [
            "How many contestants did not get voted?",
            "What is the total number of contestants who have not received any votes?",
            "How many contestants are there that haven't been voted for?",
            "Can you tell me the count of contestants that did not receive any votes?",
            "How many competitors did not secure any votes in the contest?"
        ],
        "ref_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "MQL": "db.CONTESTANTS.aggregate([\n  {\n    $match: {\n      \"VOTES\": { $size: 0 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3139,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "What is the document type code with most number of documents?",
            "Return the code of the document type that is most common.",
            "Which document type code has the highest count of documents?",
            "Identify the document type code that appears most frequently.",
            "What is the most prevalent document type code in terms of document quantity?"
        ],
        "ref_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Projects.aggregate([\n  { $unwind: \"$Documents\" },\n  {\n    $group: {\n      _id: \"$Documents.Document_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { Document_Type_Code: \"$_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 3089,
        "db_id": "cinema",
        "nl_queries": [
            "List all directors along with the number of films directed by each director.",
            "Provide a list of directors along with the total films they have directed.",
            "Show all directors and count how many films each has directed.",
            "Create a list of directors and the corresponding number of films they have helmed.",
            "Identify all directors together with the quantity of films they have produced."
        ],
        "ref_sql": "SELECT directed_by , count(*) FROM film GROUP BY directed_by",
        "MQL": "db.film.aggregate([\n  {\n    $group: {\n      _id: \"$Directed_by\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Directed_by: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 369,
        "db_id": "allergy_1",
        "nl_queries": [
            "Show all cities where students live.",
            "What cities do students live in?",
            "List all the cities in which students reside.",
            "Identify the cities where students are located.",
            "What are the different cities that students live in?"
        ],
        "ref_sql": "SELECT DISTINCT city_code FROM Student",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$city_code\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      city_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 768,
        "db_id": "musical",
        "nl_queries": [
            "Show different nominees and the number of musicals they have been nominated.",
            "How many musicals has each nominee been nominated for?",
            "List the nominees along with the total number of musicals for which they received nominations.",
            "Can you provide the count of nominations for each individual nominee?",
            "Identify the nominees and tally how many musicals each has been nominated for."
        ],
        "ref_sql": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee",
        "MQL": "db.musical.aggregate([\n  {\n    $group: {\n      _id: \"$Nominee\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Nominee: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 320,
        "db_id": "hr_1",
        "nl_queries": [
            "find the name of all departments that do actually have one or more employees assigned to them.",
            "What are the names of departments that have at least one employee.",
            "List the names of all departments that have one or more employees assigned.",
            "Provide the names of departments with at least a single employee.",
            "Identify departments that currently have employees and retrieve their names."
        ],
        "ref_sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
        "MQL": "db.departments.aggregate([\n  {\n    $match: {\n      employees: {\n        $exists: true,\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      DEPARTMENT_NAME: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 400,
        "db_id": "gas_company",
        "nl_queries": [
            "Show all main industry for all companies.",
            "What are the different main industries for all companies?",
            "List all unique main industries represented by the companies.",
            "What are the various main industries associated with the companies?",
            "Provide a complete list of main industries for all the companies in the dataset."
        ],
        "ref_sql": "SELECT DISTINCT main_industry FROM company",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: \"$Main_Industry\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Main_Industry: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3327,
        "db_id": "hr_1",
        "nl_queries": [
            "display the job title of jobs which minimum salary is greater than 9000.",
            "Which job titles correspond to jobs with salaries over 9000?",
            "List the job titles for positions that offer a minimum salary higher than 9000.",
            "What are the job titles of positions that have a minimum salary exceeding 9000?",
            "Show me the titles of jobs where the minimum salary is above 9000."
        ],
        "ref_sql": "SELECT job_title FROM jobs WHERE min_salary > 9000",
        "MQL": "db.jobs.find(\n  { \"MIN_SALARY\": { $gt : 9000 } },\n  { \"JOB_TITLE\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1088,
        "db_id": "climbing",
        "nl_queries": [
            "Show the times used by climbers to climb mountains in Country Uganda.",
            "What are the times used by climbers who climbed mountains in the country of Uganda?",
            "List the times recorded by climbers who ascended mountains in Uganda.",
            "What climbing times have climbers noted for mountains located in Uganda?",
            "Provide the times taken by climbers to scale mountains within the country of Uganda."
        ],
        "ref_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\"",
        "MQL": "db.mountain.aggregate([\n  {\n    $match: {\n      Country: \"Uganda\"\n    }\n  },\n  {\n    $unwind: \"$climber\"\n  },\n  {\n    $project: {\n      Time: \"$climber.Time\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3360,
        "db_id": "gas_company",
        "nl_queries": [
            "Show all main industry and total market value in each industry.",
            "What are the main indstries and total market value for each industry?",
            "List the main industries along with their corresponding total market values.",
            "Provide the main industries and the cumulative market value for each sector.",
            "What are the main sectors and their total market value across all industries?"
        ],
        "ref_sql": "SELECT main_industry , sum(market_value) FROM company GROUP BY main_industry",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: \"$Main_Industry\",\n      sum_market_value: { $sum: \"$Market_Value\" }\n    }\n  },\n  {\n    $project: {\n      Main_Industry: \"$_id\",\n      sum_market_value: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 25,
        "db_id": "hr_1",
        "nl_queries": [
            "display those employees who joined after 7th September, 1987.",
            "Which employees were hired after September 7th, 1987?",
            "List all employees who were hired subsequent to September 7, 1987.",
            "Show me the employees that started working after the 7th of September, 1987.",
            "Who are the employees that joined the company after September 7, 1987?"
        ],
        "ref_sql": "SELECT * FROM employees WHERE hire_date > '1987-09-07'",
        "MQL": "db.departments.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $match: {\n      \"employees.HIRE_DATE\": { $gt: \"1987-09-07\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      EMPLOYEE_ID: \"$employees.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employees.FIRST_NAME\",\n      LAST_NAME: \"$employees.LAST_NAME\",\n      EMAIL: \"$employees.EMAIL\",\n      PHONE_NUMBER: \"$employees.PHONE_NUMBER\",\n      HIRE_DATE: \"$employees.HIRE_DATE\",\n      JOB_ID: \"$employees.JOB_ID\",\n      SALARY: \"$employees.SALARY\",\n      COMMISSION_PCT: \"$employees.COMMISSION_PCT\",\n      MANAGER_ID: \"$employees.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employees.DEPARTMENT_ID\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3729,
        "db_id": "flight_1",
        "nl_queries": [
            "Show origin and destination for flights with price higher than 300.",
            "What is the origin and destination for all flights whose price is higher than 300?",
            "Provide the origin and destination of flights costing more than 300.",
            "List the departure and arrival locations for all flights priced above 300.",
            "What are the starting and ending points for flights with a price exceeding 300?"
        ],
        "ref_sql": "SELECT origin , destination FROM Flight WHERE price > 300",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.price\": { $gt: 300 }\n    }\n  },\n  {\n    $project: {\n      origin: \"$flight.origin\",\n      destination: \"$flight.destination\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2948,
        "db_id": "flight_4",
        "nl_queries": [
            "Which countries has the most number of airlines whose active status is 'Y'?",
            "What are the countries with the most airlines whose active status is Y?",
            "Which country has the highest number of airlines that are currently active?",
            "Identify the country with the most active airlines.",
            "What is the country with the greatest number of airlines marked as active?"
        ],
        "ref_sql": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      active: 'Y'\n    }\n  },\n  {\n    $group: {\n      _id: \"$country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 695,
        "db_id": "journal_committee",
        "nl_queries": [
            "List the names of editors in ascending order of age.",
            "Retrieve the names of editors sorted by their age from youngest to oldest.",
            "Can you provide a list of editor names ordered by age in ascending order?",
            "Show me the names of editors arranged in increasing order of their age.",
            "Present the names of editors sorted from the youngest to the oldest."
        ],
        "ref_sql": "SELECT Name FROM editor ORDER BY Age ASC",
        "MQL": "db.editor.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Age\": 1 });\n"
    },
    {
        "record_id": 1644,
        "db_id": "journal_committee",
        "nl_queries": [
            "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
            "List the names of editors from journals whose sales are greater than 3000.",
            "Provide the names of editors associated with journals that have sales exceeding 3000.",
            "Identify the editors connected to journals with sales higher than 3000.",
            "Retrieve the names of editors involved with journals that have sales more than 3000."
        ],
        "ref_sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000",
        "MQL": "db.editor.aggregate([\n  {\n    $lookup: {\n      from: \"journal\",\n      localField: \"journal_committee.Journal_ID\",\n      foreignField: \"Journal_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Sales\": { $gt: 3000 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1218,
        "db_id": "e_learning",
        "nl_queries": [
            "What are the enrollment dates of all the tests that have result \"Pass\"?",
            "Find the enrollment date for all the tests that have \"Pass\" result.",
            "List the enrollment dates for all tests that resulted in a \"Pass.\"",
            "Retrieve the enrollment dates of tests where the result is \"Pass.\"",
            "What are the dates of enrollment for tests that have received a \"Pass\" outcome?"
        ],
        "ref_sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"",
        "MQL": "db.Students.aggregate([\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $unwind: \"$Student_Course_Enrolment.Student_Tests_Taken\"\n  },\n  {\n    $match: {\n      \"Student_Course_Enrolment.Student_Tests_Taken.test_result\": \"Pass\"\n    }\n  },\n  {\n    $project: {\n      date_of_enrolment: \"$Student_Course_Enrolment.date_of_enrolment\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2059,
        "db_id": "allergy_1",
        "nl_queries": [
            "Which allergy type has most number of allergies?",
            "Which allergy type is most common?",
            "What is the most prevalent allergy type?",
            "Identify the allergy type that occurs most frequently.",
            "Which type of allergy is the most widely reported?"
        ],
        "ref_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Allergy_Type.aggregate([\n  {\n    $group: {\n      _id: \"$AllergyType\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      AllergyType: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2596,
        "db_id": "flight_4",
        "nl_queries": [
            "How many airlines are there?",
            "What is the total number of airlines?",
            "What is the number of airlines currently listed?",
            "Can you tell me the total count of airlines?",
            "How many airlines are currently in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM airlines",
        "MQL": "db.airlines.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1234,
        "db_id": "cre_Docs_and_Epenses",
        "nl_queries": [
            "Show ids for all documents with budget types described as 'Government'.",
            "Give the ids for documents that have the budget description 'Government'.",
            "Retrieve the IDs of all documents categorized under the budget type labeled 'Government'.",
            "List the document IDs for those entries with a budget description specified as 'Government'.",
            "Provide the IDs for documents that have a budget type noted as 'Government'."
        ],
        "ref_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = \"Government\"",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Documents_with_Expenses\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Budget_Codes\",\n      localField: \"Documents.Documents_with_Expenses.Budget_Type_Code\",\n      foreignField: \"Budget_Type_Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"Docs1.Budget_Type_Description\": \"Government\"\n        },\n        {\n          \"Documents.Documents_with_Expenses.Document_Details\": \"Government\"\n        }\n      ]\n    }\n  },\n  {\n    $project: {\n      Document_ID: \"$Documents.Document_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3958,
        "db_id": "university_basketball",
        "nl_queries": [
            "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
            "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
            "Calculate the total student enrollment for universities established post-1850, categorized by their affiliations.",
            "List the various affiliations along with the total number of students enrolled in colleges founded after the year 1850.",
            "What is the total enrollment for each type of affiliation among schools founded after 1850?"
        ],
        "ref_sql": "SELECT sum(Enrollment) , affiliation FROM university WHERE founded > 1850 GROUP BY affiliation",
        "MQL": "db.university.aggregate([\n  {\n    $match: {\n      Founded: { $gt: 1850 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Affiliation\",\n      sum_Enrollment: { $sum: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Affiliation: \"$_id\",\n      sum_Enrollment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1216,
        "db_id": "e_learning",
        "nl_queries": [
            "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
            "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
            "Provide the enrollment and completion dates for the student named Bernie Zieme.",
            "What are the dates when Bernie Zieme enrolled in and finished his courses?",
            "Can you list the dates on which the student Zieme, with the first name Bernie, registered for and completed his courses?"
        ],
        "ref_sql": "SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = \"Zieme\" AND T2.personal_name = \"Bernie\"",
        "MQL": "db.Students.aggregate([\n  {\n    $match: {\n      family_name: \"Zieme\",\n      personal_name: \"Bernie\"\n    }\n  },\n  {\n    $unwind: \"$Student_Course_Enrolment\"\n  },\n  {\n    $project: {\n      date_of_enrolment: \"$Student_Course_Enrolment.date_of_enrolment\",\n      date_of_completion: \"$Student_Course_Enrolment.date_of_completion\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 53,
        "db_id": "voter_2",
        "nl_queries": [
            "Report the distinct advisors who have more than 2 students.",
            "Which advisors are advising more than 2 students?",
            "Identify the advisors with more than two students assigned to them.",
            "List the distinct advisors who supervise over 2 students.",
            "Who are the advisors that have more than two students under their guidance?"
        ],
        "ref_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*) > 2",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      Advisor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    }
]