[
    {
        "record_id": "1861_0",
        "db_id": "school_bus",
        "nlq": "Show the school name and driver name for all school buses.",
        "ref_sql": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
        "MQL": "db.school.aggregate([\n  {\n    $lookup: {\n      from: \"driver\",\n      localField: \"School_ID\",\n      foreignField: \"school_bus.School_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"School\": 1,\n      \"Name\": \"$Docs1.Name\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Name, School, School_ID, school_bus.School_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Name, School, _id",
        "query_collection": "driver, school",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "student_1",
                "NLQ": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            }
        ]
    },
    {
        "record_id": "1861_1",
        "db_id": "school_bus",
        "nlq": "List the names of schools along with the names of their drivers for all school buses.",
        "ref_sql": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
        "MQL": "db.school.aggregate([\n  {\n    $lookup: {\n      from: \"driver\",\n      localField: \"School_ID\",\n      foreignField: \"school_bus.School_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"School\": 1,\n      \"Name\": \"$Docs1.Name\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Name, School, School_ID, school_bus.School_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Name, School, _id",
        "query_collection": "driver, school",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "news_report",
                "NLQ": "Provide the names of reporters together with the dates of the events they reported on.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "1861_2",
        "db_id": "school_bus",
        "nlq": "Provide the driver names alongside the names of the schools for each school bus.",
        "ref_sql": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
        "MQL": "db.school.aggregate([\n  {\n    $lookup: {\n      from: \"driver\",\n      localField: \"School_ID\",\n      foreignField: \"school_bus.School_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"School\": 1,\n      \"Name\": \"$Docs1.Name\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Name, School, School_ID, school_bus.School_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Name, School, _id",
        "query_collection": "driver, school",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "student_1",
                "NLQ": "For every grade, provide the grade level, how many classrooms are utilized, and the overall student count within that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            }
        ]
    },
    {
        "record_id": "1861_3",
        "db_id": "school_bus",
        "nlq": "Display the school name together with the respective driver's name for all the school buses.",
        "ref_sql": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
        "MQL": "db.school.aggregate([\n  {\n    $lookup: {\n      from: \"driver\",\n      localField: \"School_ID\",\n      foreignField: \"school_bus.School_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"School\": 1,\n      \"Name\": \"$Docs1.Name\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Name, School, School_ID, school_bus.School_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Name, School, _id",
        "query_collection": "driver, school",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "student_1",
                "NLQ": "For every grade, provide the grade level, how many classrooms are utilized, and the overall student count within that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            }
        ]
    },
    {
        "record_id": "1861_4",
        "db_id": "school_bus",
        "nlq": "Give me the names of schools and their associated drivers for all school bus routes.",
        "ref_sql": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
        "MQL": "db.school.aggregate([\n  {\n    $lookup: {\n      from: \"driver\",\n      localField: \"School_ID\",\n      foreignField: \"school_bus.School_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"School\": 1,\n      \"Name\": \"$Docs1.Name\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Name, School, School_ID, school_bus.School_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Name, School, _id",
        "query_collection": "driver, school",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "news_report",
                "NLQ": "Provide the names of reporters together with the dates of the events they reported on.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "3537_0",
        "db_id": "cinema",
        "nlq": "Show name, opening year, and capacity for each cinema.",
        "ref_sql": "SELECT name , openning_year , capacity FROM cinema",
        "MQL": "db.cinema.find({}, { \"Name\": 1, \"Openning_year\": 1, \"Capacity\": 1, \"_id\": 0 });\n",
        "fields_db": "Capacity, Name, Openning_year",
        "fields_alias": "_id",
        "target_fields": "Capacity, Name, Openning_year, _id",
        "query_collection": "cinema",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "news_report",
                "NLQ": "Show the names of journalists and the dates of the events they reported.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "3537_1",
        "db_id": "cinema",
        "nlq": "List the names, opening years, and capacities of all cinemas.",
        "ref_sql": "SELECT name , openning_year , capacity FROM cinema",
        "MQL": "db.cinema.find({}, { \"Name\": 1, \"Openning_year\": 1, \"Capacity\": 1, \"_id\": 0 });\n",
        "fields_db": "Capacity, Name, Openning_year",
        "fields_alias": "_id",
        "target_fields": "Capacity, Name, Openning_year, _id",
        "query_collection": "cinema",
        "RAG_examples": [
            {
                "db_id": "news_report",
                "NLQ": "Show the names of journalists and the dates of the events they reported.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            },
            {
                "db_id": "news_report",
                "NLQ": "Provide the names of reporters together with the dates of the events they reported on.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "3537_2",
        "db_id": "cinema",
        "nlq": "Provide the opening year, name, and capacity for each cinema available.",
        "ref_sql": "SELECT name , openning_year , capacity FROM cinema",
        "MQL": "db.cinema.find({}, { \"Name\": 1, \"Openning_year\": 1, \"Capacity\": 1, \"_id\": 0 });\n",
        "fields_db": "Capacity, Name, Openning_year",
        "fields_alias": "_id",
        "target_fields": "Capacity, Name, Openning_year, _id",
        "query_collection": "cinema",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "news_report",
                "NLQ": "Provide the names of reporters together with the dates of the events they reported on.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "3537_3",
        "db_id": "cinema",
        "nlq": "Can you display the capacity, opening year, and names of the cinemas?",
        "ref_sql": "SELECT name , openning_year , capacity FROM cinema",
        "MQL": "db.cinema.find({}, { \"Name\": 1, \"Openning_year\": 1, \"Capacity\": 1, \"_id\": 0 });\n",
        "fields_db": "Capacity, Name, Openning_year",
        "fields_alias": "_id",
        "target_fields": "Capacity, Name, Openning_year, _id",
        "query_collection": "cinema",
        "RAG_examples": [
            {
                "db_id": "news_report",
                "NLQ": "Can you show the names of the journalists and the dates of the events they have reported about?",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            },
            {
                "db_id": "news_report",
                "NLQ": "Show the names of journalists and the dates of the events they reported.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "3537_4",
        "db_id": "cinema",
        "nlq": "Retrieve the names, capacities, and their respective opening years for every cinema in the database.",
        "ref_sql": "SELECT name , openning_year , capacity FROM cinema",
        "MQL": "db.cinema.find({}, { \"Name\": 1, \"Openning_year\": 1, \"Capacity\": 1, \"_id\": 0 });\n",
        "fields_db": "Capacity, Name, Openning_year",
        "fields_alias": "_id",
        "target_fields": "Capacity, Name, Openning_year, _id",
        "query_collection": "cinema",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "news_report",
                "NLQ": "Show the names of journalists and the dates of the events they reported.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "765_0",
        "db_id": "pilot_record",
        "nlq": "Show the most common nationality of pilots.",
        "ref_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "Nationality",
        "fields_alias": "_id, count",
        "target_fields": "Nationality, _id",
        "query_collection": "pilot",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "List all airline names and their abbreviations in \"USA\".",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "765_1",
        "db_id": "pilot_record",
        "nlq": "What is the nationality that most pilots belong to?",
        "ref_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "Nationality",
        "fields_alias": "_id, count",
        "target_fields": "Nationality, _id",
        "query_collection": "pilot",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "What are the airline names and abbreviations for airlines in the USA?",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "Can you show me the airline names and their corresponding abbreviations for US-based airlines?",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "765_2",
        "db_id": "pilot_record",
        "nlq": "Find the nationality with the largest number of pilots.",
        "ref_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "Nationality",
        "fields_alias": "_id, count",
        "target_fields": "Nationality, _id",
        "query_collection": "pilot",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "Find the description and code of the service type that is performed the most times.",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            }
        ]
    },
    {
        "record_id": "765_3",
        "db_id": "pilot_record",
        "nlq": "Identify the most frequently occurring nationality among pilots.",
        "ref_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "Nationality",
        "fields_alias": "_id, count",
        "target_fields": "Nationality, _id",
        "query_collection": "pilot",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "Give me the description and code for the service type that is conducted with the highest frequency.",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            }
        ]
    },
    {
        "record_id": "765_4",
        "db_id": "pilot_record",
        "nlq": "Which nationality has the highest count of pilots?",
        "ref_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "Nationality",
        "fields_alias": "_id, count",
        "target_fields": "Nationality, _id",
        "query_collection": "pilot",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the total number of enrollment of schools that do not have any goalie player?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "210_0",
        "db_id": "college_3",
        "nlq": "Find the first names of students whose first names contain letter \"a\".",
        "ref_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "MQL": "db.Student.find(\n  {\n    Fname: { $regex: \"a\", $options: \"i\" }\n  },\n  {\n    Fname: 1,\n    _id: 0\n  }\n);\n",
        "fields_db": "Fname",
        "fields_alias": "_id",
        "target_fields": "Fname, _id",
        "query_collection": "Student",
        "RAG_examples": [
            {
                "db_id": "museum_visit",
                "NLQ": "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            },
            {
                "db_id": "museum_visit",
                "NLQ": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            }
        ]
    },
    {
        "record_id": "210_1",
        "db_id": "college_3",
        "nlq": "What are the first names for students who have an \"a\" in their first name?",
        "ref_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "MQL": "db.Student.find(\n  {\n    Fname: { $regex: \"a\", $options: \"i\" }\n  },\n  {\n    Fname: 1,\n    _id: 0\n  }\n);\n",
        "fields_db": "Fname",
        "fields_alias": "_id",
        "target_fields": "Fname, _id",
        "query_collection": "Student",
        "RAG_examples": [
            {
                "db_id": "browser_web",
                "NLQ": "Which names of accelerators include the term \"Opera\"?",
                "MQL": "db.Web_client_accelerator.find({\n  \"name\": { $regex: \"Opera\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n",
                "fields_db": "name",
                "fields_alias": "_id",
                "target_fields": "_id, name",
                "query_collection": "Web_client_accelerator"
            },
            {
                "db_id": "flight_2",
                "NLQ": "What are the airline names and abbreviations for airlines in the USA?",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "210_2",
        "db_id": "college_3",
        "nlq": "List the first names of all students that have the letter \"a\" in their first name.",
        "ref_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "MQL": "db.Student.find(\n  {\n    Fname: { $regex: \"a\", $options: \"i\" }\n  },\n  {\n    Fname: 1,\n    _id: 0\n  }\n);\n",
        "fields_db": "Fname",
        "fields_alias": "_id",
        "target_fields": "Fname, _id",
        "query_collection": "Student",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "flight_2",
                "NLQ": "List all airline names and their abbreviations in \"USA\".",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "210_3",
        "db_id": "college_3",
        "nlq": "Provide the first names of students where the name includes the letter \"a\".",
        "ref_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "MQL": "db.Student.find(\n  {\n    Fname: { $regex: \"a\", $options: \"i\" }\n  },\n  {\n    Fname: 1,\n    _id: 0\n  }\n);\n",
        "fields_db": "Fname",
        "fields_alias": "_id",
        "target_fields": "Fname, _id",
        "query_collection": "Student",
        "RAG_examples": [
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            },
            {
                "db_id": "news_report",
                "NLQ": "Provide the names of reporters together with the dates of the events they reported on.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "210_4",
        "db_id": "college_3",
        "nlq": "Retrieve the first names of students whose names feature the letter \"a\".",
        "ref_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "MQL": "db.Student.find(\n  {\n    Fname: { $regex: \"a\", $options: \"i\" }\n  },\n  {\n    Fname: 1,\n    _id: 0\n  }\n);\n",
        "fields_db": "Fname",
        "fields_alias": "_id",
        "target_fields": "Fname, _id",
        "query_collection": "Student",
        "RAG_examples": [
            {
                "db_id": "museum_visit",
                "NLQ": "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            },
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "22_0",
        "db_id": "hr_1",
        "nlq": "display all the information of those employees who did not have any job in the past.",
        "ref_sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"employees.EMPLOYEE_ID\",\n      foreignField: \"employees.EMPLOYEE_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      employee: {\n        $cond: [\n          {\n            $eq: [{ $size: \"$employees.job_history\" }, 0]\n          },\n          \"$employees\",\n          {\n            $cond: [\n              {\n                $eq: [{ $size: \"$Docs1.employees.job_history\" }, 0]\n              },\n              \"$Docs1.employees\",\n              false\n            ]\n          }\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      employee: { $ne: false }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employee.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employee.FIRST_NAME\",\n      LAST_NAME: \"$employee.LAST_NAME\",\n      EMAIL: \"$employee.EMAIL\",\n      PHONE_NUMBER: \"$employee.PHONE_NUMBER\",\n      HIRE_DATE: \"$employee.HIRE_DATE\",\n      JOB_ID: \"$employee.JOB_ID\",\n      SALARY: \"$employee.SALARY\",\n      COMMISSION_PCT: \"$employee.COMMISSION_PCT\",\n      MANAGER_ID: \"$employee.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employee.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "DEPARTMENT_ID, JOB_ID, MANAGER_ID, employees.EMPLOYEE_ID",
        "fields_alias": "COMMISSION_PCT, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, LAST_NAME, PHONE_NUMBER, SALARY, _id, employee, employees",
        "target_fields": "COMMISSION_PCT, DEPARTMENT_ID, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, LAST_NAME, MANAGER_ID, PHONE_NUMBER, SALARY, _id",
        "query_collection": "departments, jobs",
        "RAG_examples": [
            {
                "db_id": "news_report",
                "NLQ": "Show the names of journalists and the dates of the events they reported.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            },
            {
                "db_id": "museum_visit",
                "NLQ": "Show the names and levels of membership for those visitors whose membership is higher than 4, and order the list by age, starting with the oldest.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            }
        ]
    },
    {
        "record_id": "22_1",
        "db_id": "hr_1",
        "nlq": "What is all the information about employees who have never had a job in the past?",
        "ref_sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"employees.EMPLOYEE_ID\",\n      foreignField: \"employees.EMPLOYEE_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      employee: {\n        $cond: [\n          {\n            $eq: [{ $size: \"$employees.job_history\" }, 0]\n          },\n          \"$employees\",\n          {\n            $cond: [\n              {\n                $eq: [{ $size: \"$Docs1.employees.job_history\" }, 0]\n              },\n              \"$Docs1.employees\",\n              false\n            ]\n          }\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      employee: { $ne: false }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employee.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employee.FIRST_NAME\",\n      LAST_NAME: \"$employee.LAST_NAME\",\n      EMAIL: \"$employee.EMAIL\",\n      PHONE_NUMBER: \"$employee.PHONE_NUMBER\",\n      HIRE_DATE: \"$employee.HIRE_DATE\",\n      JOB_ID: \"$employee.JOB_ID\",\n      SALARY: \"$employee.SALARY\",\n      COMMISSION_PCT: \"$employee.COMMISSION_PCT\",\n      MANAGER_ID: \"$employee.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employee.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "DEPARTMENT_ID, JOB_ID, MANAGER_ID, employees.EMPLOYEE_ID",
        "fields_alias": "COMMISSION_PCT, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, LAST_NAME, PHONE_NUMBER, SALARY, _id, employee, employees",
        "target_fields": "COMMISSION_PCT, DEPARTMENT_ID, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, LAST_NAME, MANAGER_ID, PHONE_NUMBER, SALARY, _id",
        "query_collection": "departments, jobs",
        "RAG_examples": [
            {
                "db_id": "news_report",
                "NLQ": "Can you show the names of the journalists and the dates of the events they have reported about?",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the total number of students enrolled in schools without any goalies?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "22_2",
        "db_id": "hr_1",
        "nlq": "Show me all the details about employees who have never held any position previously.",
        "ref_sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"employees.EMPLOYEE_ID\",\n      foreignField: \"employees.EMPLOYEE_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      employee: {\n        $cond: [\n          {\n            $eq: [{ $size: \"$employees.job_history\" }, 0]\n          },\n          \"$employees\",\n          {\n            $cond: [\n              {\n                $eq: [{ $size: \"$Docs1.employees.job_history\" }, 0]\n              },\n              \"$Docs1.employees\",\n              false\n            ]\n          }\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      employee: { $ne: false }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employee.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employee.FIRST_NAME\",\n      LAST_NAME: \"$employee.LAST_NAME\",\n      EMAIL: \"$employee.EMAIL\",\n      PHONE_NUMBER: \"$employee.PHONE_NUMBER\",\n      HIRE_DATE: \"$employee.HIRE_DATE\",\n      JOB_ID: \"$employee.JOB_ID\",\n      SALARY: \"$employee.SALARY\",\n      COMMISSION_PCT: \"$employee.COMMISSION_PCT\",\n      MANAGER_ID: \"$employee.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employee.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "DEPARTMENT_ID, JOB_ID, MANAGER_ID, employees.EMPLOYEE_ID",
        "fields_alias": "COMMISSION_PCT, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, LAST_NAME, PHONE_NUMBER, SALARY, _id, employee, employees",
        "target_fields": "COMMISSION_PCT, DEPARTMENT_ID, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, LAST_NAME, MANAGER_ID, PHONE_NUMBER, SALARY, _id",
        "query_collection": "departments, jobs",
        "RAG_examples": [
            {
                "db_id": "news_report",
                "NLQ": "Show the names of journalists and the dates of the events they reported.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            },
            {
                "db_id": "museum_visit",
                "NLQ": "Show the names and levels of membership for those visitors whose membership is higher than 4, and order the list by age, starting with the oldest.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            }
        ]
    },
    {
        "record_id": "22_3",
        "db_id": "hr_1",
        "nlq": "Provide the information for those employees who lack any prior job experience.",
        "ref_sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"employees.EMPLOYEE_ID\",\n      foreignField: \"employees.EMPLOYEE_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      employee: {\n        $cond: [\n          {\n            $eq: [{ $size: \"$employees.job_history\" }, 0]\n          },\n          \"$employees\",\n          {\n            $cond: [\n              {\n                $eq: [{ $size: \"$Docs1.employees.job_history\" }, 0]\n              },\n              \"$Docs1.employees\",\n              false\n            ]\n          }\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      employee: { $ne: false }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employee.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employee.FIRST_NAME\",\n      LAST_NAME: \"$employee.LAST_NAME\",\n      EMAIL: \"$employee.EMAIL\",\n      PHONE_NUMBER: \"$employee.PHONE_NUMBER\",\n      HIRE_DATE: \"$employee.HIRE_DATE\",\n      JOB_ID: \"$employee.JOB_ID\",\n      SALARY: \"$employee.SALARY\",\n      COMMISSION_PCT: \"$employee.COMMISSION_PCT\",\n      MANAGER_ID: \"$employee.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employee.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "DEPARTMENT_ID, JOB_ID, MANAGER_ID, employees.EMPLOYEE_ID",
        "fields_alias": "COMMISSION_PCT, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, LAST_NAME, PHONE_NUMBER, SALARY, _id, employee, employees",
        "target_fields": "COMMISSION_PCT, DEPARTMENT_ID, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, LAST_NAME, MANAGER_ID, PHONE_NUMBER, SALARY, _id",
        "query_collection": "departments, jobs",
        "RAG_examples": [
            {
                "db_id": "news_report",
                "NLQ": "Provide the names of reporters together with the dates of the events they reported on.",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            },
            {
                "db_id": "coffee_shop",
                "NLQ": "Provide the purchase times, ages, and addresses of members, displaying the results in chronological order of purchase.",
                "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
                "fields_db": "Address, Age, Time_of_purchase",
                "fields_alias": "_id",
                "target_fields": "Address, Age, Time_of_purchase, _id",
                "query_collection": "member"
            }
        ]
    },
    {
        "record_id": "22_4",
        "db_id": "hr_1",
        "nlq": "Retrieve all relevant data about employees with no job history at all.",
        "ref_sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "MQL": "db.jobs.aggregate([\n  {\n    $unwind: \"$employees\"\n  },\n  {\n    $lookup: {\n      from: \"departments\",\n      localField: \"employees.EMPLOYEE_ID\",\n      foreignField: \"employees.EMPLOYEE_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      employee: {\n        $cond: [\n          {\n            $eq: [{ $size: \"$employees.job_history\" }, 0]\n          },\n          \"$employees\",\n          {\n            $cond: [\n              {\n                $eq: [{ $size: \"$Docs1.employees.job_history\" }, 0]\n              },\n              \"$Docs1.employees\",\n              false\n            ]\n          }\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      employee: { $ne: false }\n    }\n  },\n  {\n    $project: {\n      EMPLOYEE_ID: \"$employee.EMPLOYEE_ID\",\n      FIRST_NAME: \"$employee.FIRST_NAME\",\n      LAST_NAME: \"$employee.LAST_NAME\",\n      EMAIL: \"$employee.EMAIL\",\n      PHONE_NUMBER: \"$employee.PHONE_NUMBER\",\n      HIRE_DATE: \"$employee.HIRE_DATE\",\n      JOB_ID: \"$employee.JOB_ID\",\n      SALARY: \"$employee.SALARY\",\n      COMMISSION_PCT: \"$employee.COMMISSION_PCT\",\n      MANAGER_ID: \"$employee.MANAGER_ID\",\n      DEPARTMENT_ID: \"$employee.DEPARTMENT_ID\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "DEPARTMENT_ID, JOB_ID, MANAGER_ID, employees.EMPLOYEE_ID",
        "fields_alias": "COMMISSION_PCT, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, LAST_NAME, PHONE_NUMBER, SALARY, _id, employee, employees",
        "target_fields": "COMMISSION_PCT, DEPARTMENT_ID, EMAIL, EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, LAST_NAME, MANAGER_ID, PHONE_NUMBER, SALARY, _id",
        "query_collection": "departments, jobs",
        "RAG_examples": [
            {
                "db_id": "soccer_2",
                "NLQ": "Calculate the total enrollment across colleges that have no players in the goalie position.",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            },
            {
                "db_id": "coffee_shop",
                "NLQ": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
                "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
                "fields_db": "Address, Age, Time_of_purchase",
                "fields_alias": "_id",
                "target_fields": "Address, Age, Time_of_purchase, _id",
                "query_collection": "member"
            }
        ]
    },
    {
        "record_id": "987_0",
        "db_id": "college_3",
        "nlq": "Find the name of the department that has the fewest members.",
        "ref_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Member_of\"\n  },\n  {\n    $group: {\n      _id: \"$DName\",\n      memberCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { memberCount: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      DName: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "DName",
        "fields_alias": "Member_of, _id, memberCount",
        "target_fields": "DName, _id",
        "query_collection": "Department",
        "RAG_examples": [
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "Find the description and code of the service type that is performed the most times.",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            },
            {
                "db_id": "museum_visit",
                "NLQ": "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            }
        ]
    },
    {
        "record_id": "987_1",
        "db_id": "college_3",
        "nlq": "What is the name of the department with the fewest members?",
        "ref_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Member_of\"\n  },\n  {\n    $group: {\n      _id: \"$DName\",\n      memberCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { memberCount: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      DName: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "DName",
        "fields_alias": "Member_of, _id, memberCount",
        "target_fields": "DName, _id",
        "query_collection": "Department",
        "RAG_examples": [
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "What is the description and code of the type of service that is performed the most often?",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the cumulative enrollment number for schools that lack goalie players?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "987_2",
        "db_id": "college_3",
        "nlq": "Identify the department that has the smallest number of members.",
        "ref_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Member_of\"\n  },\n  {\n    $group: {\n      _id: \"$DName\",\n      memberCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { memberCount: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      DName: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "DName",
        "fields_alias": "Member_of, _id, memberCount",
        "target_fields": "DName, _id",
        "query_collection": "Department",
        "RAG_examples": [
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "Find the description and code of the service type that is performed the most times.",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            },
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "Identify the service type that is used the most frequently, along with its description and code.",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            }
        ]
    },
    {
        "record_id": "987_3",
        "db_id": "college_3",
        "nlq": "Which department is associated with the least number of members?",
        "ref_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Member_of\"\n  },\n  {\n    $group: {\n      _id: \"$DName\",\n      memberCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { memberCount: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      DName: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "DName",
        "fields_alias": "Member_of, _id, memberCount",
        "target_fields": "DName, _id",
        "query_collection": "Department",
        "RAG_examples": [
            {
                "db_id": "soccer_2",
                "NLQ": "What is the cumulative enrollment number for schools that lack goalie players?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the total number of students enrolled in schools without any goalies?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "987_4",
        "db_id": "college_3",
        "nlq": "What department has the lowest member count?",
        "ref_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Department.aggregate([\n  {\n    $unwind: \"$Member_of\"\n  },\n  {\n    $group: {\n      _id: \"$DName\",\n      memberCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { memberCount: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      DName: \"$_id\"\n    }\n  }\n]);\n",
        "fields_db": "DName",
        "fields_alias": "Member_of, _id, memberCount",
        "target_fields": "DName, _id",
        "query_collection": "Department",
        "RAG_examples": [
            {
                "db_id": "soccer_2",
                "NLQ": "What is the cumulative enrollment number for schools that lack goalie players?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the total number of enrollment of schools that do not have any goalie player?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "1804_0",
        "db_id": "flight_1",
        "nlq": "Show names for all aircraft with at least two flights.",
        "ref_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "MQL": "db.aircraft.aggregate([\n  {\n    $project: {\n      name: 1,\n      count_flight: {\n        $size: \"$flight\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_flight: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "name",
        "fields_alias": "_id, count_flight, flight",
        "target_fields": "_id, name",
        "query_collection": "aircraft",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "List all airline names and their abbreviations in \"USA\".",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "1804_1",
        "db_id": "flight_1",
        "nlq": "What are the names for all aircrafts with at least 2 flights?",
        "ref_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "MQL": "db.aircraft.aggregate([\n  {\n    $project: {\n      name: 1,\n      count_flight: {\n        $size: \"$flight\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_flight: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "name",
        "fields_alias": "_id, count_flight, flight",
        "target_fields": "_id, name",
        "query_collection": "aircraft",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "What are the airline names and abbreviations for airlines in the USA?",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "Can you show me the airline names and their corresponding abbreviations for US-based airlines?",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "1804_2",
        "db_id": "flight_1",
        "nlq": "List the names of all aircraft that have two or more flights.",
        "ref_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "MQL": "db.aircraft.aggregate([\n  {\n    $project: {\n      name: 1,\n      count_flight: {\n        $size: \"$flight\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_flight: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "name",
        "fields_alias": "_id, count_flight, flight",
        "target_fields": "_id, name",
        "query_collection": "aircraft",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "List all airline names and their abbreviations in \"USA\".",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "1804_3",
        "db_id": "flight_1",
        "nlq": "Provide the names of aircraft with at least a pair of flights.",
        "ref_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "MQL": "db.aircraft.aggregate([\n  {\n    $project: {\n      name: 1,\n      count_flight: {\n        $size: \"$flight\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_flight: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "name",
        "fields_alias": "_id, count_flight, flight",
        "target_fields": "_id, name",
        "query_collection": "aircraft",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Provide a list of airline names along with their abbreviations for carriers based in the USA.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "1804_4",
        "db_id": "flight_1",
        "nlq": "Retrieve the names of all aircraft that are associated with a minimum of two flights.",
        "ref_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "MQL": "db.aircraft.aggregate([\n  {\n    $project: {\n      name: 1,\n      count_flight: {\n        $size: \"$flight\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_flight: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "name",
        "fields_alias": "_id, count_flight, flight",
        "target_fields": "_id, name",
        "query_collection": "aircraft",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "Provide a list of airline names along with their abbreviations for carriers based in the USA.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "39_0",
        "db_id": "wine_1",
        "nlq": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "ref_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: \"Sonoma\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Price: {\n        $avg: \"$wine.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Price: 1\n    }\n  }\n]);\n",
        "fields_db": "County, wine.Price",
        "fields_alias": "_id, avg_Price, wine",
        "target_fields": "_id, avg_Price",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "Give me the description and code for the service type that is conducted with the highest frequency.",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            },
            {
                "db_id": "coffee_shop",
                "NLQ": "Show each member's age, address, and the time they made their purchase, ordered by purchase time.",
                "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
                "fields_db": "Address, Age, Time_of_purchase",
                "fields_alias": "_id",
                "target_fields": "Address, Age, Time_of_purchase, _id",
                "query_collection": "member"
            }
        ]
    },
    {
        "record_id": "39_1",
        "db_id": "wine_1",
        "nlq": "What is the average price of wines produced in appelations in Sonoma County?",
        "ref_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: \"Sonoma\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Price: {\n        $avg: \"$wine.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Price: 1\n    }\n  }\n]);\n",
        "fields_db": "County, wine.Price",
        "fields_alias": "_id, avg_Price, wine",
        "target_fields": "_id, avg_Price",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "coffee_shop",
                "NLQ": "List the address, age, and purchase time of every member, arranged in ascending order of purchase time.",
                "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
                "fields_db": "Address, Age, Time_of_purchase",
                "fields_alias": "_id",
                "target_fields": "Address, Age, Time_of_purchase, _id",
                "query_collection": "member"
            },
            {
                "db_id": "news_report",
                "NLQ": "Can you show the names of the journalists and the dates of the events they have reported about?",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            }
        ]
    },
    {
        "record_id": "39_2",
        "db_id": "wine_1",
        "nlq": "What is the average cost of wines from appellations situated in Sonoma County?",
        "ref_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: \"Sonoma\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Price: {\n        $avg: \"$wine.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Price: 1\n    }\n  }\n]);\n",
        "fields_db": "County, wine.Price",
        "fields_alias": "_id, avg_Price, wine",
        "target_fields": "_id, avg_Price",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "cre_Doc_Template_Mgt",
                "NLQ": "How many documents utilize the PPT template type?",
                "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n",
                "fields_db": "Template_Type_Code",
                "fields_alias": "Templates, Templates.Documents, _id, count",
                "target_fields": "_id, count",
                "query_collection": "Ref_Template_Types"
            },
            {
                "db_id": "coffee_shop",
                "NLQ": "List the address, age, and purchase time of every member, arranged in ascending order of purchase time.",
                "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
                "fields_db": "Address, Age, Time_of_purchase",
                "fields_alias": "_id",
                "target_fields": "Address, Age, Time_of_purchase, _id",
                "query_collection": "member"
            }
        ]
    },
    {
        "record_id": "39_3",
        "db_id": "wine_1",
        "nlq": "Can you provide the average price for wines that come from Sonoma County appellations?",
        "ref_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: \"Sonoma\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Price: {\n        $avg: \"$wine.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Price: 1\n    }\n  }\n]);\n",
        "fields_db": "County, wine.Price",
        "fields_alias": "_id, avg_Price, wine",
        "target_fields": "_id, avg_Price",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "news_report",
                "NLQ": "Can you show the names of the journalists and the dates of the events they have reported about?",
                "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
                "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
                "fields_alias": "Docs1, _id",
                "target_fields": "Date, Name, _id",
                "query_collection": "event, journalist"
            },
            {
                "db_id": "cre_Drama_Workshop_Groups",
                "NLQ": "Give me the description and code for the service type that is conducted with the highest frequency.",
                "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Service_Type_Code, Service_Type_Description",
                "fields_alias": "Services, _id, count",
                "target_fields": "Service_Type_Code, Service_Type_Description, _id",
                "query_collection": "Ref_Service_Types"
            }
        ]
    },
    {
        "record_id": "39_4",
        "db_id": "wine_1",
        "nlq": "How much do wines from appellations in Sonoma County typically cost on average?",
        "ref_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\"",
        "MQL": "db.appellations.aggregate([\n  {\n    $match: {\n      County: \"Sonoma\"\n    }\n  },\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Price: {\n        $avg: \"$wine.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Price: 1\n    }\n  }\n]);\n",
        "fields_db": "County, wine.Price",
        "fields_alias": "_id, avg_Price, wine",
        "target_fields": "_id, avg_Price",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "cre_Doc_Template_Mgt",
                "NLQ": "How many documents utilize the PPT template type?",
                "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n",
                "fields_db": "Template_Type_Code",
                "fields_alias": "Templates, Templates.Documents, _id, count",
                "target_fields": "_id, count",
                "query_collection": "Ref_Template_Types"
            },
            {
                "db_id": "coffee_shop",
                "NLQ": "Show each member's age, address, and the time they made their purchase, ordered by purchase time.",
                "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
                "fields_db": "Address, Age, Time_of_purchase",
                "fields_alias": "_id",
                "target_fields": "Address, Age, Time_of_purchase, _id",
                "query_collection": "member"
            }
        ]
    },
    {
        "record_id": "218_0",
        "db_id": "wine_1",
        "nlq": "List the names of all distinct wines in alphabetical order.",
        "ref_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      names: {\n        $addToSet: \"$wine.Name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$names\"\n  },\n  {\n    $sort: {\n      names: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$names\"\n    }\n  }\n]);\n",
        "fields_db": "wine.Name",
        "fields_alias": "Name, _id, names, wine",
        "target_fields": "Name, _id",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "coffee_shop",
                "NLQ": "List the address, age, and purchase time of every member, arranged in ascending order of purchase time.",
                "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
                "fields_db": "Address, Age, Time_of_purchase",
                "fields_alias": "_id",
                "target_fields": "Address, Age, Time_of_purchase, _id",
                "query_collection": "member"
            }
        ]
    },
    {
        "record_id": "218_1",
        "db_id": "wine_1",
        "nlq": "What are the names of wines, sorted in alphabetical order?",
        "ref_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      names: {\n        $addToSet: \"$wine.Name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$names\"\n  },\n  {\n    $sort: {\n      names: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$names\"\n    }\n  }\n]);\n",
        "fields_db": "wine.Name",
        "fields_alias": "Name, _id, names, wine",
        "target_fields": "Name, _id",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "What are the airline names and abbreviations for airlines in the USA?",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "Can you show me the airline names and their corresponding abbreviations for US-based airlines?",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "218_2",
        "db_id": "wine_1",
        "nlq": "Retrieve all unique wine names listed in order from A to Z.",
        "ref_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      names: {\n        $addToSet: \"$wine.Name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$names\"\n  },\n  {\n    $sort: {\n      names: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$names\"\n    }\n  }\n]);\n",
        "fields_db": "wine.Name",
        "fields_alias": "Name, _id, names, wine",
        "target_fields": "Name, _id",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "museum_visit",
                "NLQ": "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            }
        ]
    },
    {
        "record_id": "218_3",
        "db_id": "wine_1",
        "nlq": "Provide an alphabetical list of distinct wine names.",
        "ref_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      names: {\n        $addToSet: \"$wine.Name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$names\"\n  },\n  {\n    $sort: {\n      names: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$names\"\n    }\n  }\n]);\n",
        "fields_db": "wine.Name",
        "fields_alias": "Name, _id, names, wine",
        "target_fields": "Name, _id",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "flight_2",
                "NLQ": "Provide a list of airline names along with their abbreviations for carriers based in the USA.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            },
            {
                "db_id": "flight_2",
                "NLQ": "Retrieve the names and abbreviations of all airlines operating in the United States.",
                "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
                "fields_db": "Abbreviation, Airline, Country",
                "fields_alias": "_id",
                "target_fields": "Abbreviation, Airline, _id",
                "query_collection": "airlines"
            }
        ]
    },
    {
        "record_id": "218_4",
        "db_id": "wine_1",
        "nlq": "Show the names of all wines, ensuring they are sorted alphabetically without duplicates.",
        "ref_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "MQL": "db.appellations.aggregate([\n  {\n    $unwind: \"$wine\"\n  },\n  {\n    $group: {\n      _id: null,\n      names: {\n        $addToSet: \"$wine.Name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$names\"\n  },\n  {\n    $sort: {\n      names: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$names\"\n    }\n  }\n]);\n",
        "fields_db": "wine.Name",
        "fields_alias": "Name, _id, names, wine",
        "target_fields": "Name, _id",
        "query_collection": "appellations",
        "RAG_examples": [
            {
                "db_id": "museum_visit",
                "NLQ": "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            },
            {
                "db_id": "museum_visit",
                "NLQ": "Show the names and levels of membership for those visitors whose membership is higher than 4, and order the list by age, starting with the oldest.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            }
        ]
    },
    {
        "record_id": "2424_0",
        "db_id": "ship_1",
        "nlq": "How many captains are in each rank?",
        "ref_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "captain.Rank",
        "fields_alias": "Rank, _id, captain, count",
        "target_fields": "Rank, _id, count",
        "query_collection": "Ship",
        "RAG_examples": [
            {
                "db_id": "soccer_2",
                "NLQ": "What is the cumulative enrollment number for schools that lack goalie players?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the total number of students enrolled in schools without any goalies?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "2424_1",
        "db_id": "ship_1",
        "nlq": "Count the number of captains that have each rank.",
        "ref_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "captain.Rank",
        "fields_alias": "Rank, _id, captain, count",
        "target_fields": "Rank, _id, count",
        "query_collection": "Ship",
        "RAG_examples": [
            {
                "db_id": "museum_visit",
                "NLQ": "Show the names and levels of membership for those visitors whose membership is higher than 4, and order the list by age, starting with the oldest.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            },
            {
                "db_id": "museum_visit",
                "NLQ": "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            }
        ]
    },
    {
        "record_id": "2424_2",
        "db_id": "ship_1",
        "nlq": "What is the count of captains for each rank classification?",
        "ref_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "captain.Rank",
        "fields_alias": "Rank, _id, captain, count",
        "target_fields": "Rank, _id, count",
        "query_collection": "Ship",
        "RAG_examples": [
            {
                "db_id": "soccer_2",
                "NLQ": "What is the cumulative enrollment number for schools that lack goalie players?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the total number of enrollment of schools that do not have any goalie player?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "2424_3",
        "db_id": "ship_1",
        "nlq": "How many captains exist for each rank category?",
        "ref_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "captain.Rank",
        "fields_alias": "Rank, _id, captain, count",
        "target_fields": "Rank, _id, count",
        "query_collection": "Ship",
        "RAG_examples": [
            {
                "db_id": "soccer_2",
                "NLQ": "What is the total number of enrollment of schools that do not have any goalie player?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            },
            {
                "db_id": "soccer_2",
                "NLQ": "What is the cumulative enrollment number for schools that lack goalie players?",
                "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
                "fields_db": "Tryout.pPos, enr",
                "fields_alias": "_id, sum_enr",
                "target_fields": "_id, sum_enr",
                "query_collection": "College"
            }
        ]
    },
    {
        "record_id": "2424_4",
        "db_id": "ship_1",
        "nlq": "Provide the total number of captains grouped by their rank.",
        "ref_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "MQL": "db.Ship.aggregate([\n  {\n    $unwind: \"$captain\"\n  },\n  {\n    $group: {\n      _id: \"$captain.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "captain.Rank",
        "fields_alias": "Rank, _id, captain, count",
        "target_fields": "Rank, _id, count",
        "query_collection": "Ship",
        "RAG_examples": [
            {
                "db_id": "museum_visit",
                "NLQ": "Show the names and levels of membership for those visitors whose membership is higher than 4, and order the list by age, starting with the oldest.",
                "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
                "fields_db": "Level_of_membership, Name",
                "fields_alias": "_id",
                "target_fields": "Level_of_membership, Name, _id",
                "query_collection": "visitor"
            },
            {
                "db_id": "student_1",
                "NLQ": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
                "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
                "fields_db": "Classroom, Grade",
                "fields_alias": "_id, count, count_DISTINCT_classroom",
                "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
                "query_collection": "list"
            }
        ]
    }
]