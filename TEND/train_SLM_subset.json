[
    {
        "record_id": "3999_0",
        "db_id": "soccer_2",
        "nlq": "What is the total number of enrollment of schools that do not have any goalie player?",
        "ref_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
        "fields_db": "Tryout.pPos, enr",
        "fields_alias": "_id, sum_enr",
        "target_fields": "_id, sum_enr",
        "query_collection": "College"
    },
    {
        "record_id": "3999_1",
        "db_id": "soccer_2",
        "nlq": "What is the total number of students enrolled in schools without any goalies?",
        "ref_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
        "fields_db": "Tryout.pPos, enr",
        "fields_alias": "_id, sum_enr",
        "target_fields": "_id, sum_enr",
        "query_collection": "College"
    },
    {
        "record_id": "3999_2",
        "db_id": "soccer_2",
        "nlq": "How many students are enrolled in colleges that do not have any players trying out as goalies?",
        "ref_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
        "fields_db": "Tryout.pPos, enr",
        "fields_alias": "_id, sum_enr",
        "target_fields": "_id, sum_enr",
        "query_collection": "College"
    },
    {
        "record_id": "3999_3",
        "db_id": "soccer_2",
        "nlq": "What is the cumulative enrollment number for schools that lack goalie players?",
        "ref_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
        "fields_db": "Tryout.pPos, enr",
        "fields_alias": "_id, sum_enr",
        "target_fields": "_id, sum_enr",
        "query_collection": "College"
    },
    {
        "record_id": "3999_4",
        "db_id": "soccer_2",
        "nlq": "Calculate the total enrollment across colleges that have no players in the goalie position.",
        "ref_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n",
        "fields_db": "Tryout.pPos, enr",
        "fields_alias": "_id, sum_enr",
        "target_fields": "_id, sum_enr",
        "query_collection": "College"
    },
    {
        "record_id": "1903_0",
        "db_id": "news_report",
        "nlq": "Show the names of journalists and the dates of the events they reported.",
        "ref_sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
        "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Date, Name, _id",
        "query_collection": "event, journalist"
    },
    {
        "record_id": "1903_1",
        "db_id": "news_report",
        "nlq": "List the names of journalists along with the event dates they covered.",
        "ref_sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
        "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Date, Name, _id",
        "query_collection": "event, journalist"
    },
    {
        "record_id": "1903_2",
        "db_id": "news_report",
        "nlq": "Provide the names of reporters together with the dates of the events they reported on.",
        "ref_sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
        "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Date, Name, _id",
        "query_collection": "event, journalist"
    },
    {
        "record_id": "1903_3",
        "db_id": "news_report",
        "nlq": "Display the journalistsâ€™ names and the corresponding event dates for which they provided coverage.",
        "ref_sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
        "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Date, Name, _id",
        "query_collection": "event, journalist"
    },
    {
        "record_id": "1903_4",
        "db_id": "news_report",
        "nlq": "Can you show the names of the journalists and the dates of the events they have reported about?",
        "ref_sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
        "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n",
        "fields_db": "Date, Name, journalist_ID, news_report.journalist_ID",
        "fields_alias": "Docs1, _id",
        "target_fields": "Date, Name, _id",
        "query_collection": "event, journalist"
    },
    {
        "record_id": "64_0",
        "db_id": "flight_2",
        "nlq": "List all airline names and their abbreviations in \"USA\".",
        "ref_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
        "fields_db": "Abbreviation, Airline, Country",
        "fields_alias": "_id",
        "target_fields": "Abbreviation, Airline, _id",
        "query_collection": "airlines"
    },
    {
        "record_id": "64_1",
        "db_id": "flight_2",
        "nlq": "What are the airline names and abbreviations for airlines in the USA?",
        "ref_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
        "fields_db": "Abbreviation, Airline, Country",
        "fields_alias": "_id",
        "target_fields": "Abbreviation, Airline, _id",
        "query_collection": "airlines"
    },
    {
        "record_id": "64_2",
        "db_id": "flight_2",
        "nlq": "Retrieve the names and abbreviations of all airlines operating in the United States.",
        "ref_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
        "fields_db": "Abbreviation, Airline, Country",
        "fields_alias": "_id",
        "target_fields": "Abbreviation, Airline, _id",
        "query_collection": "airlines"
    },
    {
        "record_id": "64_3",
        "db_id": "flight_2",
        "nlq": "Provide a list of airline names along with their abbreviations for carriers based in the USA.",
        "ref_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
        "fields_db": "Abbreviation, Airline, Country",
        "fields_alias": "_id",
        "target_fields": "Abbreviation, Airline, _id",
        "query_collection": "airlines"
    },
    {
        "record_id": "64_4",
        "db_id": "flight_2",
        "nlq": "Can you show me the airline names and their corresponding abbreviations for US-based airlines?",
        "ref_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n",
        "fields_db": "Abbreviation, Airline, Country",
        "fields_alias": "_id",
        "target_fields": "Abbreviation, Airline, _id",
        "query_collection": "airlines"
    },
    {
        "record_id": "3700_0",
        "db_id": "browser_web",
        "nlq": "Which accelerator name contains substring \"Opera\"?",
        "ref_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "MQL": "db.Web_client_accelerator.find({\n  \"name\": { $regex: \"Opera\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n",
        "fields_db": "name",
        "fields_alias": "_id",
        "target_fields": "_id, name",
        "query_collection": "Web_client_accelerator"
    },
    {
        "record_id": "3700_1",
        "db_id": "browser_web",
        "nlq": "What are the accelerator names that have \"Opera\" in them?",
        "ref_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "MQL": "db.Web_client_accelerator.find({\n  \"name\": { $regex: \"Opera\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n",
        "fields_db": "name",
        "fields_alias": "_id",
        "target_fields": "_id, name",
        "query_collection": "Web_client_accelerator"
    },
    {
        "record_id": "3700_2",
        "db_id": "browser_web",
        "nlq": "List all accelerator names containing the substring \"Opera.\"",
        "ref_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "MQL": "db.Web_client_accelerator.find({\n  \"name\": { $regex: \"Opera\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n",
        "fields_db": "name",
        "fields_alias": "_id",
        "target_fields": "_id, name",
        "query_collection": "Web_client_accelerator"
    },
    {
        "record_id": "3700_3",
        "db_id": "browser_web",
        "nlq": "Which names of accelerators include the term \"Opera\"?",
        "ref_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "MQL": "db.Web_client_accelerator.find({\n  \"name\": { $regex: \"Opera\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n",
        "fields_db": "name",
        "fields_alias": "_id",
        "target_fields": "_id, name",
        "query_collection": "Web_client_accelerator"
    },
    {
        "record_id": "3700_4",
        "db_id": "browser_web",
        "nlq": "Identify the accelerator names that feature the substring \"Opera.\"",
        "ref_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "MQL": "db.Web_client_accelerator.find({\n  \"name\": { $regex: \"Opera\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n",
        "fields_db": "name",
        "fields_alias": "_id",
        "target_fields": "_id, name",
        "query_collection": "Web_client_accelerator"
    },
    {
        "record_id": "1999_0",
        "db_id": "coffee_shop",
        "nlq": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "ref_sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
        "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
        "fields_db": "Address, Age, Time_of_purchase",
        "fields_alias": "_id",
        "target_fields": "Address, Age, Time_of_purchase, _id",
        "query_collection": "member"
    },
    {
        "record_id": "1999_1",
        "db_id": "coffee_shop",
        "nlq": "Retrieve the purchase time, age, and address for all members, sorted by the time of purchase.",
        "ref_sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
        "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
        "fields_db": "Address, Age, Time_of_purchase",
        "fields_alias": "_id",
        "target_fields": "Address, Age, Time_of_purchase, _id",
        "query_collection": "member"
    },
    {
        "record_id": "1999_2",
        "db_id": "coffee_shop",
        "nlq": "Show each member's age, address, and the time they made their purchase, ordered by purchase time.",
        "ref_sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
        "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
        "fields_db": "Address, Age, Time_of_purchase",
        "fields_alias": "_id",
        "target_fields": "Address, Age, Time_of_purchase, _id",
        "query_collection": "member"
    },
    {
        "record_id": "1999_3",
        "db_id": "coffee_shop",
        "nlq": "List the address, age, and purchase time of every member, arranged in ascending order of purchase time.",
        "ref_sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
        "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
        "fields_db": "Address, Age, Time_of_purchase",
        "fields_alias": "_id",
        "target_fields": "Address, Age, Time_of_purchase, _id",
        "query_collection": "member"
    },
    {
        "record_id": "1999_4",
        "db_id": "coffee_shop",
        "nlq": "Provide the purchase times, ages, and addresses of members, displaying the results in chronological order of purchase.",
        "ref_sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
        "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n",
        "fields_db": "Address, Age, Time_of_purchase",
        "fields_alias": "_id",
        "target_fields": "Address, Age, Time_of_purchase, _id",
        "query_collection": "member"
    },
    {
        "record_id": "3484_0",
        "db_id": "museum_visit",
        "nlq": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "ref_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
        "fields_db": "Level_of_membership, Name",
        "fields_alias": "_id",
        "target_fields": "Level_of_membership, Name, _id",
        "query_collection": "visitor"
    },
    {
        "record_id": "3484_1",
        "db_id": "museum_visit",
        "nlq": "List the names and membership levels of visitors who have a membership level greater than 4, sorted by age from oldest to youngest.",
        "ref_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
        "fields_db": "Level_of_membership, Name",
        "fields_alias": "_id",
        "target_fields": "Level_of_membership, Name, _id",
        "query_collection": "visitor"
    },
    {
        "record_id": "3484_2",
        "db_id": "museum_visit",
        "nlq": "Retrieve the names and membership levels of visitors with a membership level above 4, arranging the results by age in descending order.",
        "ref_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
        "fields_db": "Level_of_membership, Name",
        "fields_alias": "_id",
        "target_fields": "Level_of_membership, Name, _id",
        "query_collection": "visitor"
    },
    {
        "record_id": "3484_3",
        "db_id": "museum_visit",
        "nlq": "Show the names and levels of membership for those visitors whose membership is higher than 4, and order the list by age, starting with the oldest.",
        "ref_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
        "fields_db": "Level_of_membership, Name",
        "fields_alias": "_id",
        "target_fields": "Level_of_membership, Name, _id",
        "query_collection": "visitor"
    },
    {
        "record_id": "3484_4",
        "db_id": "museum_visit",
        "nlq": "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age.",
        "ref_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n",
        "fields_db": "Level_of_membership, Name",
        "fields_alias": "_id",
        "target_fields": "Level_of_membership, Name, _id",
        "query_collection": "visitor"
    },
    {
        "record_id": "1632_0",
        "db_id": "body_builder",
        "nlq": "What are the names of body builders whose total score is higher than 300?",
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
        "MQL": "db.people.find({\n  \"body_builder.Total\": { $gt: 300 }\n}, { \"Name\": 1, \"_id\": 0 });\n",
        "fields_db": "Name, body_builder.Total",
        "fields_alias": "_id",
        "target_fields": "Name, _id",
        "query_collection": "people"
    },
    {
        "record_id": "1632_1",
        "db_id": "body_builder",
        "nlq": "Can you list the names of body builders with a total score above 300?",
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
        "MQL": "db.people.find({\n  \"body_builder.Total\": { $gt: 300 }\n}, { \"Name\": 1, \"_id\": 0 });\n",
        "fields_db": "Name, body_builder.Total",
        "fields_alias": "_id",
        "target_fields": "Name, _id",
        "query_collection": "people"
    },
    {
        "record_id": "1632_2",
        "db_id": "body_builder",
        "nlq": "Show me the names of all body builders whose total score exceeds 300.",
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
        "MQL": "db.people.find({\n  \"body_builder.Total\": { $gt: 300 }\n}, { \"Name\": 1, \"_id\": 0 });\n",
        "fields_db": "Name, body_builder.Total",
        "fields_alias": "_id",
        "target_fields": "Name, _id",
        "query_collection": "people"
    },
    {
        "record_id": "1632_3",
        "db_id": "body_builder",
        "nlq": "What are the names of those body builders who have a total score greater than 300?",
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
        "MQL": "db.people.find({\n  \"body_builder.Total\": { $gt: 300 }\n}, { \"Name\": 1, \"_id\": 0 });\n",
        "fields_db": "Name, body_builder.Total",
        "fields_alias": "_id",
        "target_fields": "Name, _id",
        "query_collection": "people"
    },
    {
        "record_id": "1632_4",
        "db_id": "body_builder",
        "nlq": "Provide the names of body builders with a total score that is more than 300.",
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
        "MQL": "db.people.find({\n  \"body_builder.Total\": { $gt: 300 }\n}, { \"Name\": 1, \"_id\": 0 });\n",
        "fields_db": "Name, body_builder.Total",
        "fields_alias": "_id",
        "target_fields": "Name, _id",
        "query_collection": "people"
    },
    {
        "record_id": "3270_0",
        "db_id": "student_1",
        "nlq": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "ref_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Classroom, Grade",
        "fields_alias": "_id, count, count_DISTINCT_classroom",
        "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
        "query_collection": "list"
    },
    {
        "record_id": "3270_1",
        "db_id": "student_1",
        "nlq": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.",
        "ref_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Classroom, Grade",
        "fields_alias": "_id, count, count_DISTINCT_classroom",
        "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
        "query_collection": "list"
    },
    {
        "record_id": "3270_2",
        "db_id": "student_1",
        "nlq": "For every grade, provide the grade level, how many classrooms are utilized, and the overall student count within that grade.",
        "ref_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Classroom, Grade",
        "fields_alias": "_id, count, count_DISTINCT_classroom",
        "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
        "query_collection": "list"
    },
    {
        "record_id": "3270_3",
        "db_id": "student_1",
        "nlq": "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
        "ref_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Classroom, Grade",
        "fields_alias": "_id, count, count_DISTINCT_classroom",
        "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
        "query_collection": "list"
    },
    {
        "record_id": "3270_4",
        "db_id": "student_1",
        "nlq": "For each grade level, report the grade identifier, the count of distinct classrooms associated with it, and the total number of students enrolled in that grade.",
        "ref_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Classroom, Grade",
        "fields_alias": "_id, count, count_DISTINCT_classroom",
        "target_fields": "Grade, _id, count, count_DISTINCT_classroom",
        "query_collection": "list"
    },
    {
        "record_id": "2492_0",
        "db_id": "cre_Doc_Template_Mgt",
        "nlq": "How many documents are using the template with type code 'PPT'?",
        "ref_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n",
        "fields_db": "Template_Type_Code",
        "fields_alias": "Templates, Templates.Documents, _id, count",
        "target_fields": "_id, count",
        "query_collection": "Ref_Template_Types"
    },
    {
        "record_id": "2492_1",
        "db_id": "cre_Doc_Template_Mgt",
        "nlq": "Count the number of documents that use the PPT template type.",
        "ref_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n",
        "fields_db": "Template_Type_Code",
        "fields_alias": "Templates, Templates.Documents, _id, count",
        "target_fields": "_id, count",
        "query_collection": "Ref_Template_Types"
    },
    {
        "record_id": "2492_2",
        "db_id": "cre_Doc_Template_Mgt",
        "nlq": "What is the total number of documents associated with the template type code 'PPT'?",
        "ref_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n",
        "fields_db": "Template_Type_Code",
        "fields_alias": "Templates, Templates.Documents, _id, count",
        "target_fields": "_id, count",
        "query_collection": "Ref_Template_Types"
    },
    {
        "record_id": "2492_3",
        "db_id": "cre_Doc_Template_Mgt",
        "nlq": "How many documents utilize the PPT template type?",
        "ref_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n",
        "fields_db": "Template_Type_Code",
        "fields_alias": "Templates, Templates.Documents, _id, count",
        "target_fields": "_id, count",
        "query_collection": "Ref_Template_Types"
    },
    {
        "record_id": "2492_4",
        "db_id": "cre_Doc_Template_Mgt",
        "nlq": "Determine the count of documents that are linked to the template with the type code 'PPT'.",
        "ref_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n",
        "fields_db": "Template_Type_Code",
        "fields_alias": "Templates, Templates.Documents, _id, count",
        "target_fields": "_id, count",
        "query_collection": "Ref_Template_Types"
    },
    {
        "record_id": "1079_0",
        "db_id": "cre_Drama_Workshop_Groups",
        "nlq": "What is the description and code of the type of service that is performed the most often?",
        "ref_sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Service_Type_Code, Service_Type_Description",
        "fields_alias": "Services, _id, count",
        "target_fields": "Service_Type_Code, Service_Type_Description, _id",
        "query_collection": "Ref_Service_Types"
    },
    {
        "record_id": "1079_1",
        "db_id": "cre_Drama_Workshop_Groups",
        "nlq": "Find the description and code of the service type that is performed the most times.",
        "ref_sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Service_Type_Code, Service_Type_Description",
        "fields_alias": "Services, _id, count",
        "target_fields": "Service_Type_Code, Service_Type_Description, _id",
        "query_collection": "Ref_Service_Types"
    },
    {
        "record_id": "1079_2",
        "db_id": "cre_Drama_Workshop_Groups",
        "nlq": "What is the most commonly performed service type, including its description and code?",
        "ref_sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Service_Type_Code, Service_Type_Description",
        "fields_alias": "Services, _id, count",
        "target_fields": "Service_Type_Code, Service_Type_Description, _id",
        "query_collection": "Ref_Service_Types"
    },
    {
        "record_id": "1079_3",
        "db_id": "cre_Drama_Workshop_Groups",
        "nlq": "Identify the service type that is used the most frequently, along with its description and code.",
        "ref_sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Service_Type_Code, Service_Type_Description",
        "fields_alias": "Services, _id, count",
        "target_fields": "Service_Type_Code, Service_Type_Description, _id",
        "query_collection": "Ref_Service_Types"
    },
    {
        "record_id": "1079_4",
        "db_id": "cre_Drama_Workshop_Groups",
        "nlq": "Give me the description and code for the service type that is conducted with the highest frequency.",
        "ref_sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n",
        "fields_db": "Service_Type_Code, Service_Type_Description",
        "fields_alias": "Services, _id, count",
        "target_fields": "Service_Type_Code, Service_Type_Description, _id",
        "query_collection": "Ref_Service_Types"
    }
]