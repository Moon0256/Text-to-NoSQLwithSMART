Record ID: 1861_0
NLQ: Show the school name and driver name for all school buses.
Cleaned MQL:
db.school.aggregate([
  {
    $lookup: {
      from: "driver",
      localField: "School_ID",
      foreignField: "school_bus.School_ID",
      as: "Docs1"
    }
  },
  {
    $unwind: "$Docs1"
  },
  {
    $project: {
      "School": 1,
      "Name": "$Docs1.Name",
      "_id": 0
    }
  }
]);

============================================================

Record ID: 1861_1
NLQ: List the names of schools along with the names of their drivers for all school buses.
Cleaned MQL:
db.school.aggregate([
  {
    $lookup: {
      from: "driver",
      localField: "School_ID",
      foreignField: "school_bus.School_ID",
      as: "Docs1"
    }
  },
  {
    $unwind: "$Docs1"
  },
  {
    $project: {
      "School": 1,
      "Name": "$Docs1.Name",
      "_id": 0
    }
  }
]);

============================================================

Record ID: 1861_2
NLQ: Provide the driver names alongside the names of the schools for each school bus.
Cleaned MQL:
db.school.aggregate([
  {
    $lookup: {
      from: "driver",
      localField: "School_ID",
      foreignField: "school_bus.School_ID",
      as: "Docs1"
    }
  },
  {
    $unwind: "$Docs1"
  },
  {
    $project: {
      "School": 1,
      "Name": "$Docs1.Name",
      "_id": 0
    }
  }
]);

============================================================

Record ID: 1861_3
NLQ: Display the school name together with the respective driver's name for all the school buses.
Cleaned MQL:
db.school.aggregate([
  {
    $lookup: {
      from: "driver",
      localField: "School_ID",
      foreignField: "school_bus.School_ID",
      as: "Docs1"
    }
  },
  {
    $unwind: "$Docs1"
  },
  {
    $project: {
      "School": 1,
      "Name": "$Docs1.Name",
      "_id": 0
    }
  }
]);

============================================================

Record ID: 1861_4
NLQ: Give me the names of schools and their associated drivers for all school bus routes.
Cleaned MQL:
db.school.aggregate([
  {
    $lookup: {
      from: "driver",
      localField: "School_ID",
      foreignField: "school_bus.School_ID",
      as: "Docs1"
    }
  },
  {
    $unwind: "$Docs1"
  },
  {
    $project: {
      "School": 1,
      "Name": "$Docs1.Name",
      "_id": 0
    }
  }
]);

============================================================

Record ID: 3537_0
NLQ: Show name, opening year, and capacity for each cinema.
Cleaned MQL:
db.cinema.find({}, { "Name": 1, "Openning_year": 1, "Capacity": 1, "_id": 0 });

============================================================

Record ID: 3537_1
NLQ: List the names, opening years, and capacities of all cinemas.
Cleaned MQL:
db.cinema.find({}, { "Name": 1, "Openning_year": 1, "Capacity": 1, "_id": 0 });

============================================================

Record ID: 3537_2
NLQ: Provide the opening year, name, and capacity for each cinema available.
Cleaned MQL:
db.cinema.find({}, { "Name": 1, "Openning_year": 1, "Capacity": 1, "_id": 0 });

============================================================

Record ID: 3537_3
NLQ: Can you display the capacity, opening year, and names of the cinemas?
Cleaned MQL:
db.cinema.find({}, { "Name": 1, "Openning_year": 1, "Capacity": 1, "_id": 0 });

============================================================

Record ID: 3537_4
NLQ: Retrieve the names, capacities, and their respective opening years for every cinema in the database.
Cleaned MQL:
db.cinema.find({}, { "Name": 1, "Openning_year": 1, "Capacity": 1, "_id": 0 });

============================================================

Record ID: 765_0
NLQ: Show the most common nationality of pilots.
Cleaned MQL:
db.pilot.aggregate([
  {
    $group: {
      _id: "$Nationality",
      count: { $sum: 1 }
    }
  },
  {
    $sort: { count: -1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      Nationality: "$_id"
    }
  }
]);

============================================================

Record ID: 765_1
NLQ: What is the nationality that most pilots belong to?
Cleaned MQL:
db.pilot.aggregate([
  {
    $group: {
      _id: "$Nationality",
      count: { $sum: 1 }
    }
  },
  {
    $sort: { count: -1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      Nationality: "$_id"
    }
  }
]);

============================================================

Record ID: 765_2
NLQ: Find the nationality with the largest number of pilots.
Cleaned MQL:
db.pilot.aggregate([
  {
    $group: {
      _id: "$Nationality",
      count: { $sum: 1 }
    }
  },
  {
    $sort: { count: -1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      Nationality: "$_id"
    }
  }
]);

============================================================

Record ID: 765_3
NLQ: Identify the most frequently occurring nationality among pilots.
Cleaned MQL:
db.pilot.aggregate([
  {
    $group: {
      _id: "$Nationality",
      count: { $sum: 1 }
    }
  },
  {
    $sort: { count: -1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      Nationality: "$_id"
    }
  }
]);

============================================================

Record ID: 765_4
NLQ: Which nationality has the highest count of pilots?
Cleaned MQL:
db.pilot.aggregate([
  {
    $group: {
      _id: "$Nationality",
      count: { $sum: 1 }
    }
  },
  {
    $sort: { count: -1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      Nationality: "$_id"
    }
  }
]);

============================================================

Record ID: 210_0
NLQ: Find the first names of students whose first names contain letter "a".
Cleaned MQL:
db.Student.find(
  {
    Fname: { $regex: "a", $options: "i" }
  },
  {
    Fname: 1,
    _id: 0
  }
);

============================================================

Record ID: 210_1
NLQ: What are the first names for students who have an "a" in their first name?
Cleaned MQL:
db.Student.find(
  {
    Fname: { $regex: "a", $options: "i" }
  },
  {
    Fname: 1,
    _id: 0
  }
);

============================================================

Record ID: 210_2
NLQ: List the first names of all students that have the letter "a" in their first name.
Cleaned MQL:
db.Student.find(
  {
    Fname: { $regex: "a", $options: "i" }
  },
  {
    Fname: 1,
    _id: 0
  }
);

============================================================

Record ID: 210_3
NLQ: Provide the first names of students where the name includes the letter "a".
Cleaned MQL:
db.Student.find(
  {
    Fname: { $regex: "a", $options: "i" }
  },
  {
    Fname: 1,
    _id: 0
  }
);

============================================================

Record ID: 210_4
NLQ: Retrieve the first names of students whose names feature the letter "a".
Cleaned MQL:
db.Student.find(
  {
    Fname: { $regex: "a", $options: "i" }
  },
  {
    Fname: 1,
    _id: 0
  }
);

============================================================

Record ID: 22_0
NLQ: display all the information of those employees who did not have any job in the past.
Cleaned MQL:
db.jobs.aggregate([
  {
    $unwind: "$employees"
  },
  {
    $lookup: {
      from: "departments",
      localField: "employees.EMPLOYEE_ID",
      foreignField: "employees.EMPLOYEE_ID",
      as: "Docs1"
    }
  },
  {
    $project: {
      employee: {
        $cond: [
          {
            $eq: [{ $size: "$employees.job_history" }, 0]
          },
          "$employees",
          {
            $cond: [
              {
                $eq: [{ $size: "$Docs1.employees.job_history" }, 0]
              },
              "$Docs1.employees",
              false
            ]
          }
        ]
      }
    }
  },
  {
    $match: {
      employee: { $ne: false }
    }
  },
  {
    $project: {
      EMPLOYEE_ID: "$employee.EMPLOYEE_ID",
      FIRST_NAME: "$employee.FIRST_NAME",
      LAST_NAME: "$employee.LAST_NAME",
      EMAIL: "$employee.EMAIL",
      PHONE_NUMBER: "$employee.PHONE_NUMBER",
      HIRE_DATE: "$employee.HIRE_DATE",
      JOB_ID: "$employee.JOB_ID",
      SALARY: "$employee.SALARY",
      COMMISSION_PCT: "$employee.COMMISSION_PCT",
      MANAGER_ID: "$employee.MANAGER_ID",
      DEPARTMENT_ID: "$employee.DEPARTMENT_ID",
      _id: 0
    }
  }
]);

============================================================

Record ID: 22_1
NLQ: What is all the information about employees who have never had a job in the past?
Cleaned MQL:
db.jobs.aggregate([
  {
    $unwind: "$employees"
  },
  {
    $lookup: {
      from: "departments",
      localField: "employees.EMPLOYEE_ID",
      foreignField: "employees.EMPLOYEE_ID",
      as: "Docs1"
    }
  },
  {
    $project: {
      employee: {
        $cond: [
          {
            $eq: [{ $size: "$employees.job_history" }, 0]
          },
          "$employees",
          {
            $cond: [
              {
                $eq: [{ $size: "$Docs1.employees.job_history" }, 0]
              },
              "$Docs1.employees",
              false
            ]
          }
        ]
      }
    }
  },
  {
    $match: {
      employee: { $ne: false }
    }
  },
  {
    $project: {
      EMPLOYEE_ID: "$employee.EMPLOYEE_ID",
      FIRST_NAME: "$employee.FIRST_NAME",
      LAST_NAME: "$employee.LAST_NAME",
      EMAIL: "$employee.EMAIL",
      PHONE_NUMBER: "$employee.PHONE_NUMBER",
      HIRE_DATE: "$employee.HIRE_DATE",
      JOB_ID: "$employee.JOB_ID",
      SALARY: "$employee.SALARY",
      COMMISSION_PCT: "$employee.COMMISSION_PCT",
      MANAGER_ID: "$employee.MANAGER_ID",
      DEPARTMENT_ID: "$employee.DEPARTMENT_ID",
      _id: 0
    }
  }
]);

============================================================

Record ID: 22_2
NLQ: Show me all the details about employees who have never held any position previously.
Cleaned MQL:
db.jobs.aggregate([
  {
    $unwind: "$employees"
  },
  {
    $lookup: {
      from: "departments",
      localField: "employees.EMPLOYEE_ID",
      foreignField: "employees.EMPLOYEE_ID",
      as: "Docs1"
    }
  },
  {
    $project: {
      employee: {
        $cond: [
          {
            $eq: [{ $size: "$employees.job_history" }, 0]
          },
          "$employees",
          {
            $cond: [
              {
                $eq: [{ $size: "$Docs1.employees.job_history" }, 0]
              },
              "$Docs1.employees",
              false
            ]
          }
        ]
      }
    }
  },
  {
    $match: {
      employee: { $ne: false }
    }
  },
  {
    $project: {
      EMPLOYEE_ID: "$employee.EMPLOYEE_ID",
      FIRST_NAME: "$employee.FIRST_NAME",
      LAST_NAME: "$employee.LAST_NAME",
      EMAIL: "$employee.EMAIL",
      PHONE_NUMBER: "$employee.PHONE_NUMBER",
      HIRE_DATE: "$employee.HIRE_DATE",
      JOB_ID: "$employee.JOB_ID",
      SALARY: "$employee.SALARY",
      COMMISSION_PCT: "$employee.COMMISSION_PCT",
      MANAGER_ID: "$employee.MANAGER_ID",
      DEPARTMENT_ID: "$employee.DEPARTMENT_ID",
      _id: 0
    }
  }
]);

============================================================

Record ID: 22_3
NLQ: Provide the information for those employees who lack any prior job experience.
Cleaned MQL:
db.jobs.aggregate([
  {
    $unwind: "$employees"
  },
  {
    $lookup: {
      from: "departments",
      localField: "employees.EMPLOYEE_ID",
      foreignField: "employees.EMPLOYEE_ID",
      as: "Docs1"
    }
  },
  {
    $project: {
      employee: {
        $cond: [
          {
            $eq: [{ $size: "$employees.job_history" }, 0]
          },
          "$employees",
          {
            $cond: [
              {
                $eq: [{ $size: "$Docs1.employees.job_history" }, 0]
              },
              "$Docs1.employees",
              false
            ]
          }
        ]
      }
    }
  },
  {
    $match: {
      employee: { $ne: false }
    }
  },
  {
    $project: {
      EMPLOYEE_ID: "$employee.EMPLOYEE_ID",
      FIRST_NAME: "$employee.FIRST_NAME",
      LAST_NAME: "$employee.LAST_NAME",
      EMAIL: "$employee.EMAIL",
      PHONE_NUMBER: "$employee.PHONE_NUMBER",
      HIRE_DATE: "$employee.HIRE_DATE",
      JOB_ID: "$employee.JOB_ID",
      SALARY: "$employee.SALARY",
      COMMISSION_PCT: "$employee.COMMISSION_PCT",
      MANAGER_ID: "$employee.MANAGER_ID",
      DEPARTMENT_ID: "$employee.DEPARTMENT_ID",
      _id: 0
    }
  }
]);

============================================================

Record ID: 22_4
NLQ: Retrieve all relevant data about employees with no job history at all.
Cleaned MQL:
db.jobs.aggregate([
  {
    $unwind: "$employees"
  },
  {
    $lookup: {
      from: "departments",
      localField: "employees.EMPLOYEE_ID",
      foreignField: "employees.EMPLOYEE_ID",
      as: "Docs1"
    }
  },
  {
    $project: {
      employee: {
        $cond: [
          {
            $eq: [{ $size: "$employees.job_history" }, 0]
          },
          "$employees",
          {
            $cond: [
              {
                $eq: [{ $size: "$Docs1.employees.job_history" }, 0]
              },
              "$Docs1.employees",
              false
            ]
          }
        ]
      }
    }
  },
  {
    $match: {
      employee: { $ne: false }
    }
  },
  {
    $project: {
      EMPLOYEE_ID: "$employee.EMPLOYEE_ID",
      FIRST_NAME: "$employee.FIRST_NAME",
      LAST_NAME: "$employee.LAST_NAME",
      EMAIL: "$employee.EMAIL",
      PHONE_NUMBER: "$employee.PHONE_NUMBER",
      HIRE_DATE: "$employee.HIRE_DATE",
      JOB_ID: "$employee.JOB_ID",
      SALARY: "$employee.SALARY",
      COMMISSION_PCT: "$employee.COMMISSION_PCT",
      MANAGER_ID: "$employee.MANAGER_ID",
      DEPARTMENT_ID: "$employee.DEPARTMENT_ID",
      _id: 0
    }
  }
]);

============================================================

Record ID: 987_0
NLQ: Find the name of the department that has the fewest members.
Cleaned MQL:
db.Department.aggregate([
  {
    $unwind: "$Member_of"
  },
  {
    $group: {
      _id: "$DName",
      memberCount: { $sum: 1 }
    }
  },
  {
    $sort: { memberCount: 1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      DName: "$_id"
    }
  }
]);

============================================================

Record ID: 987_1
NLQ: What is the name of the department with the fewest members?
Cleaned MQL:
db.Department.aggregate([
  {
    $unwind: "$Member_of"
  },
  {
    $group: {
      _id: "$DName",
      memberCount: { $sum: 1 }
    }
  },
  {
    $sort: { memberCount: 1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      DName: "$_id"
    }
  }
]);

============================================================

Record ID: 987_2
NLQ: Identify the department that has the smallest number of members.
Cleaned MQL:
db.Department.aggregate([
  {
    $unwind: "$Member_of"
  },
  {
    $group: {
      _id: "$DName",
      memberCount: { $sum: 1 }
    }
  },
  {
    $sort: { memberCount: 1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      DName: "$_id"
    }
  }
]);

============================================================

Record ID: 987_3
NLQ: Which department is associated with the least number of members?
Cleaned MQL:
db.Department.aggregate([
  {
    $unwind: "$Member_of"
  },
  {
    $group: {
      _id: "$DName",
      memberCount: { $sum: 1 }
    }
  },
  {
    $sort: { memberCount: 1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      DName: "$_id"
    }
  }
]);

============================================================

Record ID: 987_4
NLQ: What department has the lowest member count?
Cleaned MQL:
db.Department.aggregate([
  {
    $unwind: "$Member_of"
  },
  {
    $group: {
      _id: "$DName",
      memberCount: { $sum: 1 }
    }
  },
  {
    $sort: { memberCount: 1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      DName: "$_id"
    }
  }
]);

============================================================

Record ID: 1804_0
NLQ: Show names for all aircraft with at least two flights.
Cleaned MQL:
db.aircraft.aggregate([
  {
    $project: {
      name: 1,
      count_flight: {
        $size: "$flight"
      }
    }
  },
  {
    $match: {
      count_flight: {
        $gte: 2
      }
    }
  },
  {
    $project: {
      name: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 1804_1
NLQ: What are the names for all aircrafts with at least 2 flights?
Cleaned MQL:
db.aircraft.aggregate([
  {
    $project: {
      name: 1,
      count_flight: {
        $size: "$flight"
      }
    }
  },
  {
    $match: {
      count_flight: {
        $gte: 2
      }
    }
  },
  {
    $project: {
      name: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 1804_2
NLQ: List the names of all aircraft that have two or more flights.
Cleaned MQL:
db.aircraft.aggregate([
  {
    $project: {
      name: 1,
      count_flight: {
        $size: "$flight"
      }
    }
  },
  {
    $match: {
      count_flight: {
        $gte: 2
      }
    }
  },
  {
    $project: {
      name: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 1804_3
NLQ: Provide the names of aircraft with at least a pair of flights.
Cleaned MQL:
db.aircraft.aggregate([
  {
    $project: {
      name: 1,
      count_flight: {
        $size: "$flight"
      }
    }
  },
  {
    $match: {
      count_flight: {
        $gte: 2
      }
    }
  },
  {
    $project: {
      name: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 1804_4
NLQ: Retrieve the names of all aircraft that are associated with a minimum of two flights.
Cleaned MQL:
db.aircraft.aggregate([
  {
    $project: {
      name: 1,
      count_flight: {
        $size: "$flight"
      }
    }
  },
  {
    $match: {
      count_flight: {
        $gte: 2
      }
    }
  },
  {
    $project: {
      name: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 39_0
NLQ: Give me the average prices of wines that are produced by appelations in Sonoma County.
Cleaned MQL:
db.appellations.aggregate([
  {
    $match: {
      County: "Sonoma"
    }
  },
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      avg_Price: {
        $avg: "$wine.Price"
      }
    }
  },
  {
    $project: {
      _id: 0,
      avg_Price: 1
    }
  }
]);

============================================================

Record ID: 39_1
NLQ: What is the average price of wines produced in appelations in Sonoma County?
Cleaned MQL:
db.appellations.aggregate([
  {
    $match: {
      County: "Sonoma"
    }
  },
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      avg_Price: {
        $avg: "$wine.Price"
      }
    }
  },
  {
    $project: {
      _id: 0,
      avg_Price: 1
    }
  }
]);

============================================================

Record ID: 39_2
NLQ: What is the average cost of wines from appellations situated in Sonoma County?
Cleaned MQL:
db.appellations.aggregate([
  {
    $match: {
      County: "Sonoma"
    }
  },
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      avg_Price: {
        $avg: "$wine.Price"
      }
    }
  },
  {
    $project: {
      _id: 0,
      avg_Price: 1
    }
  }
]);

============================================================

Record ID: 39_3
NLQ: Can you provide the average price for wines that come from Sonoma County appellations?
Cleaned MQL:
db.appellations.aggregate([
  {
    $match: {
      County: "Sonoma"
    }
  },
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      avg_Price: {
        $avg: "$wine.Price"
      }
    }
  },
  {
    $project: {
      _id: 0,
      avg_Price: 1
    }
  }
]);

============================================================

Record ID: 39_4
NLQ: How much do wines from appellations in Sonoma County typically cost on average?
Cleaned MQL:
db.appellations.aggregate([
  {
    $match: {
      County: "Sonoma"
    }
  },
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      avg_Price: {
        $avg: "$wine.Price"
      }
    }
  },
  {
    $project: {
      _id: 0,
      avg_Price: 1
    }
  }
]);

============================================================

Record ID: 218_0
NLQ: List the names of all distinct wines in alphabetical order.
Cleaned MQL:
db.appellations.aggregate([
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      names: {
        $addToSet: "$wine.Name"
      }
    }
  },
  {
    $unwind: "$names"
  },
  {
    $sort: {
      names: 1
    }
  },
  {
    $project: {
      _id: 0,
      Name: "$names"
    }
  }
]);

============================================================

Record ID: 218_1
NLQ: What are the names of wines, sorted in alphabetical order?
Cleaned MQL:
db.appellations.aggregate([
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      names: {
        $addToSet: "$wine.Name"
      }
    }
  },
  {
    $unwind: "$names"
  },
  {
    $sort: {
      names: 1
    }
  },
  {
    $project: {
      _id: 0,
      Name: "$names"
    }
  }
]);

============================================================

Record ID: 218_2
NLQ: Retrieve all unique wine names listed in order from A to Z.
Cleaned MQL:
db.appellations.aggregate([
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      names: {
        $addToSet: "$wine.Name"
      }
    }
  },
  {
    $unwind: "$names"
  },
  {
    $sort: {
      names: 1
    }
  },
  {
    $project: {
      _id: 0,
      Name: "$names"
    }
  }
]);

============================================================

Record ID: 218_3
NLQ: Provide an alphabetical list of distinct wine names.
Cleaned MQL:
db.appellations.aggregate([
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      names: {
        $addToSet: "$wine.Name"
      }
    }
  },
  {
    $unwind: "$names"
  },
  {
    $sort: {
      names: 1
    }
  },
  {
    $project: {
      _id: 0,
      Name: "$names"
    }
  }
]);

============================================================

Record ID: 218_4
NLQ: Show the names of all wines, ensuring they are sorted alphabetically without duplicates.
Cleaned MQL:
db.appellations.aggregate([
  {
    $unwind: "$wine"
  },
  {
    $group: {
      _id: null,
      names: {
        $addToSet: "$wine.Name"
      }
    }
  },
  {
    $unwind: "$names"
  },
  {
    $sort: {
      names: 1
    }
  },
  {
    $project: {
      _id: 0,
      Name: "$names"
    }
  }
]);

============================================================

Record ID: 2424_0
NLQ: How many captains are in each rank?
Cleaned MQL:
db.Ship.aggregate([
  {
    $unwind: "$captain"
  },
  {
    $group: {
      _id: "$captain.Rank",
      count: { $sum: 1 }
    }
  },
  {
    $project: {
      Rank: "$_id",
      count: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 2424_1
NLQ: Count the number of captains that have each rank.
Cleaned MQL:
db.Ship.aggregate([
  {
    $unwind: "$captain"
  },
  {
    $group: {
      _id: "$captain.Rank",
      count: { $sum: 1 }
    }
  },
  {
    $project: {
      Rank: "$_id",
      count: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 2424_2
NLQ: What is the count of captains for each rank classification?
Cleaned MQL:
db.Ship.aggregate([
  {
    $unwind: "$captain"
  },
  {
    $group: {
      _id: "$captain.Rank",
      count: { $sum: 1 }
    }
  },
  {
    $project: {
      Rank: "$_id",
      count: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 2424_3
NLQ: How many captains exist for each rank category?
Cleaned MQL:
db.Ship.aggregate([
  {
    $unwind: "$captain"
  },
  {
    $group: {
      _id: "$captain.Rank",
      count: { $sum: 1 }
    }
  },
  {
    $project: {
      Rank: "$_id",
      count: 1,
      _id: 0
    }
  }
]);

============================================================

Record ID: 2424_4
NLQ: Provide the total number of captains grouped by their rank.
Cleaned MQL:
db.Ship.aggregate([
  {
    $unwind: "$captain"
  },
  {
    $group: {
      _id: "$captain.Rank",
      count: { $sum: 1 }
    }
  },
  {
    $project: {
      Rank: "$_id",
      count: 1,
      _id: 0
    }
  }
]);

============================================================

