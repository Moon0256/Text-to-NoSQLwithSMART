[
    {
        "record_id": 3999,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the total number of enrollment of schools that do not have any goalie player?",
            "What is the total number of students enrolled in schools without any goalies?",
            "How many students are enrolled in colleges that do not have any players trying out as goalies?",
            "What is the cumulative enrollment number for schools that lack goalie players?",
            "Calculate the total enrollment across colleges that have no players in the goalie position."
        ],
        "ref_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $ne: \"goalie\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1903,
        "db_id": "news_report",
        "nl_queries": [
            "Show the names of journalists and the dates of the events they reported.",
            "List the names of journalists along with the event dates they covered.",
            "Provide the names of reporters together with the dates of the events they reported on.",
            "Display the journalists’ names and the corresponding event dates for which they provided coverage.",
            "Can you show the names of the journalists and the dates of the events they have reported about?"
        ],
        "ref_sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
        "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Date\": \"$Docs1.Date\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 64,
        "db_id": "flight_2",
        "nl_queries": [
            "List all airline names and their abbreviations in \"USA\".",
            "What are the airline names and abbreviations for airlines in the USA?",
            "Retrieve the names and abbreviations of all airlines operating in the United States.",
            "Provide a list of airline names along with their abbreviations for carriers based in the USA.",
            "Can you show me the airline names and their corresponding abbreviations for US-based airlines?"
        ],
        "ref_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: { Country: \"USA\" }\n  },\n  {\n    $project: { Airline: 1, Abbreviation: 1, _id: 0 }\n  }\n])\n"
    },
    {
        "record_id": 3700,
        "db_id": "browser_web",
        "nl_queries": [
            "Which accelerator name contains substring \"Opera\"?",
            "What are the accelerator names that have \"Opera\" in them?",
            "List all accelerator names containing the substring \"Opera.\"",
            "Which names of accelerators include the term \"Opera\"?",
            "Identify the accelerator names that feature the substring \"Opera.\""
        ],
        "ref_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "MQL": "db.Web_client_accelerator.find({\n  \"name\": { $regex: \"Opera\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1999,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
            "Retrieve the purchase time, age, and address for all members, sorted by the time of purchase.",
            "Show each member's age, address, and the time they made their purchase, ordered by purchase time.",
            "List the address, age, and purchase time of every member, arranged in ascending order of purchase time.",
            "Provide the purchase times, ages, and addresses of members, displaying the results in chronological order of purchase."
        ],
        "ref_sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
        "MQL": "db.member.find({}, { \"Time_of_purchase\": 1, \"Age\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Time_of_purchase\": 1 });\n"
    },
    {
        "record_id": 3484,
        "db_id": "museum_visit",
        "nl_queries": [
            "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "List the names and membership levels of visitors who have a membership level greater than 4, sorted by age from oldest to youngest.",
            "Retrieve the names and membership levels of visitors with a membership level above 4, arranging the results by age in descending order.",
            "Show the names and levels of membership for those visitors whose membership is higher than 4, and order the list by age, starting with the oldest.",
            "Find and display the names along with their membership levels of visitors whose membership exceeds 4, sorted from the oldest to the youngest based on age."
        ],
        "ref_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"Level_of_membership\": 1, \"_id\": 0 }).sort({ \"Age\": -1 });\n"
    },
    {
        "record_id": 1632,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the names of body builders whose total score is higher than 300?",
            "Can you list the names of body builders with a total score above 300?",
            "Show me the names of all body builders whose total score exceeds 300.",
            "What are the names of those body builders who have a total score greater than 300?",
            "Provide the names of body builders with a total score that is more than 300."
        ],
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
        "MQL": "db.people.find({\n  \"body_builder.Total\": { $gt: 300 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3270,
        "db_id": "student_1",
        "nl_queries": [
            "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
            "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.",
            "For every grade, provide the grade level, how many classrooms are utilized, and the overall student count within that grade.",
            "List each grade along with the corresponding number of classrooms and the total student enrollment for that grade.",
            "For each grade level, report the grade identifier, the count of distinct classrooms associated with it, and the total number of students enrolled in that grade."
        ],
        "ref_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Grade\",\n      count_DISTINCT_classroom: { $addToSet: \"$Classroom\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Grade: \"$_id\",\n      count_DISTINCT_classroom: { $size: \"$count_DISTINCT_classroom\" },\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2492,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "How many documents are using the template with type code 'PPT'?",
            "Count the number of documents that use the PPT template type.",
            "What is the total number of documents associated with the template type code 'PPT'?",
            "How many documents utilize the PPT template type?",
            "Determine the count of documents that are linked to the template with the type code 'PPT'."
        ],
        "ref_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: 'PPT'\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1079,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the description and code of the type of service that is performed the most often?",
            "Find the description and code of the service type that is performed the most times.",
            "What is the most commonly performed service type, including its description and code?",
            "Identify the service type that is used the most frequently, along with its description and code.",
            "Give me the description and code for the service type that is conducted with the highest frequency."
        ],
        "ref_sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: {\n        Service_Type_Description: \"$Service_Type_Description\",\n        Service_Type_Code: \"$Service_Type_Code\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Services.Bookings_Services\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Service_Type_Description: \"$_id.Service_Type_Description\",\n      Service_Type_Code: \"$_id.Service_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1586,
        "db_id": "music_4",
        "nl_queries": [
            "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
            "Return the issue dates of volumes that are by the artist named Gorgoroth.",
            "What are the release dates for volumes related to the artist Gorgoroth?",
            "Can you provide the issue dates for all volumes by the artist known as Gorgoroth?",
            "List the issue dates of the volumes that feature the artist Gorgoroth."
        ],
        "ref_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = \"Gorgoroth\"",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      Artist: \"Gorgoroth\"\n    }\n  },\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $project: {\n      Issue_Date: \"$volume.Issue_Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2989,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "List the customer event id and the corresponding move in date and property id.",
            "Retrieve the event ID of each customer, along with their respective move-in date and property identifier.",
            "Show me the customer event IDs together with the dates when customers moved in and their corresponding property IDs.",
            "Provide a list that includes the customer event ID, the date of move-in, and the associated property ID for each customer event.",
            "Enumerate the IDs of customer events, including the move-in dates and the property IDs related to those events."
        ],
        "ref_sql": "SELECT customer_event_id , date_moved_in , property_id FROM customer_events",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Events\"\n  },\n  {\n    $project: {\n      \"Customer_Event_ID\": \"$Customer_Events.Customer_Event_ID\",\n      \"date_moved_in\": \"$Customer_Events.date_moved_in\",\n      \"property_id\": \"$Customer_Events.property_id\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 431,
        "db_id": "club_1",
        "nl_queries": [
            "List the clubs that have at least a member with advisor \"1121\".",
            "Which clubs have one or more members whose advisor is \"1121\"?",
            "Identify the clubs that include any member who is associated with advisor \"1121\".",
            "Which clubs have members that are being advised by \"1121\"?",
            "Name the clubs that feature at least one student under the guidance of advisor \"1121\"."
        ],
        "ref_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121",
        "MQL": "db.Club.aggregate([\n  {\n    $unwind: \"$Member_of_club\"\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"Member_of_club.StuID\",\n      foreignField: \"StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Advisor\": 1121\n    }\n  },\n  {\n    $group: {\n      _id: \"$ClubID\",\n      ClubName: { $first: \"$ClubName\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      ClubName: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4279,
        "db_id": "tvshow",
        "nl_queries": [
            "Find the production code and channel of the most recently aired cartoon .",
            "What is the produdction code and channel of the most recent cartoon ?",
            "What are the production code and channel for the latest aired cartoon?",
            "Retrieve the production code along with the channel of the most recently released cartoon.",
            "Can you provide the channel and production code of the latest cartoon that has aired?"
        ],
        "ref_sql": "select production_code , channel from cartoon order by original_air_date desc limit 1",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $sort: {\n      \"Cartoon.Original_air_date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Production_code: \"$Cartoon.Production_code\",\n      Channel: \"$Cartoon.Channel\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4089,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Find the name of the employee who got the highest one time bonus.",
            "Which employee received the biggest bonus? Give me the employee name.",
            "Who is the employee that obtained the largest one-time bonus? Please provide their name.",
            "Identify the employee that received the maximum bonus and share their name.",
            "What is the name of the employee with the highest bonus awarded in a single instance?"
        ],
        "ref_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "MQL": "db.employee.aggregate([\n  {\n    $unwind: \"$evaluation\"\n  },\n  {\n    $sort: {\n      \"evaluation.Bonus\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2774,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "How many services are there?",
            "Count the total number of available services.",
            "Count the number of services.",
            "What is the total number of services provided?",
            "How many different services are listed?"
        ],
        "ref_sql": "SELECT count(*) FROM services",
        "MQL": "db.Services.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2351,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "Which cmi cross reference id is not related to any parking taxes?",
            "Which cmi cross reference IDs do not have any associated parking fines?",
            "Identify the cmi cross reference ID that is not linked to any parking fine records.",
            "What are the cmi cross reference IDs with no related parking fines?",
            "List the cmi cross reference IDs that are not connected to any parking taxes."
        ],
        "ref_sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "MQL": "db.Customer_Master_Index.aggregate([\n  { $unwind: \"$CMI_Cross_References\" },\n  { $match: { \"CMI_Cross_References.Parking_Fines\": { $exists: true, $eq: [] } } },\n  { $project: { \"cmi_cross_ref_id\": \"$CMI_Cross_References.cmi_cross_ref_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1160,
        "db_id": "culture_company",
        "nl_queries": [
            "List all company names with a book published by Alyson.",
            "What are all the company names that have a book published by Alyson?",
            "Identify all the companies that have published a book through Alyson.",
            "Retrieve the names of companies that published works under the Alyson imprint.",
            "Provide a list of company names associated with books released by Alyson."
        ],
        "ref_sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson'",
        "MQL": "db.book_club.aggregate([\n  {\n    $match: {\n      Publisher: \"Alyson\"\n    }\n  },\n  {\n    $unwind: \"$culture_company\"\n  },\n  {\n    $project: {\n      Company_name: \"$culture_company.Company_name\",\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: \"$Company_name\"\n    }\n  },\n  {\n    $project: {\n      Company_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1680,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
            "What are the apartment number, start date, and end date of each apartment booking?",
            "List the apartment numbers along with their respective booking start dates.",
            "Provide the apartment number and the corresponding start date for each booking.",
            "What are the apartment numbers and the start dates for all bookings of the apartments?"
        ],
        "ref_sql": "SELECT T2.apt_number , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $project: {\n      apt_number: \"$Apartments.apt_number\",\n      booking_start_date: \"$Apartments.Apartment_Bookings.booking_start_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1930,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the saving balance of the account with the highest checking balance.",
            "What is the savings balance of the account belonging to the customer with the highest checking balance?",
            "What is the balance in the savings account of the customer with the highest checking account balance?",
            "Retrieve the savings balance for the account that has the maximum checking balance.",
            "Show me the savings balance of the customer who holds the account with the largest checking balance."
        ],
        "ref_sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $sort: {\n      \"CHECKING.balance\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"ACCOUNTS\",\n      localField: \"custid\",\n      foreignField: \"custid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.SAVINGS\"\n  },\n  {\n    $project: {\n      balance: \"$Docs1.SAVINGS.balance\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1491,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
            "What are the names of all the states with college students playing in the mid position but no goalies?",
            "List the names of states where college players occupy the mid position but there are no goalies.",
            "Which states have college athletes playing in the midfielder role and lack any goalkeepers?",
            "Identify the states with college students participating as midfielders but without any players in the goalie position."
        ],
        "ref_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'",
        "MQL": "db.College.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $group: {\n      _id: \"$state\",\n      midPlayers: {\n        $addToSet: {\n          $cond: [{ $eq: [\"$Tryout.pPos\", \"mid\"] }, \"$Tryout.pID\", null]\n        }\n      },\n      goaliePlayers: {\n        $addToSet: {\n          $cond: [{ $eq: [\"$Tryout.pPos\", \"goalie\"] }, \"$Tryout.pID\", null]\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      state: \"$_id\",\n      hasMidPlayers: {\n        $gt: [{ $size: { $filter: { input: \"$midPlayers\", as: \"player\", cond: { $ne: [\"$$player\", null] } } } }, 0]\n      },\n      hasGoaliePlayers: {\n        $gt: [{ $size: { $filter: { input: \"$goaliePlayers\", as: \"player\", cond: { $ne: [\"$$player\", null] } } } }, 0]\n      }\n    }\n  },\n  {\n    $match: {\n      hasMidPlayers: true,\n      hasGoaliePlayers: false\n    }\n  },\n  {\n    $project: {\n      state: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4146,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the unit of measurement and product category code of product named \"chervil\".",
            "What are the unit of measure and category code for the 'chervil' product?",
            "What is the unit of measure and the category code for the product \"chervil\"?",
            "Retrieve the unit of measurement along with the product category code for the item named \"chervil.\"",
            "Provide the unit of measure and product category code associated with the product called \"chervil.\""
        ],
        "ref_sql": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"chervil\"\n    }\n  },\n  {\n    $project: {\n      unit_of_measure: \"$unit_of_measure\",\n      product_category_code: \"$product_category_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1867,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the star rating descriptions of the hotels with price above 10000?",
            "Give me the star rating descriptions of the hotels that cost more than 10000.",
            "List the descriptions of star ratings for hotels priced over 10000.",
            "What are the descriptions for star ratings of hotels that charge more than 10000?",
            "Provide the star rating descriptions for hotels with prices exceeding 10000."
        ],
        "ref_sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000",
        "MQL": "db.Ref_Hotel_Star_Ratings.aggregate([\n  {\n    $unwind: \"$Hotels\"\n  },\n  {\n    $match: {\n      \"Hotels.price_range\": { $gt: 10000 }\n    }\n  },\n  {\n    $project: {\n      star_rating_description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2240,
        "db_id": "flight_company",
        "nl_queries": [
            "What is the velocity of the pilot named 'Thompson'?",
            "How fast does the pilot named 'Thompson' fly on average?",
            "What is the average speed of flights operated by the pilot called 'Thompson'?",
            "Can you tell me the mean velocity of Thompson's flights?",
            "What is the typical velocity for the flights piloted by 'Thompson'?"
        ],
        "ref_sql": "SELECT avg(velocity) FROM flight WHERE pilot = 'Thompson'",
        "MQL": "db.operate_company.aggregate([\n  { $unwind: \"$flight\" },\n  { $match: { \"flight.Pilot\": \"Thompson\" } },\n  { $group: { \n      _id: null, \n      avg_velocity: { $avg: \"$flight.Velocity\" } \n    } \n  },\n  { $project: { \n      _id: 0, \n      avg_velocity: 1 \n    } \n  }\n]);\n"
    },
    {
        "record_id": 2324,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show all cities without a branch having more than 100 memberships.",
            "What are the cities that do not have any branches with more than 100 members?",
            "List all cities that lack branches with over 100 registered memberships.",
            "Which cities do not have any branches recording more than 100 memberships?",
            "Identify the cities that have no branches featuring more than 100 members."
        ],
        "ref_sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100",
        "MQL": "db.branch.aggregate([\n  {\n    $project: {\n      City: 1,\n      count_membership_register_branch: { $size: \"$membership_register_branch\" }\n    }\n  },\n  {\n    $match: {\n      count_membership_register_branch: { $gt: 100 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$City\"\n    }\n  },\n  {\n    $project: {\n      City: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2643,
        "db_id": "club_1",
        "nl_queries": [
            "How many clubs does \"Linda Smith\" belong to?",
            "How many clubs does \"Linda Smith\" have membership for?",
            "What is the total number of clubs that Linda Smith is part of?",
            "Can you tell me how many clubs Linda Smith is a member of?",
            "How many club memberships does Linda Smith hold?"
        ],
        "ref_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      LName: \"Smith\",\n      Fname: \"Linda\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Member_of_club\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3646,
        "db_id": "candidate_poll",
        "nl_queries": [
            "List all people names in the order of their date of birth from old to young.",
            "What are the names of all people, ordered by their date of birth?",
            "Provide a list of all names, sorted by date of birth from the oldest to the youngest.",
            "Show me the names of people in ascending order of their date of birth.",
            "Can you give me the names of everyone, arranged by their date of birth from the earliest to the latest?"
        ],
        "ref_sql": "SELECT name FROM people ORDER BY date_of_birth",
        "MQL": "db.people.find({}, { Name: 1, _id: 0 }).sort({ Date_of_Birth: 1 });\n"
    },
    {
        "record_id": 10,
        "db_id": "soccer_2",
        "nl_queries": [
            "List all information about college sorted by enrollment number in the ascending order.",
            "What information do you have on colleges sorted by increasing enrollment numbers?",
            "Provide a list of colleges, ordered by their enrollment numbers in ascending order.",
            "Can you show all details of colleges sorted from the lowest to highest enrollment?",
            "What are the details of colleges arranged by their enrollment figures in an increasing sequence?"
        ],
        "ref_sql": "SELECT * FROM College ORDER BY enr",
        "MQL": "db.College.find(\n  {},\n  {\n    _id: 0,\n    cName: 1,\n    state: 1,\n    enr: 1\n  }\n).sort({ enr: 1 });\n"
    },
    {
        "record_id": 3847,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the reviewer id of Daniel Lewis?",
            "What is the id of the reviewer named Daniel Lewis?",
            "Can you tell me the reviewer ID for someone named Daniel Lewis?",
            "What reviewer ID corresponds to Daniel Lewis?",
            "I'm looking for the ID of the reviewer called Daniel Lewis."
        ],
        "ref_sql": "SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\"",
        "MQL": "db.Reviewer.find(\n  { name: \"Daniel Lewis\" },\n  { rID: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1720,
        "db_id": "inn_1",
        "nl_queries": [
            "What kind of decor has the least number of reservations?",
            "What is the least popular kind of decor?",
            "Which decor style has received the fewest bookings?",
            "Identify the decor type with the lowest reservation count.",
            "What is the decor style that attracts the least number of reservations?"
        ],
        "ref_sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $unwind: \"$Reservations\"\n  },\n  {\n    $group: {\n      _id: \"$decor\",\n      reservationCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      reservationCount: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      decor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2878,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "How many departments offer any degree?",
            "How many different departments offer degrees?",
            "What is the total number of distinct departments that provide degree programs?",
            "Can you tell me how many unique departments offer degrees?",
            "How many departments are there that have degree offerings?"
        ],
        "ref_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "MQL": "db.Departments.aggregate([\n  {\n    $unwind: \"$Degree_Programs\"\n  },\n  {\n    $group: {\n      _id: \"$Degree_Programs.department_id\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_department_id: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_department_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2688,
        "db_id": "farm",
        "nl_queries": [
            "How many farms are there?",
            "Count the number of farms.",
            "What is the total number of farms available?",
            "Please provide the count of all farms.",
            "How many total farms exist in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM farm",
        "MQL": "db.farm.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 393,
        "db_id": "game_1",
        "nl_queries": [
            "Show all video game types.",
            "What are the different types of video games?",
            "List all types of video games available.",
            "What types of video games can be found in the collection?",
            "Provide me with the various video game types."
        ],
        "ref_sql": "SELECT DISTINCT gtype FROM Video_games",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $group: {\n      _id: \"$GType\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      GType: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2587,
        "db_id": "game_1",
        "nl_queries": [
            "How many video games exist?",
            "How many video games do you have?",
            "What is the total count of video games available?",
            "Can you tell me the number of video games that are present?",
            "How many video games are currently listed in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM Video_games",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"GameID\",\n      foreignField: \"Plays_Games.GameID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $ne: [] }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1019,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the names and ids of tourist attractions that are visited at most once.",
            "What are the names and ids of the tourist attractions that are visited at most once?",
            "List the IDs and names of tourist attractions that have been visited no more than once.",
            "Provide the names and IDs of tourist attractions that received at most a single visit.",
            "What are the IDs and names of tourist attractions that have only been visited one time or not at all?"
        ],
        "ref_sql": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Visits\"\n  },\n  {\n    $group: {\n      _id: {\n        Tourist_Attraction_ID: \"$Tourist_Attractions.Tourist_Attraction_ID\",\n        Name: \"$Tourist_Attractions.Name\"\n      },\n      visitCount: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      visitCount: { $lte: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Tourist_Attraction_ID: \"$_id.Tourist_Attraction_ID\",\n      Name: \"$_id.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 756,
        "db_id": "poker_player",
        "nl_queries": [
            "What are different nationalities of people and the corresponding number of people from each nation?",
            "How many people are there of each nationality?",
            "Can you provide a list of nationalities along with the total number of people from each one?",
            "What is the count of individuals for every different nationality in the dataset?",
            "How many people belong to each nationality represented in the data?"
        ],
        "ref_sql": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Nationality: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4026,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the total capacity of all dorms.",
            "What is the total student capacity of all dorms?",
            "Calculate the overall student capacity across all dormitories.",
            "What is the combined student capacity for all dorms?",
            "Determine the total number of students that can be accommodated in all dorms."
        ],
        "ref_sql": "SELECT sum(student_capacity) FROM dorm",
        "MQL": "db.Dorm.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_student_capacity: {\n        $sum: \"$student_capacity\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_student_capacity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 33,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find all information of all the products with a price between $60 and $120.",
            "What is all the information of all the products that have a price between 60 and 120?",
            "List all details for products that are priced between $60 and $120.",
            "Provide the complete information for all products with prices ranging from 60 to 120 dollars.",
            "Retrieve all product information where the price falls within the range of $60 to $120."
        ],
        "ref_sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.Price\": {\n        $gte: 60,\n        $lte: 120\n      }\n    }\n  },\n  {\n    $project: {\n      Code: \"$Products.Code\",\n      Name: \"$Products.Name\",\n      Price: \"$Products.Price\",\n      Manufacturer: \"$Products.Manufacturer\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 377,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "What are the distinct move in dates of the residents?",
            "Can you provide the unique dates when residents moved in?",
            "What are the different move-in dates recorded for the residents?",
            "List the various dates on which residents have moved in.",
            "What distinct dates are noted for when residents have relocated?"
        ],
        "ref_sql": "SELECT DISTINCT date_moved_in FROM residents",
        "MQL": "db.Properties.aggregate([\n  { $unwind: \"$Residents\" },\n  { $group: { _id: \"$Residents.date_moved_in\" } },\n  { $project: { _id: 0, date_moved_in: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 1262,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the facility codes of apartments with more than 4 bedrooms.",
            "What are the facility codes of the apartments with more than four bedrooms?",
            "List the codes of facilities available in apartments that have more than four bedrooms.",
            "What facility codes can be found for apartments with a bedroom count exceeding four?",
            "Provide the facility codes associated with apartments that feature over four bedrooms."
        ],
        "ref_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $match: {\n      \"Apartments.bedroom_count\": { $gt: 4 }\n    }\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Facilities\"\n  },\n  {\n    $project: {\n      facility_code: \"$Apartments.Apartment_Facilities.facility_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2594,
        "db_id": "e_government",
        "nl_queries": [
            "How many cities are there in state \"Colorado\"?",
            "Count the number of cities in the state of Colorado.",
            "What is the total number of cities located in Colorado?",
            "How many distinct cities can be found in the state of Colorado?",
            "Determine the count of cities present in Colorado."
        ],
        "ref_sql": "SELECT count(*) FROM addresses WHERE state_province_county = \"Colorado\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: {\n      state_province_county: \"Colorado\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$town_city\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3274,
        "db_id": "network_1",
        "nl_queries": [
            "What grade is Kyle in?",
            "Return the grade for the high schooler named Kyle.",
            "What is the current grade level of Kyle?",
            "Can you provide Kyle's grade in school?",
            "Please tell me which grade Kyle is in."
        ],
        "ref_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $match: {\n      name: \"Kyle\"\n    }\n  },\n  {\n    $project: {\n      grade: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1095,
        "db_id": "chinook_1",
        "nl_queries": [
            "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
            "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
            "List the titles of albums that feature tracks from both the Reggae and Rock genres.",
            "What album titles correspond to albums that include tracks of both Reggae and Rock genres?",
            "Identify the titles of albums containing tracks in both the Reggae and Rock music genres."
        ],
        "ref_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $unwind: \"$Album.Track\"\n  },\n  {\n    $lookup: {\n      from: \"Genre\",\n      localField: \"Album.Track.GenreId\",\n      foreignField: \"GenreId\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Name\": { $in: [\"Reggae\", \"Rock\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Album.AlbumId\",\n      Title: { $first: \"$Album.Title\" },\n      Genres: { $addToSet: \"$Docs1.Name\" }\n    }\n  },\n  {\n    $match: {\n      Genres: { $all: [\"Reggae\", \"Rock\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1298,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What are the ids and names of the medicine that can interact with two or more enzymes?",
            "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
            "List the identifiers and names of medicines that interact with at least two different enzymes.",
            "Which medicine IDs correspond to names of medicines that can engage with more than one enzyme?",
            "What are the names and IDs of medicines capable of interacting with two or more enzymes?"
        ],
        "ref_sql": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
        "MQL": "db.medicine.aggregate([\n  {\n    $unwind: \"$medicine_enzyme_interaction\"\n  },\n  {\n    $group: {\n      _id: \"$id\",\n      name: { $first: \"$name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      id: \"$_id\",\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2760,
        "db_id": "party_people",
        "nl_queries": [
            "How many regions do we have?",
            "Count the number of regions.",
            "What is the total count of regions available?",
            "Determine how many regions exist in the database.",
            "Can you tell me the number of regions present?"
        ],
        "ref_sql": "SELECT count(*) FROM region",
        "MQL": "db.region.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2457,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "How many apartment bookings are there in total?",
            "Count the total number of apartment bookings.",
            "What is the total number of bookings for apartments?",
            "Determine the overall count of apartment bookings.",
            "How many bookings have been made for apartments in total?"
        ],
        "ref_sql": "SELECT count(*) FROM Apartment_Bookings",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 837,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the product names with average product price smaller than 1000000?",
            "Find the product names whose average product price is below 1000000.",
            "List the names of products that have an average price of less than 1,000,000.",
            "Identify product names with average prices under 1,000,000.",
            "What product names are associated with an average price lower than 1,000,000?"
        ],
        "ref_sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price) < 1000000",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$Product_Name\",\n      avg_Product_Price: { $avg: \"$Product_Price\" }\n    }\n  },\n  {\n    $match: {\n      avg_Product_Price: { $lt: 1000000 }\n    }\n  },\n  {\n    $project: {\n      Product_Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2040,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "Find the ids of orders whose status is 'Success'.",
            "Retrieve the order IDs that have a status of 'Success'.",
            "List the IDs of orders marked as 'Success'.",
            "What are the order IDs for those orders with a successful status?",
            "Show me the IDs of the orders whose status indicates 'Success'."
        ],
        "ref_sql": "SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Regular_Orders\" },\n  { $unwind: \"$Regular_Orders.Actual_Orders\" },\n  { $match: { \"Regular_Orders.Actual_Orders.order_status_code\": \"Success\" } },\n  { $project: { \"actual_order_id\": \"$Regular_Orders.Actual_Orders.actual_order_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3415,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the maximum and total number of followers of all users.",
            "Retrieve the highest number of followers and the overall follower count for all users.",
            "What is the peak number of followers and the total number of followers across all user profiles?",
            "Calculate the maximum and cumulative followers of every user in the database.",
            "Determine both the maximum followers a user has and the total followers among all users."
        ],
        "ref_sql": "SELECT max(followers) , sum(followers) FROM user_profiles",
        "MQL": "db.user_profiles.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_followers: { $max: \"$followers\" },\n      sum_followers: { $sum: \"$followers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2814,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "How many distinct currency codes are there for all drama workshop groups?",
            "Find the number of distinct currency codes used in drama workshop groups.",
            "What is the total number of unique currency codes for all drama workshop groups?",
            "Count how many different currency codes are utilized across the drama workshop groups.",
            "How many unique currency codes are registered for each of the drama workshop groups?"
        ],
        "ref_sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Drama_Workshop_Groups\"\n  },\n  {\n    $group: {\n      _id: \"$Drama_Workshop_Groups.Currency_Code\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Currency_Code: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Currency_Code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3916,
        "db_id": "concert_singer",
        "nl_queries": [
            "List all song names by singers above the average age.",
            "What are all the song names by singers who are older than average?",
            "What are the names of songs sung by artists older than the average age?",
            "Provide a list of song titles from singers who are above the average age.",
            "Show all song names from singers whose ages exceed the average age of the group."
        ],
        "ref_sql": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "MQL": "db.singer.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"singer\",\n      let: { avg_Age: \"$avg_Age\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$Age\", \"$$avg_Age\"] }\n          }\n        },\n        {\n          $project: {\n            Song_Name: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  },\n  {\n    $project: {\n      Song_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3629,
        "db_id": "college_2",
        "nl_queries": [
            "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
            "Give the name of the lowest earning instructor in the Statistics department.",
            "Who is the instructor with the lowest salary in the Statistics department?",
            "Can you provide the name of the instructor that earns the least in the Statistics department?",
            "Identify the name of the lowest-paid instructor within the Statistics department."
        ],
        "ref_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $match: {\n      dept_name: \"Statistics\"\n    }\n  },\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $project: {\n      name: \"$instructor.name\",\n      salary: \"$instructor.salary\"\n    }\n  },\n  {\n    $sort: {\n      salary: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1525,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the texts of assessment notes for teachers with last name \"Schuster\".",
            "Retrieve the content of assessment notes for teachers identified as \"Schuster\".",
            "What are the texts of the assessment notes for teachers with the last name \"Schuster\"?",
            "Get the assessment note texts for those teachers named \"Schuster\".",
            "Provide the written assessment notes for teachers who have the last name \"Schuster\"."
        ],
        "ref_sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\"",
        "MQL": "db.Addresses.aggregate([\n  \n  { $unwind: \"$Teachers\" },\n  \n  \n  { $match: { \"Teachers.last_name\": \"Schuster\" } },\n  \n  \n  { $unwind: \"$Teachers.Assessment_Notes\" },\n  \n  \n  { $project: { \"text_of_notes\": \"$Teachers.Assessment_Notes.text_of_notes\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3014,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What are the names of customers who use payment method \"Cash\"?",
            "Which customers use \"Cash\" for payment method? Return the customer names.",
            "List the names of all customers that choose \"Cash\" as their payment option.",
            "Please provide the names of customers who opt for \"Cash\" in their payment methods.",
            "Give me the names of customers using cash for payments."
        ],
        "ref_sql": "SELECT customer_name FROM customers WHERE payment_method = \"Cash\"",
        "MQL": "db.Customers.find(\n  { payment_method: \"Cash\" },\n  { customer_name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 382,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
            "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?",
            "Identify the driver ID and stop number for drivers who had a pit stop duration less than that of any driver in race 841.",
            "List the IDs and stop numbers of drivers whose pit stops were quicker than some drivers competing in race 841.",
            "What are the driver IDs and stop numbers for those who have shorter pit stop durations compared to drivers in race 841?"
        ],
        "ref_sql": "SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration < (SELECT max(duration) FROM pitstops WHERE raceid = 841)",
        "MQL": "db.pitStops.aggregate([\n  {\n    $lookup: {\n      from: \"pitStops\",\n      let: { raceId: \"$raceId\", duration: \"$duration\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: {\n              $and: [\n                { $eq: [\"$raceId\", 841] },\n                { $lt: [\"$$duration\", \"$duration\"] }\n              ]\n            }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      driverId: 1,\n      stop: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 358,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What are all the possible breed type and size type combinations?",
            "Find the distinct breed type and size type combinations for dogs.",
            "What combinations of dog breed and size are available?",
            "List the unique pairs of dog breeds and sizes.",
            "Show all distinct combinations of size and breed types for the dogs."
        ],
        "ref_sql": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $group: {\n      _id: {\n        breed_code: \"$Dogs.breed_code\",\n        size_code: \"$Dogs.size_code\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      breed_code: \"$_id.breed_code\",\n      size_code: \"$_id.size_code\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3556,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
            "What are the names and trade names of the medcines that are FDA approved?",
            "List the names and trade names of medicines that have received FDA approval marked as 'Yes'.",
            "Provide the names and trade names of all FDA-approved medicines.",
            "Retrieve the names and trade names of medications that are approved by the FDA."
        ],
        "ref_sql": "SELECT name , trade_name FROM medicine WHERE FDA_approved = 'Yes'",
        "MQL": "db.medicine.find(\n  { FDA_approved: \"Yes\" },\n  { name: 1, Trade_Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 410,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the distinct payment method codes in all the invoices?",
            "Show me the distinct payment method codes from the invoice record.",
            "List all unique payment method codes used across the invoices.",
            "What are the different payment method codes found in the invoice records?",
            "Retrieve the distinct codes for payment methods from all invoice entries."
        ],
        "ref_sql": "SELECT DISTINCT payment_method_code FROM INVOICES",
        "MQL": "db.Ref_Payment_Methods.aggregate([\n  {\n    $unwind: \"$Invoices\"\n  },\n  {\n    $group: {\n      _id: \"$Invoices.payment_method_code\"\n    }\n  },\n  {\n    $project: {\n      payment_method_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1292,
        "db_id": "music_1",
        "nl_queries": [
            "Return the gender and name of artist who produced the song with the lowest resolution.",
            "What is the gender and name of the artist who sang the song with the smallest resolution?",
            "Identify the gender and name of the artist whose song has the lowest resolution available.",
            "What is the name and gender of the artist that created the song with the least resolution?",
            "Provide the gender and name of the artist who performed the song with the smallest resolution possible."
        ],
        "ref_sql": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $unwind: \"$artist.files.song\"\n  },\n  {\n    $sort: {\n      \"artist.files.song.resolution\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      gender: \"$artist.gender\",\n      artist_name: \"$artist.artist_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 329,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
            "What are the names of patients who are staying in room 111 and have an undergoing treatment?",
            "List the names of patients currently receiving treatment and located in room 111.",
            "Retrieve the names of all patients who have treatment procedures and are assigned to room 111.",
            "What are the names of patients admitted to room 111 who are undergoing treatment?"
        ],
        "ref_sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Patient\"\n  },\n  {\n    $unwind: \"$Patient.Stay\"\n  },\n  {\n    $unwind: \"$Patient.Stay.Undergoes\"\n  },\n  {\n    $match: {\n      \"Patient.Stay.Room\": 111\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Patient.Name\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1499,
        "db_id": "college_1",
        "nl_queries": [
            "Find the first names of students who took exactly one class.",
            "What are the first names of student who only took one course?",
            "List the first names of students enrolled in only a single class.",
            "What are the first names of students who have taken just one course?",
            "Retrieve the first names of students that attended precisely one class."
        ],
        "ref_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count(*) = 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT\"\n  },\n  {\n    $project: {\n      STU_FNAME: \"$DEPARTMENT.STUDENT.STU_FNAME\",\n      count_ENROLL: {\n        $size: \"$DEPARTMENT.STUDENT.ENROLL\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_ENROLL: 1\n    }\n  },\n  {\n    $project: {\n      STU_FNAME: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 296,
        "db_id": "hospital_1",
        "nl_queries": [
            "What is the names of the physicians who prescribe medication Thesisin?",
            "List the names of all the physicians who prescribe Thesisin as medication.",
            "Who are the physicians that prescribe the medication known as Thesisin?",
            "Can you provide a list of physicians who have prescribed Thesisin?",
            "Identify the names of all physicians associated with the prescription of Thesisin medication."
        ],
        "ref_sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\"",
        "MQL": "db.Physician.aggregate([\n  {\n    $lookup: {\n      from: \"Medication\",\n      localField: \"Prescribes.Medication\",\n      foreignField: \"Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Name\": \"Thesisin\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1076,
        "db_id": "school_finance",
        "nl_queries": [
            "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
            "Provide the names, mascots, and IHSAA Football Classes of schools that either have a budgeted amount greater than 6000 or were established before 2003, sorted by their total invested budget percentage and budgeted budget percentage.",
            "Show the school name, mascot, and IHSAA Football Class for institutions that have more than 6000 in their budget or were founded prior to 2003, ordered by the percentage of total budget invested and total budgeted.",
            "List schools with their names, mascots, and IHSAA Football Classes that meet the criteria of having a budgeted amount above 6000 or were founded before the year 2003, arranged by the total investment budget percentage and the budgeted percentage.",
            "Retrieve the names, mascots, and IHSAA Football Class of schools that either budget over 6000 or have been founded earlier than 2003, sorted by their percentages of total invested budget and total budgeted budget."
        ],
        "ref_sql": "SELECT T1.School_name , T1.Mascot , T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE Budgeted > 6000 OR YEAR < 2003 ORDER BY T2.total_budget_percent_invested , T2.total_budget_percent_budgeted",
        "MQL": "db.School.aggregate([\n  { $unwind: \"$budget\" },\n  { $match: {\n      $or: [\n        { \"budget.Budgeted\": { $gt: 6000 } },\n        { \"budget.Year\": { $lt: 2003 } }\n      ]\n    }\n  },\n  { $project: {\n      \"School_name\": 1,\n      \"Mascot\": 1,\n      \"IHSAA_Football_Class\": 1,\n      \"total_budget_percent_invested\": \"$budget.total_budget_percent_invested\",\n      \"total_budget_percent_budgeted\": \"$budget.total_budget_percent_budgeted\"\n    }\n  },\n  { $sort: {\n      \"total_budget_percent_invested\": 1,\n      \"total_budget_percent_budgeted\": 1\n    }\n  },\n  { $project: {\n   _id: 0,\n   \"School_name\": 1,\n      \"Mascot\": 1,\n      \"IHSAA_Football_Class\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 181,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the most common country across members.",
            "Identify the country that has the highest number of members.",
            "What is the country with the largest representation among members?",
            "Find the country that most members belong to.",
            "Which country is most prevalent among the members?"
        ],
        "ref_sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $group: { _id: \"$member.Country\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, Country: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 524,
        "db_id": "game_1",
        "nl_queries": [
            "Show all game names played by Linda Smith",
            "What are the names of all games played by Linda Smith?",
            "List all the video games that Linda Smith has played.",
            "Can you provide the names of all the games played by Linda Smith?",
            "What video game titles are associated with Linda Smith’s gameplay?"
        ],
        "ref_sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = \"Smith\" AND T3.Fname = \"Linda\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      LName: \"Smith\",\n      Fname: \"Linda\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Video_Games\",\n      localField: \"Plays_Games.GameID\",\n      foreignField: \"GameID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      GName: \"$Docs1.GName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1688,
        "db_id": "small_bank_1",
        "nl_queries": [
            "What is the checking balance of the account whose owner’s name contains the substring ‘ee’?",
            "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
            "What is the balance of the checking account for an account holder with 'ee' in their name?",
            "Retrieve the checking balance for accounts where the owner's name has the substring 'ee'.",
            "Show the balance of a checking account tied to an account owner whose name includes 'ee'."
        ],
        "ref_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $match: {\n      name: {\n        $regex: \"ee\"\n      }\n    }\n  },\n  {\n    $project: {\n      balance: {\n        $arrayElemAt: [\"$CHECKING.balance\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3530,
        "db_id": "manufacturer",
        "nl_queries": [
            "List all manufacturer names and ids ordered by their opening year.",
            "Retrieve the names and IDs of all manufacturers, sorted by their year of establishment.",
            "Provide a list of manufacturer names along with their IDs, arranged in ascending order of their opening year.",
            "Show all manufacturers with their corresponding IDs, organized by the year they commenced operations.",
            "Display the names and identification numbers of manufacturers, sorted by the year they opened their businesses."
        ],
        "ref_sql": "SELECT name , manufacturer_id FROM manufacturer ORDER BY open_year",
        "MQL": "db.manufacturer.find({}, { \"Name\": 1, \"Manufacturer_ID\": 1, \"_id\": 0 }).sort({ \"Open_Year\": 1 });\n"
    },
    {
        "record_id": 3542,
        "db_id": "hospital_1",
        "nl_queries": [
            "what are name and phone number of patients who had more than one appointment?",
            "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
            "Can you provide the names and phone numbers of patients with multiple appointments?",
            "Please list the names and contact numbers of patients who have attended more than one appointment.",
            "I would like to know the names and phone numbers of patients who scheduled more than one appointment."
        ],
        "ref_sql": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Patient\"\n  },\n  {\n    $unwind: \"$Patient.Appointment\"\n  },\n  {\n    $group: {\n      _id: {\n        SSN: \"$Patient.SSN\",\n        Name: \"$Patient.Name\",\n        Phone: \"$Patient.Phone\"\n      },\n      appointmentCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      appointmentCount: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id.Name\",\n      Phone: \"$_id.Phone\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 995,
        "db_id": "music_4",
        "nl_queries": [
            "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
            "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
            "List the famous titles of artists who have achieved both more than 2 weeks and less than 2 weeks on top.",
            "What are the famous titles for artists with hits that have both exceeded 2 weeks and were under 2 weeks on the top charts?",
            "Identify the well-known titles of artists who experienced volumes topping the charts for over 2 weeks as well as those that lasted less than 2 weeks."
        ],
        "ref_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $group: {\n      _id: \"$Artist_ID\",\n      Famous_Title: { $first: \"$Famous_Title\" },\n      more_than_2_weeks: {\n        $max: {\n          $cond: [{ $gt: [\"$volume.Weeks_on_Top\", 2] }, 1, 0]\n        }\n      },\n      less_than_2_weeks: {\n        $max: {\n          $cond: [{ $lt: [\"$volume.Weeks_on_Top\", 2] }, 1, 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      more_than_2_weeks: 1,\n      less_than_2_weeks: 1\n    }\n  },\n  {\n    $project: {\n      Famous_Title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 331,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
            "Which problem id and log id are assigned to the staff named Rylan Homenick?",
            "Retrieve the problem identifiers and log identifiers associated with the staff member Rylan Homenick.",
            "What are the problem IDs and log IDs for Rylan Homenick?",
            "Give me the problem ID along with the log ID linked to the staff member Rylan Homenick."
        ],
        "ref_sql": "SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "MQL": "db.Staff.aggregate([\n  {\n    $match: {\n      staff_first_name: \"Rylan\",\n      staff_last_name: \"Homenick\"\n    }\n  },\n  {\n    $unwind: \"$Problem_Log\"\n  },\n  {\n    $project: {\n      problem_id: \"$Problem_Log.problem_id\",\n      problem_log_id: \"$Problem_Log.problem_log_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2729,
        "db_id": "performance_attendance",
        "nl_queries": [
            "How many performances are there?",
            "What is the total number of performances?",
            "Can you tell me how many performances have been recorded?",
            "How many performance events exist in the database?",
            "Please provide the count of all performances."
        ],
        "ref_sql": "SELECT count(*) FROM performance",
        "MQL": "db.performance.aggregate([\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 2487,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "How many credit cards does customer Blanche Huels have?",
            "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
            "How many credit cards are associated with the customer named Blanche Huels?",
            "What is the total number of credit cards belonging to the customer whose first name is Blanche and last name is Huels?",
            "Determine the count of credit cards that the customer with first name Blanche and surname Huels possesses."
        ],
        "ref_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\"",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.customer_first_name\": \"Blanche\",\n      \"Docs1.customer_last_name\": \"Huels\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3272,
        "db_id": "network_1",
        "nl_queries": [
            "Show me all grades that have at least 4 students.",
            "Which grades have 4 or more high schoolers?",
            "Retrieve all grades that contain four or more students.",
            "List the grades with a minimum of four high school students.",
            "Identify which grades have at least four students enrolled."
        ],
        "ref_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $group: {\n      _id: \"$grade\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 4 }\n    }\n  },\n  {\n    $project: {\n      grade: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1847,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
            "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?",
            "Identify the products for which both Lacey Bosco and Kenton Champlin have reported issues.",
            "List the products that have been associated with problems reported by Lacey Bosco as well as Kenton Champlin.",
            "Which products encountered problems reported by both the staff members Lacey Bosco and Kenton Champlin?"
        ],
        "ref_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "MQL": "db.Product.aggregate([\n  {\n    $lookup: {\n      from: \"Staff\",\n      localField: \"Problems.reported_by_staff_id\",\n      foreignField: \"staff_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $addFields: {\n      laceyBosco: {\n        $filter: {\n          input: \"$Docs1\",\n          as: \"staff\",\n          cond: {\n            $and: [\n              { $eq: [\"$$staff.staff_first_name\", \"Lacey\"] },\n              { $eq: [\"$$staff.staff_last_name\", \"Bosco\"] }\n            ]\n          }\n        }\n      },\n      kentonChamplin: {\n        $filter: {\n          input: \"$Docs1\",\n          as: \"staff\",\n          cond: {\n            $and: [\n              { $eq: [\"$$staff.staff_first_name\", \"Kenton\"] },\n              { $eq: [\"$$staff.staff_last_name\", \"Champlin\"] }\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { \"laceyBosco.0\": { $exists: true } },\n        { \"kentonChamplin.0\": { $exists: true } }\n      ]\n    }\n  },\n  {\n    $project: {\n      product_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3649,
        "db_id": "candidate_poll",
        "nl_queries": [
            "what are the names of people who did not participate in the candidate election.",
            "Give the names of people who did not participate in the candidate election.",
            "List the names of individuals who have not been involved in the candidate election.",
            "Provide the names of people who are not associated with any candidate elections.",
            "Can you show me the names of those who did not take part in the candidate election?"
        ],
        "ref_sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      $or: [\n        { candidate: { $exists: false } },\n        { candidate: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2864,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the number of different cities which banks are located at.",
            "In how many different cities are banks located?",
            "How many unique cities have bank branches?",
            "What is the total number of cities where banks can be found?",
            "Count the distinct cities that host bank branches."
        ],
        "ref_sql": "SELECT count(DISTINCT city) FROM bank",
        "MQL": "db.bank.aggregate([\n  {\n    $group: {\n      _id: \"$city\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_city: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_city: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1290,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
            "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?",
            "List the IDs, first names, and last names of drivers who have completed more than 8 pit stops or have participated in over 5 race events.",
            "Show the driver IDs, along with their first and last names, for those who have had greater than 8 pit stops or have taken part in more than 5 race results.",
            "Identify the IDs, first names, and surnames of drivers with more than 8 pit stops or those who have been present in over 5 race finishes."
        ],
        "ref_sql": "SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 8 UNION SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: {\n      path: \"$pitStops\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $unwind: {\n      path: \"$results\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$driverId\",\n      forename: { $first: \"$forename\" },\n      surname: { $first: \"$surname\" },\n      pitStopCount: { $sum: { $cond: [{ $ifNull: [\"$pitStops\", false] }, 1, 0] } },\n      raceResultCount: { $sum: { $cond: [{ $ifNull: [\"$results\", false] }, 1, 0] } }\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { pitStopCount: { $gt: 8 } },\n        { raceResultCount: { $gt: 5 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      driverId: \"$_id\",\n      forename: 1,\n      surname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1582,
        "db_id": "gymnast",
        "nl_queries": [
            "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
            "How many gymnasts are from each hometown?",
            "List the hometowns of gymnasts along with the total number of gymnasts from each location.",
            "Provide the count of gymnasts for every hometown represented in the data.",
            "What is the number of gymnasts originating from each hometown?"
        ],
        "ref_sql": "SELECT T2.Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $group: {\n      _id: \"$Hometown\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Hometown: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3758,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "Show all payment method codes and the number of orders for each code.",
            "List the distinct payment method codes with the number of orders made",
            "Provide a list of payment method codes along with the total number of orders associated with each code.",
            "Display the unique payment method codes and their corresponding order counts.",
            "Give me the payment method codes and how many orders have been placed for each of them."
        ],
        "ref_sql": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Clients\"\n  },\n  {\n    $unwind: \"$Clients.Bookings\"\n  },\n  {\n    $unwind: \"$Clients.Bookings.Invoices\"\n  },\n  {\n    $group: {\n      _id: \"$Clients.Bookings.Invoices.payment_method_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      payment_method_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2248,
        "db_id": "culture_company",
        "nl_queries": [
            "show the titles, and authors or editors for all books made after the year 1989.",
            "What are the titles and authors or editors that correspond to books made after 1989?",
            "List the titles along with their authors or editors for all books published after 1989.",
            "Provide the names and authors or editors of books released after the year 1989.",
            "Can you give me the titles and corresponding authors or editors of books that came out after 1989?"
        ],
        "ref_sql": "SELECT book_title , author_or_editor FROM book_club WHERE YEAR > 1989",
        "MQL": "db.book_club.find(\n  { Year: { $gt: 1989 } },\n  { Book_Title: 1, Author_or_Editor: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3312,
        "db_id": "e_government",
        "nl_queries": [
            "List every individual's first name, middle name and last name in alphabetical order by last name.",
            "What are the first, middle, and last names of all individuals, ordered by last name?",
            "Provide the first, middle, and last names of all individuals, sorted in ascending order based on last names.",
            "Can you give me a list of every individual's first name, middle name, and last name, arranged alphabetically by their last names?",
            "Display the first, middle, and last names of each individual, ordered by last name from A to Z."
        ],
        "ref_sql": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
        "MQL": "db.Individuals.find(\n  {},\n  {\n    individual_first_name: 1,\n    individual_middle_name: 1,\n    individual_last_name: 1,\n    _id: 0\n  }\n).sort({ individual_last_name: 1 });\n"
    },
    {
        "record_id": 2840,
        "db_id": "match_season",
        "nl_queries": [
            "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
            "Count the number of different colleges that players who play for Columbus Crew are from.",
            "What is the number of unique colleges affiliated with players from the Columbus Crew team?",
            "Can you tell me how many different colleges the players of the Columbus Crew come from?",
            "How many distinct colleges are represented by the players on the Columbus Crew roster?"
        ],
        "ref_sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
        "MQL": "db.team.aggregate([\n  {\n    $match: {\n      Name: \"Columbus Crew\"\n    }\n  },\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.College\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_match_season_College: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_match_season_College: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4083,
        "db_id": "manufacturer",
        "nl_queries": [
            "Give me the names and prices of furnitures which some companies are manufacturing.",
            "Provide the names and dollar prices of furniture items produced by various manufacturers.",
            "List the furniture names along with their prices that are currently being made by some companies.",
            "What are the names and prices of furniture that different manufacturers are making?",
            "Show me the names and costs of furniture created by certain manufacturers."
        ],
        "ref_sql": "SELECT t1.name , t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID",
        "MQL": "db.furniture.aggregate([\n  { $unwind: \"$furniture_manufacte\" },\n  { $project: { \"Name\": 1, \"Price_in_Dollar\": \"$furniture_manufacte.Price_in_Dollar\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3544,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the names and the prices of all the products in the store.",
            "What are the names and prices of all products in the store?",
            "Retrieve the names along with the prices of every product available in the store.",
            "Can you list all product names and their respective prices in the store?",
            "Show me the names and prices of all products found in the store."
        ],
        "ref_sql": "SELECT name , price FROM products",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      Name: \"$Products.Name\",\n      Price: \"$Products.Price\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 305,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What are the distinct template type descriptions for the templates ever used by any document?",
            "Return the different descriptions for templates that have been used in a document.",
            "What unique descriptions exist for template types that have been applied in documents?",
            "List the various template type descriptions employed in any document.",
            "Identify the distinct descriptions of template types used by documents."
        ],
        "ref_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Template_Type_Description\"\n    }\n  },\n  {\n    $project: {\n      Template_Type_Description: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3153,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of dorms that do not have amenity TV Lounge.",
            "What are the names of the dorm that does not have a TV Lounge?",
            "List the names of dormitories that do not feature a TV Lounge.",
            "Which dorms are without the amenity of a TV Lounge?",
            "Identify the dorm names that lack a TV Lounge amenity."
        ],
        "ref_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"Has_amenity.amenid\",\n      foreignField: \"amenid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.amenity_name\": { $ne: \"TV Lounge\" }\n    }\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2836,
        "db_id": "farm",
        "nl_queries": [
            "How many different statuses do cities have?",
            "Count the number of different statuses.",
            "What is the total number of unique statuses found in the cities?",
            "Determine how many distinct statuses exist among the cities.",
            "How many unique city statuses are there in total?"
        ],
        "ref_sql": "SELECT count(DISTINCT Status) FROM city",
        "MQL": "db.city.aggregate([\n  {\n    $group: {\n      _id: \"$Status\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Status: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2950,
        "db_id": "flight_company",
        "nl_queries": [
            "which countries have more than 2 airports?",
            "Which countries possess over two airports?",
            "Identify countries that have more than two airports.",
            "What are the countries with an excess of two airports?",
            "List the countries that feature more than two airports."
        ],
        "ref_sql": "SELECT country FROM airport GROUP BY country HAVING count(*) > 2",
        "MQL": "db.airport.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1969,
        "db_id": "station_weather",
        "nl_queries": [
            "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
            "Retrieve the departure times and train numbers for all trains headed to Chennai, sorted by their times.",
            "Show me the times and numbers of trains that travel to Chennai, arranged in ascending order of time.",
            "List the times and train identifiers for trains that go to Chennai, ordered by time.",
            "Can you provide the arrival times and train numbers for any trains going to Chennai, sorted by their scheduled times?"
        ],
        "ref_sql": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
        "MQL": "db.train.find({\n  \"destination\": \"Chennai\"\n}, { \"time\": 1, \"train_number\": 1, \"_id\": 0 }).sort({ \"time\": 1 });\n"
    },
    {
        "record_id": 236,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find the address of all customers that live in Germany and have invoice.",
            "What are the addresses of customers living in Germany who have had an invoice?",
            "List the addresses of all customers residing in Germany who have invoices.",
            "Retrieve the addresses for customers in Germany who possess an invoice.",
            "What are the addresses of customers from Germany that have received an invoice?"
        ],
        "ref_sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $unwind: \"$Customer\"\n  },\n  {\n    $match: {\n      \"Customer.Country\": \"Germany\",\n      \"Customer.Invoice\": { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Address: \"$Customer.Address\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 482,
        "db_id": "store_product",
        "nl_queries": [
            "Find the name and population of district with population between 200000 and 2000000",
            "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
            "List the district names along with their populations for districts that have between 200,000 and 2 million residents.",
            "What are the names of districts and their populations within the range of 200,000 to 2,000,000?",
            "Retrieve the names and population figures of all districts whose populations range from 200,000 to 2 million."
        ],
        "ref_sql": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "MQL": "db.district.find({\n  City_Population: {\n    $gte: 200000,\n    $lte: 2000000\n  }\n}, {\n  District_name: 1,\n  City_Population: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1473,
        "db_id": "tvshow",
        "nl_queries": [
            "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "Which TV channel features the cartoon \"The Rise of the Blue Beetle!\"? Please provide the name of the series shown on that channel.",
            "Can you tell me the series name of the TV channel that airs the cartoon \"The Rise of the Blue Beetle!\"?",
            "What is the name of the series from the TV channel that broadcasts \"The Rise of the Blue Beetle!\" cartoon?"
        ],
        "ref_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "MQL": "db.TV_Channel.find(\n  {\n    Cartoon: {\n      $elemMatch: {\n        Title: \"The Rise of the Blue Beetle!\"\n      }\n    }\n  },\n  {\n    series_name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 1399,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the name of physicians who are in charge of more than one patient.",
            "Which physicians are in charge of more than one patient? Give me their names.",
            "List the names of doctors who are responsible for more than a single patient.",
            "Which doctors handle multiple patients? Please provide their names.",
            "Identify the physicians who look after more than one patient and share their names."
        ],
        "ref_sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Patient\"\n  },\n  {\n    $group: {\n      _id: \"$EmployeeID\",\n      uniquePatients: { $addToSet: \"$Patient.SSN\" }\n    }\n  },\n  {\n    $project: {\n      _id: 1,\n      patientCount: { $size: \"$uniquePatients\" }\n    }\n  },\n  {\n    $match: {\n      patientCount: { $gt: 1 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"_id\",\n      foreignField: \"EmployeeID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 421,
        "db_id": "party_people",
        "nl_queries": [
            "Show all distinct region names ordered by their labels.",
            "What are the different region names, ordered by labels?",
            "List all unique region names sorted according to their labels.",
            "Provide the various region names arranged by their corresponding labels.",
            "Display distinct region names in an order that corresponds to their labels."
        ],
        "ref_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label",
        "MQL": "db.region.aggregate([\n  {\n    $group: {\n      _id: \"$Region_name\",\n      Label: { $first: \"$Label\" }\n    }\n  },\n  {\n    $sort: {\n      Label: 1\n    }\n  },\n  {\n    $project: {\n      Region_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2288,
        "db_id": "shop_membership",
        "nl_queries": [
            "list the card number of all members whose hometown address includes word \"Kentucky\".",
            "What are the card numbers of members from Kentucky?",
            "Retrieve the card numbers for all members whose hometown includes \"Kentucky\".",
            "Show the card numbers of members who are from the state of Kentucky.",
            "Could you provide the card numbers of members residing in Kentucky?"
        ],
        "ref_sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "MQL": "db.member.find(\n  { Hometown: { $regex: \".*Kentucky.*\", $options: \"i\" } },\n  { Card_Number: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1092,
        "db_id": "chinook_1",
        "nl_queries": [
            "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
            "What are the titles and ids for albums containing tracks with unit price greater than 1?",
            "List the titles and IDs of albums that feature tracks with a unit price exceeding 1.",
            "Can you provide the album names and their respective IDs for albums that have tracks priced more than 1?",
            "Identify the album IDs and titles for those albums which contain tracks with a unit cost greater than 1."
        ],
        "ref_sql": "SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $unwind: \"$Album.Track\"\n  },\n  {\n    $match: {\n      \"Album.Track.UnitPrice\": { $gt: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: {\n        AlbumId: \"$Album.AlbumId\",\n        Title: \"$Album.Title\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      AlbumId: \"$_id.AlbumId\",\n      Title: \"$_id.Title\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 648,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find the names of all artists that have \"a\" in their names.",
            "What are the names of artist who have the letter 'a' in their names?",
            "List all artists whose names include the letter \"a\".",
            "Retrieve the names of all artists that contain the character 'a' in them.",
            "Show the names of artists who have the letter 'a' present in their names."
        ],
        "ref_sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "MQL": "db.Artist.find(\n  { Name: { $regex: \"a\", $options: \"i\" } },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3501,
        "db_id": "shop_membership",
        "nl_queries": [
            "List the branch name and city without any registered members.",
            "What are the names and cities of the branches that do not have any registered members?",
            "Identify the names and cities of branches that lack any registered members.",
            "Show me the branch names and their respective cities where no members are registered.",
            "Provide a list of branch names along with their cities that do not have registered members."
        ],
        "ref_sql": "SELECT name , city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "MQL": "db.branch.aggregate([\n  {\n    $match: {\n      \"membership_register_branch\": { $exists: true, $size: 0 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      City: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 160,
        "db_id": "phone_1",
        "nl_queries": [
            "List the name of the company that produced more than one phone model.",
            "Show the names of companies that have created multiple phone models.",
            "Identify the companies that manufacture more than one model of phone.",
            "Provide a list of company names that offer more than one phone model.",
            "Which companies produce more than one type of phone model?"
        ],
        "ref_sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*) > 1;",
        "MQL": "db.chip_model.aggregate([\n  { $unwind: \"$phone\" },\n  { $group: { _id: \"$phone.Company_name\", count: { $sum: 1 } } },\n  { $match: { count: { $gt: 1 } } },\n  { $project: { _id: 0, Company_name: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 35,
        "db_id": "swimming",
        "nl_queries": [
            "Find all details for each swimmer.",
            "Retrieve comprehensive information for every swimmer.",
            "Get all available data regarding each swimmer.",
            "Show full details for all swimmers in the database.",
            "List complete profiles of each swimmer."
        ],
        "ref_sql": "SELECT * FROM swimmer",
        "MQL": "db.swimmer.find({}, {\n  \"ID\": 1,\n  \"name\": 1,\n  \"Nationality\": 1,\n  \"meter_100\": 1,\n  \"meter_200\": 1,\n  \"meter_300\": 1,\n  \"meter_400\": 1,\n  \"meter_500\": 1,\n  \"meter_600\": 1,\n  \"meter_700\": 1,\n  \"Time\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 3725,
        "db_id": "e_government",
        "nl_queries": [
            "Find the name of organizations whose names contain \"Party\".",
            "What are the names of organizations that contain the word \"Party\"?",
            "List the organizations that have \"Party\" as part of their name.",
            "Retrieve the names of all organizations that include the term \"Party\".",
            "Show me the names of organizations featuring the word \"Party\" in their title."
        ],
        "ref_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "MQL": "db.Organizations.find({\n  organization_name: {\n    $regex: \"Party\",\n    $options: \"i\"\n  }\n}, {\n  organization_name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3785,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show each premise type and the number of premises in that type.",
            "List the types of premises along with the total number of premises for each type.",
            "Provide a count of premises organized by each premise type.",
            "Display every premise type and how many premises fall under each category.",
            "Show the different premise types with their corresponding counts of premises."
        ],
        "ref_sql": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type",
        "MQL": "db.Premises.aggregate([\n  {\n    $group: {\n      _id: \"$premises_type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      premises_type: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2867,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "How many distinct claim outcome codes are there?",
            "Count the number of distinct claim outcome codes.",
            "What is the total number of unique claim outcome codes?",
            "Can you provide the count of different claim outcome codes?",
            "Determine how many unique claim outcome codes exist."
        ],
        "ref_sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $unwind: \"$Policies.Claim_Headers\"\n  },\n  {\n    $unwind: \"$Policies.Claim_Headers.Claims_Processing\"\n  },\n  {\n    $group: {\n      _id: \"$Policies.Claim_Headers.Claims_Processing.Claim_Outcome_Code\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_claim_outcome_code: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_claim_outcome_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3774,
        "db_id": "flight_company",
        "nl_queries": [
            "which pilot is in charge of the most number of flights?",
            "Which pilot operates the greatest number of flights?",
            "Who is the pilot responsible for the highest number of flights?",
            "Identify the pilot who has the most flights under their command.",
            "What is the name of the pilot with the largest flight count?"
        ],
        "ref_sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.operate_company.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $group: {\n      _id: \"$flight.Pilot\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Pilot: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 865,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
            "Which shipping agent has the highest document shipment? Please provide their name and the total number of documents shipped.",
            "Identify the shipping agent who has dispatched the largest number of documents. Include their name along with the document count.",
            "Who is the shipping agent that handled the most documents? List both the agent's name and the number of documents they shipped.",
            "What is the name of the shipping agent that shipped the greatest volume of documents, and how many documents did they ship?"
        ],
        "ref_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$shipping_agent_name\",\n      count_Documents_document_id: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count_Documents_document_id: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      shipping_agent_name: \"$_id\",\n      count_Documents_document_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2406,
        "db_id": "college_1",
        "nl_queries": [
            "Find the number of classes offered for all class rooms that held at least 2 classes.",
            "For each classroom with at least 2 classes, how many classes are offered?",
            "Determine how many classes are available in classrooms that have hosted two or more classes.",
            "For each classroom that accommodates at least two classes, what is the total number of classes offered?",
            "Count the classes held in classrooms where at least two classes have taken place."
        ],
        "ref_sql": "SELECT count(*) , class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $group: {\n      _id: \"$CLASS.CLASS_ROOM\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      CLASS_ROOM: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3667,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the name of projects that require between 100 and 300 hours of work.",
            "What are the names of projects that require between 100 and 300 hours?",
            "What projects are there that demand between 100 and 300 hours of work?",
            "List the names of projects that require a workload of 100 to 300 hours.",
            "Which projects necessitate between 100 and 300 hours of effort?"
        ],
        "ref_sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
        "MQL": "db.Projects.find({\n  Hours: {\n    $gte: 100,\n    $lte: 300\n  }\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 4204,
        "db_id": "film_rank",
        "nl_queries": [
            "What are the titles and directors of the films were never presented in China?",
            "Return the titles and directors of films that were never in the market of China.",
            "Can you provide the titles and directors of films that have never been shown in the Chinese market?",
            "List the titles and directors of films that were not released in China.",
            "What films have not made their appearance in China, along with their titles and directors?"
        ],
        "ref_sql": "SELECT title , director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')",
        "MQL": "db.film.aggregate([\n  {\n    $lookup: {\n      from: \"market\",\n      localField: \"Film_ID\",\n      foreignField: \"film_market_estimation.Film_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Country\": { $ne: \"China\" }\n    }\n  },\n  {\n    $project: {\n      Title: 1,\n      Director: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2638,
        "db_id": "sports_competition",
        "nl_queries": [
            "How many clubs are there?",
            "What is the total number of clubs?",
            "Count the total number of clubs.",
            "What is the total number of clubs registered in the database?",
            "How many clubs are present in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM club",
        "MQL": "db.club.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2537,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "How many paragraphs in total?",
            "Count the number of paragraphs.",
            "What is the total count of paragraphs?",
            "How many paragraphs exist in total?",
            "Please provide the total number of paragraphs available."
        ],
        "ref_sql": "SELECT count(*) FROM Paragraphs",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $unwind: \"$Templates.Documents.Paragraphs\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3634,
        "db_id": "college_2",
        "nl_queries": [
            "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.",
            "What are the names of instructors who earn more than at least one instructor from the Biology department?",
            "List the names of instructors earning more than the salary of at least one instructor in the Biology department.",
            "Which instructors have salaries higher than those of any instructor in the Biology department?",
            "Provide the names of instructors whose pay exceeds that of one or more instructors from the Biology department."
        ],
        "ref_sql": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $match: {\n      \"instructor.dept_name\": \"Biology\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      biologySalaries: { $addToSet: \"$instructor.salary\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      pipeline: [\n        { $unwind: \"$instructor\" },\n        {\n          $match: {\n            \"instructor.salary\": { $exists: true }\n          }\n        },\n        {\n          $project: {\n            name: \"$instructor.name\",\n            salary: \"$instructor.salary\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      name: \"$Docs1.name\",\n      salary: \"$Docs1.salary\",\n      biologySalaries: 1\n    }\n  },\n  {\n    $match: {\n      $expr: {\n        $gt: [\n          \"$salary\",\n          { $min: \"$biologySalaries\" }\n        ]\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1309,
        "db_id": "flight_company",
        "nl_queries": [
            "What are the ids and names of the companies that operated more than one flight?",
            "List the company IDs and names for those that have conducted more than one flight.",
            "Identify the names and IDs of companies with a flight operation count greater than one.",
            "Show the IDs and corresponding names of companies that have operated multiple flights.",
            "Can you provide the names and identifiers of companies that have performed more than one flight?"
        ],
        "ref_sql": "SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count(*) > 1",
        "MQL": "db.operate_company.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $group: {\n      _id: \"$id\",\n      name: { $first: \"$name\" },\n      flightCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      flightCount: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      id: \"$_id\",\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1153,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
            "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
            "What is the claim ID and date for the claim that received the highest number of settlements? Also, provide the total number of settlements.",
            "Identify the claim with the greatest settlement frequency. Please include its claim ID, the date the claim was filed, and the total count of settlements.",
            "Which claim had the highest count of settlements? List its claim ID, the date on which the claim was submitted, and the corresponding count of settlements."
        ],
        "ref_sql": "SELECT T1.claim_id , T1.date_claim_made , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $group: {\n      _id: {\n        Claim_ID: \"$Customer_Policies.Claims.Claim_ID\",\n        Date_Claim_Made: \"$Customer_Policies.Claims.Date_Claim_Made\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Claim_ID: \"$_id.Claim_ID\",\n      Date_Claim_Made: \"$_id.Date_Claim_Made\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 317,
        "db_id": "match_season",
        "nl_queries": [
            "What are the distinct positions of the players from a country whose capital is Dublin?",
            "Give the different positions of players who play for the country with the capital Dublin.",
            "What are the unique player positions from the country whose capital is Dublin?",
            "List all the different positions held by players from the country that has Dublin as its capital.",
            "Identify the distinct positions occupied by players representing the nation with Dublin as the capital city."
        ],
        "ref_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Capital: \"Dublin\"\n    }\n  },\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.Position\"\n    }\n  },\n  {\n    $project: {\n      Position: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3509,
        "db_id": "battle_death",
        "nl_queries": [
            "List the name, date and result of each battle.",
            "Provide a list of battles along with their names and dates.",
            "Show the names and dates for all battles recorded.",
            "Retrieve the names and dates of each battle from the database.",
            "Generate a listing of battles with their corresponding names and dates."
        ],
        "ref_sql": "SELECT name , date FROM battle",
        "MQL": "db.battle.find({}, { \"name\": 1, \"date\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2799,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the number of tweets in record.",
            "How many tweets are present in the database records?",
            "What is the total number of tweets in all profiles?",
            "Count the tweets recorded across all user profiles.",
            "Determine the overall number of tweets in the dataset."
        ],
        "ref_sql": "SELECT count(*) FROM tweets",
        "MQL": "db.user_profiles.aggregate([\n  {\n    $project: {\n      count_tweets: { $size: \"$tweets\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count_tweets: { $sum: \"$count_tweets\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count_tweets\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2499,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "How many events did not have any participants?",
            "What is the total number of events that have no participants at all?",
            "Can you tell me how many events occurred without any participants?",
            "How many events were conducted without involving any participants?",
            "What count of events did not include participants in their listings?"
        ],
        "ref_sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
        "MQL": "db.Services.aggregate([\n  { $unwind: \"$Events\" },\n  { $match: { $or: [ { \"Events.Participants_in_Events\": { $exists: false } }, { \"Events.Participants_in_Events\": { $size: 0 } } ] } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 2451,
        "db_id": "activity_1",
        "nl_queries": [
            "How many activities do we have?",
            "Find the number of activities available.",
            "What is the total number of available activities?",
            "How many total activities are there?",
            "Can you tell me the count of activities present?"
        ],
        "ref_sql": "SELECT count(*) FROM Activity",
        "MQL": "db.Activity.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3585,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show all artist names who didn't have an exhibition in 2004.",
            "What are the names of artists who did not have an exhibition in 2004?",
            "List the names of artists who have not participated in any exhibitions during the year 2004.",
            "Identify all artists who either didn’t have an exhibition in 2004 or lack an exhibition year altogether.",
            "Provide the names of artists that did not host exhibitions in the year 2004."
        ],
        "ref_sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"exhibition.Year\": { $exists: false } },\n        { \"exhibition.Year\": { $ne: 2004 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1200,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
            "List the names and phone numbers of customers whose mailshot results indicate 'No Response'.",
            "Retrieve the customer names and contact numbers for those associated with mailshots that have an outcome of 'No Response'.",
            "Provide the names and phone details of customers that received a mailshot marked as having 'No Response'.",
            "Display the contact information, including names and phone numbers, for customers with an outcome of 'No Response' on their mailshot."
        ],
        "ref_sql": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'",
        "MQL": "db.Customers.find({\n  \"Mailshot_Customers.outcome_code\": \"No Response\"\n}, {\n  \"customer_name\": 1,\n  \"customer_phone\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 3295,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the id of the item whose title is \"orange\".",
            "What is the item ID for the product titled \"orange\"?",
            "Retrieve the identifier of the item with the title \"orange\".",
            "Get the id of the item that has the title \"orange\".",
            "Identify the item ID for the entry named \"orange\"."
        ],
        "ref_sql": "SELECT i_id FROM item WHERE title = \"orange\"",
        "MQL": "db.item.find({\n  \"title\": \"orange\"\n}, { \"i_id\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3734,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show other account details for account with name 338.",
            "What are the other account details for the account with the name 338?",
            "Provide the additional details for the account named 338.",
            "Can you display the other details associated with the account that has the name 338?",
            "What additional account details are available for the account named 338?"
        ],
        "ref_sql": "SELECT other_account_details FROM Accounts WHERE account_name = \"338\"",
        "MQL": "db.Accounts.find(\n  { account_name: \"338\" },\n  { other_account_details: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2776,
        "db_id": "battle_death",
        "nl_queries": [
            "How many ships ended up being 'Captured'?",
            "What is the total number of ships that were classified as 'Captured'?",
            "How many vessels were recorded as 'Captured' after the battle?",
            "Can you tell me the count of ships that ended up being labeled as 'Captured'?",
            "How many ships were found to be 'Captured' in the records?"
        ],
        "ref_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
        "MQL": "db.battle.aggregate([\n  { $unwind: \"$ship\" },\n  { $match: { \"ship.disposition_of_ship\": \"Captured\" } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 2516,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "How many transactions do we have?",
            "Count the number of transactions.",
            "What is the total number of transactions recorded?",
            "Can you provide the count of all transactions?",
            "How many financial transactions are there in total?"
        ],
        "ref_sql": "SELECT count(*) FROM Financial_transactions",
        "MQL": "db.Customers.aggregate([\n  {\n    $project: {\n      count_Financial_Transactions: {\n        $size: \"$Accounts.Financial_Transactions\"\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count_Financial_Transactions: {\n        $sum: \"$count_Financial_Transactions\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count_Financial_Transactions\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1278,
        "db_id": "student_1",
        "nl_queries": [
            "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
            "Which are the first and last names of the students taught by MARROTTE KIRK?",
            "Who are the students instructed by MARROTTE KIRK? Please provide their first and last names.",
            "List the first and last names of all students under the guidance of MARROTTE KIRK.",
            "Can you give me the first and last names of students that are taught by MARROTTE KIRK?"
        ],
        "ref_sql": "SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"MARROTTE\" AND T2.lastname = \"KIRK\"",
        "MQL": "db.People.find({\n  \"Students.student_details\": \"MARROTTE KIRK\"\n}, {\n  \"Students.$\": 1,\n  \"first_name\": 1,\n  \"last_name\": 1,\n  \"_id\": 0\n})\n"
    },
    {
        "record_id": 1114,
        "db_id": "dorm_1",
        "nl_queries": [
            "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
            "What are the amenities in alphabetical order that Anonymous Donor Hall has?",
            "Can you provide a list of all the amenities available at Anonymous Donor Hall, sorted alphabetically?",
            "What amenities does Anonymous Donor Hall offer, organized in alphabetical order?",
            "Show me the names of the amenities that belong to Anonymous Donor Hall, arranged in ascending order."
        ],
        "ref_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      dorm_name: \"Anonymous Donor Hall\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"dormid\",\n      foreignField: \"Has_amenity.dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      amenity_name: \"$Docs1.amenity_name\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      amenity_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3621,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "Which enzyme names have the substring \"ALA\"?",
            "What are the names of enzymes that include the string 'ALA'?",
            "What enzyme names contain the term \"ALA\"?",
            "List the names of enzymes that feature the substring 'ALA'.",
            "Identify all enzyme names that have \"ALA\" within them."
        ],
        "ref_sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "MQL": "db.enzyme.find(\n  { name: { $regex: \"ALA\", $options: \"i\" } },\n  { _id: 0, name: 1 }\n);\n"
    },
    {
        "record_id": 3076,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name and building of the department with the highest budget.",
            "What is the department name and corresponding building for the department with the greatest budget?",
            "Identify the department with the largest budget and provide its name and building.",
            "What are the name and building of the department that has the highest financial allocation?",
            "Retrieve the name and building of the department that possesses the greatest budget."
        ],
        "ref_sql": "SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $project: {\n      dept_name: 1,\n      building: 1,\n      budget: 1\n    }\n  },\n  {\n    $sort: {\n      budget: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      dept_name: 1,\n      building: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 708,
        "db_id": "decoration_competition",
        "nl_queries": [
            "List the names of members who did not participate in any round.",
            "Provide the names of members who have not participated in any rounds.",
            "Retrieve the names of members that did not take part in any round.",
            "Show the names of members who are not associated with any round participation.",
            "List the names of members who were absent from all rounds."
        ],
        "ref_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $match: { $or: [ { \"member.round\": { $exists: false } }, { \"member.round\": { $size: 0 } } ] } },\n  { $project: { \"Name\": \"$member.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3018,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "Find all the phone numbers.",
            "What are all the phone numbers?",
            "Retrieve all customer phone numbers.",
            "Show me every phone number on file.",
            "List all the phone numbers in the database."
        ],
        "ref_sql": "SELECT customer_phone FROM available_policies",
        "MQL": "db.Available_Policies.aggregate([\n  {\n    $project: {\n      _id: 0,\n      Customer_Phone: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3143,
        "db_id": "document_management",
        "nl_queries": [
            "What document types have more than 2 corresponding documents?",
            "Give the codes of document types that have more than 2 corresponding documents.",
            "Which document types are associated with more than two documents?",
            "List the document type codes that have an association with over two documents.",
            "Identify the document types that contain more than two related documents."
        ],
        "ref_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 2",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.document_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      document_type_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3709,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the order ids and the number of invoices for each order.",
            "How many invoices correspond to each order id?",
            "Display the order IDs along with the total number of invoices associated with each order.",
            "Provide a count of invoices for every unique order ID.",
            "List each order ID and indicate how many invoices are linked to it."
        ],
        "ref_sql": "SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Invoices\"\n  },\n  {\n    $group: {\n      _id: \"$Orders.order_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      order_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3072,
        "db_id": "college_1",
        "nl_queries": [
            "what is the address of history department?",
            "Where is the history department?",
            "Can you tell me the address of the History department?",
            "What is the location of the History department?",
            "Where can I find the address for the History department?"
        ],
        "ref_sql": "SELECT dept_address FROM department WHERE dept_name = 'History'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"History\"\n    }\n  },\n  {\n    $project: {\n      DEPT_ADDRESS: \"$DEPARTMENT.DEPT_ADDRESS\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 622,
        "db_id": "manufacturer",
        "nl_queries": [
            "Find the market shares and names of furnitures which no any company is producing in our records.",
            "List the market rates and names of furniture items that are not manufactured by any company in our database.",
            "Retrieve the names and market rates of furniture that have no associated manufacturers in our records.",
            "Show the names and market rates of furniture pieces that are produced by no manufacturers according to our records.",
            "What are the market rates and names of furniture for which there are no manufacturers listed in our database?"
        ],
        "ref_sql": "SELECT Market_Rate , name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
        "MQL": "db.furniture.find({\n  \"furniture_manufacte\": { $size: 0 }\n}, { \"Market_Rate\": 1, \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 264,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name and credit score of the customers who have some loans.",
            "What are the different names and credit scores of customers who have taken a loan?",
            "List the names and credit scores of customers who currently hold one or more loans.",
            "What are the names and credit scores of customers with existing loans?",
            "Retrieve the names and credit scores of customers that have taken out loans."
        ],
        "ref_sql": "SELECT DISTINCT T1.cust_name , T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $match: {\n      \"customer.loan\": {\n        $exists: true,\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      credit_score: \"$customer.credit_score\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1873,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
            "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
            "List the themes for exhibitions that have recorded attendance figures both below 100 and above 500.",
            "Identify the themes of exhibitions that feature attendance records with values under 100 as well as those exceeding 500.",
            "What themes correspond to exhibitions that recorded attendances that dip below 100 and also rise above 500?"
        ],
        "ref_sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $project: {\n      Theme: \"$exhibition.Theme\",\n      attendance_below_100: {\n        $filter: {\n          input: \"$exhibition.exhibition_record\",\n          as: \"record\",\n          cond: {\n            $lt: [\"$$record.Attendance\", 100]\n          }\n        }\n      },\n      attendance_above_500: {\n        $filter: {\n          input: \"$exhibition.exhibition_record\",\n          as: \"record\",\n          cond: {\n            $gt: [\"$$record.Attendance\", 500]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      $expr: {\n        $and: [\n          { $ne: [{ $size: \"$attendance_below_100\" }, 0] },\n          { $ne: [{ $size: \"$attendance_above_500\" }, 0] }\n        ]\n      }\n    }\n  },\n  {\n    $project: {\n      Theme: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1457,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "What are the purchase details of transactions with amount bigger than 10000?",
            "Can you provide the purchase details for transactions where the amount exceeds 10,000?",
            "What are the details of purchases made in transactions with amounts greater than 10,000?",
            "Please list the purchase information for transactions that have an amount higher than 10,000.",
            "Show me the purchase details associated with transactions exceeding an amount of 10,000."
        ],
        "ref_sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $match: {\n      \"Transactions.amount_of_transaction\": { $gt: 10000 }\n    }\n  },\n  {\n    $unwind: \"$Transactions.Purchases\"\n  },\n  {\n    $project: {\n      \"purchase_details\": \"$Transactions.Purchases.purchase_details\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 61,
        "db_id": "gymnast",
        "nl_queries": [
            "What is the age of the tallest person?",
            "Return the age of the person with the greatest height.",
            "What age is recorded for the tallest individual?",
            "Give me the age of the tallest person in the dataset.",
            "How old is the person who has the highest height among the group?"
        ],
        "ref_sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $sort: { \"Height\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3799,
        "db_id": "store_product",
        "nl_queries": [
            "Find all the product whose name contains the word \"Scanner\".",
            "What are all of the products whose name includes the substring \"Scanner\"?",
            "List all products with names that feature the word \"Scanner\".",
            "Show me the products that contain \"Scanner\" in their name.",
            "Retrieve all product names that have the substring \"Scanner\"."
        ],
        "ref_sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
        "MQL": "db.product.find({\n  product: {\n    $regex: \"Scanner\",\n    $options: \"i\"\n  }\n}, {\n  product: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 4274,
        "db_id": "car_1",
        "nl_queries": [
            "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "What is the lightest weight of an 8-cylinder car made in 1974?",
            "Determine the minimum weight of cars manufactured with 8 cylinders in the year 1974.",
            "Find the smallest weight of any car that has 8 cylinders and was produced in 1974."
        ],
        "ref_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.model_list.car_names.cars_data.Cylinders\": 8,\n      \"countries.car_makers.model_list.car_names.cars_data.Year\": 1974\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      min_weight: {\n        $min: \"$countries.car_makers.model_list.car_names.cars_data.Weight\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_weight: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3900,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What are the names and descriptions of all the sections?",
            "What are the names and descriptions for all the sections?",
            "Can you provide the section names and their corresponding descriptions?",
            "What are the names along with the descriptions of every section available?",
            "Please list all section names and their descriptions."
        ],
        "ref_sql": "SELECT section_name , section_description FROM Sections",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Sections\"\n  },\n  {\n    $project: {\n      section_name: \"$Sections.section_name\",\n      section_description: \"$Sections.section_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3852,
        "db_id": "activity_1",
        "nl_queries": [
            "Show all the ranks and the number of male and female faculty for each rank.",
            "How many faculty members do we have for each rank and gender?",
            "Provide the list of ranks along with the count of male and female faculty members for each rank.",
            "What is the number of faculty by rank and their gender classification?",
            "Display the count of faculty categorized by rank and sex."
        ],
        "ref_sql": "SELECT rank , sex , count(*) FROM Faculty GROUP BY rank , sex",
        "MQL": "db.Faculty.aggregate([\n  {\n    $group: {\n      _id: {\n        Rank: \"$Rank\",\n        Sex: \"$Sex\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id.Rank\",\n      Sex: \"$_id.Sex\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1018,
        "db_id": "world_1",
        "nl_queries": [
            "Find the city with the largest population that uses English.",
            "What is the most populace city that speaks English?",
            "Identify the most populous city where English is the primary language.",
            "Which city with the highest population speaks English?",
            "What is the name of the city that has the largest number of residents and communicates in English?"
        ],
        "ref_sql": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $match: {\n      \"countrylanguage.Language\": \"English\"\n    }\n  },\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $group: {\n      _id: {\n        cityName: \"$city.Name\",\n        cityPopulation: \"$city.Population\"\n      }\n    }\n  },\n  {\n    $sort: {\n      \"_id.cityPopulation\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id.cityName\",\n      Population: \"$_id.cityPopulation\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1367,
        "db_id": "mountain_photos",
        "nl_queries": [
            "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
            "List each camera lens along with the total number of photos captured by it, sorted by the photo count.",
            "Provide the names of camera lenses and how many photos have been taken with each one, arranged in descending order of the photo count.",
            "Can you show me the name of every camera lens and the corresponding number of photos it has taken, ordered by the quantity of photos?",
            "What are the names of all camera lenses and their respective photo counts, sorted from the most to the least photos taken?"
        ],
        "ref_sql": "SELECT T1.name , count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "MQL": "db.camera_lens.aggregate([\n  { \n    $unwind: \"$photos\" \n  },\n  { \n    $group: {\n      _id: \"$name\",\n      count: { $sum: 1 }\n    }\n  },\n  { \n    $sort: { count: -1 }\n  },\n  { \n    $project: {\n      _id: 0,\n      name: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 203,
        "db_id": "railway",
        "nl_queries": [
            "Show the distinct countries of managers.",
            "List the unique countries where the managers are located.",
            "Provide all distinct countries of the managers.",
            "What are the different countries represented by the managers?",
            "Retrieve the set of unique countries associated with the managers."
        ],
        "ref_sql": "SELECT DISTINCT Country FROM manager",
        "MQL": "db.manager.aggregate(\n  [\n    { $group: { _id: '$Country' } },\n    { $project: { Country: '$_id', _id: 0 } }\n  ]\n);"
    },
    {
        "record_id": 510,
        "db_id": "flight_2",
        "nl_queries": [
            "What are flight numbers of flights departing from Airport \"APG\"?",
            "Give the flight numbers of flights leaving from APG.",
            "List the flight numbers for flights that are departing from the airport with the code \"APG\".",
            "Can you provide the flight numbers for departures from APG airport?",
            "What flight numbers correspond to the flights taking off from Airport \"APG\"?"
        ],
        "ref_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
        "MQL": "db.airports.aggregate([\n  {\n    $unwind: \"$flights\"\n  },\n  {\n    $match: {\n      \"flights.SourceAirport\": \"APG\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FlightNo: \"$flights.FlightNo\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2679,
        "db_id": "election_representative",
        "nl_queries": [
            "How many elections are there?",
            "What is the total count of elections held?",
            "How many elections have taken place?",
            "Can you tell me the number of elections recorded?",
            "What is the overall number of elections in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM election",
        "MQL": "db.representative.aggregate([\n  { $unwind: \"$election\" },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 2664,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "How many customers are living in city \"Lake Geovannyton\"?",
            "Find the number of customers who live in the city called Lake Geovannyton.",
            "What is the total number of customers residing in the city of Lake Geovannyton?",
            "How many customers are registered at the address in Lake Geovannyton?",
            "Count the customers who have their residence in the city called Lake Geovannyton."
        ],
        "ref_sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.city\": \"Lake Geovannyton\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2705,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the number of items that did not receive any review.",
            "Find the number of items without any review.",
            "How many items are there that have no reviews at all?",
            "Count the number of items that lack any reviews.",
            "What is the total number of items that do not have any reviews submitted?"
        ],
        "ref_sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "MQL": "db.item.aggregate([\n  {\n    $match: {\n      $or: [\n        { review: { $exists: false } },\n        { review: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2485,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the number of customer cards.",
            "How many customer cards are there?",
            "How many cards do customers have?",
            "Can you provide the total count of customer cards?",
            "What is the total number of cards owned by customers?"
        ],
        "ref_sql": "SELECT count(*) FROM Customers_cards",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1542,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
            "Retrieve the titles of items that have been rated over 8 and under 5 at the same time.",
            "What are the titles of items that received ratings exceeding 8 while also falling below 5?",
            "List the titles of items that have both a rating greater than 8 and a rating less than 5.",
            "Identify the titles of items that were rated both above 8 and below 5 simultaneously."
        ],
        "ref_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
        "MQL": "db.item.find({\n  $and: [\n    { \"review.rating\": { $gt: 8 } },\n    { \"review.rating\": { $lt: 5 } }\n  ]\n}, { \"title\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 88,
        "db_id": "railway",
        "nl_queries": [
            "Show different builders of railways, along with the corresponding number of railways using each builder.",
            "List all railway builders along with how many railways each has constructed.",
            "Provide a count of railways built by each builder in the railway database.",
            "Display the builders of railways and the total number of railways attributed to each.",
            "Present the different builders in the railway sector along with their respective railway counts."
        ],
        "ref_sql": "SELECT Builder , COUNT(*) FROM railway GROUP BY Builder",
        "MQL": "db.railway.aggregate([\n  {\n    $group: {\n      _id: \"$Builder\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Builder: \"$_id\",\n      \"COUNT\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3707,
        "db_id": "manufacturer",
        "nl_queries": [
            "Which manufacturer has the most number of shops? List its name and year of opening.",
            "Who is the manufacturer with the highest number of stores? Please provide their name and the year they were established.",
            "Identify the manufacturer that operates the most shops and give me their name along with the opening year.",
            "What is the name of the manufacturer that has the greatest number of shops? Also, include the year they opened.",
            "Which manufacturer boasts the largest shop count? List their name and the year they started operating."
        ],
        "ref_sql": "SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "MQL": "db.manufacturer.aggregate([\n  {\n    $group: {\n      _id: \"$Name\",\n      Open_Year: { $first: \"$Open_Year\" },\n      sum_Num_of_Shops: { $sum: \"$Num_of_Shops\" }\n    }\n  },\n  { $sort: { sum_Num_of_Shops: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, Name: \"$_id\", Open_Year: 1 } }\n]);\n"
    },
    {
        "record_id": 3124,
        "db_id": "document_management",
        "nl_queries": [
            "Find the name and access counts of all documents, in alphabetic order of the document name.",
            "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
            "List all document names along with their access counts, sorted in alphabetical order by the document name.",
            "Provide the document names and their corresponding access counts, arranged in alphabetical order.",
            "Show the names of each document along with the number of times they have been accessed, sorted by document name in ascending order."
        ],
        "ref_sql": "SELECT document_name , access_count FROM documents ORDER BY document_name",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $project: {\n      document_name: \"$Documents.document_name\",\n      access_count: \"$Documents.access_count\"\n    }\n  },\n  {\n    $sort: {\n      document_name: 1\n    }\n  },\n  {\n    $project: {\n      document_name: 1,\n      access_count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2450,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "How many accounts does the customer with first name Art and last name Turcotte have?",
            "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
            "What is the total number of accounts held by the customer named Art Turcotte?",
            "How many accounts are associated with the customer whose first name is Art and last name is Turcotte?",
            "Count the number of accounts belonging to the customer called Art Turcotte."
        ],
        "ref_sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"",
        "MQL": "db.Accounts.aggregate([\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.customer_first_name\": \"Art\",\n      \"Docs1.customer_last_name\": \"Turcotte\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 82,
        "db_id": "chinook_1",
        "nl_queries": [
            "What are the birth dates of employees living in Edmonton?",
            "Find the birth dates corresponding to employees who live in the city of Edmonton.",
            "List the birthdates of employees based in Edmonton.",
            "What are the dates of birth for employees who reside in Edmonton?",
            "Provide the birth dates for employees living in Edmonton."
        ],
        "ref_sql": "SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $match: {\n      City: \"Edmonton\"\n    }\n  },\n  {\n    $project: {\n      BirthDate: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2444,
        "db_id": "flight_2",
        "nl_queries": [
            "How many airports do we have?",
            "Return the number of airports.",
            "What is the total number of airports available?",
            "Please provide the count of all airports.",
            "How many airports are listed in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM AIRPORTS",
        "MQL": "db.airports.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1246,
        "db_id": "music_1",
        "nl_queries": [
            "List the duration, file size and format of songs whose genre is pop, ordered by title?",
            "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
            "Retrieve the duration, file size, and formats for all pop songs, sorted by their titles.",
            "What are the duration, file size, and format details for each song in the pop genre, organized in alphabetical order by song title?",
            "Provide the duration, size of the files, and formats of songs that are classified as pop, arranged by their titles in ascending order."
        ],
        "ref_sql": "SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = \"pop\" ORDER BY T2.song_name",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $unwind: \"$artist.files.song\"\n  },\n  {\n    $match: {\n      \"artist.files.song.genre_is\": \"pop\"\n    }\n  },\n  {\n    $project: {\n      duration: \"$artist.files.duration\",\n      file_size: \"$artist.files.file_size\",\n      formats: \"$artist.files.formats\",\n      song_name: \"$artist.files.song.song_name\"\n    }\n  },\n  {\n    $sort: {\n      song_name: 1\n    }\n  },\n  {\n    $project: {\n      duration: 1,\n      file_size: 1,\n      formats: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 959,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the description and code of the attraction type most tourist attractions belong to.",
            "Which attraction type does the most tourist attractions belong to? Tell me its attraction type description and code.",
            "What is the most common attraction type among tourist attractions? Please provide its description and code.",
            "Identify the attraction type with the highest number of associated tourist attractions, including its description and code.",
            "Can you tell me which attraction type has the largest count of tourist attractions? Include its attraction type description and code in your answer."
        ],
        "ref_sql": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $group: {\n      _id: {\n        Attraction_Type_Code: \"$Attraction_Type_Code\",\n        Attraction_Type_Description: \"$Attraction_Type_Description\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Attraction_Type_Description: \"$_id.Attraction_Type_Description\",\n      Attraction_Type_Code: \"$_id.Attraction_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3917,
        "db_id": "music_1",
        "nl_queries": [
            "Give me a list of the names of all songs ordered by their resolution.",
            "What are the names of all songs that are ordered by their resolution numbers?",
            "List all song titles arranged by their resolution values.",
            "Can you provide the names of all songs sorted according to their resolution?",
            "What are the song names sorted by their respective resolution levels?"
        ],
        "ref_sql": "SELECT song_name FROM song ORDER BY resolution",
        "MQL": "db.genre.aggregate([\n  \n  { $unwind: { path: \"$song\", preserveNullAndEmptyArrays: true } },\n  \n  { $unwind: { path: \"$artist\", preserveNullAndEmptyArrays: true } },\n  \n  { $unwind: { path: \"$artist.song\", preserveNullAndEmptyArrays: true } },\n  \n  { $unwind: { path: \"$artist.files\", preserveNullAndEmptyArrays: true } },\n  \n  { $unwind: { path: \"$artist.files.song\", preserveNullAndEmptyArrays: true } },\n  \n  {\n    $project: {\n      song_name: {\n        $cond: {\n          if: { $ne: [\"$song\", null] },\n          then: \"$song.song_name\",\n          else: {\n            $cond: {\n              if: { $ne: [\"$artist.song\", null] },\n              then: \"$artist.song.song_name\",\n              else: \"$artist.files.song.song_name\"\n            }\n          }\n        }\n      },\n      resolution: {\n        $cond: {\n          if: { $ne: [\"$song\", null] },\n          then: \"$song.resolution\",\n          else: {\n            $cond: {\n              if: { $ne: [\"$artist.song\", null] },\n              then: \"$artist.song.resolution\",\n              else: \"$artist.files.song.resolution\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \n  { $match: { song_name: { $ne: null } } },\n  \n  { $sort: { resolution: 1 } },\n  \n  { $project: { song_name: 1, _id: 0 } }\n]);\n"
    },
    {
        "record_id": 4024,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "What is the total share of transactions?",
            "How many shares were involved in all transactions?",
            "What is the overall total of shares from the transactions?",
            "Can you provide the cumulative share count from the transactions?",
            "What’s the complete sum of shares across all the transactions?"
        ],
        "ref_sql": "SELECT sum(share_count) FROM TRANSACTIONS",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  {\n    $group: {\n      _id: null,\n      sum_share_count: {\n        $sum: {\n          $convert: {\n            input: \"$Transactions.share_count\",\n            to: \"double\",\n            onError: 0,\n            onNull: 0\n          }\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_share_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 262,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What are all the course names of the courses which ever have students enrolled in?",
            "What are the names of all courses that have some students enrolled?",
            "List the names of all courses that currently have students enrolled.",
            "Can you provide the course names for courses with student enrollments?",
            "What course names are associated with courses that have students registered?"
        ],
        "ref_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
        "MQL": "db.Courses.aggregate([\n  {\n    $match: {\n      Student_Enrolment_Courses: {\n        $exists: true,\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      course_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2617,
        "db_id": "culture_company",
        "nl_queries": [
            "How many book clubs are there?",
            "Count the number of book clubs.",
            "What is the total number of book clubs available?",
            "How many book clubs exist in the database?",
            "Determine the total count of book clubs present."
        ],
        "ref_sql": "SELECT count(*) FROM book_club",
        "MQL": "db.book_club.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1613,
        "db_id": "wrestler",
        "nl_queries": [
            "List the names of wrestlers and the teams in elimination in descending order of days held.",
            "What are the names of wrestlers and their teams in elimination, ordered descending by days held?",
            "Provide the names of wrestlers along with their elimination teams, listed in descending order of the days they held the title.",
            "Can you show the names of the wrestlers and their respective teams in elimination, arranged by days held from highest to lowest?",
            "Display the names of the wrestlers and the teams they were a part of during elimination, sorted in reverse order based on the duration they held the title."
        ],
        "ref_sql": "SELECT T2.Name , T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC",
        "MQL": "db.wrestler.aggregate([\n  {\n    $unwind: \"$Elimination\"\n  },\n  {\n    $project: {\n      Name: 1,\n      Team: \"$Elimination.Team\",\n      Days_held: {\n        $toInt: \"$Days_held\"\n      }\n    }\n  },\n  {\n    $sort: {\n      Days_held: -1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      Team: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2072,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the most common apartment type code.",
            "Which apartment type code appears the most often?",
            "Identify the apartment type code that is most frequently listed.",
            "What is the apartment type code with the highest occurrence?",
            "Which type of apartment is seen most commonly in the records?"
        ],
        "ref_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $group: {\n      _id: \"$Apartments.apt_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      apt_type_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2560,
        "db_id": "movie_1",
        "nl_queries": [
            "How many reviewers listed?",
            "How many reviewers are there?",
            "What is the total number of reviewers recorded?",
            "Can you tell me how many reviewers exist?",
            "How many individuals have submitted reviews?"
        ],
        "ref_sql": "SELECT count(*) FROM Reviewer",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1958,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "Which service id and type has the least number of participants?",
            "What service ID and type correspond to the fewest participants?",
            "Identify the service with the lowest participant count, including its ID and type.",
            "Which service type and ID has the smallest number of participants in events?",
            "Find the service ID and type that have the least attendance among participants."
        ],
        "ref_sql": "SELECT T3.service_id , T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Services.aggregate([\n  { $unwind: \"$Events\" },\n  { $unwind: \"$Events.Participants_in_Events\" },\n  {\n    $group: {\n      _id: { Service_ID: \"$Service_ID\", Service_Type_Code: \"$Service_Type_Code\" },\n      participantCount: { $sum: 1 }\n    }\n  },\n  { $sort: { participantCount: 1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      Service_ID: \"$_id.Service_ID\",\n      Service_Type_Code: \"$_id.Service_Type_Code\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1812,
        "db_id": "company_office",
        "nl_queries": [
            "Show the names of the buildings that have more than one company offices.",
            "Which buildings have more than one company offices? Give me the building names.",
            "List the names of buildings that host more than one company office.",
            "Identify which buildings have multiple company office locations and provide their names.",
            "What are the names of buildings that contain more than one office for different companies?"
        ],
        "ref_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1",
        "MQL": "db.buildings.aggregate([\n  {\n    $unwind: \"$Office_locations\"\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3562,
        "db_id": "company_office",
        "nl_queries": [
            "What are the names of companies whose headquarters are not \"USA\"?",
            "Find the names of the companies whose headquarters are not located in \"USA\".",
            "List the names of companies that do not have their headquarters in the USA.",
            "What companies are based outside of the USA in terms of their headquarters?",
            "Provide the names of companies whose headquarters are situated outside the United States."
        ],
        "ref_sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
        "MQL": "db.Companies.aggregate([\n  {\n    $match: {\n      Headquarters: { $ne: \"USA\" }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3083,
        "db_id": "college_2",
        "nl_queries": [
            "Find the department name of the instructor whose name contains 'Soisalon'.",
            "What is the name of the department with an instructure who has a name like 'Soisalon'?",
            "What department does the instructor with 'Soisalon' in their name belong to?",
            "Identify the department of the instructor whose name features 'Soisalon'.",
            "Which department is associated with an instructor named similarly to 'Soisalon'?"
        ],
        "ref_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $match: {\n      \"instructor.name\": { $regex: \"Soisalon\", $options: \"i\" }\n    }\n  },\n  {\n    $project: {\n      dept_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2953,
        "db_id": "sports_competition",
        "nl_queries": [
            "which countries did participated in both Friendly and Tournament type competitions.",
            "What are the countries that participated in both friendly and tournament type competitions?",
            "Which nations have competed in both Friendly and Tournament competitions?",
            "Identify the countries that have taken part in both friendly and tournament competitions.",
            "Which countries have engaged in both types of competitions: Friendly and Tournament?"
        ],
        "ref_sql": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
        "MQL": "db.competition.aggregate([\n  {\n    $match: {\n      Competition_type: {\n        $in: [\"Friendly\", \"Tournament\"]\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Country\",\n      competition_types: {\n        $addToSet: \"$Competition_type\"\n      }\n    }\n  },\n  {\n    $match: {\n      competition_types: {\n        $all: [\"Friendly\", \"Tournament\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 602,
        "db_id": "wrestler",
        "nl_queries": [
            "List the locations that are shared by more than two wrestlers.",
            "Which locations are shared by more than two wrestlers?",
            "Identify the locations where more than two wrestlers compete.",
            "Which locations have the participation of over two wrestlers?",
            "Find locations that are home to more than two wrestlers."
        ],
        "ref_sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2",
        "MQL": "db.wrestler.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2036,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show ids, customer ids, names for all accounts.",
            "What are the account ids, customer ids, and account names for all the accounts?",
            "Retrieve the account IDs, customer IDs, and names of all accounts.",
            "Can you provide the account IDs and customer IDs along with the names for every account?",
            "List the IDs, customer IDs, and account names for all existing accounts."
        ],
        "ref_sql": "SELECT account_id , customer_id , account_name FROM Accounts",
        "MQL": "db.Accounts.find({}, { account_id: 1, customer_id: 1, account_name: 1, _id: 0 });\n"
    },
    {
        "record_id": 1979,
        "db_id": "store_product",
        "nl_queries": [
            "Find all types of store and number of them.",
            "For each type of store, how many of them are there?",
            "List all store types along with the corresponding number of stores in each category.",
            "How many stores are there for each type of store?",
            "Provide the count of stores grouped by their types."
        ],
        "ref_sql": "SELECT TYPE , count(*) FROM store GROUP BY TYPE",
        "MQL": "db.store.aggregate([\n  {\n    $group: {\n      _id: \"$Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Type: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2292,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "What is the card type code with most number of cards?",
            "Return the code of the card type that is most common.",
            "Which card type has the highest number of cards issued?",
            "Identify the most frequently occurring card type code.",
            "What is the most common card type among all the cards?"
        ],
        "ref_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: \"$card_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      card_type_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2237,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "What is the average, minimum, maximum, and total transaction amount?",
            "Return the average, minimum, maximum, and total transaction amounts.",
            "Can you provide the average, minimum, maximum, and overall total of transaction amounts?",
            "Please show me the average, lowest, highest, and total amounts of transactions.",
            "What are the average, minimum, maximum, and total values for the transaction amounts?"
        ],
        "ref_sql": "SELECT avg(transaction_amount) , min(transaction_amount) , max(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $unwind: \"$Accounts.Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_transaction_amount: { $avg: \"$Accounts.Financial_Transactions.transaction_amount\" },\n      min_transaction_amount: { $min: \"$Accounts.Financial_Transactions.transaction_amount\" },\n      max_transaction_amount: { $max: \"$Accounts.Financial_Transactions.transaction_amount\" },\n      sum_transaction_amount: { $sum: \"$Accounts.Financial_Transactions.transaction_amount\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_transaction_amount: 1,\n      min_transaction_amount: 1,\n      max_transaction_amount: 1,\n      sum_transaction_amount: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 947,
        "db_id": "aircraft",
        "nl_queries": [
            "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
            "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
            "List the names of all aircraft linked to both the London Heathrow and London Gatwick airports.",
            "Identify the aircraft names that are connected with both the London Heathrow and Gatwick airports.",
            "What aircraft are associated with both airports, London Heathrow and London Gatwick?"
        ],
        "ref_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\"",
        "MQL": "db.aircraft.aggregate([\n  {\n    $lookup: {\n      from: \"airport\",\n      localField: \"airport_aircraft.Airport_ID\",\n      foreignField: \"Airport_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Airport_Name\": {\n        $all: [\"London Heathrow\", \"London Gatwick\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Aircraft: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1094,
        "db_id": "film_rank",
        "nl_queries": [
            "Please show the titles of films and the types of market estimations.",
            "What are the titles of films and corresponding types of market estimations?",
            "Provide the titles of films along with their respective market estimation types.",
            "List the film titles and the types of market estimates associated with them.",
            "What film titles are paired with their corresponding types of market estimations?"
        ],
        "ref_sql": "SELECT T1.Title , T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID",
        "MQL": "db.film.aggregate([\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $lookup: {\n      from: \"market\",\n      localField: \"film_market_estimation.Market_ID\",\n      foreignField: \"Market_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.film_market_estimation\"\n  },\n  {\n    $match: {\n      $expr: {\n        $eq: [\"$film_market_estimation.Estimation_ID\", \"$Docs1.film_market_estimation.Estimation_ID\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Title: 1,\n      Type: \"$film_market_estimation.Type\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3528,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the name, latitude, and city of the station with the lowest latitude?",
            "What is the name, latitude, and city of the station that is located the furthest South?",
            "Can you provide the name, latitude, and city of the station situated at the lowest latitude?",
            "What is the name, latitude, and city of the station positioned the furthest to the south?",
            "Retrieve the name, latitude, and city for the station that has the southernmost latitude."
        ],
        "ref_sql": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
        "MQL": "db.station.aggregate([\n  {\n    $sort: { \"lat\": 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      lat: 1,\n      city: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2341,
        "db_id": "student_1",
        "nl_queries": [
            "For each classroom, report the classroom number and the number of grades using it.",
            "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
            "List each classroom along with the number of unique grades recorded for that room.",
            "For every classroom, provide the classroom ID and the total count of different grades associated with it.",
            "Display the classroom number together with the count of distinct grades present in each classroom."
        ],
        "ref_sql": "SELECT classroom , count(DISTINCT grade) FROM list GROUP BY classroom",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Classroom\",\n      count_DISTINCT_grade: { $addToSet: \"$Grade\" }\n    }\n  },\n  {\n    $project: {\n      Classroom: \"$_id\",\n      count_DISTINCT_grade: { $size: \"$count_DISTINCT_grade\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1058,
        "db_id": "poker_player",
        "nl_queries": [
            "What are the names of poker players?",
            "Return the names of all the poker players.",
            "Can you provide a list of names of players who participate in poker?",
            "Show me the names of all individuals who are poker players.",
            "Give me the names of those who are registered as poker players."
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      poker_player: { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 977,
        "db_id": "world_1",
        "nl_queries": [
            "Which continent has the most diverse languages?",
            "Which continent speaks the most languages?",
            "Which continent has the largest number of languages spoken?",
            "Identify the continent with the highest linguistic diversity.",
            "What is the continent that hosts the most different languages?"
        ],
        "ref_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$Continent\",\n      languages: {\n        $addToSet: \"$countrylanguage.Language\"\n      }\n    }\n  },\n  {\n    $project: {\n      Continent: \"$_id\",\n      languageCount: {\n        $size: \"$languages\"\n      }\n    }\n  },\n  {\n    $sort: {\n      languageCount: -1\n    }\n  },\n  {\n    $project: {\n      Continent: 1,\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 1232,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the document id and name with greatest number of paragraphs?",
            "Return the id and name of the document with the most paragraphs.",
            "Which document has the highest count of paragraphs, and what are its ID and name?",
            "Identify the document with the largest number of paragraphs along with its ID and name.",
            "What are the ID and name of the document that contains the most paragraphs?"
        ],
        "ref_sql": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: {\n        document_id: \"$Templates.Documents.Document_ID\",\n        document_name: \"$Templates.Documents.Document_Name\"\n      },\n      count_Paragraphs: {\n        $sum: {\n          $size: \"$Templates.Documents.Paragraphs\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count_Paragraphs: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Document_ID: \"$_id.document_id\",\n      Document_Name: \"$_id.document_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3348,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the location code for the country \"Canada\"?",
            "Show the location code of the country \"Canada\".",
            "Can you provide the location code for Canada?",
            "Retrieve the location code associated with the country named Canada.",
            "What is the code for the location designated as Canada?"
        ],
        "ref_sql": "SELECT location_code FROM Ref_locations WHERE location_name = \"Canada\"",
        "MQL": "db.Ref_Locations.find({ \"Location_Name\": \"Canada\" }, { \"Location_Code\": 1, \"_id\": 0 })\n"
    },
    {
        "record_id": 1747,
        "db_id": "csu_1",
        "nl_queries": [
            "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
            "How many faculty members are at the university that gave the least number of degrees in 2001?",
            "What is the total number of faculty positions at the university that awarded the least degrees in 2001?",
            "How many faculty staff are there in the campus that granted the fewest degrees in the year 2001?",
            "Can you tell me the number of faculty members associated with the university that had the lowest degree count in 2001?"
        ],
        "ref_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$degrees\"\n  },\n  {\n    $match: {\n      \"degrees.Year\": 2001\n    }\n  },\n  {\n    $group: {\n      _id: \"$Id\",\n      Campus: { $first: \"$Campus\" },\n      sum_Degrees: { $sum: \"$degrees.Degrees\" }\n    }\n  },\n  {\n    $sort: {\n      sum_Degrees: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Campuses\",\n      localField: \"_id\",\n      foreignField: \"Id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.faculty\"\n  },\n  {\n    $match: {\n      \"Docs1.faculty.Year\": 2001\n    }\n  },\n  {\n    $project: {\n      Faculty: \"$Docs1.faculty.Faculty\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1783,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name and salary of instructors who are advisors of the students from the Math department.",
            "What are the names and salaries of instructors who advise students in the Math department?",
            "List the names and salaries of instructors who mentor students from the Math department.",
            "What are the names and pay scales of instructors serving as advisors to Math students?",
            "Retrieve the names and compensation of instructors who guide students in the Mathematics department."
        ],
        "ref_sql": "SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $match: {\n      \"student.dept_name\": \"Math\"\n    }\n  },\n  {\n    $unwind: \"$student.advisor\"\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { advisor_id: \"$student.advisor.i_ID\" },\n      pipeline: [\n        { $unwind: \"$instructor\" },\n        { $match: { $expr: { $eq: [\"$instructor.ID\", \"$$advisor_id\"] } } },\n        { $project: { _id: 0, name: \"$instructor.name\", salary: \"$instructor.salary\" } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$Docs1.name\",\n      salary: \"$Docs1.salary\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2432,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of dorms and total capacity for each gender.",
            "How many dorms are there and what is the total capacity for each gender?",
            "What is the count of dormitories and the overall capacity for each gender?",
            "Please provide the total number of dorms and their cumulative capacity categorized by gender.",
            "How many dorms exist, and what is the total student capacity for dormitories divided by gender?"
        ],
        "ref_sql": "SELECT count(*) , sum(student_capacity) , gender FROM dorm GROUP BY gender",
        "MQL": "db.Dorm.aggregate([\n  {\n    $group: {\n      _id: \"$gender\",\n      count: { $sum: 1 },\n      sum_student_capacity: { $sum: \"$student_capacity\" }\n    }\n  },\n  {\n    $project: {\n      gender: \"$_id\",\n      count: 1,\n      sum_student_capacity: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2177,
        "db_id": "csu_1",
        "nl_queries": [
            "What is the average fee on a CSU campus in 2005?",
            "What is the average fee for a CSU campus in the year of 2005?",
            "What is the average campus fee at CSU for the year 2005?",
            "Can you tell me the average fee charged on CSU campuses during 2005?",
            "What was the average fee across CSU campuses in the year 2005?"
        ],
        "ref_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$csu_fees\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_campusfee: {\n        $avg: {\n          $cond: [\n            { $eq: [\"$csu_fees.Year\", 2005] },\n            \"$csu_fees.CampusFee\",\n            null\n          ]\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_campusfee: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3706,
        "db_id": "wedding",
        "nl_queries": [
            "Show the opening year in whcih at least two churches opened.",
            "List the years when two or more churches were established.",
            "Identify the opening years that saw at least two church inaugurations.",
            "Which years had a minimum of two churches opening?",
            "Provide the years during which a minimum of two churches were opened."
        ],
        "ref_sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*) >= 2",
        "MQL": "db.church.aggregate([\n  { $group: { _id: \"$Open_Date\", count: { $sum: 1 } } },\n  { $match: { count: { $gte: 2 } } },\n  { $project: { Open_Date: \"$_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 2302,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all book categories and the number of books in each category.",
            "How many books fall into each category?",
            "List all book categories along with the respective number of books in each.",
            "What is the total count of books in every category?",
            "Provide a breakdown of book categories and how many books are associated with each one."
        ],
        "ref_sql": "SELECT category , count(*) FROM book_club GROUP BY category",
        "MQL": "db.book_club.aggregate([\n  {\n    $group: {\n      _id: \"$Category\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Category: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2157,
        "db_id": "network_2",
        "nl_queries": [
            "What is the average age for each gender?",
            "How old is each gender, on average?",
            "What is the average age among different genders?",
            "Can you provide the average age for each gender group?",
            "How old is each gender on average?"
        ],
        "ref_sql": "SELECT avg(age) , gender FROM Person GROUP BY gender",
        "MQL": "db.Person.aggregate([\n  {\n    $group: {\n      _id: \"$gender\",\n      avg_age: { $avg: \"$age\" }\n    }\n  },\n  {\n    $project: {\n      gender: \"$_id\",\n      avg_age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2502,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "How many employees do we have?",
            "Find the number of employees we have.",
            "What is the total count of employees in our organization?",
            "Determine how many employees are part of the company.",
            "Can you tell me the overall number of employees we have?"
        ],
        "ref_sql": "SELECT count(*) FROM Employees",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 175,
        "db_id": "flight_2",
        "nl_queries": [
            "Which country does Airline \"JetBlue Airways\" belong to?",
            "What country is Jetblue Airways affiliated with?",
            "In which country is JetBlue Airways located?",
            "What is the country associated with the airline JetBlue Airways?",
            "Which nation does the airline JetBlue Airways operate from?"
        ],
        "ref_sql": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      Airline: \"JetBlue Airways\"\n    }\n  },\n  {\n    $project: {\n      Country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2591,
        "db_id": "small_bank_1",
        "nl_queries": [
            "How many accounts are there in total?",
            "Count the number of accounts.",
            "What is the total number of accounts available in the database?",
            "Determine the total count of all accounts.",
            "Please provide the overall number of accounts present."
        ],
        "ref_sql": "SELECT count(*) FROM accounts",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2852,
        "db_id": "loan_1",
        "nl_queries": [
            "How many distinct types of accounts are there?",
            "Count the number of different account types.",
            "What is the total number of unique account types available?",
            "How many different kinds of accounts are there in total?",
            "Determine the count of distinct account types present in the bank."
        ],
        "ref_sql": "SELECT count(DISTINCT acc_type) FROM customer",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $group: {\n      _id: \"$customer.acc_type\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_acc_type: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_acc_type: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3131,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What document status codes do we have?",
            "Can you provide the list of document status codes available?",
            "What are the different document status codes in the system?",
            "Please show me all the document status codes that exist.",
            "What document status codes can we find in the database?"
        ],
        "ref_sql": "SELECT document_status_code FROM Ref_Document_Status;",
        "MQL": "db.Ref_Document_Status.find({}, { \"document_status_code\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3491,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show all artist name, age, and country ordered by the yeared they joined.",
            "What are the names, ages, and countries of artists, sorted by the year they joined?",
            "List the names, ages, and countries of artists, arranged in ascending order by the year they joined.",
            "Provide the names, ages, and countries of all artists, sorted according to the year of their joining.",
            "Retrieve the names, ages, and countries for each artist, ordered by the year they started their association."
        ],
        "ref_sql": "SELECT name , age , country FROM artist ORDER BY Year_Join",
        "MQL": "db.artist.find({}, { Name: 1, Age: 1, Country: 1, _id: 0 }).sort({ Year_Join: 1 });\n"
    },
    {
        "record_id": 2064,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Return the apartment number and the number of rooms for each apartment.",
            "What are the apartment number and the room count of each apartment?",
            "List the apartment numbers along with the corresponding number of rooms in each apartment.",
            "Provide the apartment number and total room count for every apartment available.",
            "Show the apartment numbers and the count of rooms for all apartments."
        ],
        "ref_sql": "SELECT apt_number , room_count FROM Apartments",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $project: {\n      apt_number: \"$Apartments.apt_number\",\n      room_count: \"$Apartments.room_count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3705,
        "db_id": "wedding",
        "nl_queries": [
            "Show all opening years and the number of churches that opened in that year.",
            "List the years when churches were established along with the total number of churches that began in each of those years.",
            "Provide the opening years of churches and the count of how many were opened during each year.",
            "Display the years in which churches opened and the respective number of churches that opened in those years.",
            "Show each year churches opened and the associated tally of churches that opened in that particular year."
        ],
        "ref_sql": "SELECT open_date , count(*) FROM church GROUP BY open_date",
        "MQL": "db.church.aggregate([\n  {\n    $group: {\n      _id: \"$Open_Date\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Open_Date: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2256,
        "db_id": "activity_1",
        "nl_queries": [
            "Show all the buildings along with the number of faculty members the buildings have.",
            "How many faculty members does each building have? List the result with the name of the building.",
            "Provide a list of all buildings along with the total number of faculty members in each building.",
            "Can you list each building and indicate how many faculty members are located in them?",
            "What are the names of the buildings and the counts of faculty members present in each?"
        ],
        "ref_sql": "SELECT building , count(*) FROM Faculty GROUP BY building",
        "MQL": "db.Faculty.aggregate([\n  {\n    $group: {\n      _id: \"$Building\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Building: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4112,
        "db_id": "store_product",
        "nl_queries": [
            "What products are available at store named \"Miramichi\"?",
            "What products are sold at the store named Miramichi?",
            "What items can be found at the store named \"Miramichi\"?",
            "Which products does the store \"Miramichi\" sell?",
            "Can you list the products available in the Miramichi store?"
        ],
        "ref_sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = \"Miramichi\"",
        "MQL": "db.store.aggregate([\n  {\n    $match: {\n      Store_Name: \"Miramichi\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"product\",\n      localField: \"store_product.Product_ID\",\n      foreignField: \"Product_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      product: \"$Docs1.product\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2150,
        "db_id": "farm",
        "nl_queries": [
            "What is the average number of working horses of farms with more than 5000 total number of horses?",
            "Give the average number of working horses on farms with more than 5000 total horses.",
            "What is the mean count of working horses in farms that have over 5000 total horses?",
            "Calculate the average number of working horses for farms with a total of more than 5000 horses.",
            "How many working horses, on average, do farms with greater than 5000 total horses have?"
        ],
        "ref_sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000",
        "MQL": "db.farm.aggregate([\n  {\n    $match: {\n      Total_Horses: { $gt: 5000 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Working_Horses: { $avg: \"$Working_Horses\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Working_Horses: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2274,
        "db_id": "csu_1",
        "nl_queries": [
            "What are the names of all campuses located at Chico?",
            "What campuses are located in Chico?",
            "Can you provide the names of campuses that are situated in Chico?",
            "Which campuses can be found in the location of Chico?",
            "List all campuses that are located in Chico."
        ],
        "ref_sql": "SELECT campus FROM campuses WHERE LOCATION = \"Chico\"",
        "MQL": "db.Campuses.find(\n  { Location: \"Chico\" },\n  { Campus: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1710,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
            "Can you provide the names and payment methods of customers who have received mailshots with both outcomes: 'Order' and 'No Response'?",
            "List the customer names along with their payment methods for those who have mailshots labeled as 'Order' and 'No Response'.",
            "Which customers have mailshots marked as 'Order' and 'No Response'? Please include their names and payment methods.",
            "What are the names and payment methods of customers who have both 'Order' and 'No Response' outcomes in their mailshots?"
        ],
        "ref_sql": "SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'",
        "MQL": "db.Customers.find({\n  $and: [\n    { \"Mailshot_Customers.outcome_code\": \"Order\" },\n    { \"Mailshot_Customers.outcome_code\": \"No Response\" }\n  ]\n}, { \"customer_name\": 1, \"payment_method\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1621,
        "db_id": "chinook_1",
        "nl_queries": [
            "Which artist has the most albums?",
            "What is the name of the artist with the greatest number of albums?",
            "Which artist has released the highest number of albums?",
            "Who is the artist with the most albums to their name?",
            "Name the artist that has produced the largest quantity of albums."
        ],
        "ref_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      albumCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      albumCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1671,
        "db_id": "tvshow",
        "nl_queries": [
            "List the title of all Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "Retrieve the titles of all cartoons aired on the TV channel named \"Sky Radio\".",
            "What are the titles of the cartoons featured on the \"Sky Radio\" series?",
            "Show me all cartoon titles from the TV channel with the series name \"Sky Radio\"."
        ],
        "ref_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $match: {\n      series_name: \"Sky Radio\"\n    }\n  },\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $project: {\n      Title: \"$Cartoon.Title\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2214,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Compute the average price of all products with manufacturer code equal to 2.",
            "What is the average price of products with manufacturer codes equal to 2?",
            "What is the mean price for all products from the manufacturer with a code of 2?",
            "Calculate the average cost of items produced by the manufacturer identified by code 2.",
            "Determine the average price of products that have a manufacturer code of 2."
        ],
        "ref_sql": "SELECT avg(price) FROM products WHERE Manufacturer = 2",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      Code: 2\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_price: {\n        $avg: \"$Products.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 960,
        "db_id": "poker_player",
        "nl_queries": [
            "What is the birth date of the poker player with the lowest earnings?",
            "Return the birth date of the poker player with the lowest earnings.",
            "What is the date of birth for the poker player who has the least earnings?",
            "Please provide the birth date of the poker player with the lowest amount of earnings.",
            "Can you tell me the birth date of the poker player who earned the smallest amount?"
        ],
        "ref_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $sort: {\n      \"poker_player.Earnings\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Birth_Date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 140,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
            "List the names of the chairs for the festivals, arranged according to the year they were held, from earliest to latest.",
            "Retrieve the names of festival chairs, sorted in order of the years of their festivals, starting with the oldest.",
            "What are the names of the chairs of the festivals, ordered by the year they took place in ascending sequence?",
            "Provide the names of the chairs for each festival, sorted by the year of the festival in increasing order."
        ],
        "ref_sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
        "MQL": "db.festival_detail.find({}, { \"Chair_Name\": 1, \"_id\": 0 }).sort({ \"Year\": 1 });\n"
    },
    {
        "record_id": 77,
        "db_id": "workshop_paper",
        "nl_queries": [
            "What are the authors of submissions and their colleges?",
            "For each submission, show the author and their affiliated college.",
            "Can you list the authors of the submissions along with their associated colleges?",
            "Please provide the names of submission authors and their corresponding institutions.",
            "What are the names of the authors and the colleges they represent in the submissions?"
        ],
        "ref_sql": "SELECT Author , College FROM submission",
        "MQL": "db.submission.find(\n  {},\n  {\n    _id: 0,\n    Author: 1,\n    College: 1\n  }\n);\n"
    },
    {
        "record_id": 3275,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "How many documents can one grant have at most? List the grant id and number.",
            "For each grant id, how many documents does it have, and which one has the most?",
            "What is the maximum number of documents that a single grant can hold? Provide the grant ID along with the document count.",
            "For every grant, how many documents are attached to it, and which grant has the highest number of documents?",
            "Identify the grant that includes the most documents. Specify the grant ID and the total document count associated with it."
        ],
        "ref_sql": "SELECT grant_id , count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Grants\"\n  },\n  {\n    $group: {\n      _id: \"$Organisations.Grants.grant_id\",\n      count: { $sum: { $size: \"$Organisations.Grants.Documents\" } }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      grant_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2174,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the average bike availability in stations that are not located in Palo Alto?",
            "What is the average bike availablility for stations not in Palo Alto?",
            "What is the average number of bikes available at stations outside of Palo Alto?",
            "Can you provide the average bike availability for stations that are not based in Palo Alto?",
            "How many bikes, on average, are available in bike stations that do not include Palo Alto?"
        ],
        "ref_sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      city: { $ne: \"Palo Alto\" }\n    }\n  },\n  {\n    $unwind: \"$status\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_bikes_available: { $avg: \"$status.bikes_available\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_bikes_available: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2838,
        "db_id": "game_1",
        "nl_queries": [
            "How many students play video games?",
            "How many different students play games?",
            "What is the total number of students who engage in playing video games?",
            "How many unique students are involved in playing games?",
            "Can you tell me how many different students participate in video gaming?"
        ],
        "ref_sql": "SELECT count(DISTINCT StuID) FROM Plays_games",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$Plays_Games\"\n  },\n  {\n    $group: {\n      _id: \"$Plays_Games.StuID\",\n      count_DISTINCT_StuID: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_StuID: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 851,
        "db_id": "book_2",
        "nl_queries": [
            "Show publishers that have more than one publication.",
            "List all publishers that have issued more than one book.",
            "Identify publishers with a publication count greater than one.",
            "Display the names of publishers who have published multiple works.",
            "Which publishers have more than one title to their credit?"
        ],
        "ref_sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1",
        "MQL": "db.book.aggregate([\n  {\n    $unwind: \"$publication\"\n  },\n  {\n    $group: {\n      _id: \"$publication.Publisher\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Publisher: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2251,
        "db_id": "mountain_photos",
        "nl_queries": [
            "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
            "Retrieve the brands and names of all camera lenses, sorted from highest to lowest maximum aperture.",
            "List each camera lens's brand and name, arranging them in descending order of their maximum aperture size.",
            "Show the brand and name for every camera lens, organized by maximum aperture in descending order.",
            "Get the brand and name details for each camera lens, sorted by maximum aperture in decreasing order."
        ],
        "ref_sql": "SELECT brand , name FROM camera_lens ORDER BY max_aperture DESC",
        "MQL": "db.camera_lens.find({}, { \"brand\": 1, \"name\": 1, \"_id\": 0 }).sort({ \"max_aperture\": -1 });\n"
    },
    {
        "record_id": 1431,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all paragraph texts for the document \"Customer reviews\".",
            "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "Retrieve all the paragraph texts from the document titled \"Customer reviews\".",
            "List the paragraph texts related to the document named 'Customer reviews'.",
            "Provide the texts of all paragraphs found in the document called \"Customer reviews\"."
        ],
        "ref_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $match: {\n      \"Templates.Documents.Document_Name\": \"Customer reviews\"\n    }\n  },\n  {\n    $unwind: \"$Templates.Documents.Paragraphs\"\n  },\n  {\n    $project: {\n      Paragraph_Text: \"$Templates.Documents.Paragraphs.Paragraph_Text\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1750,
        "db_id": "driving_school",
        "nl_queries": [
            "Find out the first name and last name of staff lived in city Damianfort.",
            "What is the first and last name of all employees who live in the city Damianfort?",
            "List the first and last names of staff members residing in the city of Damianfort.",
            "Can you provide the first and last names of all employees living in Damianfort?",
            "What are the first and last names of staff who have their homes in the city of Damianfort?"
        ],
        "ref_sql": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      city: \"Damianfort\"\n    }\n  },\n  {\n    $project: {\n      first_name: \"$Staff.first_name\",\n      last_name: \"$Staff.last_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1145,
        "db_id": "city_record",
        "nl_queries": [
            "Which city has hosted the most events?",
            "Find the city that hosted the most events.",
            "Which city has the highest number of hosted events?",
            "Name the city that has organized the most events.",
            "Identify the city with the largest count of hosted events."
        ],
        "ref_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$hosting_city\"\n  },\n  {\n    $group: {\n      _id: \"$City\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      City: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2829,
        "db_id": "sports_competition",
        "nl_queries": [
            "how many different positions are there?",
            "How many different position for players are listed?",
            "How many different positions of players are there?",
            "Count the number of distinct player positions.",
            "What is the total number of unique positions for players in the club?"
        ],
        "ref_sql": "SELECT count(DISTINCT POSITION) FROM player",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $group: {\n      _id: \"$player.Position\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_POSITION: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_POSITION: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3748,
        "db_id": "twitter_1",
        "nl_queries": [
            "What is the partition id of the user named \"Iron Man\".",
            "What is the partition ID associated with the user called \"Iron Man\"?",
            "Can you tell me the partition identifier for the user named \"Iron Man\"?",
            "Find the partition ID for the individual referred to as \"Iron Man\".",
            "What is the partition ID for the user whose name is \"Iron Man\"?"
        ],
        "ref_sql": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'",
        "MQL": "db.user_profiles.find({ \"name\": \"Iron Man\" }, { \"partitionid\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1168,
        "db_id": "tvshow",
        "nl_queries": [
            "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "In which countries can you find TV channels airing cartoons authored by Todd Casey?",
            "Can you list the countries that broadcast cartoons created by Todd Casey?",
            "Which countries have television stations featuring cartoons written by Todd Casey?"
        ],
        "ref_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $match: {\n      \"Cartoon.Written_by\": \"Todd Casey\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Country\"\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2728,
        "db_id": "body_builder",
        "nl_queries": [
            "How many persons are not body builders?",
            "How many individuals are there who are not involved in body building?",
            "What is the total count of persons who do not participate in body building?",
            "Can you tell me the number of people who aren't body builders?",
            "How many people exist that do not belong to the body builder group?"
        ],
        "ref_sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"body_builder\": { $size: 0 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 805,
        "db_id": "debate",
        "nl_queries": [
            "Show the party that has the most people.",
            "Which political party has the highest number of members?",
            "Identify the party with the largest population of people.",
            "What is the party that consists of the most individuals?",
            "Find the political party that showcases the greatest number of people."
        ],
        "ref_sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Party\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Party: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 706,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the names of members whose country is \"United States\" or \"Canada\".",
            "Retrieve the names of members located in either the United States or Canada.",
            "List the names of members who are from the United States or Canada.",
            "Display the names of participants whose country is either the United States or Canada.",
            "Provide the names of members coming from Canada or the United States."
        ],
        "ref_sql": "SELECT Name FROM member WHERE Country = \"United States\" OR Country = \"Canada\"",
        "MQL": "db.college.aggregate([\n  {\n    $unwind: \"$member\"\n  },\n  {\n    $match: {\n      \"member.Country\": { $in: [\"United States\", \"Canada\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$member.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 224,
        "db_id": "match_season",
        "nl_queries": [
            "Show the distinct position of players from college UCLA or Duke.",
            "What are the different positions of players from UCLA or Duke colleges?",
            "List all unique player positions for those who attended either UCLA or Duke.",
            "What distinct positions can be found among players from UCLA and Duke?",
            "Identify the different player positions associated with UCLA or Duke college alumni."
        ],
        "ref_sql": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\"",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"match_season.College\": \"UCLA\" },\n        { \"match_season.College\": \"Duke\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$match_season.Position\"\n    }\n  },\n  {\n    $project: {\n      Position: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 450,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show all transaction types.",
            "What are the different types of transactions?",
            "List all the available transaction types.",
            "Can you provide the various types of transactions?",
            "What types of transactions are recorded?"
        ],
        "ref_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "MQL": "db.Accounts.aggregate([\n  {\n    $unwind: \"$Financial_Transactions\"\n  },\n  {\n    $project: {\n      transaction_type: \"$Financial_Transactions.transaction_type\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$transaction_type\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      transaction_type: \"$_id\"\n    }\n  }\n])\n"
    },
    {
        "record_id": 59,
        "db_id": "music_4",
        "nl_queries": [
            "List the age of all music artists.",
            "What are the ages of all music artists?",
            "Provide a list of the ages of every artist in the music database.",
            "What ages do all the music artists have?",
            "Retrieve the ages of all the artists from the music collection."
        ],
        "ref_sql": "SELECT Age FROM artist",
        "MQL": "db.artist.find({}, { Age: 1, _id: 0 })\n"
    },
    {
        "record_id": 2207,
        "db_id": "museum_visit",
        "nl_queries": [
            "What are the average and maximum number of tickets bought in all visits?",
            "What is the average number of tickets sold and the highest number of tickets purchased in all museum visits?",
            "Can you provide the average and maximum ticket counts from all visitor records?",
            "How many tickets were, on average, bought during visits, and what is the largest number of tickets sold in a single visit?",
            "Determine the average ticket purchases and the peak number of tickets bought during all visits to the museum."
        ],
        "ref_sql": "SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit",
        "MQL": "db.visitor.aggregate([\n  {\n    $unwind: \"$visit\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_num_of_ticket: { $avg: \"$visit.Num_of_Ticket\" },\n      max_num_of_ticket: { $max: \"$visit.Num_of_Ticket\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_num_of_ticket: 1,\n      max_num_of_ticket: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2012,
        "db_id": "gymnast",
        "nl_queries": [
            "List the total points of gymnasts in descending order of floor exercise points.",
            "What are the total points of gymnasts, ordered by their floor exercise points descending?",
            "Retrieve the total points scored by gymnasts, sorted in order of their floor exercise points from highest to lowest.",
            "Provide a list of total points for each gymnast, arranged by their floor exercise scores in descending order.",
            "Can you show the total points achieved by gymnasts, sorted in descending order based on their scores in the floor exercise?"
        ],
        "ref_sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $sort: {\n      \"gymnast.Floor_Exercise_Points\": -1\n    }\n  },\n  {\n    $project: {\n      Total_Points: \"$gymnast.Total_Points\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 515,
        "db_id": "restaurant_1",
        "nl_queries": [
            "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
            "Retrieve the first and last names of all female students who are older than 18 and are not majoring in 600.",
            "Provide a list of first and last names for female students aged over 18 and not enrolled in major 600.",
            "Can you show me the first and last names of female students exceeding 18 years old who do not have a major of 600?",
            "List the first names and last names of female students who are above 18 years old and not studying major 600."
        ],
        "ref_sql": "SELECT Fname , Lname FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F';",
        "MQL": "db.Student.find({\n  \"Sex\": \"F\",\n  \"Age\": { $gt: 18 },\n  \"Major\": { $ne: 600 }\n}, { \"Fname\": 1, \"LName\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1921,
        "db_id": "riding_club",
        "nl_queries": [
            "Show the names of players and names of their coaches in descending order of the votes of players.",
            "List the players along with the names of their coaches sorted by the players' votes in descending order.",
            "Display player names alongside their coaches, arranged in order of votes received by the players, from highest to lowest.",
            "Provide a list of players and their corresponding coaches, sorted based on player votes in decreasing order.",
            "Show a ranking of players with their coaches' names, listed in descending order according to the number of votes each player received."
        ],
        "ref_sql": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC",
        "MQL": "db.player.aggregate([\n  {\n    $lookup: {\n      from: \"club\",\n      let: { playerId: \"$Player_ID\" },\n      pipeline: [\n        { $unwind: \"$coach\" },\n        { $unwind: \"$coach.player_coach\" },\n        { $match: { $expr: { $eq: [\"$coach.player_coach.Player_ID\", \"$$playerId\"] } } },\n        { $project: { _id: 0, Coach_name: \"$coach.Coach_name\" } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  { $project: { _id: 0, Player_name: 1, Coach_name: \"$Docs1.Coach_name\" } },\n  { $sort: { Votes: -1 } }\n]);\n"
    },
    {
        "record_id": 51,
        "db_id": "restaurant_1",
        "nl_queries": [
            "Which Advisor has most of students? List advisor and the number of students.",
            "Who is the advisor with the highest number of students? Please provide the advisor's name along with the student count.",
            "Identify the advisor that oversees the most students. Include both the advisor's name and the total number of students.",
            "Which advisor has the largest student count? Show the name of the advisor and the corresponding number of students.",
            "Find the advisor with the greatest number of students. List this advisor's name and the number of students under their supervision."
        ],
        "ref_sql": "SELECT Advisor , count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Advisor: \"$_id\",\n      count: 1\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  }\n])\n"
    },
    {
        "record_id": 149,
        "db_id": "world_1",
        "nl_queries": [
            "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "List the country codes for nations that do not have English as an official language and are not governed as Republics.",
            "Provide the codes of countries where English is not spoken and the government form is anything other than a Republic.",
            "What are the country codes of nations that lack English language representation and whose government structures are not Republics?"
        ],
        "ref_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "MQL": "db.country.find({\n  $and: [\n    {\n      \"countrylanguage\": {\n        $not: {\n          $elemMatch: {\n            Language: \"English\"\n          }\n        }\n      }\n    },\n    {\n      GovernmentForm: {\n        $ne: \"Republic\"\n      }\n    }\n  ]\n}, {\n  Code: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2674,
        "db_id": "dorm_1",
        "nl_queries": [
            "How many dorms are there?",
            "How many dorms are in the database?",
            "What is the total number of dormitories?",
            "Can you tell me the number of dorms stored in the database?",
            "How many dormitory facilities are present?"
        ],
        "ref_sql": "SELECT count(*) FROM dorm",
        "MQL": "db.Dorm.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1523,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Which template type code is used by most number of documents?",
            "Return the code of the template type that is most commonly used in documents.",
            "What is the template type code that appears in the highest number of documents?",
            "Identify the template type code most frequently utilized across documents.",
            "Which code represents the template type most commonly found in the documents?"
        ],
        "ref_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Template_Type_Code\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Template_Type_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 548,
        "db_id": "network_1",
        "nl_queries": [
            "Show the ID of the high schooler named Kyle.",
            "What is Kyle's id?",
            "What is the ID for the high school student named Kyle?",
            "Provide the student ID of Kyle.",
            "Retrieve the ID associated with Kyle from the high schooler database."
        ],
        "ref_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $match: {\n      name: \"Kyle\"\n    }\n  },\n  {\n    $project: {\n      ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1704,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show first name and id for all customers with at least 2 accounts.",
            "What are the first names and ids for customers who have two or more accounts?",
            "List the first names and IDs of customers who hold a minimum of two accounts.",
            "Provide the first names and identifiers of customers with two or more associated accounts.",
            "Retrieve the first names and customer IDs for individuals that have at least 2 accounts."
        ],
        "ref_sql": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "MQL": "db.Customers.aggregate([\n  {\n    $project: {\n      customer_first_name: 1,\n      customer_id: 1,\n      count_Accounts: {\n        $size: \"$Accounts\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Accounts: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      customer_first_name: 1,\n      customer_id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1672,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the visit date and details of the visitor whose detail is 'Vincent'?",
            "Find the visit date and details of the tourist whose detail is 'Vincent'",
            "Can you provide the visit dates and details for the visitor labeled 'Vincent'?",
            "Show me the visit information, including dates and details, for the tourist named 'Vincent'.",
            "What are the dates and details of visits recorded for the individual identified as 'Vincent'?"
        ],
        "ref_sql": "SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\"",
        "MQL": "db.Visitors.aggregate([\n  {\n    $match: {\n      Tourist_Details: \"Vincent\"\n    }\n  },\n  {\n    $unwind: \"$Visits\"\n  },\n  {\n    $project: {\n      Visit_Date: \"$Visits.Visit_Date\",\n      Visit_Details: \"$Visits.Visit_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2922,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the number of different states which banks are located at.",
            "In how many different states are banks located?",
            "How many unique states have bank branches?",
            "What is the total number of states with bank locations?",
            "Count the number of states where banks operate."
        ],
        "ref_sql": "SELECT count(DISTINCT state) FROM bank",
        "MQL": "db.bank.aggregate([\n  {\n    $group: {\n      _id: \"$state\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_state\"\n  }\n]);\n"
    },
    {
        "record_id": 1191,
        "db_id": "products_for_hire",
        "nl_queries": [
            "How many bookings did each customer make? List the customer id, first name, and the count.",
            "Can you provide the number of bookings for each customer, along with their customer ID and first name?",
            "What is the total number of bookings made by each customer? Include their customer ID and first name in the results.",
            "List each customer with their corresponding customer ID and first name, and indicate how many bookings they have made.",
            "Show the customer ID and first name for each client, along with the total count of their bookings."
        ],
        "ref_sql": "SELECT T1.customer_id , T1.first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
        "MQL": "db.Discount_Coupons.aggregate([\n  { $unwind: \"$Customers\" },\n  { $unwind: \"$Customers.Bookings\" },\n  {\n    $group: {\n      _id: {\n        customer_id: \"$Customers.customer_id\",\n        first_name: \"$Customers.first_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_id: \"$_id.customer_id\",\n      first_name: \"$_id.first_name\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1885,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Show the date and id of the transcript with at least 2 course results.",
            "What is the date and id of the transcript with at least 2 courses listed?",
            "Retrieve the date and ID of transcripts that contain two or more course entries.",
            "List the date and identifier of the transcript that has a minimum of two courses documented.",
            "What are the date and ID of the transcript featuring at least two registered course results?"
        ],
        "ref_sql": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
        "MQL": "db.Transcripts.aggregate([\n  {\n    $project: {\n      transcript_date: \"$transcript_date\",\n      transcript_id: \"$transcript_id\",\n      count_Transcript_Contents: {\n        $size: \"$Transcript_Contents\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Transcript_Contents: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      transcript_date: 1,\n      transcript_id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3973,
        "db_id": "driving_school",
        "nl_queries": [
            "How much in total does customer with first name as Carole and last name as Bernhard paid?",
            "What is the total amount of moeny paid by the customer Carole Bernhard?",
            "What is the total sum paid by the customer named Carole Bernhard?",
            "Can you tell me how much money Carole Bernhard has paid in total?",
            "How much has the customer with the first name Carole and last name Bernhard spent altogether?"
        ],
        "ref_sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.first_name\": \"Carole\",\n      \"Customers.last_name\": \"Bernhard\"\n    }\n  },\n  {\n    $unwind: \"$Customers.Customer_Payments\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_amount_payment: {\n        $sum: \"$Customers.Customer_Payments.amount_payment\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_amount_payment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3146,
        "db_id": "document_management",
        "nl_queries": [
            "What is the type of the document named \"David CV\"?",
            "Return the type code of the document named \"David CV\".",
            "Can you tell me the document type for \"David CV\"?",
            "What type code corresponds to the document titled \"David CV\"?",
            "Identify the type of the document called \"David CV\"."
        ],
        "ref_sql": "SELECT document_type_code FROM documents WHERE document_name = \"David CV\"",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.document_name\": \"David CV\"\n    }\n  },\n  {\n    $project: {\n      document_type_code: \"$Documents.document_type_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4017,
        "db_id": "storm_record",
        "nl_queries": [
            "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
            "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.",
            "Calculate the overall number of fatalities and the total damage in millions for storms surpassing the average max speed.",
            "Provide the total fatalities and the damage in millions for storms whose maximum speed exceeds the average.",
            "What are the total deaths and the damage amount, in millions, caused by storms with a max speed higher than the average?"
        ],
        "ref_sql": "SELECT sum(number_deaths) , sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)",
        "MQL": "db.storm.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_max_speed: { $avg: \"$Max_speed\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"storm\",\n      let: { avg_max_speed: \"$avg_max_speed\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$Max_speed\", \"$$avg_max_speed\"] }\n          }\n        },\n        {\n          $group: {\n            _id: null,\n            sum_number_deaths: { $sum: \"$Number_Deaths\" },\n            sum_damage_millions_USD: { $sum: \"$Damage_millions_USD\" }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_number_deaths: \"$Docs1.sum_number_deaths\",\n      sum_damage_millions_USD: \"$Docs1.sum_damage_millions_USD\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1351,
        "db_id": "department_management",
        "nl_queries": [
            "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
            "List the department names along with their employee counts for those managed by heads in temporary acting positions.",
            "Provide the names and employee numbers of departments where the heads are currently working in an acting capacity marked as 'Yes'.",
            "Retrieve the names and number of employees of departments overseen by heads with a temporary acting status of 'Yes'.",
            "Display the names and the number of employees in departments managed by heads whose roles are temporarily acting."
        ],
        "ref_sql": "SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'",
        "MQL": "db.department.find({\n  \"management.temporary_acting\": \"Yes\"\n}, {\n  \"Name\": 1,\n  \"Num_Employees\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 742,
        "db_id": "course_teach",
        "nl_queries": [
            "Show the name of teachers aged either 32 or 33?",
            "What are the names of the teachers who are aged either 32 or 33?",
            "List the names of teachers who are 32 years old or 33 years old.",
            "Can you provide the names of the teachers aged 32 or 33?",
            "What are the names of the teachers with ages of either 32 or 33?"
        ],
        "ref_sql": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "MQL": "db.teacher.find(\n  { Age: { $in: [\"32\", \"33\"] } },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1434,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "How many assets can each parts be used in? List the part name and the number.",
            "For each part, how many assets are they utilized in? Provide the part name along with the respective count.",
            "Can you list the number of assets associated with each part, including both the part name and the count?",
            "Determine how many different assets each part is used for, and show the part name together with the asset count.",
            "What is the asset count for each part? Please present this alongside the corresponding part name."
        ],
        "ref_sql": "SELECT T1.part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name",
        "MQL": "db.Parts.aggregate([\n  {\n    $unwind: \"$Asset_Parts\"\n  },\n  {\n    $group: {\n      _id: \"$part_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Parts\",\n      localField: \"_id\",\n      foreignField: \"part_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      part_name: \"$Docs1.part_name\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2182,
        "db_id": "storm_record",
        "nl_queries": [
            "Show the average and maximum damage for all storms with max speed higher than 1000.",
            "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
            "Retrieve the average and highest damage amounts for storms with maximum speeds greater than 1000.",
            "What are the average and peak damage values for storms that exceeded a maximum speed of 1000?",
            "Provide the average and maximum damages in millions for all storms with a max speed over 1000."
        ],
        "ref_sql": "SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000",
        "MQL": "db.storm.aggregate([\n  {\n    $match: {\n      Max_speed: { $gt: 1000 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_damage_millions_USD: { $avg: \"$Damage_millions_USD\" },\n      max_damage_millions_USD: { $max: \"$Damage_millions_USD\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_damage_millions_USD: 1,\n      max_damage_millions_USD: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3782,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Which type of policy is most frequently used? Give me the policy type code.",
            "Find the type code of the most frequently used policy.",
            "What is the policy type code for the most commonly used insurance policy?",
            "Identify the type code associated with the most popular policy among customers.",
            "Can you tell me the type code for the policy that is utilized the most?"
        ],
        "ref_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $group: {\n      _id: \"$Policies.Policy_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Policy_Type_Code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3848,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the id of the reviewer whose name has substring “Mike”?",
            "What is the id of the reviewer whose name includes the word \"Mike\"?",
            "What is the reviewer ID for anyone whose name contains \"Mike\"?",
            "Could you provide the ID of the reviewer with \"Mike\" in their name?",
            "What is the ID of the reviewer whose name features the substring \"Mike\"?"
        ],
        "ref_sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $match: {\n      name: {\n        $regex: \"Mike\"\n      }\n    }\n  },\n  {\n    $project: {\n      rID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3833,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "List the project details of the projects launched by the organisation",
            "What are the details for the projects which were launched by the organization with the most projects?",
            "Provide the details of the projects initiated by the organization with the highest number of projects.",
            "What are the details of the projects conducted by the organization that has the most active projects?",
            "Show me the project information for the organization that is managing the largest number of projects."
        ],
        "ref_sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $group: {\n      _id: \"$Organisations.organisation_id\",\n      count: {\n        $sum: 1\n      },\n      projects: {\n        $push: \"$Organisations.Projects\"\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$projects\"\n  },\n  {\n    $project: {\n      project_details: \"$projects.project_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3028,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
            "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?",
            "Can you provide the date, average temperature, and mean humidity for the three days with the highest maximum gust speeds?",
            "What are the date, mean temperature, and humidity levels for the three days that experienced the strongest gust winds?",
            "Please list the date, average temperature, and mean humidity for the top three days characterized by the highest gust speed readings."
        ],
        "ref_sql": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "MQL": "db.weather.aggregate([\n  {\n    $sort: {\n      max_gust_speed_mph: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      date: 1,\n      mean_temperature_f: 1,\n      mean_humidity: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 271,
        "db_id": "tracking_orders",
        "nl_queries": [
            "List the name of all the distinct customers who have orders with status \"Packing\".",
            "Which customers have orders with status \"Packing\"? Give me the customer names.",
            "Provide a list of unique customer names whose orders are currently in the \"Packing\" status.",
            "Who are the customers with orders marked as \"Packing\"? Please provide their names.",
            "Identify all distinct customers that have orders that are in the \"Packing\" state."
        ],
        "ref_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $match: {\n      \"Orders.order_status\": \"Packing\"\n    }\n  },\n  {\n    $project: {\n      customer_name: \"$customer_name\",\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_name\"\n    }\n  },\n  {\n    $project: {\n      customer_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 558,
        "db_id": "entrepreneur",
        "nl_queries": [
            "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
            "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
            "Identify the investors who have backed both entrepreneurs that asked for over 140000 and those who asked for less than 120000.",
            "List the investors involved with entrepreneurs seeking more than 140000 and those looking for less than 120000.",
            "Find the investors that supported entrepreneurs requesting funds greater than 140000 as well as those requesting under 120000."
        ],
        "ref_sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"entrepreneur.Money_Requested\": {\n            $gt: 140000\n          }\n        },\n        {\n          \"entrepreneur.Money_Requested\": {\n            $lt: 120000\n          }\n        }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$entrepreneur.Investor\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Investor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3111,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "Which documents have more than 1 draft copies? List document id and number of draft copies.",
            "Identify the documents that contain over one draft copy, providing their document IDs and the total number of draft copies.",
            "Which documents possess more than one draft copy? Please provide the document ID along with the count of draft copies.",
            "List the document IDs of documents that have multiple draft copies, including the count of those copies.",
            "Find all documents that are associated with more than one draft copy and report their document IDs and the respective counts of draft copies."
        ],
        "ref_sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  { $unwind: \"$Documents\" },\n  { $unwind: \"$Documents.Document_Drafts\" },\n  { $unwind: \"$Documents.Document_Drafts.Draft_Copies\" },\n  { $group: {\n      _id: \"$Documents.document_id\",\n      count: { $sum: 1 }\n    }\n  },\n  { $match: { count: { $gt: 1 } } },\n  { $project: {\n      document_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 566,
        "db_id": "tvshow",
        "nl_queries": [
            "List the language used least number of TV Channel. List language and number of TV Channel.",
            "What are the languages used by the least number of TV Channels and how many channels use it?",
            "Identify the language used by the fewest TV channels along with the number of channels that use it.",
            "What is the language associated with the least number of TV channels, and how many channels use that language?",
            "Enumerate the languages that have the smallest number of TV channels and specify the count of those channels."
        ],
        "ref_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $group: {\n      _id: \"$Language\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: 1 }\n  },\n  {\n    $group: {\n      _id: \"$count\",\n      languages: { $push: \"$_id\" }\n    }\n  },\n  {\n    $sort: { _id: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$languages\"\n  },\n  {\n    $project: {\n      Language: \"$languages\",\n      count: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3590,
        "db_id": "browser_web",
        "nl_queries": [
            "List the name of browsers in descending order by market share.",
            "Retrieve the names of browsers sorted by their market share in descending order.",
            "Display browser names ordered from highest to lowest market share.",
            "Show the list of browser names, arranged by market share in descending order.",
            "Provide the names of browsers ranked by their market share, starting with the highest."
        ],
        "ref_sql": "SELECT name FROM browser ORDER BY market_share DESC",
        "MQL": "db.browser.find({}, { \"name\": 1, \"_id\": 0 }).sort({ \"market_share\": -1 });\n"
    },
    {
        "record_id": 868,
        "db_id": "wrestler",
        "nl_queries": [
            "Show the reign and days held of wrestlers.",
            "What are the reigns and days held of all wrestlers?",
            "List the reign periods and the number of days held for each wrestler.",
            "Provide the reigns and the days held for all wrestlers in the database.",
            "What are the reign lengths and corresponding days held by each wrestler?"
        ],
        "ref_sql": "SELECT Reign , Days_held FROM wrestler",
        "MQL": "db.wrestler.find({}, { Reign: 1, Days_held: 1, _id: 0 });\n"
    },
    {
        "record_id": 3060,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the average and minimum price of the rooms in different decor.",
            "What is the average minimum and price of the rooms for each different decor.",
            "What are the average and minimum room prices categorized by their decor styles?",
            "Calculate the average and lowest prices of rooms for each type of decor.",
            "Provide the average and minimum base prices of rooms grouped by their decorative themes."
        ],
        "ref_sql": "SELECT decor , avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $group: {\n      _id: \"$decor\",\n      avg_basePrice: { $avg: \"$basePrice\" },\n      min_basePrice: { $min: \"$basePrice\" }\n    }\n  },\n  {\n    $project: {\n      decor: \"$_id\",\n      avg_basePrice: 1,\n      min_basePrice: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3050,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the dates of the assessment notes?",
            "Can you provide the dates when the assessment notes were recorded?",
            "What are the recorded dates for the assessment notes?",
            "List the dates for all assessment notes available.",
            "What dates correspond to the assessment notes?"
        ],
        "ref_sql": "SELECT date_of_notes FROM Assessment_Notes",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Teachers\" },\n  { $unwind: \"$Teachers.Assessment_Notes\" },\n  { $project: { \"date_of_notes\": \"$Teachers.Assessment_Notes.date_of_notes\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1584,
        "db_id": "gymnast",
        "nl_queries": [
            "What is the most common hometown of gymnasts?",
            "Return the hometown that is most common among gymnasts.",
            "What hometown has the largest number of gymnasts?",
            "Identify the most frequently occurring hometown among gymnasts.",
            "Which hometown boasts the highest concentration of gymnasts?"
        ],
        "ref_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Hometown\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Hometown: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3373,
        "db_id": "farm",
        "nl_queries": [
            "What are the maximum and minimum number of cows across all farms.",
            "Return the maximum and minimum number of cows across all farms.",
            "Can you provide the highest and lowest counts of cows from all farms?",
            "What is the range of cows available in all farms, specifically the maximum and minimum numbers?",
            "Please show the maximum and minimum quantities of cows found across every farm."
        ],
        "ref_sql": "SELECT max(Cows) , min(Cows) FROM farm",
        "MQL": "db.farm.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Cows: { $max: \"$Cows\" },\n      min_Cows: { $min: \"$Cows\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Cows: 1,\n      min_Cows: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3015,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What are the names of customers using the most popular payment method?",
            "Find the name of the customers who use the most frequently used payment method.",
            "Who are the customers that prefer the most commonly used payment method?",
            "List the names of customers who utilize the most popular payment option.",
            "What are the names of customers associated with the payment method that is used the most?"
        ],
        "ref_sql": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$payment_method\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"_id\",\n      foreignField: \"payment_method\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      customer_name: \"$Docs1.customer_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1202,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
            "List the names of customers who make payments using credit cards and who have placed more than two orders.",
            "Retrieve the names of customers that utilize a Credit Card for payments and have a minimum of three orders.",
            "Provide the names of customers that apply the Credit Card payment method and have over two completed orders.",
            "Identify customers who use credit cards as their payment method and have more than two orders placed."
        ],
        "ref_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count(*) > 2",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      \"payment_method_code\": \"Credit Card\"\n    }\n  },\n  {\n    $project: {\n      \"customer_name\": 1,\n      \"num_orders\": { $size: \"$Customer_Orders\" }\n    }\n  },\n  {\n    $match: {\n      \"num_orders\": { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      \"customer_name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3268,
        "db_id": "game_1",
        "nl_queries": [
            "Show all video games with type Collectible card game.",
            "What are the names of all video games that are collectible cards?",
            "List all video games that fall under the category of Collectible card game.",
            "Can you provide the names of every game that is classified as a collectible card game?",
            "Give me the titles of all video games that are considered collectible cards."
        ],
        "ref_sql": "SELECT gname FROM Video_games WHERE gtype = \"Collectible card game\"",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $match: {\n      GType: \"Collectible card game\"\n    }\n  },\n  {\n    $project: {\n      GName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2163,
        "db_id": "theme_gallery",
        "nl_queries": [
            "What is the average and minimum age of all artists from United States.",
            "Return the average and minimum ages across artists from the United States.",
            "What are the average and lowest ages of artists hailing from the United States?",
            "Provide the mean and minimum ages of all artists based in the United States.",
            "Determine the average age and the least age of artists from the United States."
        ],
        "ref_sql": "SELECT avg(age) , min(age) FROM artist WHERE country = 'United States'",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      Country: \"United States\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: {\n        $avg: \"$Age\"\n      },\n      min_age: {\n        $min: \"$Age\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1,\n      min_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 68,
        "db_id": "flight_2",
        "nl_queries": [
            "What are airport names at City 'Aberdeen'?",
            "What are the names of airports in Aberdeen?",
            "Can you provide the names of the airports located in Aberdeen?",
            "What airport names exist in the city of Aberdeen?",
            "List the airport names found in Aberdeen."
        ],
        "ref_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      City: \"Aberdeen\"\n    }\n  },\n  {\n    $project: {\n      AirportName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What's the name of the course with most number of enrollments?",
            "What is the name of the course with the most students enrolled?",
            "Which course has the highest student enrollment?",
            "Identify the course with the largest number of students enrolled.",
            "What course has the maximum number of enrollments?"
        ],
        "ref_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Courses.aggregate([\n  {\n    $group: {\n      _id: \"$course_name\",\n      total_students: { $sum: { $size: \"$Student_Enrolment_Courses\" } }\n    }\n  },\n  {\n    $sort: { total_students: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      course_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 875,
        "db_id": "riding_club",
        "nl_queries": [
            "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
            "List all residences that contain both male and female players.",
            "Identify the residences where there are players of both genders, \"M\" and \"F\".",
            "Find the locations that have at least one male player and one female player.",
            "Show which residences have players from both the male and female categories."
        ],
        "ref_sql": "SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\"",
        "MQL": "db.player.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Gender\": \"M\" },\n        { \"Gender\": \"F\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Residence\",\n      genders: { $addToSet: \"$Gender\" }\n    }\n  },\n  {\n    $match: {\n      genders: { $all: [\"M\", \"F\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Residence: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1101,
        "db_id": "film_rank",
        "nl_queries": [
            "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
            "What are the years of film market estimation for the market of Japan, ordered by year descending?",
            "Can you provide the years for film market estimations in Japan, sorted from the most recent to the oldest?",
            "What years are recorded for film market estimations in the country of Japan, listed in descending order?",
            "Please share the years of film market estimations for Japan, arranged in reverse chronological order."
        ],
        "ref_sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = \"Japan\" ORDER BY T1.Year DESC",
        "MQL": "db.market.aggregate([\n  {\n    $match: {\n      Country: \"Japan\"\n    }\n  },\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $sort: {\n      \"film_market_estimation.Year\": -1\n    }\n  },\n  {\n    $project: {\n      Year: \"$film_market_estimation.Year\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 136,
        "db_id": "music_4",
        "nl_queries": [
            "Please show the categories of the music festivals and the count.",
            "Return the number of music festivals of each category.",
            "List the different categories of music festivals along with the number of occurrences for each.",
            "Provide the count of music festivals grouped by their respective categories.",
            "Show each music festival category and how many festivals exist within each category."
        ],
        "ref_sql": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $unwind: \"$volume.music_festival\"\n  },\n  {\n    $group: {\n      _id: \"$volume.music_festival.Category\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Category: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2426,
        "db_id": "document_management",
        "nl_queries": [
            "Find the number of users in each role.",
            "What are the different role codes for users, and how many users have each?",
            "How many users are assigned to each role in the system?",
            "List the role codes for users along with the total count of users for each role.",
            "Please provide the user count for every role available."
        ],
        "ref_sql": "SELECT count(*) , role_code FROM users GROUP BY role_code",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Users\"\n  },\n  {\n    $group: {\n      _id: \"$role_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      role_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3380,
        "db_id": "film_rank",
        "nl_queries": [
            "What are the maximum and minimum number of cities in all markets.",
            "Return the maximum and minimum number of cities across all markets.",
            "What is the highest and lowest number of cities recorded in the markets?",
            "Provide the maximum and minimum counts of cities across all market entries.",
            "Can you tell me the highest and lowest city counts from all markets?"
        ],
        "ref_sql": "SELECT max(Number_cities) , min(Number_cities) FROM market",
        "MQL": "db.market.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Number_cities: { $max: \"$Number_cities\" },\n      min_Number_cities: { $min: \"$Number_cities\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Number_cities: 1,\n      min_Number_cities: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4266,
        "db_id": "car_1",
        "nl_queries": [
            "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "What is the total number of car models for each car maker? Please provide just the count along with the maker's full name.",
            "Can you tell me how many models each car manufacturer has produced? I only need the count and the full name of the manufacturer.",
            "Give me the count of car models produced by every car maker, including only the maker's full name in the results.",
            "How many different car models does each car maker create? Only show me the count and the full manufacturer name."
        ],
        "ref_sql": "select count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $group: {\n      _id: \"$countries.car_makers.FullName\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FullName: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 661,
        "db_id": "match_season",
        "nl_queries": [
            "Show all team names.",
            "What are the names of all teams?",
            "List all the names of the teams.",
            "Can you provide the names of every team?",
            "Retrieve a complete list of team names."
        ],
        "ref_sql": "SELECT Name FROM Team",
        "MQL": "db.team.find({}, { Name: 1, _id: 0 });\n"
    },
    {
        "record_id": 3119,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "List all document ids with at least two paragraphs.",
            "What are the ids of documents that have 2 or more paragraphs?",
            "Provide the IDs of documents that contain two or more paragraphs.",
            "Show me all document IDs that have at least two paragraphs.",
            "Retrieve the document IDs for those documents that include a minimum of two paragraphs."
        ],
        "ref_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $project: {\n      Document_ID: \"$Templates.Documents.Document_ID\",\n      count_Paragraph: {\n        $size: \"$Templates.Documents.Paragraphs\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Paragraph: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Document_ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 247,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the first name of students who have cat or dog pet.",
            "What are the first names of every student who has a cat or dog as a pet?",
            "List the first names of students who own cats or dogs.",
            "Provide the first names of all students that have a cat or a dog as their pet.",
            "What are the first names of students with either a cat or a dog?"
        ],
        "ref_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.PetType\": {\n        $in: [\"cat\", \"dog\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1394,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of the instructors who taught C Programming course before.",
            "What are the names of instructors who have taught C Programming courses?",
            "Who are the instructors that have lectured in the C Programming course?",
            "List the names of the educators who have taught C Programming in the past.",
            "Can you provide the names of instructors who have conducted classes for C Programming?"
        ],
        "ref_sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $match: {\n      \"course.course_id\": \"C Programming\"\n    }\n  },\n  {\n    $project: {\n      instructors: {\n        $map: {\n          input: \"$course.section\",\n          as: \"section\",\n          in: \"$$section.teaches\"\n        }\n      }\n    }\n  },\n  {\n    $unwind: \"$instructors\"\n  },\n  {\n    $unwind: \"$instructors\"\n  },\n  {\n    $lookup: {\n      from: \"instructor\",\n      localField: \"instructors.ID\",\n      foreignField: \"ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      name: \"$Docs1.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 497,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the ids of all the faculty members who participate in an activity and advise a student.",
            "What are ids of the faculty members who not only participate in an activity but also advise a student.",
            "Provide the IDs of faculty members who both advise students and take part in activities.",
            "List the IDs of faculty who are involved in activities and also serve as advisors to students.",
            "What are the IDs of faculty members that are engaged in activities while advising students?"
        ],
        "ref_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "MQL": "db.Faculty.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"FacID\",\n      foreignField: \"Advisor\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Faculty_Participates_in.0\": { $exists: true },\n      \"Docs1.0\": { $exists: true }\n    }\n  },\n  {\n    $project: {\n      FacID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2427,
        "db_id": "college_2",
        "nl_queries": [
            "Find the number of courses provided in each semester and year.",
            "How many courses are provided in each semester and year?",
            "What is the total number of courses offered in each semester and year?",
            "Count how many courses are available for each semester and year.",
            "Provide the count of courses that are taught in each semester and year."
        ],
        "ref_sql": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $group: {\n      _id: {\n        semester: \"$course.section.semester\",\n        year: \"$course.section.year\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      semester: \"$_id.semester\",\n      year: \"$_id.year\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3969,
        "db_id": "world_1",
        "nl_queries": [
            "What is the total surface area of the continents Asia and Europe?",
            "Give the total surface area covered by countries in Asia or Europe.",
            "What is the combined surface area of the countries within Asia and Europe?",
            "Calculate the total area covered by nations in both the Asian and European continents.",
            "What is the overall surface area associated with the countries in Asia or Europe?"
        ],
        "ref_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: {\n        $in: [\"Asia\", \"Europe\"]\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_SurfaceArea: {\n        $sum: \"$SurfaceArea\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_SurfaceArea: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4082,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Find the name and gender of the candidate who got the highest support rate.",
            "What is the name and sex of the candidate with the highest support rate?",
            "Who is the candidate with the highest support rate, and what is their name and gender?",
            "Identify the name and sex of the candidate that received the most support.",
            "What are the name and gender of the candidate that has the highest level of support?"
        ],
        "ref_sql": "SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $sort: {\n      \"candidate.Support_rate\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Sex: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2116,
        "db_id": "workshop_paper",
        "nl_queries": [
            "What is the average score of submissions?",
            "Compute the average score of submissions.",
            "What is the mean score of all submissions received?",
            "How much is the average score for the submitted works?",
            "Find the average score obtained from the submissions."
        ],
        "ref_sql": "SELECT avg(Scores) FROM submission",
        "MQL": "db.submission.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Scores: { $avg: \"$Scores\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"avg_Scores\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3637,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name of companies whose revenue is greater than the average revenue of all companies.",
            "What are the names of manufacturers with revenue greater than the average of all revenues?",
            "List the names of companies that have revenues exceeding the average revenue across all manufacturers.",
            "Which manufacturers generate revenue above the average revenue of the entire manufacturer set?",
            "Identify the companies whose revenue surpasses the average revenue of all manufacturers."
        ],
        "ref_sql": "SELECT name FROM manufacturers WHERE revenue > (SELECT avg(revenue) FROM manufacturers)",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Revenue: { $avg: \"$Revenue\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Manufacturers\",\n      let: { avg_Revenue: \"$avg_Revenue\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$Revenue\", \"$$avg_Revenue\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            Name: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: \"$Docs1.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4081,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
            "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
            "Identify the candidates with the lowest oppose rates for each gender, including their names.",
            "For every gender category, list the name and sex of the candidate who has the minimum oppose percentage.",
            "What are the names and sexes of the candidates that have the lowest oppose rates within each sex group?"
        ],
        "ref_sql": "SELECT t1.name , t1.sex , min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $group: {\n      _id: \"$Sex\",\n      min_oppose_rate: { $min: \"$candidate.Oppose_rate\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"people\",\n      let: { sex: \"$_id\", min_oppose_rate: \"$min_oppose_rate\" },\n      pipeline: [\n        { $unwind: \"$candidate\" },\n        {\n          $match: {\n            $expr: {\n              $and: [\n                { $eq: [\"$Sex\", \"$$sex\"] },\n                { $eq: [\"$candidate.Oppose_rate\", \"$$min_oppose_rate\"] }\n              ]\n            }\n          }\n        },\n        {\n          $project: {\n            Name: 1,\n            Sex: 1,\n            min_oppose_rate: \"$candidate.Oppose_rate\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\",\n      Sex: \"$Docs1.Sex\",\n      min_oppose_rate: \"$Docs1.min_oppose_rate\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 430,
        "db_id": "college_1",
        "nl_queries": [
            "What is the first name of students who got grade C in any class?",
            "What are the first names of all students who got a grade C in a class?",
            "Can you provide the first names of students who have received a C grade in any course?",
            "List the first names of all students who earned a C in their class.",
            "What are the first names of students with a grade of C in their enrolled classes?"
        ],
        "ref_sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT.ENROLL\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.STUDENT.ENROLL.ENROLL_GRADE\": \"C\"\n    }\n  },\n  {\n    $project: {\n      STU_FNAME: \"$DEPARTMENT.STUDENT.STU_FNAME\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 781,
        "db_id": "farm",
        "nl_queries": [
            "List official names of cities in descending order of population.",
            "What are the official names of cities, ordered descending by population?",
            "Provide a list of city official names sorted by population in descending order.",
            "Retrieve the official names of cities arranged from the most populated to the least populated.",
            "Can you show me the official names of cities, organized by population from highest to lowest?"
        ],
        "ref_sql": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "MQL": "db.city.find({}, { Official_Name: 1, _id: 0 }).sort({ Population: -1 });\n"
    },
    {
        "record_id": 3304,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
            "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
            "List the station IDs for those stations in San Francisco that typically have over 10 bikes available.",
            "What station IDs correspond to locations in San Francisco with an average bike count exceeding 10?",
            "Identify the IDs of San Francisco bike stations that often maintain more than 10 bikes for availability."
        ],
        "ref_sql": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "MQL": "db.station.aggregate([\n  {\n    $match: { city: \"San Francisco\" }\n  },\n  {\n    $unwind: \"$status\"\n  },\n  {\n    $group: {\n      _id: \"$id\",\n      avg_bikes_available: { $avg: \"$status.bikes_available\" }\n    }\n  },\n  {\n    $match: { avg_bikes_available: { $gt: 10 } }\n  },\n  {\n    $project: {\n      id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1334,
        "db_id": "party_people",
        "nl_queries": [
            "Show member names that are not in the Progress Party.",
            "Which member names corresponding to members who are not in the Progress Party?",
            "List the names of members who do not belong to the Progress Party.",
            "Provide the names of members affiliated with parties other than the Progress Party.",
            "Identify the names of members that are not associated with the Progress Party."
        ],
        "ref_sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name != \"Progress Party\"",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $match: {\n      \"party.Party_name\": {\n        $ne: \"Progress Party\"\n      }\n    }\n  },\n  {\n    $unwind: \"$party.member\"\n  },\n  {\n    $project: {\n      Member_Name: \"$party.member.Member_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2826,
        "db_id": "orchestra",
        "nl_queries": [
            "How many different nationalities do conductors have?",
            "Count the number of different nationalities of conductors.",
            "What is the total number of unique nationalities represented by conductors?",
            "Determine how many distinct nationalities exist among the conductors.",
            "Can you tell me the count of different nationalities of conductors?"
        ],
        "ref_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "MQL": "db.conductor.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Nationality: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Nationality: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2276,
        "db_id": "csu_1",
        "nl_queries": [
            "Find the name of the campuses opened before 1800.",
            "What campuses opened before 1800?",
            "List the campuses that were established before the year 1800.",
            "Which campuses were opened prior to 1800?",
            "Provide the names of the campuses that started operating before 1800."
        ],
        "ref_sql": "SELECT campus FROM campuses WHERE YEAR < 1800",
        "MQL": "db.Campuses.find({\n  Year: { $lt: 1800 }\n}, {\n  Campus: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 417,
        "db_id": "tracking_orders",
        "nl_queries": [
            "List the names of all distinct products in alphabetical order.",
            "Sort all the distinct products in alphabetical order.",
            "Retrieve the unique names of products arranged in alphabetical order.",
            "Provide a sorted list of all distinct product names.",
            "Show all unique product names sorted from A to Z."
        ],
        "ref_sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_name\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      product_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2279,
        "db_id": "csu_1",
        "nl_queries": [
            "Report the name of all campuses in Los Angeles county.",
            "What campuses are located in the county of Los Angeles?",
            "List the campuses in Los Angeles county.",
            "What campuses are in Los Angeles county?",
            "Identify all campuses situated in Los Angeles County."
        ],
        "ref_sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\"",
        "MQL": "db.Campuses.find({ County: \"Los Angeles\" }, { Campus: 1, _id: 0 });\n"
    },
    {
        "record_id": 4154,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What are all the characteristic names of product \"sesame\"?",
            "Return the characteristic names of the 'sesame' product.",
            "List all characteristic names corresponding to the product named \"sesame.\"",
            "Could you provide the names of characteristics for the product called 'sesame'?",
            "What are the characteristic names associated with the 'sesame' product?"
        ],
        "ref_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"sesame\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Ref_Characteristic_Types\",\n      let: { productCharacteristics: \"$Products.Product_Characteristics\" },\n      pipeline: [\n        { $unwind: \"$Characteristics\" },\n        {\n          $match: {\n            $expr: {\n              $in: [\"$Characteristics.characteristic_id\", \"$$productCharacteristics.characteristic_id\"]\n            }\n          }\n        },\n        {\n          $project: {\n            characteristic_name: \"$Characteristics.characteristic_name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      characteristic_name: \"$Docs1.characteristic_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3152,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
            "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
            "List the names and gender classifications of dormitories that have a capacity exceeding 300 or below 100.",
            "What are the names and gender types of dormitories with a capacity greater than 300 or less than 100?",
            "Identify the dorm names and their corresponding gender types for those with a capacity above 300 or under 100."
        ],
        "ref_sql": "SELECT dorm_name , gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      $or: [\n        { student_capacity: { $gt: 300 } },\n        { student_capacity: { $lt: 100 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      gender: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3435,
        "db_id": "store_product",
        "nl_queries": [
            "Find the list of page size which have more than 3 product listed",
            "What is the maximum page size for everything that has more than 3 products listed?",
            "What are the page sizes that have more than three listed products?",
            "Identify the highest page size among products that each have over three listings.",
            "Can you provide the maximum page size for any product category that includes more than three products?"
        ],
        "ref_sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3",
        "MQL": "db.product.aggregate([\n  {\n    $group: {\n      _id: \"$max_page_size\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 3 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_page_size: { $max: \"$_id\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_page_size: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2468,
        "db_id": "car_1",
        "nl_queries": [
            "How many continents are there?",
            "What is the number of continents?",
            "What is the total count of continents recorded?",
            "Please tell me the number of continents.",
            "How many continents exist in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM CONTINENTS;",
        "MQL": "db.continents.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 397,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "What are all the distinct last names of all the engineers?",
            "Can you provide the unique last names of all maintenance engineers?",
            "What are the different last names for all the engineers working with third-party companies?",
            "List all the distinct last names of the engineers we have.",
            "Show me all the unique last names belonging to the engineers."
        ],
        "ref_sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
        "MQL": "db.Third_Party_Companies.aggregate([\n  {\n    $unwind: \"$Maintenance_Engineers\"\n  },\n  {\n    $group: {\n      _id: \"$Maintenance_Engineers.last_name\"\n    }\n  },\n  {\n    $project: {\n      last_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1252,
        "db_id": "college_1",
        "nl_queries": [
            "Find the last name and hire date of the professor who is in office DRE 102.",
            "What is the last name of the professor whose office is located in DRE 102, and when were they hired?",
            "Retrieve the last name and hiring date of the professor assigned to office DRE 102.",
            "What is the hire date and last name of the professor whose office number is DRE 102?",
            "Can you tell me the last name and the hiring date of the professor located in office DRE 102?"
        ],
        "ref_sql": "SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $match: {\n      \"PROFESSOR.PROF_OFFICE\": \"DRE 102\"\n    }\n  },\n  {\n    $project: {\n      EMP_LNAME: 1,\n      EMP_HIREDATE: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1781,
        "db_id": "hospital_1",
        "nl_queries": [
            "what is the name and position of the head whose department has least number of employees?",
            "Find the name and position of the head of the department with the least employees.",
            "Who is the head of the department that employs the fewest staff, and what is their position?",
            "Please provide the name and job title of the department head overseeing the smallest number of employees.",
            "Identify the head of the department with the least staff and indicate their position."
        ],
        "ref_sql": "SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Department\"\n  },\n  {\n    $group: {\n      _id: \"$Department.DepartmentID\",\n      employeeCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      employeeCount: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"_id\",\n      foreignField: \"Department.DepartmentID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: \"$Docs1.Name\",\n      Position: \"$Docs1.Position\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2186,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is average enrollment of colleges in the state FL?",
            "What is average number of students enrolled in Florida colleges?",
            "What is the average student enrollment at colleges located in the state of Florida?",
            "Can you provide the average number of students attending colleges within Florida?",
            "Determine the average enrollment figures for colleges in the state of FL."
        ],
        "ref_sql": "SELECT avg(enr) FROM College WHERE state = 'FL'",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      state: \"FL\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_enr: {\n        $avg: \"$enr\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_enr: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 120,
        "db_id": "music_4",
        "nl_queries": [
            "How many distinct artists do the volumes associate to?",
            "Count the number of distinct artists who have volumes.",
            "How many distinct artists have volumes?",
            "Count the number of artists who have had volumes.",
            "What is the total number of unique artists that have volumes affiliated with them?"
        ],
        "ref_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $group: {\n      _id: \"$Artist_ID\"\n    }\n  },\n  {\n    $count: \"COUNT_DISTINCT_Artist_ID\"\n  }\n]);\n"
    },
    {
        "record_id": 3835,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "Which projects have no outcome? List the project details.",
            "What are the details of the project with no outcomes?",
            "Identify the projects that lack outcomes and provide their details.",
            "List all project details that do not have any outcomes.",
            "What are the details for projects that have zero associated outcomes?"
        ],
        "ref_sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $project: {\n      project_details: \"$Organisations.Projects.project_details\",\n      count_project_outcomes: {\n        $size: \"$Organisations.Projects.Project_Outcomes\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_project_outcomes: 0\n    }\n  },\n  {\n    $project: {\n      project_details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2467,
        "db_id": "college_1",
        "nl_queries": [
            "How many students enrolled in class ACCT-211?",
            "What are the total number of students enrolled in ACCT-211?",
            "What is the total count of students who are enrolled in the class ACCT-211?",
            "How many students are registered for ACCT-211?",
            "Can you tell me the number of students that have signed up for the ACCT-211 course?"
        ],
        "ref_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $match: {\n      \"CLASS.CRS_CODE\": \"ACCT-211\"\n    }\n  },\n  {\n    $unwind: \"$CLASS.ENROLL\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4108,
        "db_id": "e_government",
        "nl_queries": [
            "Which is the email of the party that has used the services the most number of times?",
            "Return the party email that has used party services the greatest number of times.",
            "Who is the party with the highest frequency of service usage, and what is their email address?",
            "Identify the email address of the party that has availed services the most times.",
            "Which party has utilized services the greatest number of times, and what is their email?"
        ],
        "ref_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Parties.aggregate([\n  {\n    $group: {\n      _id: \"$party_email\",\n      sum_count_Party_Services: { $sum: { $size: \"$Party_Services\" } }\n    }\n  },\n  {\n    $sort: {\n      sum_count_Party_Services: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      party_email: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1872,
        "db_id": "theme_gallery",
        "nl_queries": [
            "What is the theme, date, and attendance for the exhibition in year 2004?",
            "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
            "Can you provide the theme, date, and attendance for the exhibitions held in the year 2004?",
            "List the themes, dates, and attendance figures for exhibitions that took place in 2004.",
            "Show me the themes, dates, and attendance numbers for all exhibitions from the year 2004."
        ],
        "ref_sql": "SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $match: {\n      \"exhibition.Year\": 2004\n    }\n  },\n  {\n    $unwind: \"$exhibition.exhibition_record\"\n  },\n  {\n    $project: {\n      Theme: \"$exhibition.Theme\",\n      Date: \"$exhibition.exhibition_record.Date\",\n      Attendance: \"$exhibition.exhibition_record.Attendance\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2842,
        "db_id": "school_finance",
        "nl_queries": [
            "How many donors have endowment for school named \"Glenn\"?",
            "What is the total number of unique donors contributing endowments to the school named \"Glenn\"?",
            "How many distinct endowment donors are associated with the school called \"Glenn\"?",
            "Can you tell me the count of different donors who have provided endowments for the school named \"Glenn\"?",
            "How many individual contributors have given endowments to the school known as \"Glenn\"?"
        ],
        "ref_sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Glenn\"",
        "MQL": "db.School.aggregate([\n  { $match: { \"School_name\": \"Glenn\" } },\n  { $unwind: \"$endowment\" },\n  { $group: { _id: \"$endowment.donator_name\" } },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count_DISTINCT_endowment_donator_name: \"$count\" } }\n]);\n"
    },
    {
        "record_id": 1797,
        "db_id": "race_track",
        "nl_queries": [
            "Show the name of track and the number of races in each track.",
            "What are the names of different tracks, and how many races has each had?",
            "List each track along with the total number of races held at that track.",
            "Provide the names of all tracks and indicate how many races have taken place at each one.",
            "Identify the different tracks and show the count of races associated with each of them."
        ],
        "ref_sql": "SELECT T2.name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id",
        "MQL": "db.track.aggregate([\n  {\n    $unwind: \"$race\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 656,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the names of all the products in the store.",
            "What are the names of all products?",
            "List the names of every product available for sale.",
            "What products can we find in the store? Please provide their names.",
            "Show me all the product names from the inventory."
        ],
        "ref_sql": "SELECT Name FROM Products",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Products.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3768,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the type and weight of the youngest pet.",
            "What type of pet is the youngest animal, and how much does it weigh?",
            "What is the type and weight of the pet that is the youngest?",
            "Please provide the breed and weight of the youngest animal in the collection.",
            "Identify the youngest pet along with its type and how much it weighs."
        ],
        "ref_sql": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
        "MQL": "db.Pets.aggregate([\n  {\n    $sort: {\n      pet_age: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      PetType: 1,\n      weight: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 401,
        "db_id": "college_2",
        "nl_queries": [
            "List in alphabetic order the names of all distinct instructors.",
            "List the distinct names of the instructors, ordered by name.",
            "Provide an alphabetical listing of all unique instructor names.",
            "Generate a sorted list of distinct instructor names.",
            "Display the names of all unique instructors, arranged in alphabetical order."
        ],
        "ref_sql": "SELECT DISTINCT name FROM instructor ORDER BY name",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $group: {\n      _id: \"$instructor.name\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2912,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "How many kinds of roles are there for the staff?",
            "How many different roles are there on the project staff?",
            "What is the total number of unique roles available for staff members?",
            "Can you tell me how many distinct roles exist within the project staff?",
            "How many various roles are assigned to the staff across the projects?"
        ],
        "ref_sql": "SELECT count(DISTINCT role_code) FROM Project_Staff",
        "MQL": "db.Staff_Roles.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_role_code: { $addToSet: \"$role_code\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_role_code: { $size: \"$count_DISTINCT_role_code\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 36,
        "db_id": "chinook_1",
        "nl_queries": [
            "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
            "Find the average millisecond length of Latin and Pop tracks.",
            "What is the mean duration in milliseconds for tracks associated with the Latin or Pop genres?",
            "Calculate the average length in milliseconds of tracks that belong to the Latin and Pop music categories.",
            "Determine the average millisecond duration of tracks within the genres of Latin and Pop."
        ],
        "ref_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\"",
        "MQL": "db.Genre.aggregate([\n  {\n    $match: {\n      Name: { $in: [\"Latin\", \"Pop\"] }\n    }\n  },\n  {\n    $unwind: \"$Track\"\n  },\n  {\n    $group: {\n      _id: null,\n      AVG_Milliseconds: { $avg: \"$Track.Milliseconds\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"AVG_Milliseconds\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 239,
        "db_id": "film_rank",
        "nl_queries": [
            "Show the distinct director of films with market estimation in the year of 1995.",
            "Who are the different directors of films which had market estimation in 1995?",
            "List all unique directors of films with market estimates from the year 1995.",
            "Identify the different directors involved with films that had market estimations in 1995.",
            "What are the distinct names of directors for films assessed in the year 1995?"
        ],
        "ref_sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995",
        "MQL": "db.film.aggregate([\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $match: {\n      \"film_market_estimation.Year\": 1995\n    }\n  },\n  {\n    $group: {\n      _id: \"$Director\"\n    }\n  },\n  {\n    $project: {\n      Director: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1284,
        "db_id": "activity_1",
        "nl_queries": [
            "What are the first name and last name of Linda Smith's advisor?",
            "Who is the advisor of Linda Smith? Give me the first name and last name.",
            "Could you provide the first and last name of the advisor for Linda Smith?",
            "Who is the advisor of Linda Smith? I would like to know their first and last name.",
            "What are the names (first and last) of the advisor assigned to Linda Smith?"
        ],
        "ref_sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = \"Linda\" AND T2.lname = \"Smith\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Fname: \"Linda\",\n      LName: \"Smith\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Faculty\",\n      localField: \"Advisor\",\n      foreignField: \"FacID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Fname: \"$Docs1.Fname\",\n      Lname: \"$Docs1.Lname\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4113,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the id and color description of the products with at least 2 characteristics.",
            "What are the product ids and color descriptions for products with two or more characteristics?",
            "Retrieve the product IDs along with their color descriptions for products that possess two or more characteristics.",
            "List the IDs and color details of products having at least a pair of characteristics.",
            "What are the product IDs and corresponding color descriptions of items with two or more product characteristics?"
        ],
        "ref_sql": "SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $unwind: \"$Products.Product_Characteristics\"\n  },\n  {\n    $group: {\n      _id: {\n        product_id: \"$Products.product_id\",\n        color_description: \"$color_description\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      product_id: \"$_id.product_id\",\n      color_description: \"$_id.color_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3627,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of all instructors in computer science department",
            "What are the names of all instructors in the Comp. Sci. department?",
            "List the names of all faculty members in the computer science department.",
            "What are the names of instructors working in the Comp. Sci. department?",
            "Retrieve the names of every instructor from the Department of Computer Science."
        ],
        "ref_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $match: {\n      \"instructor.dept_name\": \"Comp. Sci.\"\n    }\n  },\n  {\n    $project: {\n      name: \"$instructor.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3787,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the price ranges of hotels?",
            "Tell me the price ranges for all the hotels.",
            "Can you provide me with the different price ranges available for hotels?",
            "What are the various price ranges that hotels offer?",
            "List the price ranges for all the available hotels."
        ],
        "ref_sql": "SELECT price_range FROM HOTELS",
        "MQL": "db.Ref_Hotel_Star_Ratings.aggregate([\n  {\n    $unwind: \"$Hotels\"\n  },\n  {\n    $project: {\n      price_range: \"$Hotels.price_range\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3551,
        "db_id": "train_station",
        "nl_queries": [
            "Show the name and service for all trains in order by time.",
            "Retrieve the names and services of all trains sorted by their departure times.",
            "List the train names along with their services in ascending order of time.",
            "Display the name and service details for each train, arranged by time.",
            "Get all trains with their corresponding services, ordered by their scheduled time."
        ],
        "ref_sql": "SELECT name , service FROM train ORDER BY TIME",
        "MQL": "db.train.find({}, { \"Name\": 1, \"Service\": 1, \"_id\": 0 }).sort({ \"Time\": 1 });\n"
    },
    {
        "record_id": 2379,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the number of checking accounts for each account name.",
            "What are the names of customers with accounts, and how many checking accounts do each of them have?",
            "Retrieve the total number of checking accounts held by each customer.",
            "List the names of all customers and indicate how many checking accounts each has.",
            "What is the count of checking accounts for every customer in the database?"
        ],
        "ref_sql": "SELECT count(*) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $project: {\n      name: 1,\n      count_checking: {\n        $size: \"$CHECKING\"\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      count: {\n        $sum: \"$count_checking\"\n      }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2129,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the average age of students who are living in the dorm with the largest capacity.",
            "What is the average age of students who are living in the dorm with the largest capacity?",
            "What is the average age of students living in the dorm with the highest capacity?",
            "Calculate the mean age of students residing in the dorm that can accommodate the most students.",
            "Determine the average age of students who live in the dorm that has the largest student capacity."
        ],
        "ref_sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT max(student_capacity) FROM dorm)",
        "MQL": "db.Dorm.aggregate([\n  {\n    $sort: { student_capacity: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      let: { dormid: \"$dormid\" },\n      pipeline: [\n        { $unwind: \"$Lives_in\" },\n        { $match: { $expr: { $eq: [\"$Lives_in.dormid\", \"$$dormid\"] } } },\n        { $project: { Age: 1 } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: { $avg: \"$Docs1.Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1293,
        "db_id": "products_for_hire",
        "nl_queries": [
            "Are the customers holding coupons with amount 500 bad or good?",
            "Do the customers with a coupon worth 500 fall into the good or bad category?",
            "What is the customer status (good or bad) for those who possess coupons of amount 500?",
            "Can you tell me whether the customers holding 500-value coupons are considered good or bad?",
            "Are customers who have a coupon amounting to 500 classified as good or bad customers?"
        ],
        "ref_sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500",
        "MQL": "db.Discount_Coupons.aggregate([\n  {\n    $match: {\n      \"coupon_amount\": 500\n    }\n  },\n  {\n    $project: {\n      \"Customers.good_or_bad_customer\": 1,\n      \"_id\": 0\n    }\n  },\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $project: {\n      \"good_or_bad_customer\": \"$Customers.good_or_bad_customer\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3229,
        "db_id": "student_1",
        "nl_queries": [
            "Find the first names of all the teachers that teach in classroom 110.",
            "Which teachers teach in classroom 110? Give me their first names.",
            "List the first names of teachers who work in classroom 110.",
            "What are the first names of teachers assigned to classroom 110?",
            "Please provide the first names of all teachers teaching in room 110."
        ],
        "ref_sql": "SELECT firstname FROM teachers WHERE classroom = 110",
        "MQL": "db.teachers.aggregate([\n  {\n    $match: {\n      Classroom: 110\n    }\n  },\n  {\n    $project: {\n      FirstName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 73,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
            "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
            "What is the claim amount for the claim that has the smallest settlement amount? Please provide both the settlement and claimed amounts.",
            "Identify the claimed amount for the claim with the lowest settled amount, including both the claim and settlement amounts.",
            "Show the amount claimed in the claim that has the least settled amount. Include both the settlement amount and the claimed amount in your response."
        ],
        "ref_sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $project: {\n      Amount_Settled: \"$Customer_Policies.Claims.Amount_Settled\",\n      Amount_Claimed: \"$Customer_Policies.Claims.Amount_Claimed\"\n    }\n  },\n  {\n    $sort: {\n      Amount_Settled: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Amount_Settled: 1,\n      Amount_Claimed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2825,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "How many distinct names are associated with all the photos?",
            "Count the number of distinct names associated with the photos.",
            "What is the total number of unique names linked to all photos?",
            "How many unique photo names exist across all tourist attractions?",
            "Determine the count of different names associated with the photos."
        ],
        "ref_sql": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Photos\"\n  },\n  {\n    $group: {\n      _id: \"$Tourist_Attractions.Photos.Name\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Name: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 104,
        "db_id": "wrestler",
        "nl_queries": [
            "What is the number of distinct teams that suffer elimination?",
            "How many different teams have had eliminated wrestlers?",
            "How many unique teams have experienced wrestler eliminations?",
            "What is the total count of different teams that have had wrestlers eliminated?",
            "Can you tell me the number of distinct teams involved in eliminations?"
        ],
        "ref_sql": "SELECT COUNT (DISTINCT team) FROM elimination",
        "MQL": "db.wrestler.aggregate([\n  {\n    $unwind: \"$Elimination\"\n  },\n  {\n    $group: {\n      _id: \"$Elimination.Team\"\n    },\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT__DISTINCT_team\": \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3165,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List the email, cell phone and home phone of all the professionals.",
            "What are the email, cell phone and home phone of each professional?",
            "Provide the email addresses, cell phone numbers, and home phone numbers for all professionals.",
            "Can you show me the email, cell, and home phone details of each professional?",
            "Retrieve the contact information, including email, cell phone, and home phone, for every professional."
        ],
        "ref_sql": "SELECT email_address , cell_number , home_phone FROM professionals",
        "MQL": "db.Professionals.find({}, {\n  email_address: 1,\n  cell_number: 1,\n  home_phone: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3075,
        "db_id": "college_2",
        "nl_queries": [
            "List the names and buildings of all departments sorted by the budget from large to small.",
            "What are the names and buildings of the deparments, sorted by budget descending?",
            "Provide the names and locations of all departments, arranged in order of their budget from highest to lowest.",
            "Show the department names along with their buildings, sorted in descending order based on the budget.",
            "What are the names and buildings of the departments, listed in order of budget from largest to smallest?"
        ],
        "ref_sql": "SELECT dept_name , building FROM department ORDER BY budget DESC",
        "MQL": "db.department.aggregate([\n  {\n    $project: {\n      dept_name: 1,\n      building: 1,\n      budget: 1\n    }\n  },\n  {\n    $sort: {\n      budget: -1\n    }\n  },\n  {\n    $project: {\n      dept_name: 1,\n      building: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3049,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the dates on which more than one revisions were made.",
            "On which days more than one revisions were made on catalogs.",
            "Identify the dates when catalogs experienced multiple revisions.",
            "What are the days on which there were over one catalog revisions?",
            "List the dates when more than a single revision was made to the catalogs."
        ],
        "ref_sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $group: {\n      _id: \"$date_of_latest_revision\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      date_of_latest_revision: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2692,
        "db_id": "flight_company",
        "nl_queries": [
            "How many flights have a velocity larger than 200?",
            "What is the total number of flights that exceed a velocity of 200?",
            "How many flights operate at a speed greater than 200?",
            "Can you tell me the count of flights with a velocity higher than 200?",
            "How many flights are there with speeds above 200?"
        ],
        "ref_sql": "SELECT count(*) FROM flight WHERE velocity > 200",
        "MQL": "db.operate_company.aggregate([\n  {\n    $unwind: \"$flight\"\n  },\n  {\n    $match: {\n      \"flight.Velocity\": { $gt: 200 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1091,
        "db_id": "chinook_1",
        "nl_queries": [
            "Show the album names, ids and the number of tracks for each album.",
            "What are the names and ids of the different albums, and how many tracks are on each?",
            "Provide a list of album names and IDs along with the count of tracks contained in each album.",
            "What are the titles and IDs of each album, and how many tracks does every album have?",
            "Display the album IDs, titles, and the total number of tracks present in each album."
        ],
        "ref_sql": "SELECT T1.Title , T2.AlbumID , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $unwind: \"$Album.Track\"\n  },\n  {\n    $group: {\n      _id: {\n        AlbumId: \"$Album.AlbumId\",\n        Title: \"$Album.Title\"\n      },\n      trackCount: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      AlbumId: \"$_id.AlbumId\",\n      Title: \"$_id.Title\",\n      COUNT: \"$trackCount\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3042,
        "db_id": "driving_school",
        "nl_queries": [
            "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
            "When did the staff member named Janessa Sawayn join the company?",
            "What is the joining date of staff member Janessa Sawayn?",
            "Can you tell me when Janessa Sawayn started working at the company?",
            "What date did Janessa Sawayn join the staff?"
        ],
        "ref_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $project: {\n      date_joined_staff: \"$Staff.date_joined_staff\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1459,
        "db_id": "storm_record",
        "nl_queries": [
            "Show the name for regions and the number of storms for each region.",
            "How many storms occured in each region?",
            "List the regions along with the total number of storms recorded for each region.",
            "What is the storm count for each region?",
            "Provide the names of the regions and the corresponding number of storms that have affected them."
        ],
        "ref_sql": "SELECT T1.region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "MQL": "db.storm.aggregate([\n  {\n    $unwind: \"$affected_region\"\n  },\n  {\n    $lookup: {\n      from: \"region\",\n      localField: \"affected_region.Region_id\",\n      foreignField: \"Region_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.Region_name\",\n      storm_count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Region_name: \"$_id\",\n      count: \"$storm_count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2329,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Which cities do more than one employee under age 30 come from?",
            "Find the cities that have more than one employee under age 30.",
            "Which cities are home to more than one employee aged below 30?",
            "Identify the cities that have a population of over one employee who is younger than 30 years old.",
            "List the cities that employ more than one staff member who is less than 30 years of age."
        ],
        "ref_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "MQL": "db.employee.aggregate([\n  {\n    $match: {\n      Age: { $lt: 30 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$City\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      City: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 921,
        "db_id": "game_1",
        "nl_queries": [
            "Show student ids who don't have any sports.",
            "What are the ids of all students who don't play sports?",
            "List the student IDs of those who are not involved in any sports activities.",
            "Provide the IDs of students who do not participate in sports.",
            "Give me the student IDs of individuals without any recorded sports involvement."
        ],
        "ref_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      $or: [\n        { SportsInfo: { $exists: false } },\n        { SportsInfo: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      StuID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3334,
        "db_id": "student_1",
        "nl_queries": [
            "Find the last names of teachers teaching in classroom 109.",
            "Which teachers teach in classroom 109? Give me their last names.",
            "List the last names of all teachers who are assigned to classroom 109.",
            "Who are the teachers in classroom 109? I want to know their last names.",
            "Provide the last names of teachers working in classroom 109."
        ],
        "ref_sql": "SELECT lastname FROM teachers WHERE classroom = 109",
        "MQL": "db.teachers.find({ Classroom: 109 }, { LastName: 1, _id: 0 });\n"
    },
    {
        "record_id": 3431,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
            "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
            "What is the most recent \"active to date\" for the contact channel of \"Tillman Ernser\"?",
            "Provide the \"active to date\" of the most recently used contact channel by the customer \"Tillman Ernser\".",
            "Can you tell me the latest \"active to date\" from the contact channels associated with \"Tillman Ernser\"?"
        ],
        "ref_sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_name: \"Tillman Ernser\"\n    }\n  },\n  {\n    $unwind: \"$Customer_Contact_Channels\"\n  },\n  {\n    $sort: {\n      \"Customer_Contact_Channels.active_to_date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      max_active_to_date: \"$Customer_Contact_Channels.active_to_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 328,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the names of nurses who are nursing an undergoing treatment.",
            "Which nurses are in charge of patients undergoing treatments?",
            "List the names of nurses responsible for patients receiving treatment.",
            "Who are the nurses assigned to patients currently undergoing treatment?",
            "Identify the nurses who are caring for patients in the midst of treatment."
        ],
        "ref_sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID",
        "MQL": "db.Nurse.aggregate([\n  {\n    $match: {\n      \"Undergoes\": {\n        $exists: true,\n        $not: {\n          $size: 0\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1478,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
            "What are the source system codes for taxes as well as the master customer IDs connected to each parking fine?",
            "Can you provide the tax source system code and master customer ID for each associated parking fine ID?",
            "Please give me the source system code of the taxes along with the master customer ID for each parking fine ID.",
            "Show me the tax source system code and the master customer ID linked to each parking fine record."
        ],
        "ref_sql": "SELECT T1.source_system_code , T1.master_customer_id , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id",
        "MQL": "db.Customer_Master_Index.aggregate([\n  {\n    $unwind: \"$CMI_Cross_References\"\n  },\n  {\n    $unwind: \"$CMI_Cross_References.Parking_Fines\"\n  },\n  {\n    $project: {\n      \"source_system_code\": \"$CMI_Cross_References.source_system_code\",\n      \"master_customer_id\": \"$CMI_Cross_References.master_customer_id\",\n      \"council_tax_id\": \"$CMI_Cross_References.Parking_Fines.council_tax_id\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1668,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the ids of students whose advisors are professors.",
            "Which students have professors as their advisors? Find their student ids.",
            "List the student IDs of those whose advisors hold the title of Professor.",
            "Identify the student IDs for students that have professors as their advisors.",
            "Provide the IDs of students whose advisors are ranked as professors."
        ],
        "ref_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = \"Professor\"",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Faculty\",\n      localField: \"Advisor\",\n      foreignField: \"FacID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Rank\": \"Professor\"\n    }\n  },\n  {\n    $project: {\n      StuID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1432,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which part fault requires the most number of skills to fix? List part id and name.",
            "Identify the part fault that requires the highest skill set to resolve. Please provide the part ID and name.",
            "What is the part fault needing the most skills for repairs? Include the part ID and its name in the response.",
            "Which part fault has the greatest number of skills required to fix it? Please list the part ID along with its name.",
            "Find the part fault that demands the most skills to be addressed. Provide both the part ID and the name."
        ],
        "ref_sql": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Parts.aggregate([\n  { $unwind: \"$Part_Faults\" },\n  { $unwind: \"$Part_Faults.Skills_Required_To_Fix\" },\n  {\n    $group: {\n      _id: \"$Part_Faults.part_fault_id\",\n      part_id: { $first: \"$part_id\" },\n      part_name: { $first: \"$part_name\" },\n      skill_count: { $sum: 1 }\n    }\n  },\n  { $sort: { skill_count: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      part_id: 1,\n      part_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 740,
        "db_id": "singer",
        "nl_queries": [
            "List the name of singers that do not have any song.",
            "What is the sname of every sing that does not have any song?",
            "Provide the names of singers who do not have any songs to their credit.",
            "Identify all singers lacking any recorded songs.",
            "Can you list the singers that have not released any songs?"
        ],
        "ref_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "MQL": "db.singer.aggregate([\n  {\n    $match: {\n      $or: [\n        { song: { $exists: false } },\n        { song: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1206,
        "db_id": "tracking_orders",
        "nl_queries": [
            "List the names of the customers who have once bought product \"food\".",
            "What are the names of the customers who bought product \"food\" at least once?",
            "Provide the names of customers who have purchased the product labeled \"food.\"",
            "Who are the customers that have bought the item \"food\" at least one time?",
            "Can you list all the customers that have ever ordered the product \"food\"?"
        ],
        "ref_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Order_Items\"\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"Orders.Order_Items.product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.product_name\": \"food\"\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 148,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the clean and jerk score of the body builder with the highest total score?",
            "What is the clean and jerk score for the body builder with the top total score?",
            "Can you provide the clean and jerk score of the body builder who achieved the highest total?",
            "What is the clean jerk result of the body builder with the highest total weight lifted?",
            "Show me the clean and jerk score of the body builder that has the maximum total score."
        ],
        "ref_sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  { \n    $unwind: \"$body_builder\" \n  },\n  {\n    $sort: { \"body_builder.Total\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"_id\": 0,\n      \"Clean_Jerk\": \"$body_builder.Clean_Jerk\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3016,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the name of customers who did not pay with Cash.",
            "What is the name of customers who do not use Cash as payment method.",
            "List the names of customers who have not opted to pay with cash.",
            "Retrieve the names of customers that do not make payments using cash.",
            "What are the names of customers who choose payment methods other than cash?"
        ],
        "ref_sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "MQL": "db.Customers.find(\n  { payment_method: { $ne: \"Cash\" } },\n  { customer_name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 86,
        "db_id": "body_builder",
        "nl_queries": [
            "What is the most common birth place of people?",
            "Which birth place appears most frequently among people?",
            "Identify the birth place that has the highest number of individuals.",
            "What is the top birth place for people based on frequency?",
            "Find the birth location with the largest population of people."
        ],
        "ref_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  { $group: { _id: \"$Birth_Place\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { \"Birth_Place\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1752,
        "db_id": "driving_school",
        "nl_queries": [
            "List first name and last name of customers that have more than 2 payments.",
            "What are the first and last names of all customers with more than 2 payments?",
            "Retrieve the first and last names of customers who have made over two payments.",
            "Provide the names (first and last) of all customers with more than two recorded payments.",
            "Show the first and last names of customers that have completed more than two payment transactions."
        ],
        "ref_sql": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $project: {\n      first_name: \"$Customers.first_name\",\n      last_name: \"$Customers.last_name\",\n      count_payment: {\n        $size: \"$Customers.Customer_Payments\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_payment: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      first_name: 1,\n      last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 146,
        "db_id": "singer",
        "nl_queries": [
            "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "List the citizenships held by singers born before 1945 and after 1955.",
            "What citizenships are common among singers born prior to 1945 and subsequent to 1955?",
            "Identify the citizenships shared by singers with birth years earlier than 1945 or later than 1955."
        ],
        "ref_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "MQL": "db.singer.aggregate([\n  {\n    $match: {\n      $or: [\n        { Birth_Year: { $lt: 1945 } },\n        { Birth_Year: { $gt: 1955 } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Citizenship\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Citizenship: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2284,
        "db_id": "student_assessment",
        "nl_queries": [
            "Find id of the candidate who most recently accessed the course?",
            "What is the id of the candidate who most recently accessed the course?",
            "Who is the candidate with the most recent course access id?",
            "Please provide the ID of the candidate who last accessed the course.",
            "What is the candidate ID of the individual who accessed the course most recently?"
        ],
        "ref_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Candidates\"\n  },\n  {\n    $unwind: \"$Candidates.Candidate_Assessments\"\n  },\n  {\n    $sort: {\n      \"Candidates.Candidate_Assessments.assessment_date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      candidate_id: \"$Candidates.candidate_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 994,
        "db_id": "music_4",
        "nl_queries": [
            "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
            "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
            "List the famous titles of artists who have had volumes that topped the charts for over 2 weeks.",
            "Provide the famous titles from artists whose volumes were on top for more than two weeks.",
            "What are the notable titles associated with artists that have volumes exceeding two weeks at the top position?"
        ],
        "ref_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $match: {\n      \"volume.Weeks_on_Top\": { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      Famous_Title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3386,
        "db_id": "orchestra",
        "nl_queries": [
            "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "What are the highest and lowest shares recorded for performances excluding the type \"Live final\"?",
            "Provide the maximum and minimum share values for performances that are not classified as \"Live final\".",
            "Identify the top and bottom share percentages from performances that do not include the type \"Live final\"."
        ],
        "ref_sql": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $unwind: \"$orchestra.performance\"\n  },\n  {\n    $match: {\n      \"orchestra.performance.Type\": { $ne: \"Live final\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_SHARE: { $max: \"$orchestra.performance.Share\" },\n      min_SHARE: { $min: \"$orchestra.performance.Share\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_SHARE: 1,\n      min_SHARE: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4139,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Which product has been ordered most number of times?",
            "What is the most frequently ordered product? Tell me the detail of the product",
            "Which product has received the highest number of orders?",
            "Identify the product that has been ordered the most times and provide its details.",
            "What is the product with the greatest order frequency? Please share the information about this product."
        ],
        "ref_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Products.aggregate([\n  {\n    $unwind: \"$Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$Order_Items.product_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      product_details: \"$Docs1.product_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 399,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show all distinct lot details.",
            "List all unique details for lots held by investors.",
            "Retrieve all distinct entries related to lot details.",
            "Provide a list of unique lot details from the investors.",
            "Display all different lot details associated with the investors."
        ],
        "ref_sql": "SELECT DISTINCT lot_details FROM LOTS",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Lots\" },\n  { $group: { _id: \"$Lots.lot_details\" } },\n  { $project: { _id: 0, lot_details: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 1329,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the last name of the student who has a cat that is age 3.",
            "What is the last name of the student who has a cat that is 3 years old?",
            "What is the surname of the student with a 3-year-old cat?",
            "Identify the last name of the student who owns a cat aged 3.",
            "Give me the last name of the student that has a cat which is 3 years in age."
        ],
        "ref_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.PetType\": \"cat\",\n      \"Docs1.pet_age\": 3\n    }\n  },\n  {\n    $project: {\n      LName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2933,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "How many different templates do all document use?",
            "Count the number of different templates used for documents.",
            "What is the total number of unique templates employed by all documents?",
            "How many distinct templates are used by the documents?",
            "Find out the number of different templates associated with the documents."
        ],
        "ref_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Templates.Documents.Template_ID\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_template_id: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_template_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2125,
        "db_id": "phone_1",
        "nl_queries": [
            "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
            "What is the mean ROM capacity of mobile phones made by Nokia Corporation?",
            "Can you tell me the average ROM size for phones from Nokia Corporation?",
            "What’s the average ROM memory of devices produced by the company Nokia Corporation?",
            "Determine the mean value of ROM sizes for Nokia Corporation's phones."
        ],
        "ref_sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "MQL": "db.chip_model.aggregate([\n  { $unwind: \"$phone\" },\n  { $match: { \"phone.Company_name\": \"Nokia Corporation\" } },\n  { $group: { _id: null, avg_ROM_MiB: { $avg: \"$ROM_MiB\" } } },\n  { $project: { _id: 0, avg_ROM_MiB: 1 } }\n]);\n"
    },
    {
        "record_id": 365,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
            "Find the contact channel code that was used by the customer named \"Tillman Ernser\".",
            "What is the channel code of the contact method utilized by the customer named \"Tillman Ernser\"?",
            "Identify the contact channel code associated with the customer \"Tillman Ernser\".",
            "Which channel has \"Tillman Ernser\" used for contact purposes?"
        ],
        "ref_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_name: \"Tillman Ernser\"\n    }\n  },\n  {\n    $unwind: \"$Customer_Contact_Channels\"\n  },\n  {\n    $project: {\n      channel_code: \"$Customer_Contact_Channels.channel_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 389,
        "db_id": "formula_1",
        "nl_queries": [
            "List the forenames of all distinct drivers in alphabetical order?",
            "What are the first names of all the different drivers in alphabetical order?",
            "Provide a list of the first names of all unique drivers sorted in alphabetical order.",
            "Can you show the forenames of all the distinct drivers arranged alphabetically?",
            "Give me the first names of every different driver, sorted from A to Z."
        ],
        "ref_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "MQL": "db.drivers.aggregate([\n  {\n    $project: {\n      forename: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      forename: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 361,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show all distinct building descriptions.",
            "Give me a list of all the distinct building descriptions.",
            "Retrieve all unique descriptions of the buildings.",
            "Provide me with a list of unique building descriptions.",
            "Display all the distinct descriptions for the buildings available."
        ],
        "ref_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $group: {\n      _id: \"$building_description\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      building_description: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1035,
        "db_id": "chinook_1",
        "nl_queries": [
            "What is the least common media type in all tracks?",
            "What is the name of the media type that is least common across all tracks?",
            "Which media type is found the least frequently in all tracks?",
            "Identify the media type that occurs the least across all tracks.",
            "What is the media type with the lowest occurrence in the entire track collection?"
        ],
        "ref_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $unwind: \"$Album.Track\"\n  },\n  {\n    $group: {\n      _id: \"$Album.Track.MediaTypeId\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"MediaType\",\n      localField: \"_id\",\n      foreignField: \"MediaTypeId\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1687,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
            "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
            "Retrieve the checking account balances for customers whose savings balances exceed the average savings balance.",
            "List the checking balances of accounts that have savings balances above the average savings balance.",
            "What are the checking balances for accounts where the savings balance is greater than the average savings balance?"
        ],
        "ref_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_balance: { $avg: \"$SAVINGS.balance\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_balance: 1\n    }\n  },\n  {\n    $lookup: {\n      from: \"ACCOUNTS\",\n      let: { avg_balance: \"$avg_balance\" },\n      pipeline: [\n        { $unwind: \"$SAVINGS\" },\n        { $unwind: \"$CHECKING\" },\n        {\n          $match: {\n            $expr: { $gt: [\"$SAVINGS.balance\", \"$$avg_balance\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            balance: \"$CHECKING.balance\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 2938,
        "db_id": "network_2",
        "nl_queries": [
            "How many friends does Dan have?",
            "What is the total number of friends that Dan has?",
            "Can you tell me how many friends Dan counts?",
            "How many friends are listed for Dan?",
            "Please provide the friend count for Dan."
        ],
        "ref_sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      name: \"Dan\"\n    }\n  },\n  {\n    $project: {\n      count_friend: { $size: \"$PersonFriend.friend\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1311,
        "db_id": "game_injury",
        "nl_queries": [
            "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
            "Can you provide the IDs, scores, and dates of games that resulted in two or more injury incidents?",
            "What are the game IDs, their scores, and the dates for those games that experienced at least two injury accidents?",
            "List the game identifiers alongside their scores and dates for any games that had a minimum of two injury occurrences.",
            "Show me the IDs, scores, and dates of games where there were two or more instances of injuries reported."
        ],
        "ref_sql": "SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $unwind: \"$game.injury_accident\" },\n  {\n    $group: {\n      _id: \"$game.id\",\n      count: { $sum: 1 },\n      Score: { $first: \"$game.Score\" },\n      Date: { $first: \"$game.Date\" }\n    }\n  },\n  { $match: { count: { $gte: 2 } } },\n  {\n    $project: {\n      _id: 0,\n      id: \"$_id\",\n      Score: 1,\n      Date: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1655,
        "db_id": "match_season",
        "nl_queries": [
            "Which players are from Indonesia?",
            "Who are the players from Indonesia?",
            "Can you provide a list of players hailing from Indonesia?",
            "Which athletes represent Indonesia in the player roster?",
            "Identify the players that are associated with Indonesia."
        ],
        "ref_sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\"",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $lookup: {\n      from: \"country\",\n      localField: \"match_season.Country\",\n      foreignField: \"Country_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Country_name\": \"Indonesia\"\n    }\n  },\n  {\n    $project: {\n      Player: \"$match_season.Player\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 58,
        "db_id": "restaurant_1",
        "nl_queries": [
            "What is the age of student Linda Smith?",
            "How old is Linda Smith, the student?",
            "Can you tell me the age of the student named Linda Smith?",
            "What age does Linda Smith, a student, have?",
            "Please provide the age of Linda Smith, who is a student."
        ],
        "ref_sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "MQL": "db.Student.find({\n  \"LName\": \"Smith\",\n  \"Fname\": \"Linda\"\n}, { \"Age\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3451,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
            "What is the lowest amount for transactions with a type code of \"PUR\" and a share count greater than 50?",
            "Find the minimum transaction amount for transactions categorized as \"PUR\" where the share count exceeds 50.",
            "Provide the smallest transaction amount for transactions of type \"PUR\" that have more than 50 shares.",
            "Determine the minimum amount for any transactions labeled \"PUR\" that involve a share count larger than 50."
        ],
        "ref_sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"PUR\" AND share_count > 50",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $match: {\n      \"Transactions.transaction_type_code\": \"PUR\",\n      \"Transactions.share_count\": { $gt: \"50\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      min_amount_of_transaction: { $min: \"$Transactions.amount_of_transaction\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_amount_of_transaction: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 900,
        "db_id": "election_representative",
        "nl_queries": [
            "What states have at least two representatives?",
            "Which states have a minimum of two representatives?",
            "Identify states that possess at least two representatives.",
            "List the states that are represented by two or more lawmakers.",
            "What are the states with no fewer than two representatives?"
        ],
        "ref_sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2",
        "MQL": "db.representative.aggregate([\n  {\n    $group: {\n      _id: \"$State\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      State: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 636,
        "db_id": "party_host",
        "nl_queries": [
            "Show the name and the nationality of the oldest host.",
            "What are the name and the nationality of the host of the highest age?",
            "Retrieve the name and nationality of the host who is the oldest.",
            "Please provide the name and nationality of the host with the greatest age.",
            "What is the name and nationality of the oldest host in the database?"
        ],
        "ref_sql": "SELECT Name , Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "MQL": "db.host.aggregate([\n  {\n    $sort: {\n      Age: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Nationality: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1179,
        "db_id": "student_assessment",
        "nl_queries": [
            "which course has most number of registered students?",
            "What is the name of the course with the most registered students?",
            "What course has the highest number of student enrollments?",
            "Which course boasts the largest enrollment of students?",
            "Identify the course that registers the most students."
        ],
        "ref_sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Student_Course_Registrations\"\n  },\n  {\n    $group: {\n      _id: \"$course_id\",\n      course_name: { $first: \"$course_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      course_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4075,
        "db_id": "manufacturer",
        "nl_queries": [
            "Find the id and number of shops for the company that produces the most expensive furniture.",
            "Retrieve the manufacturer ID and shop count for the company that offers the highest-priced furniture.",
            "What is the ID and the number of retail locations for the manufacturer who produces the priciest furniture?",
            "Find the ID and the total number of shops for the manufacturer responsible for the most costly furniture item.",
            "Identify the manufacturer ID and the number of stores for the company that has the most expensive piece of furniture."
        ],
        "ref_sql": "SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
        "MQL": "db.manufacturer.aggregate([\n  {\n    $unwind: \"$furniture_manufacte\"\n  },\n  {\n    $sort: { \"furniture_manufacte.Price_in_Dollar\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"Manufacturer_ID\": 1,\n      \"Num_of_Shops\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 116,
        "db_id": "world_1",
        "nl_queries": [
            "How many official languages does Afghanistan have?",
            "How many official languages are spoken in Afghanistan?",
            "What is the count of official languages in Afghanistan?",
            "How many recognized official languages does Afghanistan have?",
            "Can you tell me the number of official languages spoken in Afghanistan?"
        ],
        "ref_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: { Name: \"Afghanistan\" }\n  },\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $match: { \"countrylanguage.IsOfficial\": \"T\" }\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT\": \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1296,
        "db_id": "car_1",
        "nl_queries": [
            "What is the horsepower of the car with the largest accelerate?",
            "What is the horsepower of the car with the greatest accelerate?",
            "What is the horsepower of the fastest-accelerating car?",
            "How much horsepower does the car with the highest acceleration have?",
            "Can you tell me the horsepower of the car that accelerates the quickest?"
        ],
        "ref_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $sort: {\n      \"countries.car_makers.model_list.car_names.cars_data.Accelerate\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Horsepower: \"$countries.car_makers.model_list.car_names.cars_data.Horsepower\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 833,
        "db_id": "book_2",
        "nl_queries": [
            "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
            "What are the prices of books published by either \"Person\" or \"Wiley\"?",
            "List the prices for publications from the publishers \"Person\" and \"Wiley\".",
            "Retrieve the publication prices for books published by \"Person\" or \"Wiley\".",
            "Display the prices of publications where the publisher is either \"Person\" or \"Wiley\"."
        ],
        "ref_sql": "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\"",
        "MQL": "db.book.aggregate([\n  {\n    $unwind: \"$publication\"\n  },\n  {\n    $match: {\n      \"publication.Publisher\": { $in: [\"Person\", \"Wiley\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Price: \"$publication.Price\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1620,
        "db_id": "phone_market",
        "nl_queries": [
            "For each phone, show its names and total number of stocks.",
            "List each phone along with the corresponding total stock available.",
            "Display the names of all phones and their total quantities in stock.",
            "For every phone, provide its name and the cumulative number of stocks.",
            "Show the total stock count for each type of phone along with their names."
        ],
        "ref_sql": "SELECT T2.Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
        "MQL": "db.phone.aggregate([\n  {\n    $unwind: \"$phone_market\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      sum_Num_of_stock: { $sum: \"$phone_market.Num_of_stock\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\",\n      \"sum_Num_of_stock\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2713,
        "db_id": "manufactory_1",
        "nl_queries": [
            "How many companies were created by Andy?",
            "Return the number of companies created by Andy.",
            "What is the total number of manufacturers founded by Andy?",
            "How many firms did Andy establish?",
            "Count the number of businesses that were started by Andy."
        ],
        "ref_sql": "SELECT count(*) FROM manufacturers WHERE founder = 'Andy'",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      Founder: \"Andy\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 107,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many states that have some college students playing in the mid position but not in the goalie position.",
            "What is the count of states with college students playing in the mid position but not as goalies?",
            "How many states have college players participating in the midfield position while excluding those in the goalie role?",
            "What is the number of states where college students are playing as midfielders but not as goalkeepers?",
            "Can you tell me the count of states with college athletes in the mid position, without any players designated as goalies?"
        ],
        "ref_sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')",
        "MQL": "db.College.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $group: {\n      _id: \"$state\",\n      positions: { $addToSet: \"$Tryout.pPos\" }\n    }\n  },\n  {\n    $match: {\n      positions: { $all: [\"mid\"], $nin: [\"goalie\"] }\n    }\n  },\n  {\n    $count: \"COUNT\"\n  }\n]);\n"
    },
    {
        "record_id": 1244,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the id and surname of the driver who participated the most number of races?",
            "What are the ids and last names of all drivers who participated in the most races?",
            "Identify the driver with the highest number of race participations and provide their ID and surname.",
            "List the driver IDs and surnames of those who have entered the greatest number of races.",
            "Who is the driver that has competed in the most races, and what are their ID and last name?"
        ],
        "ref_sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.drivers.aggregate([\n  {\n    $group: {\n      _id: {\n        driverId: \"$driverId\",\n        surname: \"$surname\"\n      },\n      raceCount: {\n        $sum: {\n          $size: \"$results\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      raceCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      driverId: \"$_id.driverId\",\n      surname: \"$_id.surname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2445,
        "db_id": "chinook_1",
        "nl_queries": [
            "How many albums are there?",
            "Find the number of albums.",
            "What is the total number of albums available?",
            "Determine how many albums exist in the database.",
            "Count the total number of albums present."
        ],
        "ref_sql": "SELECT count(*) FROM ALBUM",
        "MQL": "db.Artist.aggregate([\n  {\n    $project: {\n      count_Album: {\n        $size: \"$Album\"\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count_Album: {\n        $sum: \"$count_Album\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count_Album\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3817,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
            "Can you list the product names and their descriptions for items classified as 'Cutlery' with a daily hire fee under 20?",
            "Please provide the names and descriptions of all 'Cutlery' products that have a daily rental cost of less than 20.",
            "What are the descriptions and names of products labeled 'Cutlery' that cost less than 20 to hire each day?",
            "Show me the names and details of any 'Cutlery' items that have a daily hiring fee lower than 20."
        ],
        "ref_sql": "SELECT product_name , product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20",
        "MQL": "db.Products_for_Hire.find({\n  \"product_type_code\": \"Cutlery\",\n  \"daily_hire_cost\": { $lt: 20 }\n}, { \"product_name\": 1, \"product_description\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4023,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "Find the total and average amount of settlements.",
            "Return the sum and average of all settlement amounts.",
            "What are the total and average settlement amounts?",
            "Provide the sum and average values for all settlements.",
            "Calculate both the total and the average of settlement amounts."
        ],
        "ref_sql": "SELECT sum(settlement_amount) , avg(settlement_amount) FROM settlements",
        "MQL": "db.Available_Policies.aggregate([\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss.Claims\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_settlement_amount: {\n        $sum: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements.Settlement_Amount\"\n      },\n      avg_settlement_amount: {\n        $avg: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements.Settlement_Amount\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_settlement_amount: 1,\n      avg_settlement_amount: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2405,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of students for the cities where have more than one student.",
            "How many students are from each city, and which cities have more than one cities?",
            "List the cities that have more than one student along with the respective number of students in each.",
            "What is the count of students from each city, and which of them has at least two students?",
            "Identify the cities with multiple students and report the number of students in those locations."
        ],
        "ref_sql": "SELECT count(*) , city_code FROM student GROUP BY city_code HAVING count(*) > 1",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$city_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      city_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 634,
        "db_id": "decoration_competition",
        "nl_queries": [
            "What are the names and countries of members?",
            "Can you provide the names and corresponding countries of all members?",
            "What are the member names along with their countries?",
            "List the names of members and the countries they belong to.",
            "Show me the names and countries for each member."
        ],
        "ref_sql": "SELECT Name , Country FROM member",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $project: { \"Name\": \"$member.Name\", \"Country\": \"$member.Country\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 409,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What are all the payment methods?",
            "Return all the distinct payment methods used by customers.",
            "Can you provide a list of unique payment methods available?",
            "What distinct payment options do customers utilize?",
            "Show me all the different payment methods that are offered to customers."
        ],
        "ref_sql": "SELECT DISTINCT payment_method FROM customers",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$payment_method\"\n    }\n  },\n  {\n    $project: {\n      payment_method: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2731,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the number of pets whose weight is heavier than 10.",
            "How many pets have a greater weight than 10?",
            "Count how many pets weigh more than 10 units.",
            "What is the total number of pets that have a weight exceeding 10?",
            "How many pets have a weight that is greater than 10?"
        ],
        "ref_sql": "SELECT count(*) FROM pets WHERE weight > 10",
        "MQL": "db.Pets.aggregate([\n  {\n    $match: {\n      weight: { $gt: 10 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 379,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Return all distinct detention type codes.",
            "List all unique detention type codes available in the system.",
            "Provide a collection of distinct codes for detention types.",
            "Show all the unique codes associated with detention types.",
            "Retrieve a set of distinct detention type codes from the database."
        ],
        "ref_sql": "SELECT DISTINCT detention_type_code FROM Detention",
        "MQL": "db.Ref_Detention_Type.aggregate([\n  {\n    $group: {\n      _id: \"$detention_type_code\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      detention_type_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2121,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the average and maximum hours for the students whose tryout decision is yes.",
            "What is the average and maximum number of hours students who made the team practiced?",
            "What are the average and highest hours logged by students who have been accepted after tryouts?",
            "Calculate the mean and maximum hours of practice for players who received a positive tryout outcome.",
            "Determine the average and peak hours of training for those students whose tryout was successful."
        ],
        "ref_sql": "SELECT avg(T1.HS) , max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_HS: { $avg: \"$HS\" },\n      max_HS: { $max: \"$HS\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_HS: 1,\n      max_HS: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4184,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show ids for all templates that are used by more than one document.",
            "What are the template ids of any templates used in more than a single document?",
            "Provide the IDs of templates that are referenced by multiple documents.",
            "List the template IDs which are utilized in more than one document.",
            "What template IDs exist for templates that are linked to several documents?"
        ],
        "ref_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Templates.Template_ID\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Template_ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 84,
        "db_id": "body_builder",
        "nl_queries": [
            "List each birth place along with the number of people from there.",
            "Provide a list of all birthplaces and the number of individuals from each one.",
            "Show each place of birth along with the total number of people originating from there.",
            "Enumerate every birthplace together with the count of people associated with that location.",
            "Display a summary of birthplaces along with how many people hail from each place."
        ],
        "ref_sql": "SELECT Birth_Place , COUNT(*) FROM people GROUP BY Birth_Place",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Birth_Place\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Birth_Place: \"$_id\",\n      COUNT: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3342,
        "db_id": "station_weather",
        "nl_queries": [
            "list the local authorities and services provided by all stations.",
            "Retrieve the local authorities along with the services available at every station.",
            "Show me the local authorities and the types of services offered by all train stations.",
            "Provide a list of all stations with their respective local authorities and services.",
            "Enumerate the services provided by each station alongside their local authority."
        ],
        "ref_sql": "SELECT local_authority , services FROM station",
        "MQL": "db.station.find({}, { \"local_authority\": 1, \"services\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3901,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "List the section_name in reversed lexicographical order.",
            "What are the names of the sections in reverse alphabetical order?",
            "Provide the names of the sections sorted in descending alphabetical order.",
            "Retrieve a list of section names arranged in reverse order based on their alphabetical sequence.",
            "Can you display the section names in order from Z to A?"
        ],
        "ref_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Sections\"\n  },\n  {\n    $sort: {\n      \"Sections.section_name\": -1\n    }\n  },\n  {\n    $project: {\n      section_name: \"$Sections.section_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4271,
        "db_id": "car_1",
        "nl_queries": [
            "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "Which years saw the production of cars with weights ranging from 3000 to 4000?",
            "What years had cars manufactured that weighed between 3000 and 4000?",
            "In which years were vehicles produced that weighed no less than 3000 and no more than 4000?"
        ],
        "ref_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.model_list.car_names.cars_data.Weight\": {\n        $gte: 3000,\n        $lte: 4000\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$countries.car_makers.model_list.car_names.cars_data.Year\"\n    }\n  },\n  {\n    $project: {\n      Year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3337,
        "db_id": "game_1",
        "nl_queries": [
            "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.",
            "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?",
            "List the last names and sexes of students who are engaged in playing both the games Call of Destiny and Works of Widenius.",
            "Provide the last names and genders of all students who participate in both Call of Destiny and Works of Widenius games.",
            "Get the last name and gender of students who have played both Call of Destiny and Works of Widenius."
        ],
        "ref_sql": "SELECT lname , sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Works of Widenius\")",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Video_Games\",\n      localField: \"Plays_Games.GameID\",\n      foreignField: \"GameID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.GName\": { $all: [\"Call of Destiny\", \"Works of Widenius\"] }\n    }\n  },\n  {\n    $project: {\n      LName: 1,\n      Sex: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4100,
        "db_id": "swimming",
        "nl_queries": [
            "Find the name of the swimmer who has the most records.",
            "Who is the swimmer with the highest number of records?",
            "Identify the swimmer that holds the most records.",
            "Name the swimmer who has recorded the greatest number of events.",
            "Which swimmer features the largest total of records in the database?"
        ],
        "ref_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.swimmer.aggregate([\n  {\n    $project: {\n      name: 1,\n      numRecords: { $size: \"$record\" }\n    }\n  },\n  {\n    $sort: { numRecords: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, name: 1 }\n  }\n]);\n"
    },
    {
        "record_id": 3745,
        "db_id": "tvshow",
        "nl_queries": [
            "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "Retrieve the package options of TV channels that don't feature any cartoons helmed by Ben Jones.",
            "List the package options for all the TV channels that are not airing cartoons directed by Ben Jones.",
            "What package options are available for TV channels that lack cartoons directed by Ben Jones?"
        ],
        "ref_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
        "MQL": "db.TV_Channel.find({\n  Cartoon: {\n    $not: {\n      $elemMatch: {\n        Directed_by: \"Ben Jones\"\n      }\n    }\n  }\n}, {\n  Package_Option: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 4018,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the total revenue of companies of each founder.",
            "What is the total revenue of companies started by founder?",
            "Calculate the combined revenue for all manufacturers associated with each founder.",
            "What total revenue do companies founded by each individual generate?",
            "Determine the overall revenue from the companies established by each founder."
        ],
        "ref_sql": "SELECT sum(revenue) , founder FROM manufacturers GROUP BY founder",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $group: {\n      _id: \"$Founder\",\n      sum_revenue: { $sum: \"$Revenue\" }\n    }\n  },\n  {\n    $project: {\n      Founder: \"$_id\",\n      sum_revenue: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1283,
        "db_id": "activity_1",
        "nl_queries": [
            "What are the first and last name of the faculty who has the most students?",
            "Give me the the first and last name of the faculty who advises the most students.",
            "Who is the faculty member with the highest number of students under their advisement?",
            "Name the faculty member that advises the largest group of students.",
            "Which faculty has the most students assigned to them for guidance?"
        ],
        "ref_sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Faculty.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"FacID\",\n      foreignField: \"Advisor\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      Lname: 1,\n      studentCount: { $size: \"$Docs1\" }\n    }\n  },\n  {\n    $sort: { studentCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Fname: 1,\n      Lname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 12,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find all information about student addresses, and sort by monthly rental in descending order.",
            "Retrieve comprehensive details about student addresses and arrange them by monthly rental in descending order.",
            "List all student address information sorted by monthly rental amounts from highest to lowest.",
            "Get all available details regarding student addresses, sorted in descending order based on their monthly rental.",
            "Show full information on student addresses, ordered by the monthly rental price in descending fashion."
        ],
        "ref_sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$Students.Student_Addresses\"\n  },\n  {\n    $project: {\n      _id: 0,\n      student_id: \"$Students.Student_Addresses.student_id\",\n      address_id: \"$Students.Student_Addresses.address_id\",\n      date_address_from: \"$Students.Student_Addresses.date_address_from\",\n      date_address_to: \"$Students.Student_Addresses.date_address_to\",\n      monthly_rental: \"$Students.Student_Addresses.monthly_rental\",\n      other_details: \"$Students.Student_Addresses.other_details\"\n    }\n  },\n  {\n    $sort: {\n      monthly_rental: -1\n    }\n  }\n]);\n\n"
    },
    {
        "record_id": 635,
        "db_id": "wrestler",
        "nl_queries": [
            "What are the names and location of the wrestlers?",
            "Give the names and locations of all wrestlers.",
            "Can you list the names and locations of all wrestlers?",
            "Please provide the names along with their corresponding locations for every wrestler.",
            "What are the wrestler names and where are they located?"
        ],
        "ref_sql": "SELECT Name , LOCATION FROM wrestler",
        "MQL": "db.wrestler.find({}, { Name: 1, Location: 1, _id: 0 });\n"
    },
    {
        "record_id": 3476,
        "db_id": "train_station",
        "nl_queries": [
            "Show the name, location, and number of platforms for all stations.",
            "List the name, location, and total number of platforms for each station.",
            "Provide the names, locations, and platform counts of all train stations.",
            "Display information on the name, location, and number of platforms available at all stations.",
            "Retrieve the names, locations, and platform details for every station in the database."
        ],
        "ref_sql": "SELECT name , LOCATION , number_of_platforms FROM station",
        "MQL": "db.station.find({}, {\n  \"Name\": 1,\n  \"Location\": 1,\n  \"Number_of_Platforms\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 2783,
        "db_id": "club_1",
        "nl_queries": [
            "How many students are there?",
            "Count the total number of students.",
            "How many students exist?",
            "What is the total number of students enrolled?",
            "Please provide the count of all students in the database."
        ],
        "ref_sql": "SELECT count(*) FROM student",
        "MQL": "db.Student.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 809,
        "db_id": "party_host",
        "nl_queries": [
            "What are the themes and locations of parties?",
            "Give me the theme and location of each party.",
            "Can you list the themes and locations for all the parties?",
            "What themes and locations do the various parties feature?",
            "Show me the theme and location associated with each party."
        ],
        "ref_sql": "SELECT Party_Theme , LOCATION FROM party",
        "MQL": "db.party.find({}, { Party_Theme: 1, Location: 1, _id: 0 });\n"
    },
    {
        "record_id": 601,
        "db_id": "race_track",
        "nl_queries": [
            "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
            "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
            "Identify the locations that feature tracks with seating capacities exceeding 90,000 as well as those with less than 70,000 seats.",
            "List the locations where there are tracks with both more than 90,000 seats and those with under 70,000 seats.",
            "Which locations host tracks that have both capacities greater than 90,000 and less than 70,000 seats?"
        ],
        "ref_sql": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
        "MQL": "db.track.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      seats: {\n        $push: \"$Seating\"\n      }\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      hasHighCapacity: {\n        $in: [true, {\n          $map: {\n            input: \"$seats\",\n            as: \"seat\",\n            in: {\n              $gt: [\"$$seat\", 90000]\n            }\n          }\n        }]\n      },\n      hasLowCapacity: {\n        $in: [true, {\n          $map: {\n            input: \"$seats\",\n            as: \"seat\",\n            in: {\n              $lt: [\"$$seat\", 70000]\n            }\n          }\n        }]\n      }\n    }\n  },\n  {\n    $match: {\n      hasHighCapacity: true,\n      hasLowCapacity: true\n    }\n  },\n  {\n    $project: {\n      Location: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1190,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "What are the id and details of the customers who have at least 3 events?",
            "List the customer IDs and their associated details for those who have recorded at least three events.",
            "Show the IDs along with the details of customers that have a minimum of three events.",
            "Identify the customers who possess three or more events, providing their ID and details.",
            "What are the customer IDs and their details for customers who have three or more recorded events?"
        ],
        "ref_sql": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 3",
        "MQL": "db.Customers.find({\n  $expr: { $gte: [{ $size: \"$Customer_Events\" }, 3] }\n}, { \"customer_id\": 1, \"customer_details\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1141,
        "db_id": "csu_1",
        "nl_queries": [
            "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
            "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
            "Which campus had an enrollment exceeding 400 students and more than 200 full-time attendees in the year 1956?",
            "Identify the campus established in 1956 that has over 400 enrolled students and more than 200 full-time students.",
            "Can you tell me which campus recorded over 400 total enrollments and at least 200 full-time enrollments in 1956?"
        ],
        "ref_sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200",
        "MQL": "db.Campuses.find({\n  \"enrollments\": {\n    $elemMatch: {\n      \"Year\": 1956,\n      \"TotalEnrollment_AY\": { $gt: 400 },\n      \"FTE_AY\": { $gt: 200 }\n    }\n  }\n}, {\n  \"Campus\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 532,
        "db_id": "company_employee",
        "nl_queries": [
            "What are the headquarters and industries of all companies?",
            "Can you provide the headquarters and industries of each company in the database?",
            "What are the locations of the headquarters and the respective industries for all companies?",
            "List the headquarters and industry sectors of all the companies available.",
            "Show me the headquarters along with the industries for every company."
        ],
        "ref_sql": "SELECT Headquarters , Industry FROM company",
        "MQL": "db.company.find({}, { \"Headquarters\": 1, \"Industry\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3051,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show all date and share count of transactions.",
            "List all transaction dates along with their respective share counts.",
            "Retrieve and display the dates of transactions and the associated share amounts.",
            "Provide the dates and share counts for all recorded transactions.",
            "Show the transaction date alongside the corresponding share count of each transaction."
        ],
        "ref_sql": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $project: { \"date_of_transaction\": \"$Transactions.date_of_transaction\", \"share_count\": \"$Transactions.share_count\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2749,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "How many products were not included in any order?",
            "Count the number of products that were never ordered.",
            "What is the total number of products that haven’t been ordered at all?",
            "Find out how many products are not associated with any orders.",
            "Determine the count of products that have never been included in an order."
        ],
        "ref_sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "MQL": "db.Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      product_id: \"$Products.product_id\",\n      count_Order_Items: {\n        $size: \"$Products.Order_Items\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Order_Items: 0\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2960,
        "db_id": "swimming",
        "nl_queries": [
            "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
            "Which countries possess stadiums with capacities exceeding 60,000 and others below 50,000?",
            "Identify the countries that have both large capacity stadiums (over 60,000) and small capacity stadiums (under 50,000).",
            "What are the countries that contain stadiums with more than 60,000 seats and also stadiums with fewer than 50,000 seats?",
            "List the countries that feature stadiums with capacities greater than 60,000 as well as those with capacities below 50,000."
        ],
        "ref_sql": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      largeCapacity: {\n        $sum: {\n          $cond: [{ $gt: [\"$Capacity\", 60000] }, 1, 0]\n        }\n      },\n      smallCapacity: {\n        $sum: {\n          $cond: [{ $lt: [\"$Capacity\", 50000] }, 1, 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      largeCapacity: { $gt: 0 },\n      smallCapacity: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 750,
        "db_id": "wrestler",
        "nl_queries": [
            "List the names of wrestlers in descending order of days held.",
            "What are the names of the wrestlers, ordered descending by days held?",
            "Provide a list of wrestler names sorted by the number of days held, from highest to lowest.",
            "Show the names of wrestlers arranged in descending order based on how many days they have held titles.",
            "Retrieve the names of wrestlers, ordered by the duration of their title reigns in a descending manner."
        ],
        "ref_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "MQL": "db.wrestler.find({}, { Name: 1, _id: 0 }).sort({ Days_held: -1 });\n"
    },
    {
        "record_id": 2484,
        "db_id": "driving_school",
        "nl_queries": [
            "How many customers in total?",
            "How many customers are there?",
            "What is the total count of customers in the database?",
            "Can you tell me the overall number of customers?",
            "How many customers are registered in total?"
        ],
        "ref_sql": "SELECT count(*) FROM Customers;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1167,
        "db_id": "driving_school",
        "nl_queries": [
            "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
            "In which country and state does Janessa Sawayn live?",
            "What country and state does Janessa Sawayn call home?",
            "Can you tell me the country and state where staff member Janessa Sawayn resides?",
            "Where does Janessa Sawayn live in terms of country and state?"
        ],
        "ref_sql": "SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $project: {\n      country: 1,\n      state_province_county: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2300,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the name and level of catalog structure with level between 5 and 10.",
            "What are the name and level of catalog structure with level number between 5 and 10",
            "Retrieve the names and levels of catalog structures that fall within level numbers 5 to 10.",
            "List the catalog structure names and their corresponding levels, where the level numbers range from 5 to 10.",
            "What are the names and levels of catalog structures associated with level numbers between 5 and 10?"
        ],
        "ref_sql": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $match: {\n      \"Catalog_Structure.catalog_level_number\": {\n        $gte: 5,\n        $lte: 10\n      }\n    }\n  },\n  {\n    $project: {\n      catalog_level_name: \"$Catalog_Structure.catalog_level_name\",\n      catalog_level_number: \"$Catalog_Structure.catalog_level_number\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3078,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of the top 3 departments that provide the largest amount of courses?",
            "What are the names of the 3 departments with the most courses?",
            "List the names of the three departments that offer the highest number of courses.",
            "Identify the top three departments with the greatest number of courses available.",
            "What are the names of the three departments that have the most courses to offer?"
        ],
        "ref_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "MQL": "db.department.aggregate([\n  {\n    $project: {\n      dept_name: 1,\n      count_course: { $size: \"$course\" }\n    }\n  },\n  {\n    $sort: { count_course: -1 }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      dept_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2411,
        "db_id": "college_1",
        "nl_queries": [
            "How many sections does each course has?",
            "How many sections does each course have?",
            "What is the number of sections available for each course?",
            "Can you tell me how many sections each course has?",
            "How many sections are there for every course offered?"
        ],
        "ref_sql": "SELECT count(*) , crs_code FROM CLASS GROUP BY crs_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $group: {\n      _id: \"$CLASS.CRS_CODE\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      CRS_CODE: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4052,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the customer name and date of the orders that have the status \"Delivered\".",
            "What are the customer name and date of the orders whose status is \"Delivered\".",
            "Retrieve the names of customers along with the dates of their orders that have been marked as \"Delivered\".",
            "List the customer names and corresponding order dates for orders that are in the \"Delivered\" status.",
            "What are the names of customers and the order dates for all orders that have been delivered?"
        ],
        "ref_sql": "SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $match: {\n      \"Customer_Orders.order_status\": \"Delivered\"\n    }\n  },\n  {\n    $project: {\n      customer_name: \"$customer_name\",\n      order_date: \"$Customer_Orders.order_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 505,
        "db_id": "poker_player",
        "nl_queries": [
            "List the final tables made and the best finishes of poker players.",
            "What are the final tables made and best finishes for all poker players?",
            "Provide a list of poker players along with their final tables and best finishes.",
            "Show all final tables achieved and best finishes by poker players.",
            "What final tables have been reached and what are the best finishes recorded by poker players?"
        ],
        "ref_sql": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Final_Table_Made: \"$poker_player.Final_Table_Made\",\n      Best_Finish: \"$poker_player.Best_Finish\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 440,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find all the papers published by the institution \"Google\".",
            "Which papers were written by authors from the institution \"Google\"?",
            "List all titles of papers associated with the \"Google\" institution.",
            "What are the titles of papers authored by individuals affiliated with \"Google\"?",
            "Retrieve all the research papers that belong to the institution named \"Google\"."
        ],
        "ref_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"Authorship.instID\",\n      foreignField: \"instID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"Docs1.name\": \"Google\"\n        },\n        {\n          \"Docs2.instID\": \"Google\"\n        }\n      ]\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2390,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the number of products for each manufacturer, showing the name of each company.",
            "How many products are there for each manufacturer?",
            "List how many products each manufacturer offers, including their respective names.",
            "What is the quantity of products available for every manufacturer?",
            "Show the total number of products per manufacturer, along with the manufacturer's name."
        ],
        "ref_sql": "SELECT count(*) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 87,
        "db_id": "singer",
        "nl_queries": [
            "What are the birth year and citizenship of singers?",
            "What are the birth years and citizenships of the singers?",
            "Can you provide the birth year and citizenship information of the singers?",
            "What are the citizenships and birth years associated with each singer?",
            "Please list the birth years and citizenship statuses of all the singers."
        ],
        "ref_sql": "SELECT Birth_Year , Citizenship FROM singer",
        "MQL": "db.singer.find({}, { Birth_Year: 1, Citizenship: 1, _id: 0 });\n"
    },
    {
        "record_id": 790,
        "db_id": "match_season",
        "nl_queries": [
            "Show the position of players and the corresponding number of players.",
            "How many players played each position?",
            "List each player position along with the total number of players in that position.",
            "What is the count of players for each position on the team?",
            "Provide the number of players assigned to each position in the match season."
        ],
        "ref_sql": "SELECT POSITION , COUNT(*) FROM match_season GROUP BY POSITION",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.Position\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Position: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 187,
        "db_id": "world_1",
        "nl_queries": [
            "What are the country codes for countries that do not speak English?",
            "Return the country codes for countries that do not speak English.",
            "List the country codes for nations where English is not an official language.",
            "What country codes correspond to countries that do not use English?",
            "Provide the country codes for countries that have no English-speaking population."
        ],
        "ref_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "MQL": "db.country.aggregate([\n  {\n    $lookup: {\n      from: \"countrylanguage\",\n      localField: \"Code\",\n      foreignField: \"CountryCode\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Language\": { $ne: \"English\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      CountryCode: \"$Code\"\n    }\n  }\n]);"
    },
    {
        "record_id": 3871,
        "db_id": "document_management",
        "nl_queries": [
            "Find the description of the most popular role among the users that have logged in.",
            "What is the description of the most popular role among users that have logged in?",
            "What is the description of the role that has the highest number of logged-in users?",
            "Retrieve the description of the role most commonly associated with users who have logged in.",
            "Identify the description of the role that is most popular among logged-in users."
        ],
        "ref_sql": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Users\"\n  },\n  {\n    $group: {\n      _id: \"$role_code\",\n      role_description: { $first: \"$role_description\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      role_description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3053,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
            "List the transaction dates where the share count is at least 100 or the transaction amount exceeds 100.",
            "What dates correspond to transactions with a share count of 100 or more or an amount over 100?",
            "Identify the dates of transactions that have either 100 or more shares or a transaction amount greater than 100.",
            "Provide the transaction dates for records with a share count of at least 100 or with amounts greater than 100."
        ],
        "ref_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100",
        "MQL": "db.Investors.aggregate([\n  { \n    $unwind: \"$Transactions\" \n  },\n  { \n    $match: {\n      $or: [\n        { \"Transactions.share_count\": { $gte: \"100\" } },\n        { \"Transactions.amount_of_transaction\": { $gt: 100 } }\n      ]\n    }\n  },\n  { \n    $project: { \n      \"date_of_transaction\": \"$Transactions.date_of_transaction\", \n      \"_id\": 0 \n    }\n  }\n]);\n"
    },
    {
        "record_id": 2550,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the total number of ratings that has more than 3 stars?",
            "How many movie ratings have more than 3 stars?",
            "How many ratings received more than 3 stars?",
            "What is the count of ratings higher than 3 stars?",
            "Can you tell me the total number of ratings that are greater than 3 stars?"
        ],
        "ref_sql": "SELECT count(*) FROM Rating WHERE stars > 3",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $match: {\n      \"Rating.stars\": { $gt: 3 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 808,
        "db_id": "election_representative",
        "nl_queries": [
            "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
            "List the political parties that feature representatives from both New York and Pennsylvania.",
            "Identify the parties that have representatives in both New York state and Pennsylvania state.",
            "Which political parties have representatives in both New York and Pennsylvania?",
            "Please provide the names of parties that have at least one representative from New York and one from Pennsylvania."
        ],
        "ref_sql": "SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\"",
        "MQL": "db.representative.aggregate([\n  { $match: { $or: [{ \"State\": \"New York\" }, { \"State\": \"Pennsylvania\" }] } },\n  { $group: { _id: \"$Party\", count: { $sum: 1 } } },\n  { $match: { count: { $gt: 1 } } },\n  { $project: { _id: 0, Party: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 339,
        "db_id": "movie_1",
        "nl_queries": [
            "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
            "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
            "Return the reviewer’s name, the title of the movie, and the star rating for any instances where the reviewer's name matches the director’s name.",
            "List the reviewer names, movie titles, and star ratings for each review where the reviewer is also the director of the film.",
            "Provide the names of reviewers, corresponding movie titles, and star ratings for ratings given by reviewers who are the same as the movie directors."
        ],
        "ref_sql": "SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $lookup: {\n      from: \"Movie\",\n      localField: \"Rating.mID\",\n      foreignField: \"mID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      $expr: {\n        $eq: [\"$name\", \"$Docs1.director\"]\n      }\n    }\n  },\n  {\n    $project: {\n      name: \"$name\",\n      title: \"$Docs1.title\",\n      stars: \"$Rating.stars\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1829,
        "db_id": "train_station",
        "nl_queries": [
            "Show the station name with greatest number of trains.",
            "Identify the train station that hosts the most trains.",
            "Which station has the highest number of trains operating?",
            "What is the name of the station with the largest train count?",
            "Find the station that features the greatest number of trains."
        ],
        "ref_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.station.aggregate([\n  \n  { $unwind: \"$train_station\" },\n  \n  \n  {\n    $group: {\n      _id: \"$Station_ID\",\n      trainCount: { $sum: 1 }\n    }\n  },\n  \n  \n  { $sort: { trainCount: -1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"_id\",\n      foreignField: \"Station_ID\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      Name: { $arrayElemAt: [\"$Docs1.Name\", 0] }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3914,
        "db_id": "music_1",
        "nl_queries": [
            "What is the name of the song that was released in the most recent year?",
            "What is the name of the song that was released most recently?",
            "Which song was launched in the latest year?",
            "Can you tell me the title of the song that has the latest release date?",
            "What is the title of the song that came out most recently?"
        ],
        "ref_sql": "SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $sort: {\n      \"song.releasedate\": -1\n    }\n  },\n  {\n    $project: {\n      song_name: \"$song.song_name\",\n      releasedate: \"$song.releasedate\",\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 841,
        "db_id": "solvency_ii",
        "nl_queries": [
            "List the names of products that are not in any event.",
            "Retrieve the names of products that have no occurrences in any event.",
            "Provide a list of product names that do not feature in any events.",
            "Show the names of products that aren't associated with any events.",
            "Find and list the product names that are not part of any event."
        ],
        "ref_sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
        "MQL": "db.Products.find({\n  \"Products_in_Events\": { $exists: true, $size: 0 }\n}, { \"Product_Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2246,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the branch name of the bank that has the most number of customers.",
            "What is the name of the bank branch with the greatest number of customers?",
            "Which bank branch has the highest total number of customers?",
            "Identify the name of the bank branch with the maximum number of customers.",
            "What is the name of the bank branch that serves the most customers?"
        ],
        "ref_sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "MQL": "db.bank.aggregate([\n  {\n    $group: {\n      _id: {\n        branch_ID: \"$branch_ID\",\n        bname: \"$bname\"\n      },\n      sum_no_of_customers: {\n        $sum: \"$no_of_customers\"\n      }\n    }\n  },\n  {\n    $sort: {\n      sum_no_of_customers: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      bname: \"$_id.bname\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1223,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the start and end dates of detentions of teachers with last name \"Schultz\".",
            "What are the start and end times for detentions involving teachers with the last name \"Schultz\"?",
            "Retrieve the beginning and conclusion dates for detentions assigned to teachers named \"Schultz\".",
            "Can you provide the detention start and end dates for the teacher whose last name is \"Schultz\"?",
            "List the starting and ending dates of any detentions for teachers that have the surname \"Schultz\"."
        ],
        "ref_sql": "SELECT T1.datetime_detention_start , datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schultz\"",
        "MQL": "db.Addresses.aggregate([\n  \n  { $unwind: \"$Teachers\" },\n  \n  \n  { $match: { \"Teachers.last_name\": \"Schultz\" } },\n  \n  \n  { $unwind: \"$Teachers.Detention\" },\n  \n  \n  { $project: {\n    _id: 0,\n    datetime_detention_start: \"$Teachers.Detention.datetime_detention_start\",\n    datetime_detention_end: \"$Teachers.Detention.datetime_detention_end\"\n  }}\n]);\n"
    },
    {
        "record_id": 2194,
        "db_id": "station_weather",
        "nl_queries": [
            "What is the average high temperature for each day of week?",
            "What is the average maximum temperature recorded for each day of the week?",
            "Can you provide the average high temperatures for every day of the week?",
            "What is the mean high temperature for each weekday?",
            "Show me the average daily high temperature throughout the week."
        ],
        "ref_sql": "SELECT avg(high_temperature) , day_of_week FROM weekly_weather GROUP BY day_of_week",
        "MQL": "db.station.aggregate([\n  {\n    $unwind: \"$weekly_weather\"\n  },\n  {\n    $group: {\n      _id: \"$weekly_weather.day_of_week\",\n      avg_high_temperature: { $avg: \"$weekly_weather.high_temperature\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      day_of_week: \"$_id\",\n      avg_high_temperature: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 893,
        "db_id": "music_4",
        "nl_queries": [
            "Please list all songs in volumes in ascending alphabetical order.",
            "What are the the songs in volumes, listed in ascending order?",
            "Can you provide a list of all songs from the volumes sorted in alphabetical order?",
            "What songs are included in the volumes, arranged in ascending alphabetical sequence?",
            "Show me the songs present in the volumes, organized in ascending order by name."
        ],
        "ref_sql": "SELECT Song FROM volume ORDER BY Song",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Song: \"$volume.Song\"\n    }\n  },\n  {\n    $sort: {\n      Song: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1796,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show all branch names with the number of members in each branch registered after 2015.",
            "For each branch id, what are the names of the branches that were registered after 2015?",
            "List the names of all branches along with the total number of members registered since 2015.",
            "Provide the names of branches and their respective member counts for registrations occurring after 2015.",
            "What are the branch names and member totals for each branch that has members registered after the year 2015?"
        ],
        "ref_sql": "SELECT T2.name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id",
        "MQL": "db.branch.aggregate([\n  {\n    $unwind: \"$membership_register_branch\"\n  },\n  {\n    $addFields: {\n      \"membership_register_branch.Register_Year\": {\n        $toInt: \"$membership_register_branch.Register_Year\"\n      }\n    }\n  },\n  {\n    $match: {\n      \"membership_register_branch.Register_Year\": { $gt: 2015 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Branch_ID\",\n      Name: { $first: \"$Name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 556,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What are the investors that have invested in at least two entrepreneurs?",
            "Return the investors who have invested in two or more entrepreneurs.",
            "Which investors have put money into at least two different entrepreneurs?",
            "List the investors that have made investments in two or more different entrepreneurship ventures.",
            "Identify the investors who have supported at least two entrepreneurs financially."
        ],
        "ref_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $group: {\n      _id: \"$entrepreneur.Investor\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      Investor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1778,
        "db_id": "concert_singer",
        "nl_queries": [
            "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "List the names and locations of stadiums that hosted concerts in the years 2014 and 2015.",
            "Identify the stadiums where concerts occurred in both 2014 and 2015, along with their names and locations.",
            "What are the names and locations of the stadiums that had concerts scheduled in the years 2014 and 2015?"
        ],
        "ref_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
        "MQL": "db.stadium.aggregate([\n  {\n    $unwind: \"$concert\"\n  },\n  {\n    $match: {\n      \"concert.Year\": { $in: [\"2014\", \"2015\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Stadium_ID\",\n      Name: { $first: \"$Name\" },\n      Location: { $first: \"$Location\" },\n      years: { $addToSet: \"$concert.Year\" }\n    }\n  },\n  {\n    $match: {\n      years: { $all: [\"2014\", \"2015\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      Location: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1700,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show the name and theme for all concerts and the number of singers in each concert.",
            "Provide the names and themes of all concerts along with the total number of singers for each concert.",
            "List the concert name and its theme, including how many singers performed at each event.",
            "What are the names and themes of the concerts, and how many singers participated in each?",
            "Display the concert titles and corresponding themes, as well as the number of singers in each concert."
        ],
        "ref_sql": "SELECT T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$concert\" },\n  { $unwind: \"$concert.singer_in_concert\" },\n  {\n    $group: {\n      _id: \"$concert.concert_ID\",\n      concert_Name: { $first: \"$concert.concert_Name\" },\n      Theme: { $first: \"$concert.Theme\" },\n      singerCount: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      concert_Name: 1,\n      Theme: 1,\n      count: \"$singerCount\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1719,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the day Number and date of all the documents?",
            "Return the day Number and stored date for all the documents.",
            "Can you provide the day number and the date on which all documents are stored?",
            "What are the day numbers along with the stored dates for each document?",
            "List the day number and the date stored for every document available."
        ],
        "ref_sql": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $project: {\n      Day_Number: \"$Day_Number\",\n      Date_Stored: \"$All_Documents.Date_Stored\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4039,
        "db_id": "coffee_shop",
        "nl_queries": [
            "What are the id and address of the shops which have a happy hour in May?",
            "Can you provide the IDs and addresses of shops that have happy hour specials in May?",
            "What are the shop IDs and addresses for those that offer happy hour during the month of May?",
            "Please list the IDs and addresses of shops with a happy hour in the month of May.",
            "Which shops have happy hour in May, and what are their IDs and addresses?"
        ],
        "ref_sql": "SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
        "MQL": "db.shop.find({\n  \"happy_hour.Month\": \"May\"\n}, { \"Shop_ID\": 1, \"Address\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 178,
        "db_id": "film_rank",
        "nl_queries": [
            "List all countries of markets in ascending alphabetical order.",
            "What are the countries for each market, ordered alphabetically?",
            "Provide an alphabetical list of all countries represented in the market data.",
            "Can you show the countries from the markets, sorted in ascending order?",
            "Generate a list of market countries arranged alphabetically."
        ],
        "ref_sql": "SELECT Country FROM market ORDER BY Country ASC",
        "MQL": "db.market.aggregate([\n  {\n    $group: {\n      _id: null,\n      countries: { $addToSet: \"$Country\" }\n    }\n  },\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $sort: { \"countries\": 1 }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$countries\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 383,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
            "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?",
            "List the driver IDs of all drivers whose pit stop times exceeded those of some other drivers in race number 841.",
            "Which drivers had longer stop durations than at least one driver during the race with ID 841? Provide their IDs and stop times.",
            "Identify the distinct driver IDs for drivers who had pit stops longer than the maximum recorded during race ID 841."
        ],
        "ref_sql": "SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration > (SELECT min(duration) FROM pitstops WHERE raceid = 841)",
        "MQL": "db.circuits.aggregate([\n  { $unwind: \"$races\" },\n  { $match: { \"races.raceId\": 841 } },\n  { $unwind: \"$races.pitStops\" },\n  {\n    $group: {\n      _id: null,\n      max_milliseconds: { $max: \"$races.pitStops.milliseconds\" }\n    }\n  },\n  { $unwind: \"$races.pitStops\" },\n  {\n    $match: {\n      \"races.pitStops.milliseconds\": { $gt: \"$max_milliseconds\" }\n    }\n  },\n  {\n    $project: {\n      driverId: \"$races.pitStops.driverId\",\n      stop: \"$races.pitStops.milliseconds\",\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: \"$driverId\",\n      stop: { $first: \"$stop\" }\n    }\n  },\n  {\n    $project: {\n      driverId: \"$_id\",\n      stop: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3381,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
            "What is the maximum OMIM value in the database?",
            "What is the highest OMIM value recorded for enzymes?",
            "Can you tell me the peak value of OMIM for the enzymes in this database?",
            "What is the greatest Online Mendelian Inheritance in Man (OMIM) value among the enzymes?"
        ],
        "ref_sql": "SELECT max(OMIM) FROM enzyme",
        "MQL": "db.enzyme.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_OMIM: { $max: \"$OMIM\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_OMIM: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 119,
        "db_id": "bike_1",
        "nl_queries": [
            "How many days had both mean humidity above 50 and mean visibility above 8?",
            "What is the number of days that had an average humity above 50 and an average visibility above 8?",
            "How many days experienced a mean humidity higher than 50 and mean visibility greater than 8 miles?",
            "What is the total count of days with average humidity exceeding 50 and average visibility over 8 miles?",
            "Count the number of days that recorded mean humidity above 50 and mean visibility above 8 miles."
        ],
        "ref_sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
        "MQL": "db.weather.aggregate([\n  {\n    $match: {\n      mean_humidity: { $gt: 50 },\n      mean_visibility_miles: { $gt: 8 }\n    }\n  },\n  {\n    $count: \"num_days\"\n  }\n])"
    },
    {
        "record_id": 3578,
        "db_id": "small_bank_1",
        "nl_queries": [
            "List all customers’ names in the alphabetical order.",
            "What are the names of all the customers in alphabetical order?",
            "Provide the names of all customers sorted in alphabetical order.",
            "Retrieve a list of customers’ names arranged alphabetically.",
            "Show all customer names in ascending order."
        ],
        "ref_sql": "SELECT name FROM accounts ORDER BY name",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1643,
        "db_id": "gymnast",
        "nl_queries": [
            "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
            "Return the names of gymnasts who did not grow up in Santo Domingo.",
            "List the names of gymnasts who are not from Santo Domingo.",
            "Provide the names of gymnasts with hometowns different from \"Santo Domingo\".",
            "Identify gymnasts whose hometown is anything but Santo Domingo and return their names."
        ],
        "ref_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
        "MQL": "db.people.find(\n  {\n    Hometown: { $ne: \"Santo Domingo\" },\n    gymnast: { $exists: true, $ne: [] }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 1508,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the id and last name of the student that has the most behavior incidents?",
            "Identify the student who has the highest number of behavior incidents and provide their ID and last name.",
            "Retrieve the last name and student ID of the student with the most recorded behavior incidents.",
            "Who is the student with the most behavior incidents, and what are their ID and last name?",
            "Show me the ID and last name of the student that has experienced the largest number of behavior incidents."
        ],
        "ref_sql": "SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Students\" },\n  { $unwind: \"$Students.Behavior_Incident\" },\n  {\n    $group: {\n      _id: { student_id: \"$Students.student_id\", last_name: \"$Students.last_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      student_id: \"$_id.student_id\",\n      last_name: \"$_id.last_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 560,
        "db_id": "music_4",
        "nl_queries": [
            "What are the issue dates of volumes associated with the artist aged 23 or younger?",
            "Return the issue dates of volumes by artists who are at most 23 years old?",
            "List the issue dates of volumes for artists who are 23 years of age or younger.",
            "What are the release dates of volumes from artists below the age of 24?",
            "Provide the issue dates associated with volumes by artists aged 23 or less."
        ],
        "ref_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $match: {\n      Age: { $lte: 23 }\n    }\n  },\n  {\n    $project: {\n      Issue_Date: \"$volume.Issue_Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 680,
        "db_id": "orchestra",
        "nl_queries": [
            "What are the names of conductors whose nationalities are not \"USA\"?",
            "Return the names of conductors that do not have the nationality \"USA\".",
            "List the names of conductors whose nationality is different from \"USA\".",
            "Provide the names of conductors that are not from the USA.",
            "Fetch the names of conductors who do not have \"USA\" as their nationality."
        ],
        "ref_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "MQL": "db.conductor.find({\n  Nationality: { $ne: \"USA\" }\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1844,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What is the product description of the product booked with an amount of 102.76?",
            "Can you provide the description of the product that has a booked amount of 102.76?",
            "What is the description for the product booked at a rate of 102.76?",
            "Please tell me the product description corresponding to a booking amount of 102.76.",
            "Could you let me know the description of the item that was booked for 102.76?"
        ],
        "ref_sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76",
        "MQL": "db.Products_for_Hire.find({\n  \"Products_Booked.booked_amount\": 102.76\n}, { \"product_description\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 18,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "List all information about customer master index, and sort them by details in descending order.",
            "Display all entries from the customer master index, sorted by details in descending order.",
            "Retrieve and list customer master index data, arranged by details in a descending manner.",
            "Show all records from the customer master index and order them by `cmi_details` in descending order.",
            "Provide a list of all items in the customer master index, with the details sorted from highest to lowest."
        ],
        "ref_sql": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
        "MQL": "db.Customer_Master_Index.find({}, { \"master_customer_id\": 1, \"cmi_details\": 1, \"_id\": 0 }).sort({ \"cmi_details\": -1 });\n"
    },
    {
        "record_id": 2770,
        "db_id": "small_bank_1",
        "nl_queries": [
            "How many accounts have a savings balance above the average savings balance?",
            "Find the number of accounts with a savings balance that is higher than the average savings balance.",
            "What is the count of accounts that possess a savings balance greater than the average balance?",
            "How many accounts have savings that exceed the average savings balance?",
            "Determine the number of accounts with savings balances that are above the average savings balance."
        ],
        "ref_sql": "SELECT count(*) FROM savings WHERE balance > (SELECT avg(balance) FROM savings)",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_balance: {\n        $avg: \"$SAVINGS.balance\"\n      }\n    }\n  },\n  {\n    $lookup: {\n      from: \"ACCOUNTS\",\n      let: {\n        avg_balance: \"$avg_balance\"\n      },\n      pipeline: [\n        {\n          $unwind: \"$SAVINGS\"\n        },\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$SAVINGS.balance\", \"$$avg_balance\"]\n            }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Docs1\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 445,
        "db_id": "icfp_1",
        "nl_queries": [
            "What is the name of the institution that \"Matthias Blume\" belongs to?",
            "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
            "What institution is associated with the author named \"Matthias Blume\"?",
            "Can you tell me the name of the institution where \"Matthias Blume\" is affiliated?",
            "Which institution does the author \"Matthias Blume\" represent?"
        ],
        "ref_sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"",
        "MQL": "db.Authors.aggregate([\n  {\n    $match: {\n      fname: \"Matthias\",\n      lname: \"Blume\"\n    }\n  },\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"Authorship.instID\",\n      foreignField: \"instID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$Docs1.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2726,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the number of patients who are not using the medication of Procrastin-X.",
            "How many patients are not using Procrastin-X as medication?",
            "How many patients have not been prescribed the medication Procrastin-X?",
            "Count the patients who do not take Procrastin-X as their medication.",
            "What is the total number of patients that are not on Procrastin-X medication?"
        ],
        "ref_sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Patient\"\n  },\n  {\n    $lookup: {\n      from: \"Medication\",\n      localField: \"Patient.Prescribes.Medication\",\n      foreignField: \"Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Name\": { $ne: \"Procrastin-X\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Patient.SSN\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2474,
        "db_id": "tvshow",
        "nl_queries": [
            "How many cartoons were written by \"Joseph Kuhr\"?",
            "What is the number of cartoones written by Joseph Kuhr?",
            "What is the total count of cartoons authored by Joseph Kuhr?",
            "How many animated shows are credited to the writer Joseph Kuhr?",
            "Can you provide the number of cartoons created by Joseph Kuhr?"
        ],
        "ref_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $match: {\n      \"Cartoon.Written_by\": \"Joseph Kuhr\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2464,
        "db_id": "car_1",
        "nl_queries": [
            "How many car models were produced by the maker with full name American Motor Company?",
            "What is the number of car models created by the car maker American Motor Company?",
            "What is the total number of car models manufactured by the American Motor Company?",
            "How many distinct car models does American Motor Company produce?",
            "Can you provide the count of car models available from the maker known as American Motor Company?"
        ],
        "ref_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.FullName\": \"American Motor Company\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$countries.car_makers.model_list\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 590,
        "db_id": "performance_attendance",
        "nl_queries": [
            "Show the most common location of performances.",
            "Identify the location where performances take place most frequently.",
            "What is the location with the highest number of performances?",
            "Find the performance venue that hosts the most events.",
            "Determine the location that has the largest attendance of performances."
        ],
        "ref_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.performance.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1608,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the names of representatives and the dates of elections they participated in.",
            "Can you provide the names of the representatives along with the dates of the elections they took part in?",
            "List the representatives and the respective dates of their elections.",
            "What representatives were involved in elections, and when did those elections occur?",
            "Give me the names of representatives and the election dates for each one."
        ],
        "ref_sql": "SELECT T2.Name , T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID",
        "MQL": "db.representative.aggregate([\n  { $unwind: \"$election\" },\n  { $project: { \"Name\": 1, \"Date\": \"$election.Date\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3059,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the number of rooms with king bed for each decor type.",
            "How many rooms have king beds? Report the number for each decor type.",
            "Count the number of rooms featuring king beds, grouped by their decor styles.",
            "How many rooms are available with king beds? Provide the count for each type of decor.",
            "Determine the total number of king bed rooms for each decor category."
        ],
        "ref_sql": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $match: {\n      bedType: \"King\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$decor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      decor: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2650,
        "db_id": "orchestra",
        "nl_queries": [
            "How many conductors are there?",
            "Count the number of conductors.",
            "What is the total number of conductors available?",
            "How many conductors are present in the database?",
            "Can you provide the count of conductors listed?"
        ],
        "ref_sql": "SELECT count(*) FROM conductor",
        "MQL": "db.conductor.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3882,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the names of all modern rooms with a base price below $160 and two beds.",
            "What are the names of modern rooms that have a base price lower than $160 and two beds.",
            "List the names of all rooms with a modern style that cost less than $160 and feature two beds.",
            "What names are given to modern rooms that have a price below $160 and include two beds?",
            "Provide the names of modern rooms priced under $160 that come with two beds."
        ],
        "ref_sql": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';",
        "MQL": "db.Rooms.find({\n  decor: \"modern\",\n  basePrice: { $lt: 160 },\n  beds: 2\n}, {\n  roomName: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3593,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the name of buildings that do not have any institution.",
            "List the names of buildings that lack any associated institutions.",
            "Provide the names of buildings with no institutions linked to them.",
            "What are the names of buildings that do not have any institutions?",
            "Retrieve the names of buildings that do not include any institutions."
        ],
        "ref_sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
        "MQL": "db.building.find({\n  \"Institution\": { $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2572,
        "db_id": "restaurant_1",
        "nl_queries": [
            "How many times has the student Linda Smith visited Subway?",
            "What is the total number of visits made by Linda Smith to Subway?",
            "How often has Linda Smith gone to Subway?",
            "Can you tell me how many times Linda Smith has visited the Subway restaurant?",
            "How many occasions has Linda Smith dined at Subway?"
        ],
        "ref_sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      \"LName\": \"Smith\",\n      \"Fname\": \"Linda\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Restaurant\",\n      localField: \"StuID\",\n      foreignField: \"Visits_Restaurant.StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.ResName\": \"Subway\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2813,
        "db_id": "entrepreneur",
        "nl_queries": [
            "How many distinct companies are there?",
            "Count the number of different companies.",
            "What is the total number of unique companies available?",
            "How many different companies exist in the dataset?",
            "Determine the count of distinct companies represented."
        ],
        "ref_sql": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $group: {\n      _id: \"$entrepreneur.Company\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_Company\"\n  }\n]);\n"
    },
    {
        "record_id": 743,
        "db_id": "course_teach",
        "nl_queries": [
            "List the names of teachers who have not been arranged to teach courses.",
            "What are the names of the teachers whose courses have not been arranged?",
            "Identify the names of teachers who are not assigned to teach any courses.",
            "Provide a list of teachers without any course arrangements made for them.",
            "What are the names of the instructors who have no courses scheduled?"
        ],
        "ref_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "MQL": "db.teacher.aggregate([\n  {\n    $match: {\n      course_arrange: { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 386,
        "db_id": "student_1",
        "nl_queries": [
            "Report the first name and last name of all the teachers.",
            "What are the first name and last name of all the teachers?",
            "Provide the first and last names of every teacher in the database.",
            "Could you list the first and last names of all teachers?",
            "Show me the first and last names for all the teachers available."
        ],
        "ref_sql": "SELECT DISTINCT firstname , lastname FROM teachers",
        "MQL": "db.teachers.find({}, { FirstName: 1, LastName: 1, _id: 0 });\n"
    },
    {
        "record_id": 2429,
        "db_id": "candidate_poll",
        "nl_queries": [
            "how many people are there whose weight is higher than 85 for each gender?",
            "Count the number of people of each sex who have a weight higher than 85.",
            "What is the total count of individuals for each gender with a weight over 85?",
            "Provide the number of people of different sexes who weigh more than 85.",
            "How many individuals exceed a weight of 85, broken down by gender?"
        ],
        "ref_sql": "SELECT count(*) , sex FROM people WHERE weight > 85 GROUP BY sex",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      Weight: { $gt: 85 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Sex\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Sex: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1151,
        "db_id": "city_record",
        "nl_queries": [
            "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
            "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
            "Can you provide a list of cities where the March temperature is cooler than in July or warmer than in October?",
            "Which cities experience a March temperature that is either lower than July's or higher than October's?",
            "Identify cities that have a temperature in March that is less than that of July or exceeds that of October."
        ],
        "ref_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct",
        "MQL": "db.city.find({\n  $or: [\n    { $expr: { $lt: [\"$temperature.Mar\", \"$temperature.Jul\"] } },\n    { $expr: { $gt: [\"$temperature.Mar\", \"$temperature.Oct\"] } }\n  ]\n}, {\n  _id: 0,\n  City: 1\n});\n"
    },
    {
        "record_id": 4134,
        "db_id": "document_management",
        "nl_queries": [
            "What is the structure of the document with the least number of accesses?",
            "Return the structure description of the document that has been accessed the fewest number of times.",
            "What is the description of the document structure that has the least number of accesses?",
            "Identify the document structure that has been accessed the least, and return its description.",
            "What is the name of the document structure with the lowest access frequency?"
        ],
        "ref_sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$document_structure_description\",\n      min_access_count: {\n        $min: \"$Documents.access_count\"\n      }\n    }\n  },\n  {\n    $sort: {\n      min_access_count: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      document_structure_description: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 79,
        "db_id": "workshop_paper",
        "nl_queries": [
            "What is the author of the submission with the highest score?",
            "Find the author who achieved the highest score in a submission.",
            "Who is the author of the submission that received the highest score?",
            "Identify the author of the submission with the top score.",
            "Name the author whose submission obtained the highest score."
        ],
        "ref_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "MQL": "db.submission.aggregate([\n  {\n    $sort: { Scores: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Author: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3597,
        "db_id": "company_office",
        "nl_queries": [
            "List the names of buildings that have no company office.",
            "Which buildings do not have any company office? Give me the building names.",
            "Provide the names of all buildings that lack a company office.",
            "Identify the buildings without any company office and list their names.",
            "Can you give me the names of buildings that do not host any company offices?"
        ],
        "ref_sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "MQL": "db.buildings.aggregate([\n  {\n    $lookup: {\n      from: \"Companies\",\n      localField: \"id\",\n      foreignField: \"Office_locations.building_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 804,
        "db_id": "election",
        "nl_queries": [
            "What are the names of parties that do not have delegates in election?",
            "Which parties did not have any delegates in elections?",
            "Which political parties didn't have delegates during the elections?",
            "List the names of parties that lack delegates in the election process.",
            "Can you provide the names of parties with no delegates in any election?"
        ],
        "ref_sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "MQL": "db.party.aggregate([\n  {\n    $project: {\n      Party: 1,\n      has_delegate: {\n        $gt: [\n          {\n            $size: {\n              $filter: {\n                input: \"$election\",\n                cond: {\n                  $ne: [\"$$this.Delegate\", \"\"]\n                }\n              }\n            }\n          },\n          0\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      has_delegate: false\n    }\n  },\n  {\n    $project: {\n      Party: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1219,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the dates of assessment notes for students with first name \"Fanny\".",
            "What are the dates for the assessment notes of students named \"Fanny\"?",
            "Retrieve the dates on which assessment notes were made for the student with the first name \"Fanny.\"",
            "List the dates of assessment notes corresponding to students whose first name is \"Fanny.\"",
            "Provide the dates associated with assessment notes for the student named \"Fanny.\""
        ],
        "ref_sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"",
        "MQL": "db.Addresses.aggregate([\n  \n  { $unwind: \"$Students\" },\n  \n  { $match: { \"Students.first_name\": \"Fanny\" } },\n  \n  { $unwind: \"$Students.Assessment_Notes\" },\n  \n  { $project: { \"date_of_notes\": \"$Students.Assessment_Notes.date_of_notes\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3488,
        "db_id": "train_station",
        "nl_queries": [
            "Show the name, time, and service for all trains.",
            "Retrieve the names, timings, and services of all available trains.",
            "List all trains along with their names, service times, and service details.",
            "Provide the name, schedule, and service information for every train in the database.",
            "Display the names and service times of all trains, including their service types."
        ],
        "ref_sql": "SELECT name , TIME , service FROM train",
        "MQL": "db.train.find({}, { \"Name\": 1, \"Time\": 1, \"Service\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 469,
        "db_id": "music_4",
        "nl_queries": [
            "Return the dates of ceremony and the results of all music festivals",
            "What are the dates of ceremony and results for each music festival?",
            "List the dates and outcomes of all music festivals' ceremonies.",
            "What dates were the ceremonies held for music festivals, and what were their results?",
            "Provide the ceremony dates and results for every music festival."
        ],
        "ref_sql": "SELECT Date_of_ceremony , RESULT FROM music_festival",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $unwind: \"$volume.music_festival\"\n  },\n  {\n    $project: {\n      Date_of_ceremony: \"$volume.music_festival.Date_of_ceremony\",\n      Result: \"$volume.music_festival.Result\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1150,
        "db_id": "city_record",
        "nl_queries": [
            "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
            "Which cities have lower temperature in March than in July and have been once host cities?",
            "List all cities where the temperature in March is less than in July and that have previously acted as host cities.",
            "Identify the cities that experience cooler temperatures in March compared to July, and have served as host cities.",
            "What cities have a lower temperature in March than in July and are known for having hosted events before?"
        ],
        "ref_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$temperature\"\n  },\n  {\n    $match: {\n      $expr: {\n        $lt: [\"$temperature.Mar\", \"$temperature.Jul\"]\n      },\n      \"hosting_city\": {\n        $exists: true,\n        $not: {\n          $size: 0\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      City: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4004,
        "db_id": "game_1",
        "nl_queries": [
            "How many games are played for all students?",
            "What is the total number of games played?",
            "What is the overall count of games played by all students?",
            "How many games have been completed by students in total?",
            "Can you tell me the cumulative number of games played by the students?"
        ],
        "ref_sql": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_gamesplayed: {\n        $sum: \"$SportsInfo.GamesPlayed\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_gamesplayed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2147,
        "db_id": "aircraft",
        "nl_queries": [
            "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
            "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
            "How many passengers, on average, do airports that accommodate the aircraft \"Robinson R-22\" serve?",
            "What is the mean total passenger count of airports linked to the \"Robinson R-22\" aircraft?",
            "Determine the average number of total passengers at all airports served by the aircraft \"Robinson R-22\"."
        ],
        "ref_sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = \"Robinson R-22\"",
        "MQL": "db.airport.aggregate([\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"airport_aircraft.Aircraft_ID\",\n      foreignField: \"Aircraft_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Aircraft\": \"Robinson R-22\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Total_Passengers: {\n        $avg: \"$Total_Passengers\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Total_Passengers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2869,
        "db_id": "college_1",
        "nl_queries": [
            "How many sections does course ACCT-211 has?",
            "What is the number of different class sections offered in the course ACCT-211?",
            "How many unique class sections are available for the course ACCT-211?",
            "What is the total count of different sections provided for the ACCT-211 course?",
            "Can you tell me the number of distinct sections that the ACCT-211 course has?"
        ],
        "ref_sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $match: {\n      \"CLASS.CRS_CODE\": \"ACCT-211\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$CLASS.CLASS_SECTION\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_class_section: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_class_section: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 163,
        "db_id": "sports_competition",
        "nl_queries": [
            "List the types of competition that have at most five competitions of that type.",
            "What are the types of competition that have most 5 competitions for that type?",
            "Provide a list of competition types that have a maximum of five occurrences.",
            "Identify the competition types that feature no more than five competitions.",
            "Enumerate the types of competitions that are limited to five or fewer total instances."
        ],
        "ref_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5",
        "MQL": "db.competition.aggregate([\n  {\n    $group: {\n      _id: \"$Competition_type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $lte: 5 }\n    }\n  },\n  {\n    $project: {\n      Competition_type: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3226,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the first names of teachers whose email address contains the word \"man\".",
            "List the first names of teachers with an email address that has the term \"man\" in it.",
            "Retrieve the first names of any teachers whose email contains the string \"man\".",
            "Show me the first names of teachers whose emails include the word \"man\".",
            "Identify the first names of teachers that have \"man\" in their email addresses."
        ],
        "ref_sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Teachers\"\n  },\n  {\n    $match: {\n      \"Teachers.email_address\": {\n        $regex: \"man\",\n        $options: \"i\"  \n      }\n    }\n  },\n  {\n    $project: {\n      \"first_name\": \"$Teachers.first_name\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3684,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the names of stations that have latitude lower than 37.5?",
            "What are the names of all stations with a latitude smaller than 37.5?",
            "List the names of stations located at latitudes below 37.5.",
            "Show me the names of all stations where the latitude is beneath 37.5.",
            "What are the names of stations with latitudes that are less than 37.5 degrees?"
        ],
        "ref_sql": "SELECT name FROM station WHERE lat < 37.5",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      lat: { $lt: 37.5 }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1708,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the first name and last name for the customer with account name 900.",
            "What are the full names of customers with the account name 900?",
            "Retrieve the first and last names of the customer holding the account named 900.",
            "List the complete names of the customers associated with the account name of 900.",
            "Provide the first and last names for all customers who have the account titled 900."
        ],
        "ref_sql": "SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      \"Accounts.account_name\": \"900\"\n    }\n  },\n  {\n    $project: {\n      customer_first_name: 1,\n      customer_last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2137,
        "db_id": "poker_player",
        "nl_queries": [
            "What is the average earnings of poker players with height higher than 200?",
            "Give average earnings of poker players who are taller than 200.",
            "What are the average earnings for poker players exceeding a height of 200?",
            "Calculate the average income of poker players who stand taller than 200 centimeters.",
            "What is the mean earnings of poker players who have a height greater than 200?"
        ],
        "ref_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      Height: { $gt: 200 }\n    }\n  },\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Earnings: { $avg: \"$poker_player.Earnings\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Earnings: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2436,
        "db_id": "program_share",
        "nl_queries": [
            "how many programs are broadcast in each time section of the day?",
            "Count the number of programs broadcast for each time section of a day.",
            "What is the number of programs aired during different times of the day?",
            "How many programs are shown at various times throughout the day?",
            "Provide the count of programs that air in each time segment of the day."
        ],
        "ref_sql": "SELECT count(*) , time_of_day FROM broadcast GROUP BY time_of_day",
        "MQL": "db.program.aggregate([\n  {\n    $unwind: \"$broadcast\"\n  },\n  {\n    $group: {\n      _id: \"$broadcast.Time_of_day\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Time_of_day: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2859,
        "db_id": "mountain_photos",
        "nl_queries": [
            "How many different kinds of lens brands are there?",
            "What is the total number of unique lens brands available?",
            "How many distinct brands of camera lenses can be found?",
            "Count the different brands of camera lenses present in the database.",
            "How many various camera lens brands exist?"
        ],
        "ref_sql": "SELECT count(DISTINCT brand) FROM camera_lens",
        "MQL": "db.camera_lens.aggregate([\n  {\n    $group: {\n      _id: \"$brand\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_brand\"\n  }\n]);\n"
    },
    {
        "record_id": 1928,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
            "What amenities does Smith Hall have in alphabetical order?",
            "List the amenities available in Smith Hall dorm, sorted alphabetically by their names.",
            "What are the names of the amenities offered by Smith Hall, arranged in alphabetical order?",
            "Can you provide a list of the amenities that Smith Hall has, ordered by the names of the amenities?"
        ],
        "ref_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      dorm_name: \"Smith Hall\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"dormid\",\n      foreignField: \"Has_amenity.dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.Has_amenity\"\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"Docs1.Has_amenity.amenid\",\n      foreignField: \"amenid\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $unwind: \"$Docs2\"\n  },\n  {\n    $sort: {\n      \"Docs2.amenity_name\": 1\n    }\n  },\n  {\n    $project: {\n      amenity_name: \"$Docs2.amenity_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 254,
        "db_id": "car_1",
        "nl_queries": [
            "Find the name of the makers that produced some cars in the year of 1970?",
            "What is the name of the different car makers who produced a car in 1970?",
            "List the manufacturers that made cars in the year 1970.",
            "Can you provide the names of car makers who produced vehicles during 1970?",
            "Identify the car manufacturers that were active in producing models in the year 1970."
        ],
        "ref_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.model_list.car_names.cars_data.Year\": 1970\n    }\n  },\n  {\n    $group: {\n      _id: \"$countries.car_makers.Maker\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Maker: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 625,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Which membership card has more than 5 members?",
            "What membership card has a membership of over 5 individuals?",
            "Identify the membership card that has more than five members enrolled.",
            "Which type of membership card has a membership count exceeding five?",
            "Find the membership card associated with more than five members."
        ],
        "ref_sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*) > 5",
        "MQL": "db.member.aggregate([\n  {\n    $group: {\n      _id: \"$Membership_card\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 5 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Membership_card: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3923,
        "db_id": "game_1",
        "nl_queries": [
            "Which sport has most number of students on scholarship?",
            "What is the sport with the most scholarship students?",
            "What sport is associated with the largest number of scholarship athletes?",
            "Identify the sport that has the highest count of students receiving scholarships.",
            "Which sport attracts the most scholarship students?"
        ],
        "ref_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $match: {\n      \"SportsInfo.OnScholarship\": \"Y\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$SportsInfo.SportName\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      SportName: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1458,
        "db_id": "activity_1",
        "nl_queries": [
            "Show all the faculty ranks and the number of students advised by each rank.",
            "How many students are advised by each rank of faculty? List the rank and the number of students.",
            "List the ranks of faculty members along with the total number of students that they advise.",
            "How many students are mentored by each faculty rank? Provide both the rank and the corresponding student count.",
            "Provide a breakdown of faculty ranks with the respective number of students they support."
        ],
        "ref_sql": "SELECT T1.rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Faculty\",\n      localField: \"Advisor\",\n      foreignField: \"FacID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1313,
        "db_id": "bike_1",
        "nl_queries": [
            "For each trip, return its ending station's installation date.",
            "What is the installation date for each ending station on all the trips?",
            "Can you provide the installation date for the end station associated with each trip?",
            "Show the installation dates of the concluding stations for all trips.",
            "For every trip, what is the installation date of its corresponding end station?"
        ],
        "ref_sql": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id",
        "MQL": "db.trip.aggregate([\n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"end_station_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      id: 1,\n      installation_date: {\n        $arrayElemAt: [\"$Docs1.installation_date\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1034,
        "db_id": "chinook_1",
        "nl_queries": [
            "What is the name of the most common genre in all tracks?",
            "Find the name of the genre that is most frequent across all tracks.",
            "What genre appears most frequently among all the tracks?",
            "Identify the genre with the highest number of tracks.",
            "Which genre has the largest representation in the collection of tracks?"
        ],
        "ref_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Genre.aggregate([\n  {\n    $unwind: \"$Track\"\n  },\n  {\n    $group: {\n      _id: \"$GenreId\",\n      trackCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { trackCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Genre\",\n      localField: \"_id\",\n      foreignField: \"GenreId\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4169,
        "db_id": "club_1",
        "nl_queries": [
            "Find the last names of the members of the club \"Bootup Baltimore\".",
            "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
            "What are the last names of individuals who are part of the \"Bootup Baltimore\" club?",
            "List the surnames of the members belonging to the club called \"Bootup Baltimore\".",
            "Provide me with the last names of students who are members of the \"Bootup Baltimore\" club."
        ],
        "ref_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Bootup Baltimore\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      LName: \"$Docs1.LName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 156,
        "db_id": "workshop_paper",
        "nl_queries": [
            "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.",
            "Which colleges have both authors with submission score above 90 and authors with submission score below 80?",
            "List the colleges that feature authors with submission scores greater than 90 as well as authors with scores less than 80.",
            "Identify the colleges that have both authors whose submission scores exceed 90 and those with scores below 80.",
            "Which colleges possess authors who have scored above 90 and also those who have scored below 80?"
        ],
        "ref_sql": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80",
        "MQL": "db.submission.aggregate([\n  {\n    $match: {\n      Scores: { $gt: 90 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$College\",\n      above_90: { $addToSet: \"$Author\" }\n    }\n  },\n  {\n    $match: {\n      Scores: { $lt: 80 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$_id\",\n      above_90: { $first: \"$above_90\" },\n      below_80: { $addToSet: \"$Author\" }\n    }\n  },\n  {\n    $match: {\n      above_90: { $exists: true },\n      below_80: { $exists: true }\n    }\n  },\n  {\n    $project: {\n      College: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 903,
        "db_id": "farm",
        "nl_queries": [
            "Please show the different statuses, ordered by the number of cities that have each.",
            "Return the different statuses of cities, ascending by frequency.",
            "Display the unique statuses of cities, sorted by how many cities correspond to each one, in ascending order.",
            "List all distinct city statuses, arranged in order of the count of cities for each status, from least to most.",
            "Show the various city statuses, ranked in ascending order based on the number of cities associated with them."
        ],
        "ref_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "MQL": "db.city.aggregate([\n  {\n    $group: {\n      _id: \"$Status\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: 1\n    }\n  },\n  {\n    $project: {\n      Status: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4118,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
            "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?",
            "List the names of products that are white in color and do not use \"Handful\" as their unit of measurement.",
            "What product names are available in white but have a unit of measure other than \"Handful\"?",
            "Provide the names of products colored white that are measured using units different from \"Handful.\""
        ],
        "ref_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = \"white\" AND t2.unit_of_measure != \"Handful\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $match: {\n      color_description: \"white\"\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Product_Categories\",\n      localField: \"Products.product_category_code\",\n      foreignField: \"product_category_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.unit_of_measure\": { $ne: \"Handful\" }\n    }\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2685,
        "db_id": "swimming",
        "nl_queries": [
            "How many events are there?",
            "What is the total number of events held at the stadiums?",
            "Can you tell me how many events are hosted?",
            "How many events take place at the stadiums?",
            "What's the count of events organized in the stadium?"
        ],
        "ref_sql": "SELECT count(*) FROM event",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$event\" },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 926,
        "db_id": "game_1",
        "nl_queries": [
            "Show ids for all students who live in CHI.",
            "What are the ids of all students who live in CHI?",
            "List the student IDs of everyone living in the CHI area.",
            "Can you provide the IDs for all students residing in CHI?",
            "Identify the student IDs of those who are based in CHI."
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE city_code = \"CHI\"",
        "MQL": "db.Student.find(\n  { city_code: \"CHI\" },\n  { StuID: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3127,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the document name and template id for document with description with the letter 'w' in it?",
            "Return the names and template ids for documents that contain the letter w in their description.",
            "List the document names and template IDs for documents whose descriptions contain the letter 'w'.",
            "What are the names and template identifiers of the documents that have the letter 'w' in their descriptions?",
            "Retrieve the names and template IDs for any documents that feature the letter 'w' in their description."
        ],
        "ref_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $match: {\n      \"Templates.Documents.Document_Description\": {\n        $regex: \"w\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $project: {\n      Document_Name: \"$Templates.Documents.Document_Name\",\n      Template_ID: \"$Templates.Template_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2469,
        "db_id": "car_1",
        "nl_queries": [
            "How many countries are listed?",
            "How many countries exist?",
            "What is the total number of countries recorded?",
            "Can you tell me how many countries are available?",
            "How many nations are presented in the list?"
        ],
        "ref_sql": "SELECT count(*) FROM COUNTRIES;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4208,
        "db_id": "movie_1",
        "nl_queries": [
            "What are names of the movies that are either made before 1980 or directed by James Cameron?",
            "What are the names of all movies made before 1980 or had James Cameron as the director?",
            "List the titles of movies that were released before 1980 or were directed by James Cameron.",
            "Identify the names of all films made prior to 1980 or directed by James Cameron.",
            "What titles of movies were either produced before the year 1980 or had James Cameron as their director?"
        ],
        "ref_sql": "SELECT title FROM Movie WHERE director = \"James Cameron\" OR YEAR < 1980",
        "MQL": "db.Movie.find({\n  $or: [\n    { year: { $lt: 1980 } },\n    { director: \"James Cameron\" }\n  ]\n}, {\n  title: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1231,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all document ids, names and the number of paragraphs in each document.",
            "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "Provide the document IDs and names along with the total number of paragraphs for each document.",
            "List the IDs and names of all documents and indicate how many paragraphs each one contains.",
            "Can you show the IDs and names of the documents together with their respective paragraph counts?"
        ],
        "ref_sql": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
        "MQL": "db.Ref_Template_Types.aggregate([\n  { $unwind: \"$Templates\" },\n  { $unwind: \"$Templates.Documents\" },\n  { $unwind: \"$Templates.Documents.Paragraphs\" },\n  {\n    $group: {\n      _id: {\n        Document_ID: \"$Templates.Documents.Document_ID\",\n        Document_Name: \"$Templates.Documents.Document_Name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Document_ID: \"$_id.Document_ID\",\n      Document_Name: \"$_id.Document_Name\",\n      count: 1\n    }\n  }\n])\n"
    },
    {
        "record_id": 4093,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Find the names of the candidates whose support percentage is lower than their oppose rate.",
            "What are the names of candidates who have a lower support rate than oppose rate?",
            "List the names of candidates who have a support rate that is less than their opposition rate.",
            "Identify the names of candidates whose percentage of support is lower than their percentage of opposition.",
            "What are the names of candidates with a support rate that falls below their oppose rate?"
        ],
        "ref_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate",
        "MQL": "db.people.aggregate([\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      candidates: {\n        $filter: {\n          input: \"$candidate\",\n          as: \"candidate\",\n          cond: {\n            $lt: [\"$$candidate.Support_rate\", \"$$candidate.Oppose_rate\"]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      candidates: {\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3037,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
            "What are the dates when customers with ids between 10 and 20 became customers?",
            "Retrieve the dates on which customers with IDs ranging from 10 to 20 became customers.",
            "What are the dates that customers numbered 10 to 20 established their accounts?",
            "List the \"date became customers\" for customers whose IDs fall between 10 and 20."
        ],
        "ref_sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_id: { $gte: 10, $lte: 20 }\n    }\n  },\n  {\n    $project: {\n      date_became_customer: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1646,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "Show the names of artworks in ascending order of the year they are nominated in.",
            "List the titles of artworks sorted by the year of their nominations in ascending order.",
            "Provide the names of the artworks arranged in order by the year they were nominated.",
            "Display the artwork names ordered by the year of nomination, starting with the earliest.",
            "Retrieve the names of artworks sorted from the earliest to the latest nomination year."
        ],
        "ref_sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year",
        "MQL": "db.artwork.aggregate([\n  {\n    $lookup: {\n      from: \"festival_detail\",\n      localField: \"nomination.Festival_ID\",\n      foreignField: \"Festival_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Year\": \"$Docs1.Year\"\n    }\n  },\n  {\n    $sort: {\n      \"Year\": 1\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1435,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which kind of part has the least number of faults? List the part name.",
            "What is the name of the part that has the fewest faults?",
            "Identify the part with the least number of reported faults and provide its name.",
            "Which part has the lowest fault count? Please state its name.",
            "Can you tell me the name of the part that experiences the least faults?"
        ],
        "ref_sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Parts.aggregate([\n  \n  { $unwind: \"$Part_Faults\" },\n  \n  \n  { \n    $group: {\n      _id: \"$part_id\",\n      faultCount: { $sum: 1 }\n    }\n  },\n  \n  \n  { $sort: { faultCount: 1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  {\n    $lookup: {\n      from: \"Parts\",\n      localField: \"_id\",\n      foreignField: \"part_id\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      part_name: { $arrayElemAt: [\"$Docs1.part_name\", 0] }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 682,
        "db_id": "world_1",
        "nl_queries": [
            "What are names of countries with the top 3 largest population?",
            "Return the names of the 3 most populated countries.",
            "List the names of the three countries with the highest populations.",
            "What are the names of the three countries that have the largest population counts?",
            "Identify the three countries with the biggest populations and provide their names."
        ],
        "ref_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "MQL": "db.country.aggregate([\n  {\n    $sort: { Population: -1 }  \n  },\n  {\n    $limit: 3  \n  },\n  {\n    $project: {\n      _id: 0,  \n      Name: 1  \n    }\n  }\n]);\n"
    },
    {
        "record_id": 4,
        "db_id": "activity_1",
        "nl_queries": [
            "What is the first and last name of the faculty participating in the most activities?",
            "Find the first and last name of the faculty who is involved in the largest number of activities.",
            "Who is the faculty member with the highest involvement in activities, and what are their first and last names?",
            "Identify the first name and last name of the faculty who participates in the greatest number of activities.",
            "What are the first and last names of the faculty member that is most actively participating in activities?"
        ],
        "ref_sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Faculty.aggregate([\n  {\n    $unwind: \"$Faculty_Participates_in\"\n  },\n  {\n    $group: {\n      _id: \"$FacID\",\n      activityCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { activityCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Faculty\",\n      localField: \"_id\",\n      foreignField: \"FacID\",\n      as: \"facultyDetails\"\n    }\n  },\n  {\n    $unwind: \"$facultyDetails\"\n  },\n  {\n    $project: {\n      Fname: \"$facultyDetails.Fname\",\n      Lname: \"$facultyDetails.Lname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3408,
        "db_id": "department_management",
        "nl_queries": [
            "What are the maximum and minimum budget of the departments?",
            "What is the largest and smallest budget allocated to any department?",
            "Can you provide the maximum and minimum budget amounts for the departments?",
            "What are the highest and lowest budgets assigned to the various departments?",
            "Please tell me the maximum and minimum departmental budgets."
        ],
        "ref_sql": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department",
        "MQL": "db.department.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_budget_in_billions: { $max: \"$Budget_in_Billions\" },\n      min_budget_in_billions: { $min: \"$Budget_in_Billions\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_budget_in_billions: 1,\n      min_budget_in_billions: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1554,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the birth date and birth place of the body builder with the highest total points?",
            "Can you provide the birth date and birth place of the body builder with the highest total score?",
            "What is the birth date and place of the body builder who scored the most total points?",
            "Please share the birth date and location of the body builder that has the maximum total points.",
            "Find the birth date and birth place of the body builder with the greatest total score."
        ],
        "ref_sql": "SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$body_builder\"\n  },\n  {\n    $sort: { \"body_builder.Total\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"Birth_Date\": 1,\n      \"Birth_Place\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1144,
        "db_id": "driving_school",
        "nl_queries": [
            "Which city does staff with first name as Janessa and last name as Sawayn live?",
            "In what city does Janessa Sawayn live?",
            "What is the city of residence for staff member Janessa Sawayn?",
            "Can you tell me which city Janessa Sawayn lives in?",
            "Where is Janessa Sawayn's home city?"
        ],
        "ref_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $project: {\n      city: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3572,
        "db_id": "network_2",
        "nl_queries": [
            "Who is the youngest male?",
            "What is the name of the youngest male?",
            "Can you tell me the name of the youngest male person?",
            "Who qualifies as the youngest male in the dataset?",
            "Identify the youngest male and provide his name."
        ],
        "ref_sql": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )",
        "MQL": "db.Person.aggregate([\n  {\n    $match: { gender: \"male\" }\n  },\n  {\n    $sort: { age: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3507,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of all instructors in the Art department who have taught some course and the course_id.",
            "What are the names of Art instructors who have taught a course, and the corresponding course id?",
            "List the names of all instructors from the Art department along with the IDs of the courses they have taught.",
            "Who are the instructors in the Art department, and what are the course IDs for the courses they teach?",
            "Show the names of Art department instructors and the corresponding course identifiers for the courses they have instructed."
        ],
        "ref_sql": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'",
        "MQL": "db.department.aggregate([\n  {\n    $match: {\n      dept_name: \"Art\"\n    }\n  },\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $unwind: \"$instructor.teaches\"\n  },\n  {\n    $project: {\n      name: \"$instructor.name\",\n      course_id: \"$instructor.teaches.course_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2031,
        "db_id": "orchestra",
        "nl_queries": [
            "Show the years in which orchestras that have given more than one performance are founded.",
            "What are years of founding for orchestras that have had more than a single performance?",
            "List the years when orchestras that conducted over one performance were established.",
            "Identify the founding years of orchestras that have performed more than once.",
            "What are the years of establishment for orchestras that have delivered multiple performances?"
        ],
        "ref_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $project: {\n      Year_of_Founded: \"$orchestra.Year_of_Founded\",\n      count_performance: {\n        $size: \"$orchestra.performance\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_performance: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Year_of_Founded: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 639,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the names and parties of representatives?",
            "List the names along with their political parties for all representatives.",
            "What are the representatives' names and their respective parties?",
            "Can you provide the names and party affiliations of all representatives?",
            "Please show the names and political parties of the representatives."
        ],
        "ref_sql": "SELECT Name , Party FROM representative",
        "MQL": "db.representative.find({}, { \"Name\": 1, \"Party\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3276,
        "db_id": "game_1",
        "nl_queries": [
            "Show all video game types and the number of video games in each type.",
            "What are the types of video games and how many are in each type?",
            "Display the different genres of video games along with the count of games in each genre.",
            "List the categories of video games and the total number of games found in each category.",
            "Provide an overview of video game types and the corresponding number of games associated with each type."
        ],
        "ref_sql": "SELECT gtype , count(*) FROM Video_games GROUP BY gtype",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $group: {\n      _id: \"$GType\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      GType: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 439,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "List the all the distinct names of the products with the characteristic name 'warm'.",
            "What are the different product names for products that have the 'warm' characteristic:?",
            "Provide a list of unique product names that possess the characteristic 'warm'.",
            "Can you enumerate the product names associated with the 'warm' characteristic?",
            "Identify all distinct product names for items characterized as 'warm'."
        ],
        "ref_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\"",
        "MQL": "db.Ref_Characteristic_Types.aggregate([\n  {\n    $unwind: \"$Characteristics\"\n  },\n  {\n    $match: {\n      \"Characteristics.characteristic_name\": \"warm\"\n    }\n  },\n  {\n    $unwind: \"$Characteristics.Product_Characteristics\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Colors\",\n      let: { product_id: \"$Characteristics.Product_Characteristics.product_id\" },\n      pipeline: [\n        { $unwind: \"$Products\" },\n        { $match: { $expr: { $eq: [\"$Products.product_id\", \"$$product_id\"] } } },\n        { $project: { product_name: \"$Products.product_name\" } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.product_name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4258,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What is the zip code of the address in the city Port Chelsea?",
            "What is the zip code for Port Chelsea?",
            "What is the postal code for the address located in Port Chelsea?",
            "Can you provide the zip code for the city of Port Chelsea?",
            "What zip code is associated with addresses in Port Chelsea?"
        ],
        "ref_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: {\n      city: \"Port Chelsea\"\n    }\n  },\n  {\n    $project: {\n      zip_postcode: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1849,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What are the names of products whose availability equals to 1?",
            "List the names of products that are currently marked as available.",
            "What products can be hired that have an availability status of 1?",
            "Provide the names of products that are available for hire.",
            "Show the names of all products whose availability status is set to 1."
        ],
        "ref_sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1",
        "MQL": "db.Products_for_Hire.find({ \"View_Product_Availability.available_yn\": \"1\" }, { \"product_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2899,
        "db_id": "swimming",
        "nl_queries": [
            "How many different countries are all the swimmers from?",
            "What is the total number of unique countries represented by the swimmers?",
            "How many distinct nationalities can be found among the swimmers?",
            "Count the number of different nations the swimmers belong to.",
            "How many unique countries do the swimmers come from?"
        ],
        "ref_sql": "SELECT count(DISTINCT nationality) FROM swimmer",
        "MQL": "db.swimmer.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_nationality: { $addToSet: \"$Nationality\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_nationality: { $size: \"$count_DISTINCT_nationality\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3188,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the names of all the employees with role \"HR\".",
            "Which employees have the role with code \"HR\"? Find their names.",
            "List the names of all employees whose role is categorized as \"HR\".",
            "Retrieve the names of employees assigned to the role with the code \"HR\".",
            "Provide the names of employees that hold the \"HR\" position."
        ],
        "ref_sql": "SELECT employee_name FROM Employees WHERE role_code = \"HR\"",
        "MQL": "db.Roles.aggregate([\n  {\n    $match: {\n      Role_Code: \"HR\"\n    }\n  },\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $project: {\n      Employee_Name: \"$Employees.Employee_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1057,
        "db_id": "perpetrator",
        "nl_queries": [
            "What are the names of perpetrators whose country is not \"China\"?",
            "List the names of perpetrators belonging to countries other than China.",
            "Provide the names of individuals identified as perpetrators with countries that are not \"China.\"",
            "Give me the names of perpetrators whose associated country is different from China.",
            "What are the names of the perpetrators that do not have China as their country?"
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != \"China\"",
        "MQL": "db.people.find({\n  \"perpetrator\": {\n    $elemMatch: {\n      \"Country\": { $ne: \"China\" }\n    }\n  }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3001,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "Find the IDs of customers whose name contains \"Diana\".",
            "What are the IDs of customers who have \"Diana\" in part of their names?",
            "Retrieve the IDs of customers that have \"Diana\" located anywhere in their names.",
            "What are the customer IDs for individuals whose names include the substring \"Diana\"?",
            "List the IDs of customers whose names feature \"Diana\" at any position."
        ],
        "ref_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "MQL": "db.Customers.find(\n  { Customer_name: { $regex: \"Diana\", $options: \"i\" } },\n  { Customer_ID: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2538,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "How many paragraphs for the document with name 'Summer Show'?",
            "Count the number of paragraphs in the document named 'Summer Show'.",
            "What is the total number of paragraphs in the document named \"Summer Show\"?",
            "How many paragraphs are there in the document titled \"Summer Show\"?",
            "Can you tell me the count of paragraphs for the document referred to as \"Summer Show\"?"
        ],
        "ref_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $match: {\n      \"Templates.Documents.Document_Name\": \"Summer Show\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Templates.Documents.Paragraphs\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 345,
        "db_id": "debate",
        "nl_queries": [
            "Show the distinct venues of debates",
            "List all unique venues where debates have been held.",
            "Retrieve the different venues used for debates.",
            "What are the various venues available for debates?",
            "Provide a list of distinct debate venues."
        ],
        "ref_sql": "SELECT DISTINCT Venue FROM debate",
        "MQL": "db.debate.aggregate([\n  {\n    $group: {\n      _id: \"$Venue\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Venue: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1131,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
            "Find the booking start date and end date for the apartments that have more than two bedrooms.",
            "What are the booking start dates for apartments with over two bedrooms?",
            "List the booking start dates for apartments that have more than two bedrooms.",
            "Show the booking start dates for apartments that feature more than two bedrooms."
        ],
        "ref_sql": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $match: {\n      \"Apartments.bedroom_count\": { $gt: 2 }\n    }\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $project: {\n      booking_start_date: \"$Apartments.Apartment_Bookings.booking_start_date\",\n            _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1518,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What are the task details, task id and project id for the projects which are detailed as 'omnis' or have more than 2 outcomes?",
            "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?",
            "Can you provide the task details, task IDs, and project IDs for projects that are labeled as 'omnis' or that have three or more recorded outcomes?",
            "What task details, along with task IDs and project IDs, are available for projects described as 'omnis' or showing at least three outcomes?",
            "Show me the details of tasks, including task IDs and project IDs, for projects identified as 'omnis' or those with more than two outcomes."
        ],
        "ref_sql": "SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count(*) > 2",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: {\n      path: \"$Organisations.Projects.Project_Outcomes\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$Organisations.Projects.project_id\",\n      project_details: { $first: \"$Organisations.Projects.project_details\" },\n      outcome_count: { $sum: { $cond: [{ $ifNull: [\"$Organisations.Projects.Project_Outcomes\", false] }, 1, 0] } },\n      tasks: { $first: \"$Organisations.Projects.Tasks\" }\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { project_details: \"omnis\" },\n        { outcome_count: { $gte: 3 } }\n      ]\n    }\n  },\n  {\n    $unwind: \"$tasks\"\n  },\n  {\n    $project: {\n      task_details: \"$tasks.task_details\",\n      task_id: \"$tasks.task_id\",\n      project_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2067,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Return the apartment numbers of the apartments with type code \"Flat\".",
            "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
            "List the apartment numbers for all apartments categorized as \"Flat\".",
            "What are the apartment numbers of the units defined with the type code \"Flat\"?",
            "Provide the apartment numbers for apartments identified as having the type code \"Flat\"."
        ],
        "ref_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $match: {\n      \"Apartments.apt_type_code\": \"Flat\"\n    }\n  },\n  {\n    $project: {\n      apt_number: \"$Apartments.apt_number\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4010,
        "db_id": "game_1",
        "nl_queries": [
            "Show total hours per week and number of games played for students under 20.",
            "What is the total number of hours per week and number of games played by students under 20?",
            "Provide the total weekly hours and count of games participated in by students younger than 20.",
            "What are the total hours spent per week and the total number of games played by students below the age of 20?",
            "Can you show the aggregated hours per week and the total games played by students who are under 20 years old?"
        ],
        "ref_sql": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Age: { $lt: 20 }\n    }\n  },\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_hoursperweek: { $sum: \"$SportsInfo.HoursPerWeek\" },\n      sum_gamesplayed: { $sum: \"$SportsInfo.GamesPlayed\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_hoursperweek: 1,\n      sum_gamesplayed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2100,
        "db_id": "aircraft",
        "nl_queries": [
            "What is the average number of international passengers of all airports?",
            "What is the average number of international passengers for an airport?",
            "How many international passengers, on average, do airports serve?",
            "What is the mean number of international passengers across all airports?",
            "Can you provide the average count of international passengers for airports?"
        ],
        "ref_sql": "SELECT avg(International_Passengers) FROM airport",
        "MQL": "db.airport.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_International_Passengers: { $avg: \"$International_Passengers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_International_Passengers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 108,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many schools have some students playing in goalie and mid positions.",
            "How many schools have students playing in goalie and mid-field positions?",
            "What is the count of colleges that have players participating in both goalie and midfield positions?",
            "How many colleges feature students who play in the positions of goalie and mid?",
            "Can you tell me the number of schools that have students competing in both goalie and midfield roles?"
        ],
        "ref_sql": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')",
        "MQL": "db.College.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.pPos\": { $in: [\"goalie\", \"mid\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$cName\",\n      positions: { $addToSet: \"$Tryout.pPos\" }\n    }\n  },\n  {\n    $match: {\n      positions: { $all: [\"goalie\", \"mid\"] }\n    }\n  },\n  {\n    $count: \"COUNT\"\n  }\n])"
    },
    {
        "record_id": 294,
        "db_id": "architecture",
        "nl_queries": [
            "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
            "Can you list the unique names of mills created by architects with bridges longer than 80 meters?",
            "What mills have been constructed by architects who also designed bridges that exceed 80 meters in length?",
            "Identify the distinct names of mills that were built by architects known for bridges longer than 80 meters.",
            "What are the unique mill names associated with architects that have built bridges measuring over 80 meters?"
        ],
        "ref_sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80",
        "MQL": "db.architect.aggregate([\n  \n  { $unwind: \"$bridge\" },\n  \n  { $match: { \"bridge.length_meters\": { $gt: 80 } } },\n  \n  { $group: { _id: \"$id\" } },\n  \n  { $lookup: {\n    from: \"architect\",\n    localField: \"_id\",\n    foreignField: \"id\",\n    as: \"Docs1\"\n  }},\n  \n  { $unwind: \"$Docs1\" },\n  { $unwind: \"$Docs1.mill\" },\n  \n  { $group: { _id: \"$Docs1.mill.name\" } },\n  \n  { $project: { \"name\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2170,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What is the average amount due for all the payments?",
            "What is the mean amount owed for all customer payments?",
            "Can you provide the average outstanding amount for every payment made?",
            "What is the average due amount across all payment transactions?",
            "Determine the mean amount that is currently due for the payments."
        ],
        "ref_sql": "SELECT avg(amount_due) FROM payments",
        "MQL": "db.Discount_Coupons.aggregate([\n  { $unwind: \"$Customers\" },\n  { $unwind: \"$Customers.Payments\" },\n  {\n    $group: {\n      _id: null,\n      avg_amount_due: { $avg: \"$Customers.Payments.amount_due\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_amount_due: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1295,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
            "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
            "Provide the start dates for grants that include documents labeled as both 'Regular' and 'Initial Application'.",
            "List the start dates of grants that possess both 'Regular' and 'Initial Application' document types.",
            "What are the start dates for grants associated with both document descriptions: 'Regular' and 'Initial Application'?"
        ],
        "ref_sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Grants\"\n  },\n  {\n    $unwind: \"$Organisations.Grants.Documents\"\n  },\n  {\n    $lookup: {\n      from: \"Document_Types\",\n      localField: \"Organisations.Grants.Documents.document_type_code\",\n      foreignField: \"document_type_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Docs1.document_description\": \"Regular\" },\n        { \"Docs1.document_description\": \"Initial Application\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Organisations.Grants.grant_id\",\n      grant_start_date: { $first: \"$Organisations.Grants.grant_start_date\" },\n      document_descriptions: { $addToSet: \"$Docs1.document_description\" }\n    }\n  },\n  {\n    $match: {\n      document_descriptions: { $all: [\"Regular\", \"Initial Application\"] }\n    }\n  },\n  {\n    $project: {\n      grant_start_date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1694,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the card type codes and the number of transactions.",
            "What are the different card types, and how many transactions have been made with each?",
            "List the types of cards along with the total number of transactions for each.",
            "Provide an overview of card type codes and the associated counts of transactions.",
            "Can you break down the card types and indicate how many transactions were completed for each?"
        ],
        "ref_sql": "SELECT T2.card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $unwind: \"$Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$card_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      card_type_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2654,
        "db_id": "world_1",
        "nl_queries": [
            "how many countries are in Asia?",
            "Count the number of countries in Asia.",
            "What is the total number of countries located in Asia?",
            "How many nations are there in the Asian continent?",
            "Determine the count of countries that are part of Asia."
        ],
        "ref_sql": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: \"Asia\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4092,
        "db_id": "candidate_poll",
        "nl_queries": [
            "list all female (sex is F) candidate names in the alphabetical order.",
            "What are the names of all female candidates in alphabetical order (sex is F)?",
            "Provide the names of all female candidates, sorted alphabetically.",
            "Can you list the names of female candidates in order by their names?",
            "Show me all names of female candidates arranged in alphabetical order."
        ],
        "ref_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      Sex: \"F\",\n      candidate: { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4182,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all template ids and number of documents using each template.",
            "What are all different template ids used for documents, and how many times were each of them used?",
            "List all template IDs along with the count of documents associated with each template.",
            "Provide a summary of different template IDs used for documents, including the number of times each template ID is referenced.",
            "Identify all template IDs and indicate how many documents each template has been utilized for."
        ],
        "ref_sql": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Templates.Template_ID\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Template_ID: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3602,
        "db_id": "program_share",
        "nl_queries": [
            "List all channel names ordered by their rating in percent from big to small.",
            "Give me a list of all the channel names sorted by the channel rating in descending order.",
            "Provide a list of channel names arranged in order of their ratings from highest to lowest.",
            "Show all channel names sorted according to their rating percentage in decreasing order.",
            "Display the names of the channels ranked by their rating in percent, starting with the highest."
        ],
        "ref_sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "MQL": "db.channel.find({}, { Name: 1, _id: 0 }).sort({ Rating_in_percent: -1 });\n"
    },
    {
        "record_id": 736,
        "db_id": "singer",
        "nl_queries": [
            "List the name of singers in ascending order of net worth.",
            "What are the names of singers ordered by ascending net worth?",
            "Provide the names of singers sorted by their net worth in increasing order.",
            "Show the names of singers arranged according to ascending net worth.",
            "What names can we find for singers when ordered by their net worth from lowest to highest?"
        ],
        "ref_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "MQL": "db.singer.find({}, { Name: 1, _id: 0 }).sort({ Net_Worth_Millions: 1 });\n"
    },
    {
        "record_id": 2860,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many different colleges do attend the tryout test?",
            "How many different colleges were represented at tryouts?",
            "What is the total number of unique colleges participating in the tryout test?",
            "Can you tell me how many colleges were involved in the tryouts?",
            "How many distinct colleges took part in the tryout event?"
        ],
        "ref_sql": "SELECT count(DISTINCT cName) FROM tryout",
        "MQL": "db.College.aggregate([\n  {\n    $group: {\n      _id: \"$cName\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_cName: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_cName: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3635,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name of companies that do not make DVD drive.",
            "What are the names of companies that do not make DVD drives?",
            "List the companies that do not produce DVD drives.",
            "Which manufacturers don't make DVD drives?",
            "Provide the names of manufacturers that aren’t involved in making DVD drives."
        ],
        "ref_sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $lookup: {\n      from: \"Manufacturers\",\n      localField: \"Code\",\n      foreignField: \"Products.Manufacturer\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Products.Name\": {\n        $ne: \"DVD drive\"\n      },\n      \"Docs1.Products.Name\": {\n        $ne: \"DVD drive\"\n      }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4126,
        "db_id": "product_catalog",
        "nl_queries": [
            "What is the level name of the cheapest catalog (in USD)?",
            "Find the level name of the catalog with the lowest price (in USD).",
            "What is the name of the catalog level for the least expensive item in USD?",
            "Identify the level name of the catalog that has the lowest price point (in US dollars).",
            "Can you tell me the catalog level name of the product with the cheapest price in dollars?"
        ],
        "ref_sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $sort: {\n      \"Catalog_Structure.Catalog_Contents.price_in_dollars\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      catalog_level_name: \"$Catalog_Structure.catalog_level_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2154,
        "db_id": "document_management",
        "nl_queries": [
            "Find the average access count of documents with the least popular structure.",
            "What is the average access count of documents that have the least common structure?",
            "What is the average number of times documents from the least popular structure have been accessed?",
            "Calculate the average access frequency for documents belonging to the least common document structure.",
            "Determine the average access count for documents associated with the structure that is the least frequently used."
        ],
        "ref_sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$document_structure_code\",\n      count: { $sum: 1 },\n      documents: { $push: \"$Documents\" }\n    }\n  },\n  {\n    $sort: { count: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_access_count: { $avg: \"$documents.access_count\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_access_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 76,
        "db_id": "performance_attendance",
        "nl_queries": [
            "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
            "Retrieve the attendance figures for performances held at either \"TD Garden\" or \"Bell Centre\".",
            "List the attendance records for performances that took place at the \"TD Garden\" or \"Bell Centre\".",
            "What are the attendance numbers for events hosted at \"TD Garden\" and \"Bell Centre\"?",
            "Display the attendance statistics for performances conducted at locations \"TD Garden\" or \"Bell Centre\"."
        ],
        "ref_sql": "SELECT Attendance FROM performance WHERE LOCATION = \"TD Garden\" OR LOCATION = \"Bell Centre\"",
        "MQL": "db.performance.find({\n  \"Location\": { $in: [\"TD Garden\", \"Bell Centre\"] }\n}, {\n  \"Attendance\": 1,\n  \"_id\": 0\n})\n"
    },
    {
        "record_id": 3341,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
            "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
            "Retrieve the last names of all students who are either female living in BAL city or male and under the age of 20.",
            "Who are the students whose last names should be listed if they are females in the city with code BAL or males younger than 20?",
            "List the last names of students that are either females with a city code of BAL or males less than 20 years old."
        ],
        "ref_sql": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20",
        "MQL": "db.Student.find({\n  $or: [\n    { $and: [{ Sex: \"F\" }, { city_code: \"BAL\" }] },\n    { $and: [{ Sex: \"M\" }, { Age: { $lt: 20 } }] }\n  ]\n}, { LName: 1, _id: 0 });\n"
    },
    {
        "record_id": 3220,
        "db_id": "driving_school",
        "nl_queries": [
            "List the first name middle name and last name of all staff.",
            "What are the first, middle, and last names of all staff?",
            "Provide the first, middle, and last names for each staff member.",
            "What are the complete names (first, middle, and last) of all the staff?",
            "Show me the first name, middle name, and last name of every staff member."
        ],
        "ref_sql": "SELECT first_name , middle_name , last_name FROM Staff;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $project: {\n      first_name: \"$Staff.first_name\",\n      middle_name: \"$Staff.middle_name\",\n      last_name: \"$Staff.last_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2780,
        "db_id": "train_station",
        "nl_queries": [
            "How many train stations are there?",
            "What is the total number of train stations?",
            "Can you tell me how many train stations exist?",
            "How many stations are there in the train network?",
            "Please provide the count of all train stations."
        ],
        "ref_sql": "SELECT count(*) FROM station",
        "MQL": "db.station.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 190,
        "db_id": "match_season",
        "nl_queries": [
            "Show the country name and capital of all countries.",
            "What are the names and capitals of each country?",
            "Provide the names of all countries and their respective capitals.",
            "List all countries along with their capitals.",
            "Can you give me the country names and their capitals for every country?"
        ],
        "ref_sql": "SELECT Country_name , Capital FROM country",
        "MQL": "db.country.find({}, { Country_name: 1, Capital: 1, _id: 0 });\n"
    },
    {
        "record_id": 917,
        "db_id": "game_1",
        "nl_queries": [
            "List ids for all student who are on scholarship.",
            "What are the ids for all sporty students who are on scholarship?",
            "Retrieve the student IDs of those who have received a scholarship in sports.",
            "Can you provide the IDs of all students participating in sports that are currently on scholarship?",
            "Show me the IDs for every student on scholarship who is also involved in athletics."
        ],
        "ref_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
        "MQL": "db.Student.find({\n  \"SportsInfo.OnScholarship\": \"Y\"\n}, {\n  \"StuID\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 2250,
        "db_id": "department_management",
        "nl_queries": [
            "What are the names of the states where at least 3 heads were born?",
            "Which states have 3 or more heads born in them?",
            "Identify the names of the states where a minimum of three heads were born.",
            "List the states that have at least three individuals who were heads.",
            "What states are home to three or more heads at birth?"
        ],
        "ref_sql": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3",
        "MQL": "db.head.aggregate([\n  {\n    $group: {\n      _id: \"$born_state\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 3 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      born_state: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3802,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Which category does the product named \"flax\" belong to?",
            "What is the code of the category that the product with the name 'flax' belongs to?",
            "What is the category associated with the product called \"flax\"?",
            "Can you tell me the category code of the item named \"flax\"?",
            "Which category is linked to the product name \"flax\"?"
        ],
        "ref_sql": "SELECT product_category_code FROM products WHERE product_name = \"flax\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"flax\"\n    }\n  },\n  {\n    $project: {\n      product_category_code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1229,
        "db_id": "movie_1",
        "nl_queries": [
            "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
            "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
            "Can you list the directors of movies that earned a 5-star review along with the titles of those films?",
            "Who are the directors of various movies that received a perfect score of 5 stars, and what are the titles of these movies?",
            "Please provide the names of the directors along with the titles of movies that have been rated 5 stars."
        ],
        "ref_sql": "SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5",
        "MQL": "db.Movie.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $match: {\n      \"Rating.stars\": 5\n    }\n  },\n  {\n    $lookup: {\n      from: \"Reviewer\",\n      localField: \"Rating.rID\",\n      foreignField: \"rID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      director: 1,\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3988,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find the total and average amount paid in claim headers.",
            "What are the total amount and average amount paid in claim headers?",
            "Calculate the total and average amounts that have been paid in the claim headers.",
            "What is the total amount paid and the average amount for the claim headers?",
            "Determine both the total payment amount and the average payment amount in the claim headers."
        ],
        "ref_sql": "SELECT sum(amount_piad) , avg(amount_piad) FROM claim_headers",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $unwind: \"$Policies.Claim_Headers\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_amount_piad: { $sum: \"$Policies.Claim_Headers.Amount_Piad\" },\n      avg_amount_piad: { $avg: \"$Policies.Claim_Headers.Amount_Piad\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_amount_piad: 1,\n      avg_amount_piad: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 538,
        "db_id": "body_builder",
        "nl_queries": [
            "List the height and weight of people in descending order of height.",
            "Provide the height and weight measurements of individuals sorted by height in decreasing order.",
            "Show the height and weight of people, arranged from tallest to shortest.",
            "Display a list of people's heights and weights, sorted in descending height order.",
            "Retrieve the height and weight of individuals, ordered by height from highest to lowest."
        ],
        "ref_sql": "SELECT Height , Weight FROM people ORDER BY Height DESC",
        "MQL": "db.people.find({}, { \"Height\": 1, \"Weight\": 1, \"_id\": 0 }).sort({ \"Height\": -1 });\n"
    },
    {
        "record_id": 3549,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
            "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
            "List the names and salaries of instructors in the Physics department who earn less than their average counterpart.",
            "Provide the names and salary figures for faculty members in the Physics department with salaries below the average for their department.",
            "Who are the instructors in the Physics department that have salaries lower than the average salary of all instructors in that department?"
        ],
        "ref_sql": "SELECT name , salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')",
        "MQL": "db.department.aggregate([\n  \n  { $unwind: \"$instructor\" },\n  \n  \n  { $match: { \"instructor.dept_name\": \"Physics\" } },\n  \n  \n  {\n    $group: {\n      _id: \"$instructor.dept_name\",\n      avg_salary: { $avg: \"$instructor.salary\" }\n    }\n  },\n  \n  \n  {\n    $lookup: {\n      from: \"department\",\n      pipeline: [\n        { $unwind: \"$instructor\" },\n        {\n          $project: {\n            name: \"$instructor.name\",\n            salary: \"$instructor.salary\",\n            dept_name: \"$instructor.dept_name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  {\n    $project: {\n      avg_salary: 1,\n      name: \"$Docs1.name\",\n      salary: \"$Docs1.salary\",\n      dept_name: \"$Docs1.dept_name\"\n    }\n  },\n  {\n    $match: {\n      $expr: {\n        $lt: [\"$salary\", \"$avg_salary\"]\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      salary: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3344,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the location code, the starting date and ending data in that location for all the documents.",
            "What are each document's location code, and starting date and ending data in that location?",
            "Provide the location code along with the start and end dates for each document's location.",
            "List the location codes, the dates when documents were in those locations, and when they will leave.",
            "What is the location code, starting date, and ending date for all documents in their respective locations?"
        ],
        "ref_sql": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations",
        "MQL": "db.Ref_Calendar.aggregate([\n  { $unwind: \"$All_Documents\" },\n  { $unwind: \"$All_Documents.Document_Locations\" },\n  {\n    $project: {\n      Location_Code: \"$All_Documents.Document_Locations.Location_Code\",\n      Date_in_Location_From: \"$All_Documents.Document_Locations.Date_in_Location_From\",\n      Date_in_Locaton_To: \"$All_Documents.Document_Locations.Date_in_Locaton_To\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4221,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the names of the items that did not receive any review.",
            "List the titles of items that have not received any reviews.",
            "What are the names of items with zero reviews?",
            "Identify the titles of items that do not have any reviews.",
            "Retrieve the names of items that lack any reviews."
        ],
        "ref_sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "MQL": "db.item.find({\n  \"review\": { $size: 0 }\n}, { \"title\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3383,
        "db_id": "election",
        "nl_queries": [
            "Return the maximum and minimum population among all counties.",
            "What are the maximum and minimum population of the counties?",
            "Provide the highest and lowest population figures for the counties.",
            "What are the largest and smallest populations recorded among the counties?",
            "Show me the maximum and minimum population numbers across all counties."
        ],
        "ref_sql": "SELECT max(Population) , min(Population) FROM county",
        "MQL": "db.county.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Population: { $max: \"$Population\" },\n      min_Population: { $min: \"$Population\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Population: 1,\n      min_Population: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2061,
        "db_id": "dorm_1",
        "nl_queries": [
            "List in alphabetic order all different amenities.",
            "What are the different dorm amenity names in alphabetical order?",
            "Provide an alphabetical list of all unique amenities available.",
            "What are the distinct names of dorm amenities arranged in order from A to Z?",
            "Show me all the different amenities sorted alphabetically."
        ],
        "ref_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "MQL": "db.Dorm_amenity.aggregate([\n  {\n    $group: {\n      _id: null,\n      amenity_names: {\n        $addToSet: \"$amenity_name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$amenity_names\"\n  },\n  {\n    $sort: {\n      amenity_names: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      amenity_name: \"$amenity_names\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1729,
        "db_id": "college_1",
        "nl_queries": [
            "What is the department name of the students with lowest gpa belongs to?",
            "What is the name of the department with the student that has the lowest GPA?",
            "Which department is associated with the student who has the lowest GPA?",
            "Can you tell me the name of the department that has the student with the lowest GPA?",
            "Identify the department that the student with the minimum GPA belongs to."
        ],
        "ref_sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT\"\n  },\n  {\n    $group: {\n      _id: null,\n      min_STU_GPA: {\n        $min: \"$DEPARTMENT.STUDENT.STU_GPA\"\n      },\n      departmentName: {\n        $first: \"$DEPARTMENT.DEPT_NAME\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      DEPT_NAME: \"$departmentName\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2736,
        "db_id": "poker_player",
        "nl_queries": [
            "How many poker players are there?",
            "Count the number of poker players.",
            "What is the total number of poker players in the database?",
            "How many individuals play poker as indicated in the records?",
            "Please provide the count of all poker players listed."
        ],
        "ref_sql": "SELECT count(*) FROM poker_player",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 242,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find the first names of all customers that live in Brazil and have an invoice.",
            "What are the different first names for customers from Brazil who have also had an invoice?",
            "List all distinct first names of customers who are based in Brazil and have had invoices.",
            "Retrieve unique first names for customers residing in Brazil with at least one invoice.",
            "What distinct first names do customers in Brazil, who have an invoice, have?"
        ],
        "ref_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $unwind: \"$Customer\"\n  },\n  {\n    $match: {\n      \"Customer.Country\": \"Brazil\",\n      \"Customer.Invoice\": { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FirstName: \"$Customer.FirstName\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$FirstName\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FirstName: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3409,
        "db_id": "college_2",
        "nl_queries": [
            "Find the maximum and average capacity among rooms in each building.",
            "What are the greatest and average capacity for rooms in each building?",
            "What is the highest and average capacity of classrooms in each building?",
            "Retrieve the maximum and average room capacity for every building.",
            "Show the peak and average capacity of rooms located in each building."
        ],
        "ref_sql": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building",
        "MQL": "db.classroom.aggregate([\n  {\n    $group: {\n      _id: \"$building\",\n      max_capacity: { $max: \"$capacity\" },\n      avg_capacity: { $avg: \"$capacity\" }\n    }\n  },\n  {\n    $project: {\n      building: \"$_id\",\n      max_capacity: 1,\n      avg_capacity: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1756,
        "db_id": "activity_1",
        "nl_queries": [
            "Show first name and last name for all the students advised by Michael Goodrich.",
            "Which students are advised by Michael Goodrich? Give me their first and last names.",
            "List the first and last names of all students who are under the advisement of Michael Goodrich.",
            "Can you provide the first and last names of students advised by Michael Goodrich?",
            "What are the first and last names of the students who have Michael Goodrich as their advisor?"
        ],
        "ref_sql": "SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = \"Michael\" AND T1.lname = \"Goodrich\"",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Faculty\",\n      localField: \"Advisor\",\n      foreignField: \"FacID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Fname\": \"Michael\",\n      \"Docs1.Lname\": \"Goodrich\"\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      LName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4228,
        "db_id": "station_weather",
        "nl_queries": [
            "show all train numbers and names ordered by their time from early to late.",
            "List all train numbers along with their names, sorted by departure time from earliest to latest.",
            "Display all the train names and their respective numbers in order of their scheduled times, starting from the earliest.",
            "Provide a list of train numbers and names arranged by time, from the earliest departure to the latest.",
            "Retrieve the train numbers and names and sort them by their schedule, showing the earliest first."
        ],
        "ref_sql": "SELECT train_number , name FROM train ORDER BY TIME",
        "MQL": "db.train.find({}, { \"train_number\": 1, \"name\": 1, \"_id\": 0 }).sort({ \"time\": 1 });\n"
    },
    {
        "record_id": 394,
        "db_id": "manufactory_1",
        "nl_queries": [
            "What are the different cities listed?",
            "Give the distinct headquarters of manufacturers.",
            "Which cities are represented in the headquarters of manufacturers?",
            "List the unique headquarters of the manufacturing companies.",
            "What are the distinct locations where manufacturers are headquartered?"
        ],
        "ref_sql": "SELECT DISTINCT headquarter FROM manufacturers",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $group: {\n      _id: \"$Headquarter\"\n    }\n  },\n  {\n    $project: {\n      Headquarter: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 40,
        "db_id": "chinook_1",
        "nl_queries": [
            "What is the average unit price of rock tracks?",
            "Find the average unit price of tracks from the Rock genre.",
            "What is the mean unit price for tracks categorized as Rock?",
            "Calculate the average price per unit of rock genre tracks.",
            "Determine the average unit cost of songs that belong to the Rock genre."
        ],
        "ref_sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
        "MQL": "db.Genre.aggregate([\n  {\n    $match: {\n      Name: \"Rock\"\n    }\n  },\n  {\n    $unwind: \"$Track\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_UnitPrice: { $avg: \"$Track.UnitPrice\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_UnitPrice: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1580,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the heights of body builders with total score smaller than 315?",
            "What heights are recorded for body builders whose total score is below 315?",
            "Can you provide the heights of body builders with a total score less than 315?",
            "List the heights of body builders whose total performance score is under 315.",
            "Show me the heights of body builders that have a total score lower than 315."
        ],
        "ref_sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315",
        "MQL": "db.people.find({\n  \"body_builder.Total\": { $lt: 315 }\n}, { \"Height\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1067,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "How many events have each participants attended? List the participant id, type and the number.",
            "What is the number of events attended by each participant? Please provide the participant ID, type, and the corresponding count.",
            "Please list the total number of events that each participant has been a part of, along with their ID and type.",
            "How many events has each participant participated in? Include the participant ID, participant type, and the count of events.",
            "Can you provide a list detailing how many events each participant has attended, including their ID and type?"
        ],
        "ref_sql": "SELECT T1.Participant_ID , T1.Participant_Type_Code , count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID",
        "MQL": "db.Participants.aggregate([\n  \n  { $unwind: \"$Participants_in_Events\" },\n  \n  \n  {\n    $group: {\n      _id: {\n        Participant_ID: \"$Participant_ID\",\n        Participant_Type_Code: \"$Participant_Type_Code\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      Participant_ID: \"$_id.Participant_ID\",\n      Participant_Type_Code: \"$_id.Participant_Type_Code\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2313,
        "db_id": "city_record",
        "nl_queries": [
            "Which city has the lowest GDP? Please list the city name and its GDP.",
            "What is the city with the smallest GDP? Return the city and its GDP.",
            "Identify the city with the lowest Gross Domestic Product and provide its name along with the GDP figure.",
            "Which city holds the record for the smallest GDP? Please provide its name and GDP amount.",
            "Can you tell me the city that has the least GDP? Include both the city name and its GDP value."
        ],
        "ref_sql": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $sort: {\n      GDP: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      City: 1,\n      GDP: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3205,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What are the first name, last name, and gender of all the good customers? Order by their last name.",
            "Can you provide the first name, last name, and gender of all customers labeled as good? Please sort the results by last name.",
            "List the first name, last name, and gender of good customers, and arrange them in order of last name.",
            "What are the first name, last name, and gender of customers who are considered good? Make sure to sort them by their last name.",
            "Show me the first name, last name, and gender of all customers identified as good, sorted by last name."
        ],
        "ref_sql": "SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name",
        "MQL": "db.Discount_Coupons.aggregate([\n  { $unwind: \"$Customers\" },\n  { \n    $match: { \n      \"Customers.good_or_bad_customer\": \"good\" \n    }\n  },\n  { \n    $project: { \n      \"first_name\": \"$Customers.first_name\",\n      \"last_name\": \"$Customers.last_name\",\n      \"gender_mf\": \"$Customers.gender_mf\",\n      \"_id\": 0\n    }\n  },\n  { $sort: { \"last_name\": 1 } }\n]);\n"
    },
    {
        "record_id": 4186,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What are the ids of templates with template type code PP or PPT?",
            "Return the ids of templates that have the code PP or PPT.",
            "Can you provide the IDs of templates that are categorized under the types PP or PPT?",
            "List the template IDs for those that have a type code of either PP or PPT.",
            "What template IDs correspond to the type codes PP and PPT?"
        ],
        "ref_sql": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Templates.Template_Type_Code\": \"PP\" },\n        { \"Templates.Template_Type_Code\": \"PPT\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      Template_ID: \"$Templates.Template_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4049,
        "db_id": "icfp_1",
        "nl_queries": [
            "Retrieve the country that has published the most papers.",
            "Find the country that the most papers are affiliated with.",
            "Identify the country responsible for publishing the highest number of papers.",
            "Which country has the greatest number of affiliated papers?",
            "Show the country with the largest count of published research papers."
        ],
        "ref_sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Inst.aggregate([\n  {\n    $group: {\n      _id: \"$country\",\n      paperCount: { $sum: { $size: \"$Authorship\" } }\n    }\n  },\n  {\n    $sort: { paperCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3534,
        "db_id": "wedding",
        "nl_queries": [
            "Show the name, open date, and organizer for all churches.",
            "List the names, opening dates, and organizers for every church.",
            "Provide the names, dates of establishment, and organizing parties for all churches.",
            "Display the church names, their opening dates, and the names of those who organized them.",
            "Retrieve the names, open dates, and organizers for all churches from the database."
        ],
        "ref_sql": "SELECT name , open_date , organized_by FROM Church",
        "MQL": "db.church.find({}, { \"Name\": 1, \"Open_Date\": 1, \"Organized_by\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2819,
        "db_id": "gymnast",
        "nl_queries": [
            "How many distinct hometowns did these people have?",
            "Count the number of different hometowns of these people.",
            "What is the total number of unique hometowns represented by these individuals?",
            "How many different hometowns can be identified among these people?",
            "Determine the count of distinct hometowns that these people come from."
        ],
        "ref_sql": "SELECT count(DISTINCT Hometown) FROM people",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Hometown\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Hometown: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Hometown: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 542,
        "db_id": "course_teach",
        "nl_queries": [
            "Show the hometowns shared by at least two teachers.",
            "What are the towns from which at least two teachers come from?",
            "Identify the hometowns that have a minimum of two teachers.",
            "List the towns where at least two teachers are from.",
            "What are the hometowns that two or more teachers share?"
        ],
        "ref_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "MQL": "db.teacher.aggregate([\n  {\n    $group: {\n      _id: \"$Hometown\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Hometown: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3986,
        "db_id": "document_management",
        "nl_queries": [
            "Find the total access count of all documents in the most popular document type.",
            "What is the total access count of documents that are of the most common document type?",
            "What is the cumulative access count for documents belonging to the most prevalent document type?",
            "Calculate the total number of accesses for documents categorized under the most commonly used document type.",
            "Determine the overall access count for all documents that fall within the most popular document category."
        ],
        "ref_sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.document_type_code\",\n      document_count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { document_count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Document_Structures\",\n      let: { most_common_type: \"$_id\" },\n      pipeline: [\n        { $unwind: \"$Documents\" },\n        { $match: { $expr: { $eq: [\"$Documents.document_type_code\", \"$$most_common_type\"] } } },\n        { $group: { _id: null, sum_access_count: { $sum: \"$Documents.access_count\" } } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_access_count: \"$Docs1.sum_access_count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 956,
        "db_id": "flight_2",
        "nl_queries": [
            "What is the code of airport that has fewest number of flights?",
            "Give the code of the airport with the least flights.",
            "Which airport has the lowest number of flights, and what is its code?",
            "Identify the airport code for the facility with the fewest flights operating.",
            "What is the airport code of the location that serves the least number of flights?"
        ],
        "ref_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "MQL": "db.airports.aggregate([\n  {\n    $unwind: \"$flights\"\n  },\n  {\n    $group: {\n      _id: \"$AirportCode\",\n      flightCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      flightCount: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      AirportCode: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 993,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the ids for all the faculty members who have at least 2 students.",
            "Which faculty members advise two ore more students? Give me their faculty ids.",
            "List the faculty IDs of members who are advising two or more students.",
            "Identify the IDs of faculty who have two or more students under their guidance.",
            "Provide the faculty IDs for those instructors who supervise at least a couple of students."
        ],
        "ref_sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2",
        "MQL": "db.Faculty.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"FacID\",\n      foreignField: \"Advisor\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      FacID: 1,\n      studentCount: {\n        $size: {\n          $ifNull: [\"$Docs1\", []]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      studentCount: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      FacID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3035,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What are the arriving date and the departing date of all the dogs?",
            "List the arrival date and the departure date for all the dogs.",
            "Can you provide the arrival and departure dates for every dog in the kennel?",
            "Show me the dates on which all dogs arrived and departed.",
            "What are the dates of arrival and departure for each dog in the shelter?"
        ],
        "ref_sql": "SELECT date_arrived , date_departed FROM Dogs",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $project: {\n      date_arrived: \"$Dogs.date_arrived\",\n      date_departed: \"$Dogs.date_departed\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 855,
        "db_id": "music_4",
        "nl_queries": [
            "What is the most common result of the music festival?",
            "Return the result that is most frequent at music festivals.",
            "What result appears most often in music festivals?",
            "Identify the most prevalent outcome from the music festivals.",
            "What is the result that has been achieved most frequently in the music festival circuit?"
        ],
        "ref_sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $unwind: \"$volume.music_festival\"\n  },\n  {\n    $group: {\n      _id: \"$volume.music_festival.Result\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Result: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2370,
        "db_id": "sports_competition",
        "nl_queries": [
            "find the number of players whose points are lower than 30 in each position.",
            "What is the number of players who have points less than 30 for each position?",
            "Count how many players in each position have points below 30.",
            "How many players from each position scored less than 30 points?",
            "Determine the total number of players having fewer than 30 points for each playing position."
        ],
        "ref_sql": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $match: {\n      \"player.Points\": {\n        $lt: 30\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$player.Position\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      Position: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4135,
        "db_id": "station_weather",
        "nl_queries": [
            "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
            "Retrieve the ID and local authority for the station with the highest recorded precipitation exceeding 50.",
            "What is the ID and local authority for the station where precipitation levels are greater than 50?",
            "Show me the station's ID and local authority that has a maximum precipitation above 50.",
            "Find the local authority and ID of the station that experiences more than 50 units of precipitation at its highest."
        ],
        "ref_sql": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50",
        "MQL": "db.station.find(\n  { \"weekly_weather.precipitation\": { $gt: 50 } },\n  { \"id\": 1, \"local_authority\": 1, \"_id\": 0 }\n).sort({ \"weekly_weather.precipitation\": -1 }).limit(1);\n"
    },
    {
        "record_id": 3983,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the total number of rooms of all apartments with facility code \"Gym\".",
            "Find the total number of rooms in the apartments that have facility code \"Gym\".",
            "Calculate the total number of rooms in all apartments equipped with a gym facility.",
            "What is the overall room count for apartments that include a gym as an amenity?",
            "Determine the aggregate number of rooms in apartments that feature \"Gym\" under their facilities."
        ],
        "ref_sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Facilities\"\n  },\n  {\n    $match: {\n      \"Apartments.Apartment_Facilities.facility_code\": \"Gym\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_room_count: {\n        $sum: {\n          $toInt: \"$Apartments.room_count\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_room_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3884,
        "db_id": "inn_1",
        "nl_queries": [
            "List the name of rooms with king or queen bed.",
            "What are the names of rooms that have either king or queen bed?",
            "Provide a list of room names that feature king or queen-sized beds.",
            "Show me the names of rooms equipped with either a king bed or a queen bed.",
            "Can you give me the names of rooms that have beds classified as king or queen?"
        ],
        "ref_sql": "SELECT roomName FROM Rooms WHERE bedType = \"King\" OR bedType = \"Queen\";",
        "MQL": "db.Rooms.find({\n  bedType: {\n    $regex: \"king|queen\",\n    $options: \"i\"\n  }\n}, {\n  roomName: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2545,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How many professionals did not operate any treatment on dogs?",
            "Find the number of professionals who have not treated any dogs.",
            "What is the total number of professionals who have not provided any treatments for dogs?",
            "Count how many professionals have never treated any dogs.",
            "How many professionals are there who did not perform any dog treatments?"
        ],
        "ref_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "MQL": "db.Professionals.aggregate([\n  {\n    $project: {\n      professional_id: 1,\n      count_Treatments: {\n        $size: \"$Treatments\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Treatments: 0\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3214,
        "db_id": "driving_school",
        "nl_queries": [
            "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
            "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
            "Retrieve the first and last names of customers who have an outstanding balance between 1000 and 3000 dollars.",
            "Can you provide the names (first and last) of all customers with outstanding amounts ranging from 1000 to 3000?",
            "Show me the first and last names of customers that owe between 1000 and 3000 dollars."
        ],
        "ref_sql": "SELECT first_name , last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.amount_outstanding\": {\n        $gte: 1000,\n        $lte: 3000\n      }\n    }\n  },\n  {\n    $project: {\n      first_name: \"$Customers.first_name\",\n      last_name: \"$Customers.last_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3362,
        "db_id": "game_1",
        "nl_queries": [
            "Show the average, minimum, and maximum age for different majors.",
            "What are the average, minimum, and max ages for each of the different majors?",
            "Provide the average, minimum, and maximum ages categorized by major.",
            "Can you list the average, lowest, and highest ages for each major?",
            "What are the average, minimum, and maximum ages of students based on their respective majors?"
        ],
        "ref_sql": "SELECT major , avg(age) , min(age) , max(age) FROM Student GROUP BY major",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\",\n      avg_age: { $avg: \"$Age\" },\n      min_age: { $min: \"$Age\" },\n      max_age: { $max: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      Major: \"$_id\",\n      avg_age: 1,\n      min_age: 1,\n      max_age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1992,
        "db_id": "wrestler",
        "nl_queries": [
            "Show teams that have suffered more than three eliminations.",
            "Which teams had more than 3 eliminations?",
            "List teams that have experienced over three eliminations.",
            "Identify the teams with more than three elimination events.",
            "Which teams have recorded in excess of three eliminations?"
        ],
        "ref_sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3",
        "MQL": "db.wrestler.aggregate([\n  {\n    $unwind: \"$Elimination\"\n  },\n  {\n    $group: {\n      _id: \"$Elimination.Team\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 3 }\n    }\n  },\n  {\n    $project: {\n      Team: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2623,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the number of buildings with a height above the average or a number of floors above the average.",
            "How many buildings have a height greater than the average or a floor count that surpasses the average?",
            "Count the number of buildings that are taller than average or have more floors than the average.",
            "What is the total number of buildings exceeding either the average height or the average number of floors?",
            "Determine how many buildings are above the average in terms of height or floors."
        ],
        "ref_sql": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(height_feet) FROM building) OR floors > (SELECT avg(floors) FROM building)",
        "MQL": "db.building.aggregate([\n  {\n    $facet: {\n      averageHeight: [\n        { $group: { _id: null, avg_Height_feet: { $avg: \"$Height_feet\" } } }\n      ],\n      averageFloors: [\n        { $group: { _id: null, avg_Floors: { $avg: \"$Floors\" } } }\n      ]\n    }\n  },\n  {\n    $project: {\n      avg_Height_feet: { $arrayElemAt: [\"$averageHeight.avg_Height_feet\", 0] },\n      avg_Floors: { $arrayElemAt: [\"$averageFloors.avg_Floors\", 0] }\n    }\n  },\n  {\n    $lookup: {\n      from: \"building\",\n      let: { avg_Height_feet: \"$avg_Height_feet\", avg_Floors: \"$avg_Floors\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: {\n              $or: [\n                { $gt: [\"$Height_feet\", \"$$avg_Height_feet\"] },\n                { $gt: [\"$Floors\", \"$$avg_Floors\"] }\n              ]\n            }\n          }\n        },\n        { $count: \"count\" }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      count: { $arrayElemAt: [\"$Docs1.count\", 0] }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4036,
        "db_id": "candidate_poll",
        "nl_queries": [
            "what are the top 3 highest support rates?",
            "Return the top 3 greatest support rates.",
            "What are the three candidates with the highest support rates?",
            "Provide me with the top three candidates based on their support rates.",
            "List the three candidates who have the greatest support rates."
        ],
        "ref_sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $sort: {\n      \"candidate.Support_rate\": -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      Support_rate: \"$candidate.Support_rate\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 766,
        "db_id": "ship_mission",
        "nl_queries": [
            "List the nations that have more than two ships.",
            "What are the nations that have more than two ships?",
            "Identify the countries that have a fleet size exceeding two ships.",
            "Which nations possess more than two vessels?",
            "Can you provide a list of nationalities with over two ships in their registry?"
        ],
        "ref_sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2",
        "MQL": "db.ship.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 41,
        "db_id": "chinook_1",
        "nl_queries": [
            "What is the average unit price of tracks that belong to Jazz genre?",
            "Find the average unit price of jazz tracks.",
            "How much, on average, do jazz tracks cost per unit?",
            "What is the mean unit price for tracks classified as jazz?",
            "Can you provide the average cost of tracks that are categorized under the Jazz genre?"
        ],
        "ref_sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\"",
        "MQL": "db.Artist.aggregate([\n  { $unwind: \"$Album\" },\n  { $unwind: \"$Album.Track\" },\n  {\n    $lookup: {\n      from: \"Genre\",\n      localField: \"Album.Track.GenreId\",\n      foreignField: \"GenreId\",\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  {\n    $match: {\n      \"Docs1.Name\": \"Jazz\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_UnitPrice: { $avg: \"$Album.Track.UnitPrice\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_UnitPrice: 1\n    }\n  }\n])\n\n"
    },
    {
        "record_id": 4048,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the color code and description of the product named \"chervil\"?",
            "Return the color code and description for the product with the name 'chervil'.",
            "Can you provide the color code and its description for the product called \"chervil\"?",
            "What are the details for the color code and description associated with the product named \"chervil\"?",
            "Give me the color code along with its description for the item referred to as \"chervil\"."
        ],
        "ref_sql": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $match: {\n      \"Products.product_name\": \"chervil\"\n    }\n  },\n  {\n    $project: {\n      color_code: 1,\n      color_description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2985,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "List the names of all the customers in alphabetical order.",
            "Sort the customer names in alphabetical order.",
            "Retrieve all customer names sorted in alphabetical order.",
            "Display the names of customers arranged from A to Z.",
            "Provide a list of customer names in ascending alphabetical sequence."
        ],
        "ref_sql": "SELECT customer_details FROM customers ORDER BY customer_details",
        "MQL": "db.Customers.aggregate([\n  {\n    $project: {\n      Customer_Details: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Customer_Details: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 642,
        "db_id": "world_1",
        "nl_queries": [
            "What are the name, independence year, and surface area of the country with the smallest population?",
            "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "What is the name, independence year, and surface area of the country that has the smallest population?",
            "Please provide the name, surface area, and year of independence for the country with the fewest inhabitants.",
            "Can you tell me the name, year of independence, and surface area of the country that has the least population?"
        ],
        "ref_sql": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $sort: {\n      Population: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      SurfaceArea: 1,\n      IndepYear: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3204,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "Identify the owners residing in states that include 'North' in their names and provide their first names, last names, and email addresses.",
            "List the first names, last names, and email addresses of owners from states containing the term 'North'.",
            "Who are the owners living in states with 'North' in the name? Please share their first names, last names, and email information."
        ],
        "ref_sql": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "MQL": "db.Owners.find(\n  {\n    state: { $regex: \"North\", $options: \"i\" }\n  },\n  {\n    first_name: 1,\n    last_name: 1,\n    email_address: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 405,
        "db_id": "formula_1",
        "nl_queries": [
            "List the names of all distinct races in reversed lexicographic order?",
            "What are the different names of all the races in reverse alphabetical order?",
            "Provide a list of unique race names sorted in reverse alphabetical order.",
            "Can you show me all the distinct race names, arranged in descending lexicographic order?",
            "What are the unique names of the races, and can they be displayed in reverse alphabetical order?"
        ],
        "ref_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $group: {\n      _id: null,\n      names: {\n        $addToSet: \"$races.name\"\n      }\n    }\n  },\n  {\n    $unwind: \"$names\"\n  },\n  {\n    $sort: {\n      names: -1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$names\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3010,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the names of customers who never placed an order.",
            "What are the names of customers who never made an order.",
            "List the names of customers who have not made any purchases.",
            "What are the names of customers who don't have any order history?",
            "Retrieve the names of customers with no placed orders."
        ],
        "ref_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      \"Customer_Orders\": { $exists: true, $size: 0 }\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2266,
        "db_id": "soccer_2",
        "nl_queries": [
            "Which college has any student who is a goalie and succeeded in the tryout.",
            "What college has a student who successfully made the team in the role of a goalie?",
            "Which college has a player that is a goalie and passed the tryout?",
            "Identify the college where a student achieved success as a goalie in the tryouts.",
            "What college has a candidate who plays goalie and received a positive outcome in the tryout?"
        ],
        "ref_sql": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": \"goalie\",\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $project: {\n      cName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 47,
        "db_id": "restaurant_1",
        "nl_queries": [
            "What is the address of the restaurant Subway?",
            "Can you tell me the location of the Subway restaurant?",
            "What is the physical address for the restaurant named Subway?",
            "Where is the Subway restaurant located?",
            "Please provide the address of Subway restaurant."
        ],
        "ref_sql": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
        "MQL": "db.Restaurant.find({\n  \"ResName\": \"Subway\"\n}, { \"Address\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3339,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the last name of the author with first name \"Amal\".",
            "Which authors have first name \"Amal\"? List their last names.",
            "What is the last name of the author named \"Amal\"?",
            "List the last names of all authors who go by the first name \"Amal\".",
            "Identify the last name of the individual whose first name is \"Amal\"."
        ],
        "ref_sql": "SELECT lname FROM authors WHERE fname = \"Amal\"",
        "MQL": "db.Authors.find(\n  { fname: \"Amal\" },\n  { lname: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2026,
        "db_id": "college_2",
        "nl_queries": [
            "Find the year which offers the largest number of courses.",
            "Which year had the greatest number of courses?",
            "What year had the highest offering of courses?",
            "Identify the year that provided the most courses.",
            "In which year were the most courses available?"
        ],
        "ref_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $group: {\n      _id: \"$course.section.year\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1304,
        "db_id": "battle_death",
        "nl_queries": [
            "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "List the battle IDs and names where the total fatalities exceeded 10.",
            "Which battles resulted in more than 10 deaths? Provide their IDs and names.",
            "Show me the IDs and names of battles that had over 10 people killed.",
            "Identify battles that caused more than 10 fatalities, including their IDs and names."
        ],
        "ref_sql": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
        "MQL": "db.battle.aggregate([\n  {\n    $unwind: \"$ship\"\n  },\n  {\n    $unwind: \"$ship.death\"\n  },\n  {\n    $group: {\n      _id: {\n        battle_id: \"$id\",\n        battle_name: \"$name\"\n      },\n      sum_killed: {\n        $sum: \"$ship.death.killed\"\n      }\n    }\n  },\n  {\n    $match: {\n      sum_killed: {\n        $gt: 10\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      id: \"$_id.battle_id\",\n      name: \"$_id.battle_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4153,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the characteristic name used by most number of the products?",
            "Return the name of the characteristic that is most common across all products.",
            "Which characteristic name is shared by the highest number of products?",
            "Identify the most frequently occurring characteristic name among all products.",
            "What is the most common characteristic name found in the product listings?"
        ],
        "ref_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ref_Characteristic_Types.aggregate([\n  {\n    $unwind: \"$Characteristics\"\n  },\n  {\n    $unwind: \"$Characteristics.Product_Characteristics\"\n  },\n  {\n    $group: {\n      _id: \"$Characteristics.characteristic_name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      characteristic_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1784,
        "db_id": "formula_1",
        "nl_queries": [
            "Give me a list of names and years of races that had any driver whose forename is Lewis?",
            "What are the names and years of all races that had a driver with the last name Lewis?",
            "Can you provide the list of race names along with their years for all races featuring a driver named Lewis?",
            "What are the names and years of races that included a driver whose name is Lewis?",
            "Show me the names and corresponding years of races where any driver is known as Lewis."
        ],
        "ref_sql": "SELECT T2.name , T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $unwind: \"$races.results\"\n  },\n  {\n    $lookup: {\n      from: \"drivers\",\n      localField: \"races.results.driverId\",\n      foreignField: \"driverId\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.forename\": \"Lewis\"\n    }\n  },\n  {\n    $project: {\n      name: \"$races.name\",\n      year: \"$races.year\",\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: {\n        name: \"$name\",\n        year: \"$year\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id.name\",\n      year: \"$_id.year\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 530,
        "db_id": "phone_1",
        "nl_queries": [
            "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
            "List all phones with 'Full' in their accreditation type and show their Hardware Model names along with the respective Company names.",
            "Identify phones that feature the word 'Full' in their accreditation types, and provide the Hardware Model name and Company name for each.",
            "Retrieve all phone records that contain 'Full' in their accreditation type, listing both the Hardware Model name and the Company name for each record.",
            "Find every phone with 'Full' in the accreditation type and display their corresponding Hardware Model names and Company names."
        ],
        "ref_sql": "SELECT Hardware_Model_name , Company_name FROM phone WHERE Accreditation_type LIKE 'Full';",
        "MQL": "db.chip_model.aggregate([\n  {\n    $unwind: \"$phone\"\n  },\n  {\n    $match: {\n      \"phone.Accreditation_type\": { $regex: \"Full\", $options: \"i\" }\n    }\n  },\n  {\n    $project: {\n      \"Hardware_Model_name\": \"$phone.Hardware_Model_name\",\n      \"Company_name\": \"$phone.Company_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2562,
        "db_id": "inn_1",
        "nl_queries": [
            "How many rooms are there?",
            "What is the total number of rooms available in this inn?",
            "What is the total count of available rooms in the inn?",
            "Can you tell me how many rooms there are in total?",
            "How many total rooms does this inn have?"
        ],
        "ref_sql": "SELECT count(*) FROM Rooms;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4207,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the names of movies whose created year is after all movies directed by Steven Spielberg?",
            "What are the names of all movies that were created after the most recent Steven Spielberg film?",
            "List the titles of movies that premiered after all of Steven Spielberg's films.",
            "What titles correspond to films released later than the latest film by Steven Spielberg?",
            "Can you provide the names of movies that came out after the most recent work of director Steven Spielberg?"
        ],
        "ref_sql": "SELECT title FROM Movie WHERE YEAR > (SELECT max(YEAR) FROM Movie WHERE director = \"Steven Spielberg\")",
        "MQL": "db.Movie.aggregate([\n  {\n    $match: {\n      director: \"Steven Spielberg\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      mostRecentYear: { $max: \"$year\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      mostRecentYear: 1\n    }\n  },\n  {\n    $lookup: {\n      from: \"Movie\",\n      let: { mostRecentYear: \"$mostRecentYear\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$year\", \"$$mostRecentYear\"]\n            }\n          }\n        },\n        {\n          $project: {\n            title: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: {\n      newRoot: \"$Docs1\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 915,
        "db_id": "game_1",
        "nl_queries": [
            "Show all student IDs with more than total 10 hours per week on all sports played.",
            "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?",
            "List the student IDs of individuals who spend over 10 hours per week participating in sports.",
            "Identify all student IDs for those who engage in sports for more than 10 hours each week.",
            "Provide the IDs of students who dedicate more than 10 hours per week to playing sports."
        ],
        "ref_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek) > 10",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: \"$StuID\",\n      totalHoursPerWeek: {\n        $sum: \"$SportsInfo.HoursPerWeek\"\n      }\n    }\n  },\n  {\n    $match: {\n      totalHoursPerWeek: {\n        $gt: 10\n      }\n    }\n  },\n  {\n    $project: {\n      StuID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 356,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "What are all the distinct asset models?",
            "List all unique asset models available.",
            "What distinct asset models can be found in the records?",
            "Identify all the different asset models listed in the assets.",
            "Provide a list of all unique asset models from the dataset."
        ],
        "ref_sql": "SELECT DISTINCT asset_model FROM Assets",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { $unwind: \"$Assets\" },\n  { $group: { _id: \"$Assets.asset_model\" } },\n  { $project: { _id: 0, asset_model: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 565,
        "db_id": "tvshow",
        "nl_queries": [
            "List each language and the number of TV Channels using it.",
            "For each language, list the number of TV Channels that use it.",
            "Provide a list of languages along with the respective counts of TV Channels that utilize them.",
            "Show the number of TV Channels available for each language.",
            "Enumerate all languages and count how many TV Channels are associated with each one."
        ],
        "ref_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $group: {\n      _id: \"$Language\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Language: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3403,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What is the age of the oldest dog?",
            "Tell me the age of the oldest dog.",
            "How old is the oldest dog in the kennel?",
            "What is the maximum age of any dog?",
            "Could you provide the age of the dog that is the oldest?"
        ],
        "ref_sql": "SELECT max(age) FROM Dogs",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_age: { $max: \"$Dogs.age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1213,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
            "Find the starting date and ending data in location for the document named \"Robin CV\".",
            "What are the starting and ending dates for the location of the document titled \"Robin CV\"?",
            "Can you provide me with the \"from\" and \"to\" dates for the document named \"Robin CV\" in its location?",
            "For the document titled \"Robin CV\", what are the dates indicating where it was located at the beginning and end?"
        ],
        "ref_sql": "SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Robin CV\"",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $match: {\n      \"All_Documents.Document_Name\": \"Robin CV\"\n    }\n  },\n  {\n    $unwind: \"$All_Documents.Document_Locations\"\n  },\n  {\n    $project: {\n      Date_in_Location_From: \"$All_Documents.Document_Locations.Date_in_Location_From\",\n      Date_in_Locaton_To: \"$All_Documents.Document_Locations.Date_in_Locaton_To\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3243,
        "db_id": "dorm_1",
        "nl_queries": [
            "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
            "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
            "Provide the first and last names of students who do not live in HKG, arranged in order of their ages.",
            "Can you list the first and last names of all students excluding those from the city with code HKG, sorted by age?",
            "Show me the first and last names of students not residing in the city represented by HKG, and organize the list by their ages."
        ],
        "ref_sql": "SELECT fname , lname FROM student WHERE city_code != 'HKG' ORDER BY age",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      city_code: { $ne: \"HKG\" }\n    }\n  },\n  {\n    $sort: {\n      Age: 1\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      LName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4193,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the template type descriptions for template type code \"AD\".",
            "Return the template type description of the template type with the code AD.",
            "What description corresponds to the template type code \"AD\"?",
            "Please provide the description for the template type identified by the code AD.",
            "Can you tell me the template type description associated with the code \"AD\"?"
        ],
        "ref_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      \"Template_Type_Code\": \"AD\"\n    }\n  },\n  {\n    $project: {\n      \"Template_Type_Description\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3761,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the payment method code used by the most orders?",
            "Find the payment method that is used the most often in all the invoices. Give me its code.",
            "Which payment method code is used in the highest number of orders?",
            "Identify the code of the payment method that appears most frequently in invoices.",
            "What is the code for the payment method that generates the highest number of order transactions?"
        ],
        "ref_sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Clients\"\n  },\n  {\n    $unwind: \"$Clients.Bookings\"\n  },\n  {\n    $unwind: \"$Clients.Bookings.Invoices\"\n  },\n  {\n    $group: {\n      _id: \"$Clients.Bookings.Invoices.payment_method_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      payment_method_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3036,
        "db_id": "driving_school",
        "nl_queries": [
            "When did customer with first name as Carole and last name as Bernhard became a customer?",
            "When did Carole Bernhard first become a customer?",
            "What date did Carole Bernhard start her customer relationship?",
            "On which date did the customer named Carole Bernhard first enroll?",
            "Can you tell me when Carole Bernhard became a customer for the first time?"
        ],
        "ref_sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.first_name\": \"Carole\",\n      \"Customers.last_name\": \"Bernhard\"\n    }\n  },\n  {\n    $project: {\n      date_became_customer: \"$Customers.date_became_customer\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4045,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
            "What are the name and publication date of the catalogs with catalog level number above 5?",
            "List the catalog names along with their publication dates for all catalogs that have a catalog level number exceeding 5.",
            "What are the names and publication dates of catalogs where the catalog level number is greater than 5?",
            "Provide the names and publication dates for catalogs with a catalog level number higher than 5."
        ],
        "ref_sql": "SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $match: {\n      \"Catalog_Structure.catalog_level_number\": { $gt: 5 }\n    }\n  },\n  {\n    $project: {\n      catalog_name: 1,\n      date_of_publication: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2014,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show details of all visitors.",
            "What is the detail of each visitor?",
            "Retrieve the details of every visitor in the database.",
            "Can you provide the information pertaining to all visitors?",
            "What are the details available for each tourist visiting the location?"
        ],
        "ref_sql": "SELECT Tourist_Details FROM VISITORS",
        "MQL": "db.Visitors.find({}, { Tourist_Details: 1, _id: 0 });\n"
    },
    {
        "record_id": 3557,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show all artist names and the year joined who are not from United States.",
            "What are the names and year of joining for artists that do not have the country \"United States\"?",
            "List the names and joining years of artists who do not hail from the United States.",
            "Provide the names and the year they joined for artists based outside of the United States.",
            "Retrieve the names and joining years for artists that are not located in the United States."
        ],
        "ref_sql": "SELECT name , year_join FROM artist WHERE country != 'United States'",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      Country: { $ne: \"United States\" }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      Year_Join: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3388,
        "db_id": "company_office",
        "nl_queries": [
            "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
            "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
            "What are the highest and lowest sales figures for companies outside the \"Banking\" industry?",
            "Identify the maximum and minimum sales values of companies that do not belong to the \"Banking\" sector.",
            "What is the range of sales (maximum and minimum) for firms not classified in the \"Banking\" industry?"
        ],
        "ref_sql": "SELECT max(Sales_billion) , min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
        "MQL": "db.Companies.aggregate([\n  {\n    $match: {\n      Industry: { $ne: \"Banking\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_Sales_billion: { $max: \"$Sales_billion\" },\n      min_Sales_billion: { $min: \"$Sales_billion\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Sales_billion: 1,\n      min_Sales_billion: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3561,
        "db_id": "company_office",
        "nl_queries": [
            "List the names of companies in descending order of market value.",
            "Sort the company names in descending order of the company's market value.",
            "Provide the names of companies organized by market value from highest to lowest.",
            "Show the company names sorted by their respective market values in a descending manner.",
            "Retrieve a list of company names ranked in order of their market value from greatest to least."
        ],
        "ref_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
        "MQL": "db.Companies.aggregate([\n  {\n    $addFields: {\n      market_value_numeric: {\n        $convert: {\n          input: \"$Market_Value_billion\",\n          to: \"double\",\n          onError: 0, \n          onNull: 0   \n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      market_value_numeric: -1\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2019,
        "db_id": "railway",
        "nl_queries": [
            "List the wheels and locations of the railways.",
            "Provide a list of railway wheels along with their respective locations.",
            "Show the wheels and corresponding locations for all railways.",
            "Retrieve the wheels and locations from every railway in the database.",
            "Display the wheels of the railways and their locations."
        ],
        "ref_sql": "SELECT Wheels , LOCATION FROM railway",
        "MQL": "db.railway.find({}, { \"Wheels\": 1, \"Location\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3693,
        "db_id": "race_track",
        "nl_queries": [
            "What are the names for tracks without a race in class 'GT'.",
            "Give the names of tracks that do not have a race in the class 'GT'.",
            "List the names of tracks that are not associated with races in the 'GT' class.",
            "Provide the names of tracks that lack a race classified as 'GT'.",
            "Retrieve the names of tracks that do not feature races from the 'GT' classification."
        ],
        "ref_sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'",
        "MQL": "db.track.aggregate([\n  {\n    $match: {\n      \"race.Class\": { $ne: \"GT\" }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 569,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show the membership level with most number of members.",
            "What is the membership level with the most people?",
            "Identify the membership tier with the highest number of members.",
            "Which membership level has the greatest number of individuals?",
            "What is the most populated membership level among the members?"
        ],
        "ref_sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.member.aggregate([\n  {\n    $group: {\n      _id: \"$Level\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Level: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2353,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "List the description of all the colors.",
            "What are the descriptions for each color?",
            "Provide a list of descriptions for all available colors.",
            "Can you give me the descriptions of each color?",
            "Show me the color descriptions for every color in the database."
        ],
        "ref_sql": "SELECT color_description FROM ref_colors",
        "MQL": "db.Ref_Colors.find({}, { color_description: 1, _id: 0 });\n"
    },
    {
        "record_id": 725,
        "db_id": "aircraft",
        "nl_queries": [
            "List all pilot names in ascending alphabetical order.",
            "What are the names of the pilots in alphabetical order?",
            "Provide a list of all pilots' names sorted alphabetically.",
            "Retrieve the names of pilots arranged in ascending order.",
            "Show all pilot names in alphabetical sequence."
        ],
        "ref_sql": "SELECT Name FROM pilot ORDER BY Name ASC",
        "MQL": "db.pilot.aggregate([\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 462,
        "db_id": "game_injury",
        "nl_queries": [
            "List the dates of games by the home team name in descending order.",
            "Retrieve the dates of games ordered by the name of the home team from highest to lowest.",
            "Show the game dates sorted in descending order based on the home team.",
            "Provide a list of dates for games, arranged by the home team name in descending fashion.",
            "List the dates for matches, sorted by the home team's name in decreasing order."
        ],
        "ref_sql": "SELECT Date FROM game ORDER BY home_team DESC",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $sort: { \"game.Home_team\": -1 } },\n  { $project: { \"Date\": \"$game.Date\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 737,
        "db_id": "singer",
        "nl_queries": [
            "What is the name of the singer with the largest net worth?",
            "What is the name of the singer who is worth the most?",
            "Who is the singer with the highest net worth?",
            "Can you tell me the name of the wealthiest singer?",
            "Which singer has the greatest net value?"
        ],
        "ref_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "MQL": "db.singer.aggregate([\n  {\n    $sort: {\n      Net_Worth_Millions: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2268,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the names of schools that have some players in the mid position but not in the goalie position.",
            "What are the names of the schools with some players in the mid position but no goalies?",
            "List the names of colleges that include players in the midfield but exclude players in the goalie position.",
            "Identify the schools that have some athletes playing as midfielders but lack any goalies.",
            "What are the names of the colleges with players positioned in the midfield without any goalkeepers on the roster?"
        ],
        "ref_sql": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
        "MQL": "db.College.aggregate([\n  {\n    $project: {\n      cName: 1,\n      hasMid: {\n        $in: [\"mid\", \"$Tryout.pPos\"]\n      },\n      hasGoalie: {\n        $in: [\"goalie\", \"$Tryout.pPos\"]\n      }\n    }\n  },\n  {\n    $match: {\n      hasMid: true,\n      hasGoalie: false\n    }\n  },\n  {\n    $project: {\n      cName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3094,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all director names who have a movie in both year 1999 and 2000.",
            "Which directors had a movie both in the year 1999 and 2000?",
            "List the names of directors who released films in the years 1999 and 2000.",
            "Identify directors that had at least one movie released in both 1999 and 2000.",
            "Which directors have movies that came out in both the years 1999 and 2000?"
        ],
        "ref_sql": "SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999",
        "MQL": "db.movie.aggregate([\n  {\n    $match: {\n      Year: { $in: [1999, 2000] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Director\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $eq: 2 }\n    }\n  },\n  {\n    $project: {\n      Director: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1692,
        "db_id": "college_2",
        "nl_queries": [
            "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
            "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
            "List the building, room number, semester, and year for all courses in the Psychology department, arranged in order of their titles.",
            "Provide the details of building, room number, semester, and year for courses offered by the Psychology department, sorted by course title.",
            "What are the building, room information, semester, and year of the Psychology courses, organized according to the titles of the courses?"
        ],
        "ref_sql": "SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title",
        "MQL": "db.department.aggregate([\n  {\n    $match: {\n      dept_name: \"Psychology\"\n    }\n  },\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $project: {\n      _id: 0,\n      building: \"$course.section.building\",\n      room_number: \"$course.section.room_number\",\n      semester: \"$course.section.semester\",\n      year: \"$course.section.year\",\n    }\n  },\n  {\n    $sort: {\n      title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2521,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "How many available hotels are there in total?",
            "Find the total number of available hotels.",
            "What is the total count of hotels available?",
            "Determine how many hotels are currently listed.",
            "Can you provide the overall number of hotels that are available?"
        ],
        "ref_sql": "SELECT count(*) FROM HOTELS",
        "MQL": "db.Ref_Hotel_Star_Ratings.aggregate([\n  {\n    $unwind: \"$Hotels\"\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2162,
        "db_id": "concert_singer",
        "nl_queries": [
            "What is the average, minimum, and maximum age of all singers from France?",
            "What is the average, minimum, and maximum age for all French singers?",
            "Can you provide the average, minimum, and maximum age of singers who are from France?",
            "What are the average, minimum, and maximum ages for singers originating from France?",
            "Please tell me the average, lowest, and highest ages of French singers."
        ],
        "ref_sql": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "MQL": "db.singer.aggregate([\n  {\n    $match: {\n      Country: \"France\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: {\n        $avg: \"$Age\"\n      },\n      min_age: {\n        $min: \"$Age\"\n      },\n      max_age: {\n        $max: \"$Age\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1,\n      min_age: 1,\n      max_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1836,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name of the tryout players who are from the college with largest size.",
            "What are the names of all tryout participants who are from the largest college?",
            "Retrieve the names of players who tried out at the college with the highest enrollment.",
            "Can you provide the names of all players who participated in tryouts from the largest college by size?",
            "What are the names of tryout players associated with the college that has the most students?"
        ],
        "ref_sql": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "MQL": "db.College.aggregate([\n  {\n    $sort: {\n      enr: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Player\",\n      localField: \"Tryout.pID\",\n      foreignField: \"pID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      pName: \"$Docs1.pName\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2222,
        "db_id": "music_1",
        "nl_queries": [
            "What is the average rating of songs for each language?",
            "What is the average song rating for each language?",
            "How does the average rating of songs vary across different languages?",
            "Can you provide the average song rating organized by language?",
            "What are the average ratings for songs in each language?"
        ],
        "ref_sql": "SELECT avg(rating) , languages FROM song GROUP BY languages",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $group: {\n      _id: \"$song.languages\",\n      avg_rating: { $avg: \"$song.rating\" }\n    }\n  },\n  {\n    $project: {\n      avg_rating: 1,\n      languages: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1430,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "Retrieve the paragraph IDs and their corresponding texts for the document titled 'Welcome to NY'.",
            "List all paragraph IDs and texts associated with the document named 'Welcome to NY'.",
            "Can you provide the IDs and texts of paragraphs found in the document called 'Welcome to NY'?"
        ],
        "ref_sql": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $match: {\n      \"Templates.Documents.Document_Name\": \"Welcome to NY\"\n    }\n  },\n  {\n    $unwind: \"$Templates.Documents.Paragraphs\"\n  },\n  {\n    $project: {\n      Paragraph_ID: \"$Templates.Documents.Paragraphs.Paragraph_ID\",\n      Paragraph_Text: \"$Templates.Documents.Paragraphs.Paragraph_Text\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 731,
        "db_id": "ship_mission",
        "nl_queries": [
            "List the name of ships in ascending order of tonnage.",
            "what are the names of the ships ordered by ascending tonnage?",
            "Retrieve the names of ships sorted by their tonnage from smallest to largest.",
            "Provide a list of ship names arranged in order of increasing tonnage.",
            "Give me the names of the ships sorted ascending by tonnage."
        ],
        "ref_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC",
        "MQL": "db.ship.find({}, { Name: 1, _id: 0 }).sort({ Tonnage: 1 });\n"
    },
    {
        "record_id": 1286,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
            "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
            "List the first and last names of students who live in dormitories featuring a TV Lounge.",
            "What are the first and last names of students residing in dorms that offer a TV Lounge?",
            "Provide the first and last names of all students who are currently living in dorms with the amenity of a TV Lounge."
        ],
        "ref_sql": "SELECT T1.fname , T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm\",\n      localField: \"Lives_in.dormid\",\n      foreignField: \"dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"dorm.Has_amenity.amenid\",\n      foreignField: \"amenid\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $match: {\n      \"Docs2.amenity_name\": \"TV Lounge\"\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      LName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1857,
        "db_id": "inn_1",
        "nl_queries": [
            "Return the name and number of reservations made for each of the rooms.",
            "For each room, find its name and the number of times reservations were made for it.",
            "List the names of the rooms along with the total number of reservations made for each.",
            "Provide the room names and counts of reservations for all rooms.",
            "Display each room's name and the corresponding number of reservations recorded."
        ],
        "ref_sql": "SELECT T2.roomName , count(*) , T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room",
        "MQL": "db.Rooms.aggregate([\n  {\n    $unwind: \"$Reservations\"\n  },\n  {\n    $group: {\n      _id: \"$RoomId\",\n      roomName: { $first: \"$roomName\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      roomName: 1,\n      count: 1,\n      Room: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1762,
        "db_id": "car_1",
        "nl_queries": [
            "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "Can you tell me the highest horsepower and the manufacturer of cars that have 3 cylinders?",
            "What is the highest horsepower achieved by car models with 3 cylinders, and which make produces that model?",
            "Identify the car make and maximum horsepower for models equipped with 3 cylinders."
        ],
        "ref_sql": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.model_list.car_names.cars_data.Cylinders\": 3\n    }\n  },\n  {\n    $project: {\n      Horsepower: \"$countries.car_makers.model_list.car_names.cars_data.Horsepower\",\n      Make: \"$countries.car_makers.model_list.car_names.Make\"\n    }\n  },\n  {\n    $sort: {\n      Horsepower: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Horsepower: 1,\n      Make: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4074,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".",
            "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.",
            "List the last names of all authors who have contributed to papers with titles that include the term \"Monadic\".",
            "Identify which authors have titles in their papers containing the word \"Monadic\" and provide their last names.",
            "Who are the authors with papers whose titles feature the word \"Monadic\"? Return their last names."
        ],
        "ref_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $match: {\n      title: { $regex: \"Monadic\", $options: \"i\" }\n    }\n  },\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      lname: \"$Docs1.lname\",\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: \"$lname\"\n    }\n  },\n  {\n    $project: {\n      lname: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3054,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show all dates of transactions whose type code is \"SALE\".",
            "List all the transaction dates for transactions classified as \"SALE\".",
            "Provide the dates of all transactions with a type code of \"SALE\".",
            "Retrieve the dates of transactions that have the transaction type marked as \"SALE\".",
            "Display all transaction dates associated with the \"SALE\" transaction type."
        ],
        "ref_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $match: { \"Transactions.transaction_type_code\": \"SALE\" } },\n  { $project: { \"date_of_transaction\": \"$Transactions.date_of_transaction\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2670,
        "db_id": "department_management",
        "nl_queries": [
            "How many departments are led by heads who are not mentioned?",
            "What is the number of departments that do not have an assigned head?",
            "How many departments lack a head according to the records?",
            "Can you tell me the count of departments without any listed heads?",
            "How many departments are without a designated head in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
        "MQL": "db.department.aggregate([\n  {\n    $lookup: {\n      from: \"head\",\n      localField: \"Department_ID\",\n      foreignField: \"management.department_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1\": { $eq: [] }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 105,
        "db_id": "world_1",
        "nl_queries": [
            "What is the number of distinct continents where Chinese is spoken?",
            "How many continents speak Chinese?",
            "How many unique continents have Chinese as a spoken language?",
            "What is the total number of continents where the Chinese language is used?",
            "Can you tell me the count of continents in which Chinese is an official language?"
        ],
        "ref_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $match: {\n      \"countrylanguage.Language\": \"Chinese\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Continent\"\n    }\n  },\n  {\n    $count: \"COUNT__DISTINCT_Continent\"\n  }\n]);\n"
    },
    {
        "record_id": 1575,
        "db_id": "election",
        "nl_queries": [
            "Who were the governors of the parties associated with delegates from district 1?",
            "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
            "Who served as governors for the parties linked to representatives from district 1?",
            "Identify the governors of the parties that have delegates representing district 1.",
            "List the governors associated with the parties of delegates from district 1."
        ],
        "ref_sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1",
        "MQL": "db.county.aggregate([\n  {\n    $lookup: {\n      from: \"party\",\n      localField: \"election.Party\",\n      foreignField: \"Party_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"election.District\": 1\n    }\n  },\n  {\n    $project: {\n      Governor: \"$Docs1.Governor\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2798,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many students whose are playing the role of goalie?",
            "What is the number of students playing as a goalie?",
            "What is the total number of students who are in the goalie position?",
            "How many players have been assigned to the goalie role?",
            "Count the number of students who play as goalkeepers."
        ],
        "ref_sql": "SELECT count(*) FROM tryout WHERE pPos = 'goalie'",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.pPos\": \"goalie\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2633,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "How many claim processing stages are there in total?",
            "Find the number of distinct stages in claim processing.",
            "What is the total count of unique stages involved in the claims processing?",
            "How many distinct claim processing stages can be found in the records?",
            "Determine the overall number of claim processing stages present in the database."
        ],
        "ref_sql": "SELECT count(*) FROM claims_processing_stages",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $unwind: \"$Policies.Claim_Headers\"\n  },\n  {\n    $unwind: \"$Policies.Claim_Headers.Claims_Processing\"\n  },\n  {\n    $group: {\n      _id: \"$Policies.Claim_Headers.Claims_Processing.Claim_Stage_ID\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2431,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "What is the highest number of times a course enrollment can appear in various transcripts, and which course enrollment ID does it correspond to?",
            "Can you tell me the maximum frequency of a course enrollment showing in different transcripts along with its associated enrollment ID?",
            "How often can a single course enrollment be recorded in different transcripts? Also, please provide the course enrollment ID that shows this maximum count."
        ],
        "ref_sql": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Student_Enrolment_Courses\"\n  },\n  {\n    $unwind: \"$Student_Enrolment_Courses.Transcript_Contents\"\n  },\n  {\n    $group: {\n      _id: \"$Student_Enrolment_Courses.student_course_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      student_course_id: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 111,
        "db_id": "car_1",
        "nl_queries": [
            "How many cars has over 6 cylinders?",
            "What is the number of carsw ith over 6 cylinders?",
            "What is the total count of cars that have more than 6 cylinders?",
            "How many vehicles are equipped with over 6 cylinders?",
            "Count the number of cars featuring greater than 6 cylinders."
        ],
        "ref_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.model_list.car_names.cars_data.Cylinders\": {\n        $gt: 6\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      COUNT: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2611,
        "db_id": "icfp_1",
        "nl_queries": [
            "How many authors are there?",
            "Count the number of authors.",
            "What is the total number of authors in the database?",
            "How many authors exist in the system?",
            "Give me the count of all authors available."
        ],
        "ref_sql": "SELECT count(*) FROM authors",
        "MQL": "db.Authors.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3628,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
            "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
            "List the names of all instructors in the Computer Science department whose salaries exceed 80,000.",
            "What names belong to instructors in the Comp. Sci. department with salaries greater than 80,000?",
            "Can you provide the names of instructors from the Computer Science department who make more than 80,000?"
        ],
        "ref_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $match: {\n      \"dept_name\": \"Comp. Sci.\",\n      \"instructor.salary\": { $gt: 80000 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$instructor.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3521,
        "db_id": "network_1",
        "nl_queries": [
            "Show the names and grades of each high schooler.",
            "What are the names and grades for each high schooler?",
            "Provide a list of all high schoolers along with their names and current grades.",
            "Can you give me the names and grades for every student in high school?",
            "List the names and corresponding grades of each student attending high school."
        ],
        "ref_sql": "SELECT name , grade FROM Highschooler",
        "MQL": "db.Highschooler.find({}, { name: 1, grade: 1, _id: 0 });\n"
    },
    {
        "record_id": 1051,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the names of members in ascending order of their rank in rounds.",
            "List the names of members ordered by their round ranks in ascending fashion.",
            "Retrieve the names of members sorted by their rank in rounds from lowest to highest.",
            "Provide a list of member names arranged in ascending order based on their round rankings.",
            "Display the names of members in an order according to their ascending rank in the rounds."
        ],
        "ref_sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $unwind: \"$member.round\" },\n  { $sort: { \"member.round.Rank_in_Round\": 1 } },\n  { $project: { \"Name\": \"$member.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 741,
        "db_id": "course_teach",
        "nl_queries": [
            "List the names of teachers in ascending order of age.",
            "What are the names of the teachers ordered by ascending age?",
            "Provide the names of teachers sorted by their age, from youngest to oldest.",
            "Could you list the teachers' names in order of increasing age?",
            "Show me the names of teachers arranged in ascending order according to their ages."
        ],
        "ref_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "MQL": "db.teacher.find({}, { Name: 1, _id: 0 }).sort({ Age: 1 });\n"
    },
    {
        "record_id": 2764,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the number of reviews.",
            "How many reviews are there in total?",
            "Count the total number of reviews available.",
            "What is the total count of reviews?",
            "Determine the number of reviews present in the database."
        ],
        "ref_sql": "SELECT count(*) FROM review",
        "MQL": "db.item.aggregate([\n  { $unwind: \"$review\" },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 1986,
        "db_id": "ship_mission",
        "nl_queries": [
            "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
            "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
            "List the categories of ships that include vessels exceeding 6000 tons and those below 4000 tons.",
            "Identify the types of ships having both large vessels (more than 6000 tons) and smaller vessels (less than 4000 tons).",
            "What types of ships feature both those with tonnage greater than 6000 and those with tonnage under 4000?"
        ],
        "ref_sql": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
        "MQL": "db.ship.aggregate([\n  {\n    $group: {\n      _id: \"$Type\",\n      tonnages: {\n        $push: \"$Tonnage\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\",\n      hasLargeTonnage: {\n        $in: [true, {\n          $map: {\n            input: \"$tonnages\",\n            as: \"tonnage\",\n            in: {\n              $gt: [\"$$tonnage\", 6000]\n            }\n          }\n        }]\n      },\n      hasSmallTonnage: {\n        $in: [true, {\n          $map: {\n            input: \"$tonnages\",\n            as: \"tonnage\",\n            in: {\n              $lt: [\"$$tonnage\", 4000]\n            }\n          }\n        }]\n      }\n    }\n  },\n  {\n    $match: {\n      hasLargeTonnage: true,\n      hasSmallTonnage: true\n    }\n  },\n  {\n    $project: {\n      Type: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1199,
        "db_id": "department_store",
        "nl_queries": [
            "What are the name, phone number and email address of the customer who made the largest number of orders?",
            "Return the name, phone number and email address for the customer with the most orders.",
            "Who is the customer with the highest order count, and what are their name, phone number, and email?",
            "Please provide the name, phone number, and email address of the customer that has placed the most orders.",
            "Identify the customer who has made the greatest number of orders and share their name, phone number, and email."
        ],
        "ref_sql": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $lookup: {\n      from: \"Customer_Orders\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      customer_phone: 1,\n      customer_email: 1,\n      count_Customer_Orders: { $size: \"$Customer_Orders\" }\n    }\n  },\n  {\n    $sort: {\n      count_Customer_Orders: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      customer_name: 1,\n      customer_phone: 1,\n      customer_email: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4140,
        "db_id": "document_management",
        "nl_queries": [
            "What are all the section titles of the document named \"David CV\"?",
            "Give the section titles of the document with the name \"David CV\".",
            "Can you provide the titles of all sections from the document named \"David CV\"?",
            "Please list the section titles associated with the document called \"David CV\".",
            "What section titles are found in the document titled \"David CV\"?"
        ],
        "ref_sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\"",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $match: {\n      \"Documents.document_name\": \"David CV\"\n    }\n  },\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Document_Sections\"\n  },\n  {\n    $project: {\n      section_title: \"$Documents.Document_Sections.section_title\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2015,
        "db_id": "debate",
        "nl_queries": [
            "List the venues of debates in ascending order of the number of audience.",
            "Provide a list of debate venues sorted by the number of attendees from lowest to highest.",
            "Retrieve the venues where debates were held, ordered by audience size in ascending order.",
            "Show the venues of debates arranged in increasing order of their audience numbers.",
            "List the locations of debates, sorted according to the number of spectators in ascending order."
        ],
        "ref_sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "MQL": "db.debate.find({}, { \"Venue\": 1, \"_id\": 0 }).sort({ \"Num_of_Audience\": 1 });\n"
    },
    {
        "record_id": 9,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find all the customer information in state NY.",
            "What is all the customer information for customers in NY state?",
            "Retrieve all details of customers located in the state of New York.",
            "Show me the complete customer records for individuals in NY.",
            "List all customer information for those residing in New York state."
        ],
        "ref_sql": "SELECT * FROM CUSTOMER WHERE State = \"NY\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $unwind: \"$Customer\"\n  },\n  {\n    $match: {\n      \"Customer.State\": \"NY\"\n    }\n  },\n  {\n    $project: {\n      CustomerId: \"$Customer.CustomerId\",\n      FirstName: \"$Customer.FirstName\",\n      LastName: \"$Customer.LastName\",\n      Company: \"$Customer.Company\",\n      Address: \"$Customer.Address\",\n      City: \"$Customer.City\",\n      State: \"$Customer.State\",\n      Country: \"$Customer.Country\",\n      PostalCode: \"$Customer.PostalCode\",\n      Phone: \"$Customer.Phone\",\n      Fax: \"$Customer.Fax\",\n      Email: \"$Customer.Email\",\n      SupportRepId: \"$Customer.SupportRepId\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3769,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the phone, room, and building for the faculty named Jerry Prince.",
            "What are the phone, room, and building of the faculty member called Jerry Prince?",
            "Can you provide the phone number, room, and building details for the faculty member Jerry Prince?",
            "What is the contact number, as well as the room and building information for Jerry Prince, the faculty?",
            "Please list the phone, room, and building for the instructor named Jerry Prince."
        ],
        "ref_sql": "SELECT phone , room , building FROM Faculty WHERE Fname = \"Jerry\" AND Lname = \"Prince\"",
        "MQL": "db.Faculty.aggregate([\n  {\n    $match: {\n      Fname: \"Jerry\",\n      Lname: \"Prince\"\n    }\n  },\n  {\n    $project: {\n      Phone: 1,\n      Room: 1,\n      Building: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3681,
        "db_id": "game_injury",
        "nl_queries": [
            "Which stadium name contains the substring \"Bank\"?",
            "What are the names of stadiums that include \"Bank\" in their title?",
            "Find any stadium name that has the word \"Bank\" within it.",
            "Which stadiums possess \"Bank\" as part of their name?",
            "List stadiums that feature the substring \"Bank\" in their names."
        ],
        "ref_sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
        "MQL": "db.stadium.find({\n  \"name\": { $regex: \"Bank\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 403,
        "db_id": "hospital_1",
        "nl_queries": [
            "List the names of all distinct medications, ordered in an alphabetical order.",
            "What is the alphabetically ordered list of all distinct medications?",
            "Provide an alphabetically sorted list of all unique medications.",
            "Generate a list of distinct medication names arranged in alphabetical order.",
            "Can you show me the unique names of medications sorted from A to Z?"
        ],
        "ref_sql": "SELECT DISTINCT name FROM medication ORDER BY name",
        "MQL": "db.Medication.aggregate([\n  {\n    $group: {\n      _id: \"$Name\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 295,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the names of nurses who are on call.",
            "What are the distinct names of nurses on call?",
            "List the names of nurses currently available on call.",
            "Provide the unique names of nurses who are available on call.",
            "Show the names of nurses who are listed as being on call."
        ],
        "ref_sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse",
        "MQL": "db.Nurse.find(\n  {\n    \"On_Call\": { $exists: true, $ne: [] }\n  },\n  {\n    \"Name\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 1242,
        "db_id": "formula_1",
        "nl_queries": [
            "What is the id and family name of the driver who has the longest laptime?",
            "What is the id and last name of the driver with the longest laptime?",
            "Can you provide the driver ID and surname of the driver with the slowest lap time?",
            "Who is the driver associated with the longest lap time, and what are their ID and last name?",
            "What are the ID and last name of the driver that has recorded the longest laptime?"
        ],
        "ref_sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: \"$lapTimes\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_milliseconds: {\n        $max: \"$lapTimes.milliseconds\"\n      }\n    }\n  },\n  {\n    $lookup: {\n      from: \"drivers\",\n      let: {\n        max_milliseconds: \"$max_milliseconds\"\n      },\n      pipeline: [\n        {\n          $match: {\n            $expr: {\n              $eq: [\"$lapTimes.milliseconds\", \"$$max_milliseconds\"]\n            }\n          }\n        },\n        {\n          $project: {\n            driverId: 1,\n            surname: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      driverId: \"$Docs1.driverId\",\n      surname: \"$Docs1.surname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2763,
        "db_id": "formula_1",
        "nl_queries": [
            "How many drivers participated in the race Australian Grand Prix held in 2009?",
            "How many drivers were in the Australian Grand Prix held in 2009?",
            "What was the total number of drivers that took part in the Australian Grand Prix in 2009?",
            "Can you tell me how many drivers were involved in the 2009 Australian Grand Prix?",
            "How many drivers entered the race for the Australian Grand Prix that took place in 2009?"
        ],
        "ref_sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      \"races.year\": 2009,\n      \"races.name\": \"Australian Grand Prix\"\n    }\n  },\n  {\n    $project: {\n      driverIds: \"$races.results.driverId\"\n    }\n  },\n  {\n    $unwind: \"$driverIds\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2016,
        "db_id": "election_representative",
        "nl_queries": [
            "List the votes of elections in descending order.",
            "Retrieve the number of votes from elections and display them from highest to lowest.",
            "Show the election vote counts arranged in descending order.",
            "Present a list of votes from elections sorted in order of highest to lowest.",
            "What are the election votes, sorted in descending order?"
        ],
        "ref_sql": "SELECT Votes FROM election ORDER BY Votes DESC",
        "MQL": "db.representative.aggregate([\n  { $unwind: \"$election\" },\n  { $sort: { \"election.Votes\": -1 } },\n  { $project: { \"Votes\": \"$election.Votes\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2837,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "How many different status codes of things are there?",
            "What is the count of unique status codes for items?",
            "How many unique thing status codes exist?",
            "Can you tell me the number of different status codes assigned to things?",
            "How many distinct codes represent the statuses of various items?"
        ],
        "ref_sql": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
        "MQL": "db.Organizations.aggregate([\n  { $unwind: \"$Things\" },\n  { $unwind: \"$Things.Timed_Status_of_Things\" },\n  { $group: { _id: \"$Things.Timed_Status_of_Things.Status_of_Thing_Code\" } },\n  { $count: \"count_DISTINCT_Status_of_Thing_Code\" }\n]);\n"
    },
    {
        "record_id": 1920,
        "db_id": "riding_club",
        "nl_queries": [
            "Show the names of players and names of their coaches.",
            "Provide a list of players along with the names of their respective coaches.",
            "Retrieve the names of all players and their coaches.",
            "Display the player names together with their associated coaches’ names.",
            "List each player alongside the name of their coach."
        ],
        "ref_sql": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID",
        "MQL": "db.player.aggregate([\n  {\n    $lookup: {\n      from: \"club\",\n      let: { playerId: \"$Player_ID\" },\n      pipeline: [\n        { $unwind: \"$coach\" },\n        { $unwind: \"$coach.player_coach\" },\n        {\n          $match: {\n            $expr: {\n              $and: [\n                { $eq: [\"$coach.player_coach.Player_ID\", \"$$playerId\"] }\n              ]\n            }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            Coach_name: \"$coach.Coach_name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Player_name: \"$Player_name\",\n      Coach_name: \"$Docs1.Coach_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1535,
        "db_id": "college_2",
        "nl_queries": [
            "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
            "Give the title of the course offered in Chandler during the Fall of 2010.",
            "What is the name of the course held in the Chandler building during the Fall semester of 2010?",
            "Please provide the title of the class offered in Chandler in the Fall of the year 2010.",
            "Can you tell me the title of the course that took place at Chandler during the Fall semester of 2010?"
        ],
        "ref_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $match: {\n      \"course.section.building\": \"Chandler\",\n      \"course.section.semester\": \"Fall\",\n      \"course.section.year\": 2010\n    }\n  },\n  {\n    $project: {\n      title: \"$course.title\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2720,
        "db_id": "museum_visit",
        "nl_queries": [
            "How many museums were opened after 2013 or before 2008?",
            "What is the total number of museums established after 2013 or prior to 2008?",
            "How many museums were launched either before 2008 or after 2013?",
            "Count the number of museums that opened either after the year 2013 or before the year 2008.",
            "Can you tell me the number of museums that were opened either before 2008 or subsequent to 2013?"
        ],
        "ref_sql": "SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
        "MQL": "db.museum.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Open_Year\": { $gt: \"2013\" } },\n        { \"Open_Year\": { $lt: \"2008\" } }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3827,
        "db_id": "department_store",
        "nl_queries": [
            "For each product type, return the maximum and minimum price.",
            "What are the maximum and minimum product prices for each product type?",
            "Provide the highest and lowest prices for each category of product.",
            "Can you list the maximum and minimum prices associated with each product category?",
            "For all product types, what are the highest and lowest pricing details?"
        ],
        "ref_sql": "SELECT product_type_code , max(product_price) , min(product_price) FROM products GROUP BY product_type_code",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_type_code\",\n      max_product_price: { $max: \"$product_price\" },\n      min_product_price: { $min: \"$product_price\" }\n    }\n  },\n  {\n    $project: {\n      product_type_code: \"$_id\",\n      max_product_price: 1,\n      min_product_price: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3878,
        "db_id": "inn_1",
        "nl_queries": [
            "List the type of bed and name of all traditional rooms.",
            "What are the bed type and name of all the rooms with traditional decor?",
            "Provide the names and bed types of all rooms decorated in a traditional style.",
            "Can you list the bed types along with the names of the rooms featuring traditional decor?",
            "Show me the names and types of beds for every room that has traditional decor."
        ],
        "ref_sql": "SELECT roomName , bedType FROM Rooms WHERE decor = \"traditional\";",
        "MQL": "db.Rooms.find(\n  { decor: \"traditional\" },\n  { roomName: 1, bedType: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3812,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
            "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.",
            "Which product IDs correspond to issues reported by Christop Berge that were authorized for closure by Ashley Medhurst?",
            "Can you provide the product IDs associated with problems reported by Christop Berge and closed by Ashley Medhurst?",
            "What are the product IDs for issues that Christop Berge reported, with Ashley Medhurst approving their closure?"
        ],
        "ref_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
        "MQL": "db.Staff.aggregate([\n  {\n    $match: {\n      $or: [\n        { staff_first_name: \"Christop\", staff_last_name: \"Berge\" },\n        { staff_first_name: \"Ashley\", staff_last_name: \"Medhurst\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      christopBergeId: {\n        $max: {\n          $cond: [\n            { $and: [{ $eq: [\"$staff_first_name\", \"Christop\"] }, { $eq: [\"$staff_last_name\", \"Berge\"] }] },\n            \"$staff_id\",\n            null\n          ]\n        }\n      },\n      ashleyMedhurstId: {\n        $max: {\n          $cond: [\n            { $and: [{ $eq: [\"$staff_first_name\", \"Ashley\"] }, { $eq: [\"$staff_last_name\", \"Medhurst\"] }] },\n            \"$staff_id\",\n            null\n          ]\n        }\n      }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Product\",\n      let: { christopBergeId: \"$christopBergeId\", ashleyMedhurstId: \"$ashleyMedhurstId\" },\n      pipeline: [\n        { $unwind: \"$Problems\" },\n        {\n          $match: {\n            $expr: {\n              $and: [\n                { $eq: [\"$Problems.reported_by_staff_id\", \"$$christopBergeId\"] },\n                { $eq: [\"$Problems.closure_authorised_by_staff_id\", \"$$ashleyMedhurstId\"] }\n              ]\n            }\n          }\n        },\n        { $project: { product_id: 1, _id: 0 } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  { $project: { product_id: \"$Docs1.product_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 3910,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the shipping agent code of shipping agent UPS?",
            "Can you tell me the shipping agent code for UPS?",
            "What is the code assigned to the shipping agent known as UPS?",
            "Give me the shipping agent code associated with the UPS shipping agent.",
            "What's the code for the shipping agent named UPS?"
        ],
        "ref_sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
        "MQL": "db.Ref_Shipping_Agents.find({ \"shipping_agent_name\": \"UPS\" }, { \"shipping_agent_code\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4251,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the weight of the youngest dog.",
            "How much does the youngest dog weigh?",
            "What is the weight of the youngest dog in the collection?",
            "Please provide the weight of the dog that is the youngest.",
            "Can you tell me the weight of the most youthful dog?"
        ],
        "ref_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "MQL": "db.Pets.aggregate([\n  {\n    $match: {\n      PetType: \"dog\"\n    }\n  },\n  {\n    $sort: {\n      pet_age: 1\n    }\n  },\n  {\n    $project: {\n      weight: 1,\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 2336,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "What is the description of the claim status \"Open\"?",
            "Find the description of the claim status \"Open\".",
            "Can you provide the description for the claim status labeled \"Open\"?",
            "What does the claim status \"Open\" signify in terms of description?",
            "Give me the description associated with the \"Open\" claim status."
        ],
        "ref_sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\"",
        "MQL": "db.Claims_Processing_Stages.aggregate([\n  {\n    $match: {\n      Claim_Status_Name: \"Open\"\n    }\n  },\n  {\n    $project: {\n      Claim_Status_Description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1075,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the details and ways to get to tourist attractions related to royal family?",
            "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
            "Can you provide information and directions for tourist attractions tied to the royal family?",
            "What details and access methods exist for attractions associated with the royal family?",
            "List the tourist attractions affiliated with the royal family along with their details and how to reach them."
        ],
        "ref_sql": "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Royal_Family\"\n  },\n  {\n    $project: {\n      Royal_Family_Details: \"$Tourist_Attractions.Royal_Family.Royal_Family_Details\",\n      How_to_Get_There: \"$Tourist_Attractions.How_to_Get_There\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 435,
        "db_id": "icfp_1",
        "nl_queries": [
            "Which authors belong to the institution \"Google\"? Show the first names and last names.",
            "Find the first names and last names of the authors whose institution affiliation is \"Google\".",
            "List the first and last names of authors affiliated with the institution named \"Google\".",
            "Who are the authors connected to \"Google\"? Please provide their first and last names.",
            "Retrieve the first and last names of the authors linked to the organization \"Google\"."
        ],
        "ref_sql": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"",
        "MQL": "db.Inst.aggregate([\n  {\n    $match: {\n      name: \"Google\"\n    }\n  },\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      fname: \"$Docs1.fname\",\n      lname: \"$Docs1.lname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2909,
        "db_id": "program_share",
        "nl_queries": [
            "find the number of different programs that are broadcast during night time.",
            "How many distinct programs are broadcast at \"Night\" time?",
            "Count the unique programs that are shown during the night time.",
            "What is the total number of distinct programs aired at night?",
            "Determine how many different programs are broadcast during the night hours."
        ],
        "ref_sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'",
        "MQL": "db.program.aggregate([\n  {\n    $unwind: \"$broadcast\"\n  },\n  {\n    $match: {\n      \"broadcast.Time_of_day\": \"Night\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$broadcast.Program_ID\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_program_id: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_program_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 387,
        "db_id": "student_1",
        "nl_queries": [
            "What are the first names of students studying in room 107?",
            "List the first names of all the students in room 107.",
            "Can you provide the first names of students who are in classroom 107?",
            "Show me the first names of all the students enrolled in room 107.",
            "What are the first names of students assigned to classroom 107?"
        ],
        "ref_sql": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
        "MQL": "db.list.find(\n  { \"Classroom\": 107 },\n  { \"FirstName\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 4033,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What is the total quantity of products purchased by \"Rodrick Heaney\"?",
            "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
            "How many products in total did \"Rodrick Heaney\" purchase?",
            "Can you tell me the cumulative quantity of items bought by \"Rodrick Heaney\"?",
            "What is the overall count of products ordered by the customer named \"Rodrick Heaney\"?"
        ],
        "ref_sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_name: \"Rodrick Heaney\"\n    }\n  },\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_order_quantity: {\n        $sum: {\n          $toInt: \"$Customer_Orders.Order_Items.order_quantity\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_order_quantity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1418,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What is the organisation type and id of the organisation which has the most number of research staff?",
            "What is the type and id of the organization that has the most research staff?",
            "Which organisation has the highest count of research staff, and what are its type and ID?",
            "Identify the organisation type and ID of the organisation with the largest number of research staff members.",
            "Can you provide the type and ID of the organisation that employs the most research staff?"
        ],
        "ref_sql": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Research_Staff\"\n  },\n  {\n    $group: {\n      _id: {\n        organisation_id: \"$Organisations.organisation_id\",\n        organisation_type: \"$Organisations.organisation_type\"\n      },\n      research_staff_count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { research_staff_count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      organisation_type: \"$_id.organisation_type\",\n      organisation_id: \"$_id.organisation_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1667,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the names of the workshop groups that have bookings with status code \"stop\"?",
            "Which workshop groups have bookings with status code \"stop\"? Give me the names.",
            "Can you provide the names of the workshop groups that currently have bookings marked as \"stop\"?",
            "List the names of workshop groups that possess bookings with a status code of \"stop.\"",
            "What are the workshop group names associated with bookings that have a status of \"stop\"?"
        ],
        "ref_sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Drama_Workshop_Groups\"\n  },\n  {\n    $unwind: \"$Drama_Workshop_Groups.Bookings\"\n  },\n  {\n    $match: {\n      \"Drama_Workshop_Groups.Bookings.Status_Code\": \"stop\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Drama_Workshop_Groups.Workshop_Group_ID\",\n      Store_Name: { $first: \"$Drama_Workshop_Groups.Store_Name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Store_Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2414,
        "db_id": "college_1",
        "nl_queries": [
            "Find the number of professors with a Ph.D. degree in each department.",
            "How many professors have a Ph.D. in each department?",
            "Count how many professors hold a Ph.D. in each department.",
            "What is the total number of professors with a Ph.D. in every department?",
            "How many faculty members possess a Ph.D. across each department?"
        ],
        "ref_sql": "SELECT count(*) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.PROFESSOR.PROF_HIGH_DEGREE\": \"Ph.D.\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_CODE\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      DEPT_CODE: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3683,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
            "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
            "Can you list the stations in Palo Alto that have served as trip endpoints 100 times or fewer?",
            "What stations in the city of Palo Alto have had at most 100 trips ending at them?",
            "Identify the names of stations located in Palo Alto that have been the destination for no more than 100 trips."
        ],
        "ref_sql": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      city: \"Palo Alto\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"trips\",\n      localField: \"id\",\n      foreignField: \"end_station_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      sum_Docs1: { $sum: { $size: \"$Docs1\" } }\n    }\n  },\n  {\n    $match: {\n      sum_Docs1: { $lte: 100 }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3346,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the location codes with at least 3 documents.",
            "What are the codes of the locations with at least three documents?",
            "List the location codes that have a minimum of three documents associated with them.",
            "Identify the location codes for which there are at least three documents.",
            "Retrieve the codes of locations that contain three or more documents."
        ],
        "ref_sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $unwind: \"$All_Documents.Document_Locations\"\n  },\n  {\n    $group: {\n      _id: \"$All_Documents.Document_Locations.Location_Code\",\n      documentCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      documentCount: { $gte: 3 }\n    }\n  },\n  {\n    $project: {\n      Location_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1455,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "How many staff does each project has? List the project id and the number in an ascending order.",
            "For each project id, how many staff does it have? List them in increasing order.",
            "What is the staff count for each project? Please provide the project IDs along with their respective counts in ascending order.",
            "Can you list the number of staff members for each project ID? The results should be sorted by the count in increasing order.",
            "How many staff members are allocated to each project? List the project IDs and their corresponding staff counts in sorted order from least to greatest."
        ],
        "ref_sql": "SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Project_Staff\"\n  },\n  {\n    $group: {\n      _id: \"$Organisations.Projects.Project_Staff.project_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      project_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: { count: 1 }\n  }\n]);\n"
    },
    {
        "record_id": 1776,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "Find the stadium that hosted the most concerts since 2014, including its name and capacity.",
            "Identify the name and capacity of the stadium with the highest number of concerts starting from the year 2014.",
            "What stadium has the largest concert count in 2014 and beyond, along with its capacity?",
            "Provide the name and capacity of the stadium that has held the most concerts from the year 2014 onwards."
        ],
        "ref_sql": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.stadium.aggregate([\n  {\n    $match: {\n      \"concert.Year\": { $gte: \"2014\" }\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Capacity\": 1,\n      \"ConcertCount\": { $size: \"$concert\" }\n    }\n  },\n  {\n    $sort: {\n      \"ConcertCount\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"_id\": 0,\n      \"Name\": 1,\n      \"Capacity\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3199,
        "db_id": "csu_1",
        "nl_queries": [
            "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
            "What is the number of faculty at Long Beach State University in 2002?",
            "How many faculty members are associated with Long Beach State University for the year 2002?",
            "Can you tell me the number of faculty lines at Long Beach State University in the year 2002?",
            "What is the total faculty count at Long Beach State University during the year 2002?"
        ],
        "ref_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\"",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"Long Beach State University\",\n      \"faculty.Year\": 2002\n    }\n  },\n  {\n    $unwind: \"$faculty\"\n  },\n  {\n    $match: {\n      \"faculty.Year\": 2002\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Faculty: \"$faculty.Faculty\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 472,
        "db_id": "election",
        "nl_queries": [
            "Show the delegate from district 1 in election.",
            "Who is the delegate of district 1 in the elections?",
            "Provide the name of the delegate for district 1 in the elections.",
            "Identify the delegate representing district 1 during the elections.",
            "What is the name of the delegate from district 1 in the election?"
        ],
        "ref_sql": "SELECT Delegate FROM election WHERE District = 1",
        "MQL": "db.county.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $match: {\n      \"election.District\": 1\n    }\n  },\n  {\n    $project: {\n      Delegate: \"$election.Delegate\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 727,
        "db_id": "aircraft",
        "nl_queries": [
            "What are the name of pilots aged 25 or older?",
            "what is the name of every pilot who is at least 25 years old?",
            "List the names of all pilots who are 25 years and older.",
            "Provide the names of pilots that have reached the age of 25.",
            "Identify the names of every pilot whose age is 25 or above."
        ],
        "ref_sql": "SELECT Name FROM pilot WHERE Age >= 25",
        "MQL": "db.pilot.find(\n  {\n    Age: { $gte: 25 }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2615,
        "db_id": "body_builder",
        "nl_queries": [
            "How many body builders are there?",
            "What is the total number of individuals engaged in body building?",
            "How many people are classified as body builders?",
            "Can you tell me the count of body builders available in the records?",
            "How many individuals are listed as body builders?"
        ],
        "ref_sql": "SELECT count(*) FROM body_builder",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"body_builder\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1591,
        "db_id": "world_1",
        "nl_queries": [
            "Which language is the most popular in Aruba?",
            "What language is predominantly spoken in Aruba?",
            "What is the primary language used by the people in Aruba?",
            "Which language do the majority of residents in Aruba speak?",
            "Identify the most widely spoken language in Aruba."
        ],
        "ref_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Name: \"Aruba\"\n    }\n  },\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.Language\",\n      percentage: {\n        $max: \"$countrylanguage.Percentage\"\n      }\n    }\n  },\n  {\n    $sort: {\n      percentage: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Language: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1212,
        "db_id": "game_injury",
        "nl_queries": [
            "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
            "Retrieve the date of each game along with the name of the player injured during the game, ordering the results by the game season in descending order.",
            "List the game dates and the names of injured players for each injury incident, sorted from the most recent season to the oldest.",
            "For every injury incident, show the corresponding game date and the injured player's name, and sort the data in descending order based on the game season.",
            "Obtain the dates of games and the names of players who got injured, ensuring that the results are sorted by game seasons in a descending manner."
        ],
        "ref_sql": "SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $unwind: \"$game.injury_accident\" },\n  { $sort: { \"game.Season\": -1 } },\n  { $project: { \"Date\": \"$game.Date\", \"Player\": \"$game.injury_accident.Player\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 464,
        "db_id": "perpetrator",
        "nl_queries": [
            "List the date of perpetrators in descending order of the number of people killed.",
            "Retrieve the dates of perpetrators sorted by the number of people they killed, from highest to lowest.",
            "Show the dates associated with perpetrators, ordered by the decreasing count of fatalities.",
            "Provide a list of perpetrator dates, ranked in descending order based on the number of victims killed.",
            "Compile the dates of perpetrators in order of the number of individuals killed, displaying the highest first."
        ],
        "ref_sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $sort: { \"perpetrator.Killed\": -1 } },\n  { $project: { \"Date\": \"$perpetrator.Date\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3624,
        "db_id": "swimming",
        "nl_queries": [
            "What is the name of the event that happened in the most recent year?",
            "Can you tell me the name of the event that occurred in the latest year?",
            "What is the title of the event from the most recent year?",
            "Which event took place in the most recent year, and what is its name?",
            "Identify the name of the event that happened last."
        ],
        "ref_sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$event\" },\n  { $sort: { \"event.Year\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Name\": \"$event.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 722,
        "db_id": "phone_market",
        "nl_queries": [
            "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
            "List the names of phones that use either \"Sprint\" or \"TMobile\" as their carrier.",
            "Retrieve the names of phones with a carrier of \"Sprint\" or \"TMobile\".",
            "Provide the names of phones associated with either the \"Sprint\" or \"TMobile\" carriers.",
            "Display the names of cellphone models that are available with carriers Sprint or TMobile."
        ],
        "ref_sql": "SELECT Name FROM phone WHERE Carrier = \"Sprint\" OR Carrier = \"TMobile\"",
        "MQL": "db.phone.find({\n  $or: [\n    { \"Carrier\": \"Sprint\" },\n    { \"Carrier\": \"TMobile\" }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3992,
        "db_id": "college_2",
        "nl_queries": [
            "Find the total budgets of the Marketing or Finance department.",
            "What is the sum of budgets of the Marketing and Finance departments?",
            "Calculate the total budget for both the Marketing and Finance departments.",
            "What is the combined budget allocated to the Marketing and Finance departments?",
            "Determine the overall budget for the departments of Marketing and Finance."
        ],
        "ref_sql": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
        "MQL": "db.department.aggregate([\n  {\n    $match: {\n      $or: [\n        { dept_name: \"Marketing\" },\n        { dept_name: \"Finance\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_budget: { $sum: \"$budget\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_budget: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2013,
        "db_id": "gymnast",
        "nl_queries": [
            "List the total points of gymnasts in descending order.",
            "What are the total points for all gymnasts, ordered by total points descending?",
            "Show the total points scored by gymnasts, sorted from highest to lowest.",
            "Provide a list of gymnasts' total points in descending order.",
            "What are the total points for all gymnasts, listed in order of highest to lowest?"
        ],
        "ref_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Total_Points: \"$gymnast.Total_Points\"\n    }\n  },\n  {\n    $sort: {\n      Total_Points: -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3271,
        "db_id": "network_1",
        "nl_queries": [
            "Show all the grades of the high schoolers.",
            "What is the grade of each high schooler?",
            "List the grades for all high school students.",
            "What grades do the high schoolers have?",
            "Provide the grade information for each student in high school."
        ],
        "ref_sql": "SELECT grade FROM Highschooler",
        "MQL": "db.Highschooler.find({}, { \"grade\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1346,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the name and hours of project that has the most number of scientists.",
            "What is the name and hours for the project which has the most scientists assigned to it?",
            "Retrieve the name and hours for the project with the highest number of scientist assignments.",
            "What are the name and hours of the project that has the greatest number of scientists involved?",
            "Provide the name and hours related to the project having the largest count of assigned scientists."
        ],
        "ref_sql": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$AssignedTo\"\n  },\n  {\n    $group: {\n      _id: \"$Code\",\n      Name: { $first: \"$Name\" },\n      Hours: { $first: \"$Hours\" },\n      ScientistCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      ScientistCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      Hours: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 872,
        "db_id": "restaurant_1",
        "nl_queries": [
            "What is the description of the restaurant type Sandwich?",
            "Can you provide the description for the restaurant type called Sandwich?",
            "What does the description say about the Sandwich restaurant type?",
            "Give me the details regarding the Sandwich restaurant type.",
            "What information is available about the Sandwich restaurant type's description?"
        ],
        "ref_sql": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";",
        "MQL": "db.Restaurant_Type.find({ \"ResTypeName\": \"Sandwich\" }, { \"ResTypeDescription\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 675,
        "db_id": "company_employee",
        "nl_queries": [
            "List the names of companies by ascending number of sales.",
            "Generate a list of company names sorted by their sales from lowest to highest.",
            "Show the names of companies organized in ascending order according to their sales figures.",
            "Provide a list of companies sorted by their sales in billions, starting from the smallest.",
            "Display company names arranged by increasing sales amounts."
        ],
        "ref_sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
        "MQL": "db.company.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Sales_in_Billion\": 1 });\n"
    },
    {
        "record_id": 2385,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the number of projects which each scientist is working on and scientist's name.",
            "What are the names of the scientists, and how many projects are each of them working on?",
            "List the names of scientists along with the total number of projects they are involved in.",
            "How many projects is each scientist engaged with, and what are their names?",
            "Provide the names of scientists together with the count of projects they are working on."
        ],
        "ref_sql": "SELECT count(*) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
        "MQL": "db.Scientists.aggregate([\n  {\n    $lookup: {\n      from: \"Projects\",\n      localField: \"AssignedTo.Project\",\n      foreignField: \"Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      count: { $size: \"$Docs1\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1859,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
            "Which room has the largest number of reservations?",
            "What is the room that has received the most reservations in the hotel?",
            "Identify the room with the highest number of bookings.",
            "Which room has recorded the greatest total of reservations?"
        ],
        "ref_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $unwind: \"$Reservations\"\n  },\n  {\n    $group: {\n      _id: \"$roomName\",\n      reservationCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      reservationCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      roomName: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4066,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".",
            "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.",
            "List the first names of all authors who have authored papers with \"Functional\" in the title.",
            "Who are the authors of papers titled with the term \"Functional\"? Provide their first names.",
            "Retrieve the first names of authors that wrote papers containing the word \"Functional\" in their titles."
        ],
        "ref_sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Functional%\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $match: {\n      title: { $regex: \"Functional\", $options: \"i\" }\n    }\n  },\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      fname: \"$Docs1.fname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1303,
        "db_id": "architecture",
        "nl_queries": [
            "What are the ids and names of the architects who built at least 3 bridges ?",
            "List the IDs and names of architects known to have built three or more bridges.",
            "Give me the IDs and names of architects who have constructed no fewer than three bridges.",
            "Which architects have built at least three bridges? Please provide their IDs and names.",
            "Provide the names and IDs of architects with a record of having built a minimum of three bridges."
        ],
        "ref_sql": "SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count(*) >= 3",
        "MQL": "db.architect.find({\n  $expr: { $gte: [{ $size: \"$bridge\" }, 3] }\n}, { \"id\": 1, \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1004,
        "db_id": "car_1",
        "nl_queries": [
            "How many models does each car maker produce? List maker full name, id and the number.",
            "What is the full name of each car maker, along with its id and how many models it produces?",
            "Can you provide the count of models produced by each car manufacturer along with their full name and ID?",
            "For each car maker, how many models do they manufacture? Please include their full name and ID in the results.",
            "List the full name and ID of every car maker together with the total number of models they produce."
        ],
        "ref_sql": "SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $group: {\n      _id: {\n        Id: \"$countries.car_makers.Id\",\n        FullName: \"$countries.car_makers.FullName\"\n      },\n      modelCount: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Id: \"$_id.Id\",\n      FullName: \"$_id.FullName\",\n      count: \"$modelCount\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3804,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the product category description of the product category with code \"Spices\".",
            "What is the description of the product category with the code 'Spices'?",
            "What is the description for the product category identified by the code \"Spices\"?",
            "Retrieve the description of the product category that has the code 'Spices'.",
            "Give me the product category description associated with the code \"Spices\"."
        ],
        "ref_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = \"Spices\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $match: {\n      product_category_code: \"Spices\"\n    }\n  },\n  {\n    $project: {\n      product_category_description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2447,
        "db_id": "chinook_1",
        "nl_queries": [
            "How many artists do not have any album?",
            "Cound the number of artists who have not released an album.",
            "What is the total number of artists with no albums released?",
            "How many artists have yet to publish any albums?",
            "Count the number of artists that lack any album in their discography."
        ],
        "ref_sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "MQL": "db.Artist.aggregate([\n  {\n    $project: {\n      count: {\n        $cond: {\n          if: { $eq: [{ $size: \"$Album\" }, 0] },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: \"$count\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 895,
        "db_id": "music_4",
        "nl_queries": [
            "What are the songs in volumes with more than 1 week on top?",
            "Give the songs included in volumes that have more than 1 week on top.",
            "List the songs from volumes that ranked higher than one week.",
            "Show the titles of songs featured in volumes that have been at the top for over one week.",
            "What songs are included in volumes that spent more than one week at the top?"
        ],
        "ref_sql": "SELECT Song FROM volume WHERE Weeks_on_Top > 1",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $match: {\n      \"volume.Weeks_on_Top\": { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Song: \"$volume.Song\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2512,
        "db_id": "activity_1",
        "nl_queries": [
            "How many faculty do we have?",
            "What is the total number of faculty members?",
            "What is the total count of faculty staff?",
            "Can you tell me how many faculty members are present?",
            "How many faculty members are there in total?"
        ],
        "ref_sql": "SELECT count(*) FROM Faculty",
        "MQL": "db.Faculty.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3657,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
            "What procedures cost less than 5000 and have John Wen as a trained physician?",
            "List all procedures that cost under 5000 and in which physician John Wen received training.",
            "Retrieve the names of procedures priced below 5000 that were taught to physician John Wen.",
            "What are the names of procedures that have a cost of less than 5000 and were under the training of John Wen?"
        ],
        "ref_sql": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
        "MQL": "db.Procedures.aggregate([\n  {\n    $match: {\n      Cost: { $lt: 5000 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"Trained_In.Physician\",\n      foreignField: \"EmployeeID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Name\": \"John Wen\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1080,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the description of the service type which offers both the photo product and the film product?",
            "Give me the description of the service type that offers not only the photo product but also the film product.",
            "Can you tell me the description of the service type that includes both the photo and film products?",
            "What service type description do we have for offerings that encompass both the photo and film products?",
            "Provide the description of the service type that caters to both the photo and film product offerings."
        ],
        "ref_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $match: {\n      \"Services.Product_Name\": { $all: [\"photo\", \"film\"] }\n    }\n  },\n  {\n    $project: {\n      Service_Type_Description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2404,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "What is the number of employees from each city?",
            "Count the number of employees for each city.",
            "How many employees are there in each city?",
            "Provide the count of employees grouped by city.",
            "List the number of employees per city."
        ],
        "ref_sql": "SELECT count(*) , city FROM employee GROUP BY city",
        "MQL": "db.employee.aggregate([\n  {\n    $group: {\n      _id: \"$City\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      City: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 676,
        "db_id": "company_employee",
        "nl_queries": [
            "Show the names of companies in the banking or retailing industry?",
            "List the names of companies operating in the banking or retail sectors.",
            "What are the names of businesses in the banking and retail industries?",
            "Retrieve the names of firms within the banking or retailing industry.",
            "Provide the names of company entities in the industries of banking and retailing."
        ],
        "ref_sql": "SELECT Name FROM company WHERE Industry = \"Banking\" OR Industry = \"Retailing\"",
        "MQL": "db.company.find({\n  $or: [\n    { \"Industry\": \"Banking\" },\n    { \"Industry\": \"Retailing\" }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1923,
        "db_id": "riding_club",
        "nl_queries": [
            "Show the names of players coached by the rank 1 coach.",
            "List the names of all players who are under the guidance of coaches with a rank of 1.",
            "Provide the names of players that are coached by coaches who have a rank of one.",
            "What are the names of the players being trained by the coach ranked at number one?",
            "Display the names of players supervised by those coaches who hold a rank of 1."
        ],
        "ref_sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$coach\"\n  },\n  {\n    $match: {\n      \"coach.Rank\": 1\n    }\n  },\n  {\n    $lookup: {\n      from: \"player\",\n      localField: \"coach.Coach_ID\",\n      foreignField: \"player_coach.Coach_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Player_name: \"$Docs1.Player_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3641,
        "db_id": "architecture",
        "nl_queries": [
            "What are the names of the mills which are not located in 'Donceel'?",
            "List the names of mills that do not have \"Donceel\" as their location.",
            "What are the names of the mills situated outside of Donceel?",
            "Provide the names of mills that are located anywhere except Donceel.",
            "Show me the names of mills that aren't found in 'Donceel'."
        ],
        "ref_sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
        "MQL": "db.architect.aggregate([\n  { $unwind: \"$mill\" }, \n  { $match: { \"mill.location\": { $ne: \"Donceel\" } } }, \n  { $project: { \"name\": \"$mill.name\", \"_id\": 0 } } \n]);\n"
    },
    {
        "record_id": 144,
        "db_id": "singer",
        "nl_queries": [
            "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "For each citizenship, what is the maximum net worth?",
            "List each citizenship along with the highest net worth achieved by singers from that citizenship.",
            "What is the highest net worth among singers for each citizenship group?",
            "Provide the maximum net worth for singers categorized by their citizenship."
        ],
        "ref_sql": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "MQL": "db.singer.aggregate([\n  {\n    $group: {\n      _id: \"$Citizenship\",\n      max_Net_Worth_Millions: { $max: \"$Net_Worth_Millions\" }\n    }\n  },\n  {\n    $project: {\n      Citizenship: \"$_id\",\n      max_Net_Worth_Millions: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Citizenship: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2383,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the number of scientists involved for each project name.",
            "What are the naems of all the projects, and how many scientists were assigned to each of them?",
            "How many unique scientists are assigned to each project?",
            "For each project, what is the total number of scientists involved in its execution?",
            "List all projects along with the count of scientists that have been assigned to them."
        ],
        "ref_sql": "SELECT count(*) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$AssignedTo\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: {\n        $addToSet: \"$AssignedTo.Scientist\"\n      }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      count: {\n        $size: \"$count\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1585,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
            "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
            "Retrieve the dates of invoices for the customer named Astrid Gruber.",
            "List the invoice dates for the client with first name Astrid and last name Gruber.",
            "What are the dates of invoices associated with Astrid Gruber as a customer?"
        ],
        "ref_sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $unwind: \"$Customer\"\n  },\n  {\n    $match: {\n      \"Customer.FirstName\": \"Astrid\",\n      \"Customer.LastName\": \"Gruber\"\n    }\n  },\n  {\n    $unwind: \"$Customer.Invoice\"\n  },\n  {\n    $project: {\n      InvoiceDate: \"$Customer.Invoice.InvoiceDate\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2196,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the average hours of all projects.",
            "What is the average hours across all projects?",
            "What is the mean number of hours spent on all projects?",
            "Calculate the average number of hours for every project.",
            "Determine the average hours dedicated to all projects combined."
        ],
        "ref_sql": "SELECT avg(hours) FROM projects",
        "MQL": "db.Projects.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_hours: { $avg: \"$Hours\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_hours: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3604,
        "db_id": "program_share",
        "nl_queries": [
            "Find the names of channels that are not owned by CCTV.",
            "Which channels are not owned by CCTV? Give me the channel names.",
            "List the names of all channels excluding those owned by CCTV.",
            "Identify channels that do not belong to CCTV and provide their names.",
            "What are the names of the channels that aren’t owned by CCTV?"
        ],
        "ref_sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "MQL": "db.channel.find(\n  { Owner: { $ne: \"CCTV\" } },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1543,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
            "List the total scores of body builders who were born in January.",
            "What are the total results for body builders with January birthdays?",
            "Show the total scores of those body builders whose birthdays include \"January\".",
            "Can you provide the total scores for body builders whose birth dates contain the word \"January\"?"
        ],
        "ref_sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"Birth_Date\": { $regex: \"January\", $options: \"i\" }\n    }\n  },\n  {\n    $unwind: \"$body_builder\"\n  },\n  {\n    $project: {\n      Total: \"$body_builder.Total\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2530,
        "db_id": "driving_school",
        "nl_queries": [
            "How many lessons taught by staff whose first name has letter 'a' in it?",
            "How many lessons were taught by a staff member whose first name has the letter 'a' in it?",
            "What is the total number of lessons instructed by staff members with an 'a' in their first name?",
            "How many lessons have been conducted by instructors whose first name includes the letter 'a'?",
            "Count the lessons given by staff whose first name contains the letter 'a'."
        ],
        "ref_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": { $regex: \"a\", $options: \"i\" }\n    }\n  },\n  {\n    $unwind: \"$Staff.Lessons\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2969,
        "db_id": "student_assessment",
        "nl_queries": [
            "Find the id of courses which are registered or attended by student whose id is 121?",
            "What are the ids of the courses that are registered or attended by the student whose id is 121?",
            "What are the course IDs associated with the student who is registered with the ID 121?",
            "Retrieve the IDs of courses that the student with ID 121 has either registered for or attended.",
            "List the course IDs for the student whose identification number is 121, covering both registrations and attendance."
        ],
        "ref_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $match: {\n      \"Students.student_id\": 121\n    }\n  },\n  {\n    $unwind: {\n      path: \"$Students.Student_Course_Registrations\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $project: {\n      course_id: \"$Students.Student_Course_Registrations.course_id\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$course_id\"\n    }\n  },\n  {\n    $project: {\n      course_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1317,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the code and description of the most frequent behavior incident type?",
            "What is the code and description for the behavior incident type that occurs most often?",
            "Can you provide the incident type code and its description for the most commonly reported behavior incident?",
            "Identify the code and description of the behavior incident type that has the highest frequency.",
            "What are the details and code of the behavior incident type that is the most prevalent?"
        ],
        "ref_sql": "SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ref_Incident_Type.aggregate([\n  {\n    $unwind: \"$Behavior_Incident\"\n  },\n  {\n    $group: {\n      _id: \"$Behavior_Incident.incident_type_code\",\n      incident_type_description: { $first: \"$incident_type_description\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      incident_type_code: \"$_id\",\n      incident_type_description: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3110,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the document id, template id and description for document named \"Robbin CV\"?",
            "Return the document id, template id, and description for the document with the name Robbin CV.",
            "Can you provide the document ID, template ID, and description for the document titled \"Robbin CV\"?",
            "What are the document ID, template ID, and description associated with the document named \"Robbin CV\"?",
            "Please return the document ID, template ID, and description for the document called \"Robbin CV\"."
        ],
        "ref_sql": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $match: {\n      \"Templates.Documents.Document_Name\": \"Robbin CV\"\n    }\n  },\n  {\n    $project: {\n      Document_ID: \"$Templates.Documents.Document_ID\",\n      Template_ID: \"$Templates.Template_ID\",\n      Document_Description: \"$Templates.Documents.Document_Description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3195,
        "db_id": "music_1",
        "nl_queries": [
            "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
            "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
            "Retrieve the IDs of songs that are in mp4 format and have a resolution of less than 1000.",
            "What are the IDs of the files that come in mp4 format and have resolutions lower than 1000?",
            "List the file IDs for songs available in mp4 format with a resolution beneath 1000."
        ],
        "ref_sql": "SELECT f_id FROM files WHERE formats = \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution < 1000",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $unwind: \"$artist.files.song\"\n  },\n  {\n    $match: {\n      \"artist.files.formats\": \"mp4\",\n      \"artist.files.song.resolution\": { $lt: 1000 }\n    }\n  },\n  {\n    $project: {\n      f_id: \"$artist.files.f_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4107,
        "db_id": "e_government",
        "nl_queries": [
            "Find the emails of parties with the most popular party form.",
            "What are the party emails associated with parties that used the party form that is the most common?",
            "Retrieve the emails of parties who have submitted the most utilized party form.",
            "List the emails of parties associated with the most commonly used party form.",
            "What are the email addresses of parties that opted for the party form which has the highest usage?"
        ],
        "ref_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "MQL": "db.Parties.aggregate([\n  {\n    $unwind: \"$Party_Forms\"\n  },\n  {\n    $group: {\n      _id: \"$Party_Forms.form_id\",\n      form_count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      form_count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Parties\",\n      localField: \"_id\",\n      foreignField: \"Party_Forms.form_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      party_email: \"$Docs1.party_email\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1605,
        "db_id": "chinook_1",
        "nl_queries": [
            "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
            "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
            "List the names and IDs of artists who have three or more albums, sorted alphabetically.",
            "Provide the names and identifiers of artists that possess at least three albums, arranged in alphabetical order.",
            "Can you show me the names and IDs of all artists with a minimum of three albums, ordered by their names?"
        ],
        "ref_sql": "SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name",
        "MQL": "db.Artist.aggregate([\n  {\n    $project: {\n      Name: 1,\n      ArtistId: 1,\n      AlbumCount: {\n        $size: \"$Album\"\n      }\n    }\n  },\n  {\n    $match: {\n      AlbumCount: {\n        $gte: 3\n      }\n    }\n  },\n  {\n    $sort: {\n      Name: 1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      ArtistId: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3952,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the id of students who do not have a cat pet.",
            "What are the ids of the students who do not own cats as pets?",
            "List the student IDs of those who do not have cats as pets.",
            "Identify the ids of students without any cat pets.",
            "Provide the IDs of students who do not own a pet of type cat."
        ],
        "ref_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: {\n      path: \"$Docs1\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { \"Docs1.PetType\": { $ne: \"cat\" } },\n        { \"Docs1\": { $exists: false } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$StuID\"\n    }\n  },\n  {\n    $project: {\n      StuID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1629,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the names of body builders?",
            "List the names of individuals who are body builders.",
            "Retrieve the names of people recognized as body builders.",
            "Can you provide the names of those individuals who are in the body builder category?",
            "What are the names of the individuals classified as body builders?"
        ],
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "MQL": "db.people.find({\n  \"body_builder\": { $ne: [] }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 813,
        "db_id": "insurance_policies",
        "nl_queries": [
            "With which kind of payment method were the least number of payments processed?",
            "What is the payment method that were used the least often?",
            "Which payment method had the fewest total payments made?",
            "Identify the payment method that was least frequently utilized.",
            "What is the least commonly used payment method for processing payments?"
        ],
        "ref_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements.Payments\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Policies.Claims.Settlements.Payments.Payment_Method_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: 1\n    }\n  },\n  {\n    $project: {\n      Payment_Method_Code: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 2621,
        "db_id": "school_finance",
        "nl_queries": [
            "How many budgets are above 3000 in year 2001 or before?",
            "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
            "What is the total number of budgets exceeding 3000 for the years up to and including 2001?",
            "How many budget entries from 2001 or earlier have a budgeted amount greater than 3000?",
            "Determine the count of budgets from the year 2001 or before that are over 3000 in their allocated amounts."
        ],
        "ref_sql": "SELECT count(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001",
        "MQL": "db.School.aggregate([\n  {\n    $unwind: \"$budget\"\n  },\n  {\n    $match: {\n      \"budget.Year\": { $lte: 2001 },\n      \"budget.Budgeted\": { $gt: 3000 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 137,
        "db_id": "music_4",
        "nl_queries": [
            "Please show the categories of the music festivals with count more than 1.",
            "What are the categories of music festivals for which there have been more than 1 music festival?",
            "List the categories of music festivals that have appeared more than once.",
            "Show me the categories under which there are multiple music festivals.",
            "What are the music festival categories that have a count greater than one?"
        ],
        "ref_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1",
        "MQL": "db.artist.aggregate([\n  { $unwind: \"$volume\" },\n  { $unwind: \"$volume.music_festival\" },\n  {\n    $group: {\n      _id: \"$volume.music_festival.Category\",\n      count: { $sum: 1 }\n    }\n  },\n  { $match: { count: { $gt: 1 } } },\n  { $project: { Category: \"$_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 3664,
        "db_id": "program_share",
        "nl_queries": [
            "find the names of programs whose origin is not in Beijing.",
            "Which programs' origins are not \"Beijing\"? Give me the program names.",
            "List the names of all programs that do not originate from Beijing.",
            "Provide the names of programs whose origin is different from Beijing.",
            "What are the names of programs that have an origin other than Beijing?"
        ],
        "ref_sql": "SELECT name FROM program WHERE origin != 'Beijing'",
        "MQL": "db.program.aggregate([\n  {\n    $match: {\n      Origin: { $ne: \"Beijing\" }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3921,
        "db_id": "music_1",
        "nl_queries": [
            "What are the names of all songs that have a lower rating than some song of blues genre?",
            "What are the names of the songs that have a lower rating than at least one blues song?",
            "Can you provide the titles of songs that have ratings below any song from the blues genre?",
            "What are the titles of songs that do not reach the rating of at least one song from the blues category?",
            "List the names of all songs that rate lower than the lowest-rated song in the blues genre."
        ],
        "ref_sql": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = \"blues\")",
        "MQL": "db.genre.aggregate([\n  { $unwind: \"$song\" },\n  {\n    $match: {\n      \"song.genre_is\": \"blues\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      min_rating: { $min: \"$song.rating\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      minBluesRating: 1\n    }\n  },\n  {\n    $lookup: {\n      from: \"genre\",\n      let: { min_rating: \"$min_rating\" },\n      pipeline: [\n        { $unwind: \"$song\" },\n        {\n          $match: {\n            $expr: {\n              $lt: [\"$song.rating\", \"$$min_rating\"]\n            }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            song_name: \"$song.song_name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  {\n    $project: {\n      _id: 0,\n      song_name: \"$Docs1.song_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1256,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
            "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
            "List the employee IDs for individuals assigned to the roles of \"Human Resource\" or \"Manager\".",
            "Retrieve the employee IDs of all personnel working as \"Human Resource\" or \"Manager\".",
            "Can you provide the employee IDs for employees whose roles include \"Human Resource\" or \"Manager\"?"
        ],
        "ref_sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Human Resource\" OR T2.role_name = \"Manager\"",
        "MQL": "db.Roles.aggregate([\n  {\n    $match: {\n      Role_Name: { $in: [\"Human Resource\", \"Manager\"] }\n    }\n  },\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $project: {\n      Employee_ID: \"$Employees.Employee_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2409,
        "db_id": "flight_company",
        "nl_queries": [
            "how many airports are there in each country?",
            "What is the total number of airports in each country?",
            "Can you provide the count of airports located in every country?",
            "How many airports are present across different countries?",
            "List the number of airports for each country."
        ],
        "ref_sql": "SELECT count(*) , country FROM airport GROUP BY country",
        "MQL": "db.airport.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2041,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Find the address and staff number of the shops that do not have any happy hour.",
            "List the addresses and staff counts of shops without any happy hour specials.",
            "Provide the address and number of employees for shops that do not offer a happy hour.",
            "Retrieve the locations and staff numbers of shops that lack happy hour promotions.",
            "What are the addresses and employee counts of shops that have no happy hour available?"
        ],
        "ref_sql": "SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "MQL": "db.shop.find({\n  \"happy_hour\": { $exists: true, $size: 0 }\n}, { \"Address\": 1, \"Num_of_staff\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3832,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "Identify the professionals who have not carried out any treatments on dogs and provide their ID, role, and email address.",
            "List the IDs, roles, and email addresses of professionals that have never performed treatments for dogs.",
            "Can you provide the professional ID, role, and email of those who did not administer any treatments to dogs?"
        ],
        "ref_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "MQL": "db.Professionals.aggregate([\n  {\n    $project: {\n      professional_id: 1,\n      role_code: 1,\n      email_address: 1,\n      count_treatment: {\n        $size: \"$Treatments\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_treatment: 0\n    }\n  },\n  {\n    $project: {\n      professional_id: 1,\n      role_code: 1,\n      email_address: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3175,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the id for the employee called Ebba?",
            "Show the id of the employee named Ebba.",
            "What is the employee ID for Ebba?",
            "Can you provide the ID of the employee named Ebba?",
            "Retrieve the ID associated with the employee called Ebba."
        ],
        "ref_sql": "SELECT employee_ID FROM Employees WHERE employee_name = \"Ebba\"",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $match: {\n      \"Employees.Employee_Name\": \"Ebba\"\n    }\n  },\n  {\n    $project: {\n      Employee_ID: \"$Employees.Employee_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1828,
        "db_id": "train_station",
        "nl_queries": [
            "Show the station name with at least two trains.",
            "List the names of stations that have a minimum of two trains.",
            "Retrieve the station names where there are at least two trains associated with each station.",
            "Which stations have two or more trains? Provide the names of those stations.",
            "Find all station names that feature two or more train services."
        ],
        "ref_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count(*) >= 2",
        "MQL": "db.station.aggregate([\n  { $unwind: \"$train_station\" },\n  { $group: {\n      _id: \"$Station_ID\",\n      trainCount: { $sum: 1 }\n    }\n  },\n  { $match: { trainCount: { $gte: 2 } } },\n  { $lookup: {\n      from: \"station\",\n      localField: \"_id\",\n      foreignField: \"Station_ID\",\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  { $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2930,
        "db_id": "club_1",
        "nl_queries": [
            "How many different roles are there in the club \"Bootup Baltimore\"?",
            "Count the number of different positions in the club \"Bootup Baltimore\".",
            "What is the total number of unique roles in the \"Bootup Baltimore\" club?",
            "How many distinct positions are available in the club \"Bootup Baltimore\"?",
            "Determine the count of different member roles within the \"Bootup Baltimore\" club."
        ],
        "ref_sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Bootup Baltimore\"\n    }\n  },\n  {\n    $unwind: \"$Member_of_club\"\n  },\n  {\n    $group: {\n      _id: \"$Member_of_club.Position\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_member_of_club_position: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_member_of_club_position: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1397,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
            "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.",
            "Identify physicians who have affiliations with both the Surgery and Psychiatry departments. What are their names?",
            "List the names of physicians who are linked to both the Surgery and Psychiatry departments.",
            "Who are the physicians that are members of both the Surgery and Psychiatry departments? Please provide their names."
        ],
        "ref_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Department\"\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"Department.Name\": \"Surgery\"\n        },\n        {\n          \"Department.Name\": \"Psychiatry\"\n        }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      departmentCount: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      departmentCount: 2\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1880,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the movies with the highest average rating. Return the movie titles and average rating.",
            "What are the movie titles with the highest average rating and what are those ratings?",
            "Identify the title of the movie that has the highest average rating, along with its rating value.",
            "Which movie receives the highest average stars rating, and what is that rating?",
            "List the movie title that boasts the highest average score and specify the average rating."
        ],
        "ref_sql": "SELECT T2.title , avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
        "MQL": "db.Movie.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: \"$mID\",\n      avg_stars: { $avg: \"$Rating.stars\" },\n      title: { $first: \"$title\" }\n    }\n  },\n  {\n    $sort: { avg_stars: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      title: 1,\n      avg_stars: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3814,
        "db_id": "department_store",
        "nl_queries": [
            "What are the ids of the top three products that were purchased in the largest amount?",
            "Give the ids of the three products purchased in the largest amounts.",
            "List the IDs of the three products with the highest total purchases.",
            "Identify the top three products based on the largest amount purchased and provide their IDs.",
            "What are the product IDs for the three items that have been bought the most?"
        ],
        "ref_sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "MQL": "db.Products.aggregate([\n  {\n    $unwind: \"$Product_Suppliers\"\n  },\n  {\n    $group: {\n      _id: \"$product_id\",\n      total_amount_purchased: {\n        $sum: {\n          $toDouble: \"$Product_Suppliers.total_amount_purchased\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      total_amount_purchased: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      product_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3280,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Return the first names and last names of all guests",
            "What are the first names and last names of all the guests?",
            "List the first and last names of every guest.",
            "Provide the first names along with the last names for all guests.",
            "What are the complete names (first and last) of all guests in the database?"
        ],
        "ref_sql": "SELECT guest_first_name , guest_last_name FROM Guests",
        "MQL": "db.Guests.find({}, { guest_first_name: 1, guest_last_name: 1, _id: 0 })\n"
    },
    {
        "record_id": 150,
        "db_id": "workshop_paper",
        "nl_queries": [
            "Show different colleges along with the number of authors of submission from each college.",
            "For each college, return the college name and the count of authors with submissions from that college.",
            "List the colleges alongside the total number of authors who have submitted work from each institution.",
            "Provide the names of colleges and the corresponding count of authors associated with submissions from those colleges.",
            "For every college, show the college name together with the total count of authors who submitted papers from that college."
        ],
        "ref_sql": "SELECT College , COUNT(*) FROM submission GROUP BY College",
        "MQL": "db.submission.aggregate([\n  {\n    $group: {\n      _id: \"$College\",\n      \"COUNT\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      College: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1188,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Who are the customers that had more than 1 policy? List the customer details and id.",
            "Find the the customer details and id for the customers who had more than one policy.",
            "Can you provide the details and IDs of customers who hold multiple insurance policies?",
            "Identify customers who have more than one insurance policy, including their IDs and details.",
            "List the customer details and IDs for those clients with more than a single policy."
        ],
        "ref_sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_ID\",\n      Customer_Details: { $first: \"$Customer_Details\" },\n      Customer_ID: { $first: \"$Customer_ID\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Customer_Details: 1,\n      Customer_ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3770,
        "db_id": "driving_school",
        "nl_queries": [
            "List phone number and email address of customer with more than 2000 outstanding balance.",
            "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
            "Provide the phone numbers and email addresses of customers with an outstanding balance exceeding 2000.",
            "Show the contact details, including phone numbers and email addresses, for customers who owe more than 2000.",
            "Retrieve the phone and email information of all customers that have an overdue balance greater than 2000."
        ],
        "ref_sql": "SELECT phone_number , email_address FROM Customers WHERE amount_outstanding > 2000;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.amount_outstanding\": { $gt: 2000 }\n    }\n  },\n  {\n    $project: {\n      phone_number: \"$Customers.phone_number\",\n      email_address: \"$Customers.email_address\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2317,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the city and state of the bank branch named morningside.",
            "What city and state is the bank with the name morningside in?",
            "What is the city and state for the bank branch called morningside?",
            "Please provide the city and state where the morningside bank branch is located.",
            "In which city and state can I find the branch of the bank named morningside?"
        ],
        "ref_sql": "SELECT city , state FROM bank WHERE bname = 'morningside'",
        "MQL": "db.bank.aggregate([\n  {\n    $match: {\n      bname: \"morningside\"\n    }\n  },\n  {\n    $project: {\n      city: 1,\n      state: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3846,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the ids of reviewers who didn't only give 4 star.",
            "What are the ids of all reviewers who have not given 4 stars at least once?",
            "List the reviewer IDs for those who have rated movies without giving any 4-star reviews.",
            "Show the IDs of reviewers who have never submitted a 4-star rating.",
            "Identify the IDs of all reviewers that did not give a 4-star rating at least once."
        ],
        "ref_sql": "SELECT rID FROM Rating WHERE stars != 4",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $match: {\n      \"Rating.stars\": { $ne: 4 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$rID\"\n    }\n  },\n  {\n    $project: {\n      rID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1069,
        "db_id": "match_season",
        "nl_queries": [
            "Show the positions of the players from the team with name \"Ryley Goldner\".",
            "Return the positions of players on the team Ryley Goldner.",
            "List the player positions for the team named \"Ryley Goldner\".",
            "Provide the positions held by players on Ryley Goldner's team.",
            "What are the positions of the players in the team called \"Ryley Goldner\"?"
        ],
        "ref_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\"",
        "MQL": "db.team.aggregate([\n  {\n    $match: {\n      Name: \"Ryley Goldner\"\n    }\n  },\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $project: {\n      Position: \"$match_season.Position\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 338,
        "db_id": "world_1",
        "nl_queries": [
            "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "List the unique city names located in Asia where Chinese is recognized as the official language.",
            "Provide the distinct names of cities in the continent of Asia that have Chinese as their official language.",
            "Identify different cities in Asia that officially use Chinese as their language.",
            "What are the various city names in Asia where the official language is Chinese?"
        ],
        "ref_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      \"Continent\": \"Asia\",\n      \"countrylanguage\": {\n        $elemMatch: {\n          \"Language\": \"Chinese\",\n          \"IsOfficial\": \"T\"\n        }\n      }\n    }\n  },\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $project: {\n      \"Name\": \"$city.Name\",\n      \"_id\": 0\n    }\n  },\n  {\n    $group: {\n      \"_id\": \"$Name\"\n    }\n  },\n  {\n    $project: {\n      \"Name\": \"$_id\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2172,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the average checking balance.",
            "What is the average balance in checking accounts?",
            "What is the average balance across all checking accounts?",
            "Calculate the mean checking account balance.",
            "Determine the average balance for accounts within the checking category."
        ],
        "ref_sql": "SELECT avg(balance) FROM checking",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_balance: {\n        $avg: \"$CHECKING.balance\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_balance: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3984,
        "db_id": "loan_1",
        "nl_queries": [
            "For each state, find the total account balance of customers whose credit score is above 100.",
            "What is the total account balance for customers with a credit score of above 100 for the different states?",
            "Calculate the total account balances for customers in each state who have a credit score exceeding 100.",
            "Determine the sum of account balances for clients with credit scores higher than 100, categorized by state.",
            "For every state, what is the combined account balance of customers whose credit score surpasses 100?"
        ],
        "ref_sql": "SELECT sum(acc_bal) , state FROM customer WHERE credit_score > 100 GROUP BY state",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $match: {\n      \"customer.credit_score\": { $gt: 100 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer.state\",\n      sum_acc_bal: { $sum: \"$customer.acc_bal\" }\n    }\n  },\n  {\n    $project: {\n      state: \"$_id\",\n      sum_acc_bal: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 13,
        "db_id": "aircraft",
        "nl_queries": [
            "Show all information on the airport that has the largest number of international passengers.",
            "What is all the information on the airport with the largest number of international passengers?",
            "Provide all the details about the airport with the highest count of international passengers.",
            "Retrieve complete information on the airport that sees the most international passengers.",
            "What are the complete details for the airport that has the largest volume of international passengers?"
        ],
        "ref_sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
        "MQL": "db.airport.aggregate([\n  {\n    $sort: { International_Passengers: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Airport_ID: 1,\n      Airport_Name: 1,\n      Total_Passengers: 1,\n      \"%_Change_2007\": 1,\n      International_Passengers: 1,\n      Domestic_Passengers: 1,\n      Transit_Passengers: 1,\n      Aircraft_Movements: 1,\n      Freight_Metric_Tonnes: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3064,
        "db_id": "csu_1",
        "nl_queries": [
            "How many degrees were conferred in \"San Jose State University\" in 2000?",
            "How many degrees were conferred at San Jose State University in 2000?",
            "What is the total number of degrees awarded by San Jose State University in the year 2000?",
            "Can you tell me how many degrees were granted at San Jose State University during 2000?",
            "How many degrees did San Jose State University confer in the year 2000?"
        ],
        "ref_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Jose State University\",\n      \"degrees.Year\": 2000\n    }\n  },\n  {\n    $unwind: \"$degrees\"\n  },\n  {\n    $match: {\n      \"degrees.Year\": 2000\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      Degrees: { $sum: \"$degrees.Degrees\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Degrees: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1395,
        "db_id": "hospital_1",
        "nl_queries": [
            "What is the name of the nurse has the most appointments?",
            "Find the name of the nurse who has the largest number of appointments.",
            "Who is the nurse that has the highest number of patient appointments?",
            "Identify the nurse with the greatest count of appointments.",
            "Which nurse has the most appointments scheduled?"
        ],
        "ref_sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Nurse.aggregate([\n  {\n    $group: {\n      _id: \"$Name\",\n      appointmentCount: { $sum: { $size: \"$Appointment\" } }\n    }\n  },\n  {\n    $sort: { appointmentCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2553,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "How many calendar items do we have?",
            "Count the number of all the calendar items.",
            "What is the total number of items in the calendar?",
            "Can you provide the count of all calendar entries?",
            "How many entries are listed in the calendar?"
        ],
        "ref_sql": "SELECT count(*) FROM Ref_calendar",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2626,
        "db_id": "csu_1",
        "nl_queries": [
            "How many CSU campuses are there?",
            "What is the total number of campuses?",
            "What is the total count of campuses within the CSU system?",
            "How many campuses does CSU have in total?",
            "Can you tell me the number of CSU campuses?"
        ],
        "ref_sql": "SELECT count(*) FROM campuses",
        "MQL": "db.Campuses.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 724,
        "db_id": "aircraft",
        "nl_queries": [
            "List names of all pilot in descending order of age.",
            "What are the names of all pilots listed by descending age?",
            "Retrieve the names of all pilots sorted from oldest to youngest.",
            "Show the names of pilots arranged in order of their age, starting with the oldest.",
            "Provide a list of pilot names, organized by age in descending order."
        ],
        "ref_sql": "SELECT Name FROM pilot ORDER BY Age DESC",
        "MQL": "db.pilot.find({}, { Name: 1, _id: 0 }).sort({ Age: -1 });\n"
    },
    {
        "record_id": 3574,
        "db_id": "network_2",
        "nl_queries": [
            "Who is the oldest person whose job is student?",
            "What is the name of the oldest student?",
            "Who is the oldest individual working as a student?",
            "Can you tell me the name of the oldest person who is a student?",
            "What is the name of the student with the highest age?"
        ],
        "ref_sql": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )",
        "MQL": "db.Person.aggregate([\n  {\n    $match: { job: \"student\" }\n  },\n  {\n    $sort: { age: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4236,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the transaction type code that occurs the fewest times.",
            "Identify the transaction type code that has the least frequency.",
            "What is the transaction type code with the lowest occurrence?",
            "Find the transaction type code that appears the fewest times.",
            "Show the transaction type code that is recorded the least number of times."
        ],
        "ref_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
        "MQL": "db.Ref_Transaction_Types.aggregate([\n  {\n    $project: {\n      transaction_type_code: 1,\n      count_transaction: { $size: \"$Transactions\" }\n    }\n  },\n  {\n    $sort: { count_transaction: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, transaction_type_code: 1 }\n  }\n]);\n"
    },
    {
        "record_id": 645,
        "db_id": "world_1",
        "nl_queries": [
            "What are the population, name and leader of the country with the largest area?",
            "Give the name, population, and head of state for the country that has the largest area.",
            "Please provide the name, population, and head of government of the country that covers the most land area.",
            "What is the name, population, and leader of the country that has the greatest surface area?",
            "Show me the country with the largest land area, including its name, population, and head of state."
        ],
        "ref_sql": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $sort: {\n      SurfaceArea: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Population: 1,\n      HeadOfState: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3410,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How much does the most expensive charge type costs?",
            "What is the charge amount of the most expensive charge type?",
            "What is the highest charge amount among the different charge types?",
            "Can you tell me the maximum cost for any charge type?",
            "How much is the cost of the charge type with the highest amount?"
        ],
        "ref_sql": "SELECT max(charge_amount) FROM Charges",
        "MQL": "db.Charges.aggregate([\n  {\n    $sort: {\n      charge_amount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      max_charge_amount: \"$charge_amount\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3106,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
            "Provide a count of unique employees for each document based on the circulation history, along with their respective document IDs.",
            "For every document, indicate how many distinct employees have appeared in its circulation history, including the document identifiers.",
            "List each document with the total number of employees recorded in the circulation history, showing both document IDs and the employee counts.",
            "Report the number of distinct employees associated with the circulation history for each document, along with the document IDs."
        ],
        "ref_sql": "SELECT document_id , count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  { $unwind: \"$Documents\" },\n  { $unwind: \"$Documents.Document_Drafts\" },\n  { $unwind: \"$Documents.Document_Drafts.Draft_Copies\" },\n  { $unwind: \"$Documents.Document_Drafts.Draft_Copies.Circulation_History\" },\n  {\n    $group: {\n      _id: \"$Documents.Document_Drafts.Draft_Copies.Circulation_History.document_id\",\n      count_DISTINCT_employee_id: { $addToSet: \"$Documents.Document_Drafts.Draft_Copies.Circulation_History.employee_id\" }\n    }\n  },\n  { $project: { document_id: \"$_id\", count_DISTINCT_employee_id: { $size: \"$count_DISTINCT_employee_id\" }, _id: 0 } }\n]);\n"
    },
    {
        "record_id": 1033,
        "db_id": "singer",
        "nl_queries": [
            "Show the names of singers and the total sales of their songs.",
            "For each singer name, what is the total sales for their songs?",
            "List the singers along with the cumulative sales figures for all their songs.",
            "What are the total sales associated with each singer's songs?",
            "Provide a summary of singer names and the overall sales volume of their respective songs."
        ],
        "ref_sql": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "MQL": "db.singer.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      sum_Sales: { $sum: \"$song.Sales\" }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      sum_Sales: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3776,
        "db_id": "match_season",
        "nl_queries": [
            "Return all players sorted by college in ascending alphabetical order.",
            "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
            "List all players sorted alphabetically by their college names.",
            "Provide a complete list of players who participated in the match season, ordered by college in ascending alphabetical sequence.",
            "Retrieve all players from the match season, arranged in ascending order according to their college."
        ],
        "ref_sql": "SELECT player FROM match_season ORDER BY College ASC",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Player: \"$match_season.Player\"\n    }\n  },\n  {\n    $sort: {\n      \"match_season.College\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2653,
        "db_id": "world_1",
        "nl_queries": [
            "How many countries have a republic as their form of government?",
            "How many countries have governments that are republics?",
            "What is the total number of countries that have a republic as their type of government?",
            "Count the countries that are classified with a republican form of government.",
            "How many nations are governed as republics?"
        ],
        "ref_sql": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      GovernmentForm: \"Republic\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 197,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "Show the names of all the clients with no booking.",
            "What are the names of the clients who do not have any booking?",
            "List the names of clients who haven't made any bookings.",
            "Provide the names of customers with no booking records.",
            "Can you tell me the names of clients that do not have any bookings?"
        ],
        "ref_sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Clients\"\n  },\n  {\n    $match: {\n      \"Clients.Bookings\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Customer_Name: \"$Clients.Customer_Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3505,
        "db_id": "concert_singer",
        "nl_queries": [
            "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "Can you provide the names and countries of singers whose song titles contain the word 'Hey'?",
            "List the singers and their respective countries for those who have a song with 'Hey' in the title.",
            "What are the names and nationalities of all singers who feature a song that includes 'Hey' in its name?"
        ],
        "ref_sql": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
        "MQL": "db.singer.find(\n  { \"Song_Name\": { $regex: \"Hey\", $options: \"i\" } },\n  { \"Name\": 1, \"Country\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1320,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show invoice dates and order id and details for all invoices.",
            "What are the invoice dates, order ids, and order details for all invoices?",
            "Provide the invoice dates along with the order ID and their details for every invoice.",
            "List all invoice dates and their corresponding order IDs and details.",
            "What are the order IDs, invoice dates, and order details for every invoice available?"
        ],
        "ref_sql": "SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Invoices\"\n  },\n  {\n    $project: {\n      invoice_date: \"$Orders.Invoices.invoice_date\",\n      order_id: \"$Orders.order_id\",\n      order_details: \"$Orders.order_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1068,
        "db_id": "match_season",
        "nl_queries": [
            "Show the players and years played for players from team \"Columbus Crew\".",
            "What are the players who played for Columbus Crew, and how many years did each play for?",
            "List the players from Columbus Crew and the number of years each has played.",
            "Who are the players that have been part of the Columbus Crew, and what is their tenure in years?",
            "Provide the names of the players and their respective years of participation with the Columbus Crew team."
        ],
        "ref_sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
        "MQL": "db.team.aggregate([\n  {\n    $match: {\n      Name: \"Columbus Crew\"\n    }\n  },\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $project: {\n      Player: \"$player.Player\",\n      Years_Played: \"$player.Years_Played\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 30,
        "db_id": "epinions_1",
        "nl_queries": [
            "List all information in the item table.",
            "Show me all entries in the item collection.",
            "Retrieve every record available in the item table.",
            "Display all the details found in the item collection.",
            "Provide a list of all items along with their titles and IDs."
        ],
        "ref_sql": "SELECT * FROM item",
        "MQL": "db.item.find({}, { \"i_id\": 1, \"title\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2439,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "How many addresses have zip code 197?",
            "What is the total number of addresses with the postal code 197?",
            "Can you tell me how many addresses correspond to the zip code 197?",
            "How many entries exist in the address database for the zip code 197?",
            "Please provide the count of addresses that have a zip code of 197."
        ],
        "ref_sql": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode = \"197\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: { \"zip_postcode\": \"197\" }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3694,
        "db_id": "race_track",
        "nl_queries": [
            "Show all track names that have had no races.",
            "Return the names of tracks that have no had any races.",
            "List the names of all tracks that have never held any races.",
            "Provide the names of tracks without any race events associated with them.",
            "Retrieve the names of tracks that do not have any recorded races."
        ],
        "ref_sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
        "MQL": "db.track.find(\n  {\n    $or: [\n      { race: { $exists: false } },\n      { race: { $size: 0 } }\n    ]\n  },\n  {\n    _id: 0,\n    Name: 1\n  }\n);\n"
    },
    {
        "record_id": 1551,
        "db_id": "workshop_paper",
        "nl_queries": [
            "Show each author and the number of workshops they submitted to.",
            "How many workshops did each author submit to? Return the author name and the number of workshops.",
            "List all authors along with the total number of workshops they have submitted their papers to.",
            "For each author, provide the count of distinct workshops they have contributed submissions to.",
            "Display each author's name and the quantity of workshops they have submitted entries to."
        ],
        "ref_sql": "SELECT T2.Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author",
        "MQL": "db.submission.aggregate([\n  {\n    $unwind: \"$Acceptance\"\n  },\n  {\n    $group: {\n      _id: \"$Author\",\n      COUNT_DISTINCT_acceptance_workshop_id: { $addToSet: \"$Acceptance.Workshop_ID\" }\n    }\n  },\n  {\n    $project: {\n      Author: \"$_id\",\n      \"COUNT_DISTINCT_acceptance_workshop_id\": { $size: \"$COUNT_DISTINCT_acceptance_workshop_id\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2466,
        "db_id": "college_1",
        "nl_queries": [
            "How many students are enrolled in the class taught by some professor from the accounting department?",
            "How many students are enrolled in some classes that are taught by an accounting professor?",
            "What is the total number of students registered in classes instructed by an accounting department professor?",
            "How many students are currently enrolled in classes led by any professor from the accounting department?",
            "Can you tell me the count of students participating in courses taught by professors in the accounting department?"
        ],
        "ref_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"Accounting\"\n    }\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE.CLASS\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE.CLASS.ENROLL\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4021,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the total revenue created by the companies whose headquarter is located at Austin.",
            "What is the sum of revenue from companies with headquarters in Austin?",
            "What is the total revenue generated by companies based in Austin?",
            "Calculate the aggregate revenue from manufacturers whose headquarters are situated in Austin.",
            "Determine the combined revenue of businesses with their headquarters located in Austin."
        ],
        "ref_sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter = 'Austin'",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      Headquarter: \"Austin\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_revenue: {\n        $sum: \"$Revenue\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_revenue: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3677,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "What are the names of all stadiums that did not have a concert in 2014?",
            "List the names of all stadiums that did not host any concerts during the year 2014.",
            "Provide the names of stadiums, excluding those with concerts that took place in 2014.",
            "Identify all stadiums that have never held a concert in the year 2014."
        ],
        "ref_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
        "MQL": "db.stadium.aggregate([\n  {\n    $match: {\n      \"concert.Year\": { $ne: \"2014\" }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2401,
        "db_id": "college_2",
        "nl_queries": [
            "Find the number of rooms with more than 50 capacity for each building.",
            "How many rooms in each building have a capacity of over 50?",
            "Determine the total number of classrooms in each building that can accommodate more than 50 students.",
            "What is the count of rooms in each building that have a seating capacity greater than 50?",
            "How many classrooms in each building exceed a capacity of 50?"
        ],
        "ref_sql": "SELECT count(*) , building FROM classroom WHERE capacity > 50 GROUP BY building",
        "MQL": "db.classroom.aggregate([\n  {\n    $match: {\n      capacity: { $gt: 50 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$building\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      building: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2684,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "How many enzymes do not have any interactions?",
            "What is the count of enzymes without any interactions?",
            "What is the total number of enzymes that lack any interactions?",
            "How many enzymes are there that do not have interactions recorded?",
            "Can you provide the number of enzymes without any recorded interactions?"
        ],
        "ref_sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "MQL": "db.enzyme.aggregate([\n  {\n    $project: {\n      count: {\n        $cond: {\n          if: {\n            $eq: [{ $size: \"$medicine_enzyme_interaction\" }, 0]\n          },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count: { $sum: \"$count\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2911,
        "db_id": "storm_record",
        "nl_queries": [
            "How many regions are affected?",
            "Count the number of different affected regions.",
            "What is the total number of regions impacted by storms?",
            "How many unique regions have been affected?",
            "Determine the count of distinct regions that experienced storm effects."
        ],
        "ref_sql": "SELECT count(DISTINCT region_id) FROM affected_region",
        "MQL": "db.storm.aggregate([\n  {\n    $unwind: \"$affected_region\"\n  },\n  {\n    $group: {\n      _id: \"$affected_region.Region_id\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_region_id\"\n  }\n]);\n"
    },
    {
        "record_id": 2231,
        "db_id": "club_1",
        "nl_queries": [
            "What is the average age of the members of the club \"Bootup Baltimore\"?",
            "Find the average age of the members in the club \"Bootup Baltimore\".",
            "What is the mean age of the students belonging to the club called \"Bootup Baltimore\"?",
            "Determine the average age of individuals who are members of the \"Bootup Baltimore\" club.",
            "Calculate the average age of members in the \"Bootup Baltimore\" club."
        ],
        "ref_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Bootup Baltimore\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: {\n        $avg: \"$Docs1.Age\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2260,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the addresses and phones of all the buildings managed by \"Brenden\".",
            "What are the address and phone number of the buildings managed by \"Brenden\"?",
            "Retrieve the addresses and telephone numbers of all buildings overseen by \"Brenden\".",
            "Can you provide the building addresses and contact numbers for those managed by \"Brenden\"?",
            "List the addresses and phone contacts of buildings under the management of \"Brenden\"."
        ],
        "ref_sql": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $match: {\n      building_manager: \"Brenden\"\n    }\n  },\n  {\n    $project: {\n      building_address: 1,\n      building_phone: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 814,
        "db_id": "insurance_policies",
        "nl_queries": [
            "What is the most popular payment method?",
            "Which payment method is used the most often?",
            "What payment method do customers prefer the most?",
            "Identify the payment method that has the highest frequency of use.",
            "Which payment method is the most frequently utilized by customers?"
        ],
        "ref_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements.Payments\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Policies.Claims.Settlements.Payments.Payment_Method_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Payment_Method_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3679,
        "db_id": "swimming",
        "nl_queries": [
            "Find the names of stadiums whose capacity is smaller than the average capacity.",
            "List the names of stadiums with a capacity less than the average capacity of all stadiums.",
            "Retrieve the names of stadiums that have a smaller capacity than the average.",
            "Identify which stadiums have capacities below the average stadium capacity and provide their names.",
            "What are the names of the stadiums whose capacity is under the average capacity for stadiums?"
        ],
        "ref_sql": "SELECT name FROM stadium WHERE capacity < (SELECT avg(capacity) FROM stadium)",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Capacity: { $avg: \"$Capacity\" }\n    }\n  },\n  {\n    $addFields: {\n      avg_Capacity: \"$avg_Capacity\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"stadium\",\n      let: { avg_Capacity: \"$avg_Capacity\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $lt: [\"$Capacity\", \"$$avg_Capacity\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            name: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 2735,
        "db_id": "riding_club",
        "nl_queries": [
            "How many players are there?",
            "What is the total count of players in the club?",
            "Can you tell me how many players are registered?",
            "How many athletes are currently in the player database?",
            "Please provide the number of players associated with the club."
        ],
        "ref_sql": "SELECT count(*) FROM player",
        "MQL": "db.player.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3525,
        "db_id": "mountain_photos",
        "nl_queries": [
            "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
            "Can you provide the name, height, and prominence of mountains that are not part of the 'Aberdare Range'?",
            "List the name, height, and prominence for mountains excluding those in the 'Aberdare Range'.",
            "What are the name, height, and prominence measurements of mountains outside the 'Aberdare Range'?",
            "Show me the name, height, and prominence of mountains that do not belong to the range called 'Aberdare Range'."
        ],
        "ref_sql": "SELECT name , height , prominence FROM mountain WHERE range != 'Aberdare Range'",
        "MQL": "db.mountain.find({\n  \"Range\": { $ne: \"Aberdare Range\" }\n}, { \"name\": 1, \"Height\": 1, \"Prominence\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 44,
        "db_id": "phone_1",
        "nl_queries": [
            "Find the accreditation level that more than 3 phones use.",
            "What are the accreditation levels used by more than three phones?",
            "Identify the accreditation levels associated with over three phones.",
            "List the accreditation levels that have more than three phones registered under them.",
            "Find categories of accreditation that feature more than three different phone models."
        ],
        "ref_sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*) > 3",
        "MQL": "db.chip_model.aggregate([\n  { $unwind: \"$phone\" },\n  { $group: { \n      _id: \"$phone.Accreditation_level\", \n      phoneCount: { $sum: 1 } \n    } \n  },\n  { $match: { phoneCount: { $gt: 3 } } },\n  { $project: { \n      _id: 0, \n      Accreditation_level: \"$_id\" \n    } \n  }\n]);\n"
    },
    {
        "record_id": 2802,
        "db_id": "twitter_1",
        "nl_queries": [
            "How many users are there?",
            "What is the total number of users in the database?",
            "Can you tell me the user count?",
            "How many user profiles exist?",
            "What is the count of all users registered in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM user_profiles",
        "MQL": "db.user_profiles.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2706,
        "db_id": "news_report",
        "nl_queries": [
            "How many journalists are there?",
            "What is the total number of journalists in the database?",
            "Can you tell me how many journalists are registered?",
            "How many total journalists are there in the system?",
            "Please provide the count of all journalists listed."
        ],
        "ref_sql": "SELECT count(*) FROM journalist",
        "MQL": "db.journalist.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1637,
        "db_id": "company_employee",
        "nl_queries": [
            "Show the names of employees that work for companies with sales bigger than 200.",
            "Retrieve the names of employees who work at companies that generate over 200 billion in sales.",
            "List the names of workers employed by firms with sales exceeding 200 billion.",
            "Identify employees associated with companies reporting sales above 200 billion.",
            "Display the names of individuals working for companies whose sales figures are greater than 200 billion."
        ],
        "ref_sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Sales_in_Billion > 200",
        "MQL": "db.people.aggregate([\n  {\n    $lookup: {\n      from: \"company\",\n      localField: \"employment.Company_ID\",\n      foreignField: \"Company_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Sales_in_Billion\": { $gt: 200 }\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 362,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
            "What are the names of the colleges that are larger than at least one college in Florida?",
            "Which colleges have enrollments that surpass those of at least one college located in Florida?",
            "List the names of colleges that have a higher enrollment than any college in the state of Florida.",
            "Identify the colleges with enrollment numbers greater than those of some Florida colleges."
        ],
        "ref_sql": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT min(enr) FROM college WHERE state = 'FL')",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      state: \"FL\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      maxEnrInFL: { $max: \"$enr\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"College\",\n      pipeline: [\n        {\n          $match: {\n            state: { $ne: \"FL\" }\n          }\n        },\n        {\n          $project: {\n            cName: 1,\n            enr: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      $expr: {\n        $gt: [\"$Docs1.enr\", \"$maxEnrInFL\"]\n      }\n    }\n  },\n  {\n    $project: {\n      cName: \"$Docs1.cName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2283,
        "db_id": "csu_1",
        "nl_queries": [
            "What is the campus fee of \"San Jose State University\" in year 1996?",
            "What is the campus fee for San Jose State University in 1996?",
            "How much is the campus fee for San Jose State University in 1996?",
            "Could you tell me the campus fee for \"San Jose State University\" for the year 1996?",
            "What was the campus fee of San Jose State University in the year 1996?"
        ],
        "ref_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Jose State University\"\n    }\n  },\n  {\n    $unwind: \"$csu_fees\"\n  },\n  {\n    $match: {\n      \"csu_fees.Year\": 1996\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      CampusFee: \"$csu_fees.CampusFee\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 905,
        "db_id": "farm",
        "nl_queries": [
            "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
            "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
            "Identify the statuses that are common to cities with populations exceeding 1500 and those with populations falling below 500.",
            "List the statuses shared between cities that have a population greater than 1500 and those that have a population less than 500.",
            "What statuses are found in both high population cities (over 1500) and low population cities (under 500)?"
        ],
        "ref_sql": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
        "MQL": "db.city.aggregate([\n  {\n    $facet: {\n      high_population: [\n        { $match: { Population: { $gt: 1500 } } },\n        { $group: { _id: \"$Status\" } }\n      ],\n      low_population: [\n        { $match: { Population: { $lt: 500 } } },\n        { $group: { _id: \"$Status\" } }\n      ]\n    }\n  },\n  {\n    $project: {\n      high_population: \"$high_population._id\",\n      low_population: \"$low_population._id\"\n    }\n  },\n  {\n    $project: {\n      shared_status: {\n        $setIntersection: [\"$high_population\", \"$low_population\"]\n      }\n    }\n  },\n  {\n    $unwind: \"$shared_status\"\n  },\n  {\n    $project: {\n      Status: \"$shared_status\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2038,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the account id with most number of transactions.",
            "What is the id of the account with the most transactions?",
            "Identify the account ID that has the highest transaction count.",
            "Which account ID recorded the most financial transactions?",
            "Find the account ID associated with the greatest number of transactions."
        ],
        "ref_sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $unwind: \"$Accounts.Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$Accounts.account_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      account_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2171,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the average amount of transactions with type code \"SALE\".",
            "Provide the average transaction amount for transactions categorized as \"SALE\".",
            "What is the mean amount for transactions with the type code \"SALE\"?",
            "Calculate the average amount of transactions that are marked as \"SALE\".",
            "Determine the average value of transactions classified under the \"SALE\" type code."
        ],
        "ref_sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $match: {\n      \"Transactions.transaction_type_code\": \"SALE\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_amount_of_transaction: {\n        $avg: \"$Transactions.amount_of_transaction\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_amount_of_transaction: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4030,
        "db_id": "museum_visit",
        "nl_queries": [
            "What is the total ticket expense of the visitors whose membership level is 1?",
            "How much have visitors with membership level 1 spent on tickets in total?",
            "What is the overall ticket revenue generated by visitors classified as level 1 members?",
            "Can you tell me the total amount spent on tickets by visitors who have a level 1 membership?",
            "What is the cumulative ticket expenditure of visitors with a membership level set to 1?"
        ],
        "ref_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
        "MQL": "db.visitor.aggregate([\n  {\n    $match: {\n      \"Level_of_membership\": 1\n    }\n  },\n  {\n    $unwind: \"$visit\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Total_spent: { $sum: \"$visit.Total_spent\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Total_spent: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3686,
        "db_id": "storm_record",
        "nl_queries": [
            "Show all storm names except for those with at least two affected regions.",
            "What are the names of storms that did not affect two or more regions?",
            "List storm names that were only associated with one or no affected regions.",
            "Provide the names of storms which have affected fewer than two regions.",
            "Identify all storm names that did not impact two or more locations."
        ],
        "ref_sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2",
        "MQL": "db.storm.aggregate([\n  {\n    $unwind: {\n      path: \"$affected_region\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$Storm_ID\",\n      Name: { $first: \"$Name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $lt: 2 }  \n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2204,
        "db_id": "department_management",
        "nl_queries": [
            "What is the average number of employees of the departments whose rank is between 10 and 15?",
            "What is the average number of staff members in departments ranked from 10 to 15?",
            "How many employees are there on average in departments with rankings between 10 and 15?",
            "Find the mean number of employees across departments whose ranks range from 10 to 15.",
            "Can you tell me the average employee count for departments ranked in the 10 to 15 range?"
        ],
        "ref_sql": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "MQL": "db.department.aggregate([\n  {\n    $match: {\n      \"Ranking\": { $gte: 10, $lte: 15 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_num_employees: { $avg: \"$Num_Employees\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_num_employees: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3088,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Return all detention summaries.",
            "Provide a list of all summaries related to detentions.",
            "Fetch all detention summary records.",
            "Retrieve all available summaries of detentions.",
            "Display all summaries for detention cases."
        ],
        "ref_sql": "SELECT detention_summary FROM Detention",
        "MQL": "db.Ref_Detention_Type.aggregate([\n  { $unwind: \"$Detention\" },\n  { $project: { \"detention_summary\": \"$Detention.detention_summary\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3741,
        "db_id": "soccer_2",
        "nl_queries": [
            "What are the names of players whose training hours is between 500 and 1500?",
            "What are the names of players who train between 500 and 1500 hours?",
            "Can you provide the names of players who have trained for between 500 and 1500 hours?",
            "List the names of players whose training hours range from 500 to 1500.",
            "What are the names of players with training hours falling between 500 and 1500?"
        ],
        "ref_sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "MQL": "db.Player.find({\n  HS: {\n    $gte: 500,\n    $lte: 1500\n  }\n}, {\n  pName: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2580,
        "db_id": "tvshow",
        "nl_queries": [
            "How many TV Channel using language English?",
            "How many TV Channels use the English language?",
            "What is the total number of TV channels that broadcast in English?",
            "Can you tell me how many TV channels operate in the English language?",
            "How many TV channels are available in English?"
        ],
        "ref_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $match: {\n      Language: \"English\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3718,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Find the id of the order whose shipment tracking number is \"3452\".",
            "Which order's shipment tracking number is \"3452\"? Give me the id of the order.",
            "What is the order ID for the shipment that has a tracking number of \"3452\"?",
            "Can you provide the ID of the order linked to the shipment tracking number \"3452\"?",
            "Retrieve the order ID of the shipment associated with the tracking number \"3452\"."
        ],
        "ref_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Shipments\"\n  },\n  {\n    $match: {\n      \"Orders.Shipments.shipment_tracking_number\": \"3452\"\n    }\n  },\n  {\n    $project: {\n      order_id: \"$Orders.order_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 986,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "Which events have the number of notes between one and three? List the event id and the property id.",
            "Identify the events that have between one and three associated notes. Provide the event ID along with the property ID.",
            "Can you list the event IDs and property IDs for events that possess a number of notes ranging from one to three?",
            "What events have a count of notes in the range of one to three? Include the event ID and property ID in your response.",
            "Find the events that include between one and three notes. Please show the corresponding event ID and property ID for each."
        ],
        "ref_sql": "SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Customer_Events\" },\n  { $match: { \n      $and: [\n        { \"Customer_Events.Customer_Event_Notes\": { $exists: true } },\n        { $expr: { $gte: [{ $size: \"$Customer_Events.Customer_Event_Notes\" }, 1] } },\n        { $expr: { $lte: [{ $size: \"$Customer_Events.Customer_Event_Notes\" }, 3] } }\n      ]\n    }\n  },\n  { $project: { \n      \"Customer_Event_ID\": \"$Customer_Events.Customer_Event_ID\", \n      \"property_id\": \"$Customer_Events.property_id\",\n      \"_id\": 0 \n    }\n  }\n]);\n"
    },
    {
        "record_id": 1769,
        "db_id": "student_1",
        "nl_queries": [
            "Find the last names of all the teachers that teach GELL TAMI.",
            "What are the last names of the teachers who teach the student called GELL TAMI?",
            "List the last names of teachers who instruct the student GELL TAMI.",
            "What are the surnames of the educators teaching the student named GELL TAMI?",
            "Identify the last names of all instructors associated with GELL TAMI."
        ],
        "ref_sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"GELL\" AND T1.lastname = \"TAMI\"",
        "MQL": "db.Teachers.aggregate([\n  {\n    $lookup: {\n      from: \"Students\",\n      localField: \"teacher_id\",\n      foreignField: \"teacher_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.student_name\": \"GELL TAMI\"\n    }\n  },\n  {\n    $project: {\n      LastName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3100,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "Identify the districts that have shops with fewer than 3000 products as well as shops with more than 10000 products.",
            "Which districts contain both stores that offer less than 3000 products and those that provide over 10000 products?",
            "List the districts where there are shops selling under 3000 products alongside shops selling over 10000 products."
        ],
        "ref_sql": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
        "MQL": "db.shop.aggregate([\n  {\n    $group: {\n      _id: \"$District\",\n      less_than_3000: {\n        $sum: {\n          $cond: [{ $lte: [\"$Number_products\", 3000] }, 1, 0]\n        }\n      },\n      more_than_10000: {\n        $sum: {\n          $cond: [{ $gt: [\"$Number_products\", 10000] }, 1, 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      less_than_3000: { $gt: 0 },\n      more_than_10000: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      District: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 291,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
            "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
            "List the unique names, locations, and products of enzymes that exhibit any kind of 'inhibitor' interaction.",
            "Provide the distinct enzyme names, their locations, and associated products that are identified as having inhibitor interactions.",
            "Identify the different enzyme names, as well as their locations and products, that are involved in any inhibitor-type interactions."
        ],
        "ref_sql": "SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
        "MQL": "db.enzyme.aggregate([\n  {\n    $unwind: \"$medicine_enzyme_interaction\"\n  },\n  {\n    $match: {\n      \"medicine_enzyme_interaction.interaction_type\": \"inhibitor\"\n    }\n  },\n  {\n    $group: {\n      _id: {\n        name: \"$name\",\n        Location: \"$Location\",\n        Product: \"$Product\"\n      }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id.name\",\n      Location: \"$_id.Location\",\n      Product: \"$_id.Product\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3886,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "List the names of all routes in alphabetic order.",
            "Retrieve all route names sorted in alphabetical order.",
            "Show the names of all delivery routes arranged in ascending order.",
            "Provide a list of every route's name organized alphabetically.",
            "Display all routes by their names, sorted from A to Z."
        ],
        "ref_sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "MQL": "db.Delivery_Routes.find({}, { \"route_name\": 1, \"_id\": 0 }).sort({ \"route_name\": 1 });\n"
    },
    {
        "record_id": 4190,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all template type codes that are not used by any document.",
            "What are the codes of template types that are not used for any document?",
            "List the template type codes that lack any associated documents.",
            "Identify template type codes that are not linked to any documents.",
            "Provide the codes for template types that do not have any documents connected to them."
        ],
        "ref_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $project: {\n      Template_Type_Code: 1,\n      hasDocuments: {\n        $gt: [\n          {\n            $size: {\n              $filter: {\n                input: \"$Templates.Documents\",\n                as: \"document\",\n                cond: {\n                  $ne: [\"$$document\", []]\n                }\n              }\n            }\n          },\n          0\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      hasDocuments: false\n    }\n  },\n  {\n    $project: {\n      Template_Type_Code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3447,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the minimum and maximum vote percents of elections?",
            "What are the lowest and highest vote percentages recorded in the elections?",
            "Can you provide the minimum and maximum percentages of votes for all elections?",
            "What is the range of vote percentages from the elections, specifically the minimum and maximum?",
            "Identify the smallest and largest vote percentages observed in the election results."
        ],
        "ref_sql": "SELECT min(Vote_Percent) , max(Vote_Percent) FROM election",
        "MQL": "db.representative.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $group: {\n      _id: null,\n      min_Vote_Percent: { $min: \"$election.Vote_Percent\" },\n      max_Vote_Percent: { $max: \"$election.Vote_Percent\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_Vote_Percent: 1,\n      max_Vote_Percent: 1\n    }\n  }\n])\n"
    },
    {
        "record_id": 729,
        "db_id": "roller_coaster",
        "nl_queries": [
            "List the names of roller coasters by ascending order of length.",
            "Provide a list of roller coaster names arranged in ascending order based on their length.",
            "Retrieve the names of roller coasters sorted from shortest to longest.",
            "Show the names of roller coasters in increasing order of length.",
            "Enumerate roller coaster names in ascending length sequence."
        ],
        "ref_sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $sort: { \"roller_coaster.Length\": 1 } },\n  { $project: { \"Name\": \"$roller_coaster.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3991,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "What is total bonus given in all evaluations?",
            "Find the total amount of bonus given in all the evaluations.",
            "What is the overall sum of bonuses from all employee evaluations?",
            "Determine the cumulative total of bonuses awarded across all evaluations.",
            "Can you tell me the total bonuses distributed in all employee evaluations?"
        ],
        "ref_sql": "SELECT sum(bonus) FROM evaluation",
        "MQL": "db.employee.aggregate([\n  {\n    $unwind: \"$evaluation\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_bonus: {\n        $sum: \"$evaluation.Bonus\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_bonus: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3292,
        "db_id": "city_record",
        "nl_queries": [
            "What is id of the city that hosted events in the most recent year?",
            "Find the city that hosted some events in the most recent year. What is the id of this city?",
            "Which city's ID corresponds to the most recent year of hosting events?",
            "Identify the city that held events last year. What is its ID?",
            "What is the ID of the city that was a host for events in the latest year available?"
        ],
        "ref_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$hosting_city\"\n  },\n  {\n    $group: {\n      _id: \"$hosting_city.Year\",\n      Host_City: { $addToSet: \"$hosting_city.Host_City\" }\n    }\n  },\n  {\n    $sort: {\n      _id: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$Host_City\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Host_City: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1194,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show id, first and last names for all customers with at least two cards.",
            "What are the ids and full names of customers who hold two or more cards?",
            "List the customer IDs along with their first and last names for those who own two or more cards.",
            "Provide the IDs and full names of customers that have at least a pair of cards.",
            "Retrieve the IDs and first and last names of customers with a minimum of two cards registered."
        ],
        "ref_sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "MQL": "db.Customers.aggregate([\n  {\n    $lookup: {\n      from: \"Customers_Cards\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $addFields: {\n      count_Docs1: { $size: \"$Docs1\" }\n    }\n  },\n  {\n    $match: {\n      count_Docs1: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_id: 1,\n      customer_first_name: 1,\n      customer_last_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2338,
        "db_id": "student_1",
        "nl_queries": [
            "Report the number of students in each classroom.",
            "For each classroom, show the classroom number and find how many students are using it.",
            "Provide the total count of students present in each classroom.",
            "Display the number of students assigned to every classroom along with their corresponding classroom identifiers.",
            "Summarize the student count for each classroom and indicate the classroom numbers."
        ],
        "ref_sql": "SELECT classroom , count(*) FROM list GROUP BY classroom",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Classroom\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Classroom: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1583,
        "db_id": "gymnast",
        "nl_queries": [
            "What are the hometowns that are shared by at least two gymnasts?",
            "Give the hometowns from which two or more gymnasts are from.",
            "Which hometowns have a minimum of two gymnasts residing in them?",
            "List the hometowns that are home to at least two gymnasts.",
            "Identify the hometowns that host two or more gymnasts."
        ],
        "ref_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Hometown\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Hometown: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2739,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "How many products are there?",
            "Count the number of products.",
            "What is the total number of products available in the database?",
            "Can you tell me how many products exist?",
            "Determine the total count of products that are recorded."
        ],
        "ref_sql": "SELECT count(*) FROM products",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1503,
        "db_id": "student_assessment",
        "nl_queries": [
            "What is detail of the student who registered the most number of courses?",
            "What are the details of the student who registered for the most number of courses?",
            "Who is the student that registered for the highest number of courses and what are their details?",
            "Can you provide the details of the student with the most course registrations?",
            "Give me the details of the student who has enrolled in the greatest number of courses."
        ],
        "ref_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$Students.Student_Course_Registrations\"\n  },\n  {\n    $group: {\n      _id: \"$Students.student_id\",\n      student_details: { $first: \"$Students.student_details\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      student_details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4267,
        "db_id": "concert_singer",
        "nl_queries": [
            "Find the number of concerts happened in the stadium with the highest capacity .",
            "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "How many concerts have taken place in the stadium with the biggest capacity?",
            "Count the number of concerts that were held in the stadium that has the highest seating capacity.",
            "What is the total number of concerts hosted at the stadium with the largest seating capacity?"
        ],
        "ref_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "MQL": "db.stadium.aggregate([\n  {\n    $sort: {\n      Capacity: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"concert\",\n      localField: \"Stadium_ID\",\n      foreignField: \"Stadium_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Docs1\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 860,
        "db_id": "orchestra",
        "nl_queries": [
            "Please show the different record companies and the corresponding number of orchestras.",
            "How many orchestras does each record company manage?",
            "Can you provide a list of record companies along with the number of orchestras they oversee?",
            "What are the various record companies and how many orchestras are affiliated with each?",
            "How many orchestras are associated with each record company in the database?"
        ],
        "ref_sql": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $group: {\n      _id: \"$orchestra.Record_Company\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Record_Company: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3587,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show names for artists without any exhibition.",
            "What are the names of artists that have not had any exhibitions?",
            "List the names of artists who have no exhibitions to their name.",
            "Provide the names of artists that haven't participated in any exhibitions.",
            "Identify the names of artists who have not held any exhibitions."
        ],
        "ref_sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      exhibition: { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1926,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of amenities of the dorm where the student with last name Smith is living in.",
            "What are the amenities in the dorm that a student who has the last name of Smith lives in?",
            "List the amenities available in the dormitory where the student named Smith resides.",
            "What amenities are present in the dorm that houses the student with the last name Smith?",
            "Identify the amenities in the dormitory occupied by the student surname Smith."
        ],
        "ref_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"dormid\",\n      foreignField: \"Lives_in.dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.LName\": \"Smith\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"dormid\",\n      foreignField: \"Has_amenity.dormid\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $unwind: \"$Docs2\"\n  },\n  {\n    $project: {\n      amenity_name: \"$Docs2.amenity_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 281,
        "db_id": "formula_1",
        "nl_queries": [
            "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
            "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
            "Provide the forenames and surnames of all unique drivers who completed a lap in under 93000 milliseconds.",
            "Can you list the names of all distinct drivers who recorded lap times shorter than 93000 milliseconds?",
            "What are the unique forenames and surnames of drivers with lap times less than 93000 milliseconds?"
        ],
        "ref_sql": "SELECT DISTINCT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: \"$lapTimes\"\n  },\n  {\n    $match: {\n      \"lapTimes.milliseconds\": {\n        $lt: 93000\n      }\n    }\n  },\n  {\n    $project: {\n      forename: 1,\n      surname: 1,\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: {\n        forename: \"$forename\",\n        surname: \"$surname\"\n      }\n    }\n  },\n  {\n    $project: {\n      forename: \"$_id.forename\",\n      surname: \"$_id.surname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 411,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What are all the distinct payment types?",
            "Can you list all the unique types of payment methods?",
            "What distinct payment options do we have?",
            "Show me all the different payment types available.",
            "What are the various unique payment types offered?"
        ],
        "ref_sql": "SELECT DISTINCT payment_type_code FROM payments",
        "MQL": "db.Discount_Coupons.aggregate([\n  { $unwind: \"$Customers\" },\n  { $unwind: \"$Customers.Payments\" },\n  { $group: { _id: \"$Customers.Payments.payment_type_code\" } },\n  { $project: { _id: 0, payment_type_code: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 2345,
        "db_id": "club_1",
        "nl_queries": [
            "What is the description of the club named \"Tennis Club\"?",
            "Find the description of the club called \"Tennis Club\".",
            "Can you provide the details of the Tennis Club?",
            "What information do we have about the club titled \"Tennis Club\"?",
            "Please tell me the description for the club known as \"Tennis Club\"."
        ],
        "ref_sql": "SELECT clubdesc FROM club WHERE clubname = \"Tennis Club\"",
        "MQL": "db.Club.find(\n  { ClubName: \"Tennis Club\" },\n  { ClubDesc: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1696,
        "db_id": "driving_school",
        "nl_queries": [
            "Which city does has most number of customers?",
            "What is the city with the most customers?",
            "Which city has the highest count of customers?",
            "Identify the city with the greatest number of customers.",
            "What city hosts the largest customer base?"
        ],
        "ref_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      sum_count_Customers: {\n        $sum: {\n          $size: \"$Customers\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      sum_count_Customers: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4105,
        "db_id": "e_government",
        "nl_queries": [
            "What is the name of organization that has the greatest number of contact individuals?",
            "Return the name of the organization which has the most contact individuals.",
            "Which organization has the highest number of contact individuals?",
            "Identify the organization with the largest amount of individual contacts.",
            "What is the name of the organization that possesses the greatest number of contact persons?"
        ],
        "ref_sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Organizations.aggregate([\n  {\n    $unwind: \"$Organization_Contact_Individuals\"\n  },\n  {\n    $group: {\n      _id: \"$organization_id\",\n      organization_name: { $first: \"$organization_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      organization_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3343,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the location codes and the number of documents in each location.",
            "What is the code of each location and the number of documents in that location?",
            "List the location codes along with the corresponding number of documents found at each site.",
            "Can you provide the codes for each location and the count of documents located there?",
            "Identify each location code and the total number of documents associated with it."
        ],
        "ref_sql": "SELECT location_code , count(*) FROM Document_locations GROUP BY location_code",
        "MQL": "db.Ref_Locations.aggregate([\n  {\n    $unwind: \"$Document_Locations\"\n  },\n  {\n    $group: {\n      _id: \"$Document_Locations.Location_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Location_Code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2892,
        "db_id": "epinions_1",
        "nl_queries": [
            "How many different items were reviewed by some users?",
            "What is the total count of unique items reviewed by users?",
            "How many distinct items have been assessed by users?",
            "Count the number of different items that received user reviews.",
            "How many unique items were subject to reviews by multiple users?"
        ],
        "ref_sql": "SELECT count(DISTINCT i_id) FROM review",
        "MQL": "db.item.aggregate([\n  { $unwind: \"$review\" },\n  { $group: { _id: \"$review.i_id\" } },\n  { $count: \"count_DISTINCT_i_id\" }\n]);\n"
    },
    {
        "record_id": 139,
        "db_id": "farm",
        "nl_queries": [
            "Show the census ranking of cities whose status are not \"Village\".",
            "What are the census rankings of cities that do not have the status \"Village\"?",
            "List the census rankings for cities that aren't classified as \"Village\".",
            "Provide the census rankings of cities that do not fall under the \"Village\" status.",
            "Display the census rankings of towns which do not have the status \"Village\"."
        ],
        "ref_sql": "SELECT Census_Ranking FROM city WHERE Status != \"Village\"",
        "MQL": "db.city.aggregate([\n  {\n    $match: {\n      Status: { $ne: \"Village\" }\n    }\n  },\n  {\n    $project: {\n      Census_Ranking: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2543,
        "db_id": "solvency_ii",
        "nl_queries": [
            "How many products are there?",
            "What is the total number of products available?",
            "Can you tell me how many products exist in the database?",
            "What is the current count of all products?",
            "How many products can be found in the inventory?"
        ],
        "ref_sql": "SELECT count(*) FROM Products",
        "MQL": "db.Products.aggregate([\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 3171,
        "db_id": "college_1",
        "nl_queries": [
            "What is the first and last name of the oldest employee?",
            "What are the first and last names of the employee with the earliest date of birth?",
            "Can you provide the first and last names of the employee born first?",
            "Who is the oldest employee, and what are their first and last names?",
            "Find the first and last names of the employee with the earliest birthdate."
        ],
        "ref_sql": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $sort: { EMP_DOB: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      EMP_FNAME: 1,\n      EMP_LNAME: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1421,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What are the descriptions of all the project outcomes?",
            "List the description of the outcomes for all projects.",
            "Can you provide the descriptions for every project outcome?",
            "Show me the descriptions associated with the outcomes from all projects.",
            "What descriptions are available for the outcomes of all projects?"
        ],
        "ref_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code",
        "MQL": "db.Research_Outcomes.find({}, { outcome_description: 1, _id: 0 });\n"
    },
    {
        "record_id": 1690,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
            "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
            "Identify the bank branch that has issued the most significant total loan amounts to clients with credit scores below 100.",
            "Which bank branch has granted the highest total loan amounts to customers whose credit scores are under 100?",
            "Determine the name of the bank branch that provided the largest overall loan sum to customers with credit ratings less than 100."
        ],
        "ref_sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $match: {\n      \"customer.credit_score\": { $lt: 100 }\n    }\n  },\n  {\n    $unwind: \"$customer.loan\"\n  },\n  {\n    $group: {\n      _id: {\n        branch_ID: \"$branch_ID\",\n        bname: \"$bname\"\n      },\n      sum_loan_amount: { $sum: \"$customer.loan.amount\" }\n    }\n  },\n  {\n    $sort: { sum_loan_amount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      bname: \"$_id.bname\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2000,
        "db_id": "book_2",
        "nl_queries": [
            "What are the title and issues of the books?",
            "Can you provide the titles and issue numbers for all the books?",
            "What titles and issues are available for the books in the collection?",
            "Show me the titles along with the issues of each book.",
            "List the titles and their corresponding issues for all books."
        ],
        "ref_sql": "SELECT Title , Issues FROM book",
        "MQL": "db.book.find({}, { \"Title\": 1, \"Issues\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1517,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
            "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
            "Can you provide the last names and IDs of drivers who made 11 pit stops and raced in over 5 events?",
            "Please list the surnames and driver IDs of all drivers with a record of 11 pit stops and participation in more than 5 races.",
            "What are the surnames and IDs of drivers who have 11 pit stops and have taken part in more than 5 race results?"
        ],
        "ref_sql": "SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) = 11 INTERSECT SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5",
        "MQL": "db.drivers.aggregate([\n  {\n    $project: {\n      surname: 1,\n      driverId: 1,\n      pitStopsCount: {\n        $size: \"$pitStops\"\n      },\n      resultsCount: {\n        $size: \"$results\"\n      }\n    }\n  },\n  {\n    $match: {\n      pitStopsCount: 11,\n      resultsCount: {\n        $gt: 5\n      }\n    }\n  },\n  {\n    $project: {\n      surname: 1,\n      driverId: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3516,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the name and email of the users who have more than 1000 followers.",
            "Retrieve the names and email addresses of users with more than 1000 followers.",
            "List the names and emails of users who have in excess of 1000 followers.",
            "Provide the names and email information for users that possess over 1000 followers.",
            "Get the names and email of those users who boast more than 1000 followers."
        ],
        "ref_sql": "SELECT name , email FROM user_profiles WHERE followers > 1000",
        "MQL": "db.user_profiles.find({\n  \"followers\": { $gt: 1000 }\n}, { \"name\": 1, \"email\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 16,
        "db_id": "phone_1",
        "nl_queries": [
            "Find the details for all chip models.",
            "Retrieve information for every available chip model.",
            "List all details related to the chip models in the database.",
            "Get the specifications for all chip models stored in the system.",
            "What are the details of each chip model?"
        ],
        "ref_sql": "SELECT * FROM chip_model",
        "MQL": "db.chip_model.find({}, {\n  \"Model_name\": 1,\n  \"Launch_year\": 1,\n  \"RAM_MiB\": 1,\n  \"ROM_MiB\": 1,\n  \"Slots\": 1,\n  \"WiFi\": 1,\n  \"Bluetooth\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 442,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find the names of the customers who have an deputy policy.",
            "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.",
            "List the customers who hold a policy classified as \"Deputy.\"",
            "Who are the customers with an insurance policy of the type \"Deputy\"? Please provide their details.",
            "Identify the names of customers that possess a Deputy insurance policy."
        ],
        "ref_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"",
        "MQL": "db.Customers.find({\n  \"Policies.Policy_Type_Code\": \"Deputy\"\n}, {\n  \"Customer_Details\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 4001,
        "db_id": "school_finance",
        "nl_queries": [
            "What are the total and average enrollment of all schools?",
            "What is the total enrollment and the average number of students across all schools?",
            "Can you provide the sum and average of enrollments for every school?",
            "What are the cumulative and mean enrollments for all schools combined?",
            "How many students are enrolled in total, and what is the average enrollment figure for all schools?"
        ],
        "ref_sql": "SELECT sum(enrollment) , avg(enrollment) FROM school",
        "MQL": "db.School.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_enrollment: { $sum: \"$Enrollment\" },\n      avg_enrollment: { $avg: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enrollment: 1,\n      avg_enrollment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1817,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the names of reviewers who had given higher than 3 star ratings.",
            "What are the names of the reviewers who have rated a movie more than 3 stars before?",
            "List the names of reviewers who have given ratings exceeding 3 stars.",
            "Who are the reviewers that rated any movie above 3 stars?",
            "Provide the names of reviewers that have scored films with more than 3 stars."
        ],
        "ref_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $project: {\n      name: 1,\n      high_ratings: {\n        $filter: {\n          input: \"$Rating\",\n          as: \"rating\",\n          cond: {\n            $gt: [\"$$rating.stars\", 3]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      high_ratings: {\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3006,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the name and phone of the customer without any mailshot.",
            "Retrieve the names and phone numbers of customers who haven't received any mailshot.",
            "List the customer names and their phone numbers for those without any mailshot associations.",
            "Provide the names and contact numbers of customers with no linked mailshot records.",
            "Display the names and phone details of customers that do not have any mailshot entries."
        ],
        "ref_sql": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "MQL": "db.Customers.find({\n  \"Mailshot_Customers\": { $exists: true, $size: 0 }\n}, {\n  \"customer_name\": 1,\n  \"customer_phone\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 1947,
        "db_id": "movie_1",
        "nl_queries": [
            "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
            "What is the reviewer name, film title, movie rating, and rating date for every movie ordered by reviewer name, movie title, then finally rating?",
            "Provide the name of the reviewer, title of the film, star rating, and the date of the rating, sorted first by reviewer name, then by film title, and finally by star rating.",
            "List down the reviewer's name, the movie title, the rating in stars, and the date of the review, organized in order of reviewer name, followed by movie title and rating.",
            "Display the reviewer's name, corresponding movie title, star rating, and the date when the rating was given, sorted by reviewer name, then by movie title, and then by star rating."
        ],
        "ref_sql": "SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name , T2.title , T1.stars",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $lookup: {\n      from: \"Movie\",\n      localField: \"Rating.mID\",\n      foreignField: \"mID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      name: \"$name\",\n      title: \"$Docs1.title\",\n      stars: \"$Rating.stars\",\n      ratingDate: \"$Rating.ratingDate\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      name: 1,\n      title: 1,\n      stars: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 48,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What address was the document with id 4 mailed to?",
            "Which address was used to mail the document identified by the number 4?",
            "Can you tell me the address where the document with ID 4 was sent?",
            "What is the mailing address for the document that has an ID of 4?",
            "Please provide the address to which the document numbered 4 was mailed."
        ],
        "ref_sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
        "MQL": "db.Addresses.find({\n  \"Documents_Mailed.document_id\": 4\n}, { \"address_details\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 321,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the names of all directors whose movies are rated by Sarah Martinez.",
            "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
            "List the directors of all films reviewed by Sarah Martinez.",
            "Who are the directors of movies that have received ratings from Sarah Martinez?",
            "Show me the names of directors whose films have been evaluated by Sarah Martinez."
        ],
        "ref_sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'",
        "MQL": "db.Movie.aggregate([\n  {\n    $lookup: {\n      from: \"Reviewer\",\n      localField: \"mID\",\n      foreignField: \"Rating.mID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"Sarah Martinez\"\n    }\n  },\n  {\n    $project: {\n      director: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1100,
        "db_id": "book_2",
        "nl_queries": [
            "Show writers who have published a book with price more than 4000000.",
            "Identify authors who have released books priced above 4,000,000.",
            "List the writers of books that have a publication price greater than 4,000,000.",
            "Retrieve the names of writers whose books are priced over 4,000,000.",
            "Find authors with published works that cost more than 4,000,000."
        ],
        "ref_sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000",
        "MQL": "db.book.find({\n  \"publication.Price\": { $gt: 4000000 }\n}, { \"Writer\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3375,
        "db_id": "poker_player",
        "nl_queries": [
            "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "What is the highest number of final tables achieved by poker players earning below 200,000?",
            "Provide the maximum count of final tables completed by players with earnings less than 200,000.",
            "Find out the top number of final tables made by poker players whose earnings are under 200,000."
        ],
        "ref_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $match: {\n      \"poker_player.Earnings\": { $lt: 200000 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_Final_Table_Made: { $max: \"$poker_player.Final_Table_Made\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Final_Table_Made: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 599,
        "db_id": "train_station",
        "nl_queries": [
            "Show all locations with only 1 station.",
            "List all locations that contain exactly one train station.",
            "Find all locations with a single train station.",
            "Identify locations where there is only one station present.",
            "Display all locations that have only one station associated with them."
        ],
        "ref_sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*) = 1",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3881,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the name of the room with the maximum occupancy.",
            "What is the name of the room that can accommodate the most people?",
            "What is the name of the room that offers the highest occupancy?",
            "Identify the room name with the largest capacity for guests.",
            "Can you tell me the name of the room that accommodates the most guests?"
        ],
        "ref_sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $sort: {\n      maxOccupancy: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      roomName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2752,
        "db_id": "college_1",
        "nl_queries": [
            "How many professors who are from either Accounting or Biology department?",
            "What is the number of professors who are in the Accounting or Biology departments?",
            "How many professors are affiliated with the Accounting or Biology departments?",
            "What is the total number of professors working in the Accounting and Biology departments?",
            "Count the professors who belong to either the Accounting or Biology department."
        ],
        "ref_sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": { $in: [\"Accounting\", \"Biology\"] }\n    }\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1324,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the latitude, longitude, city of the station from which the shortest trip started?",
            "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
            "Can you provide the latitude, longitude, and city of the station where the shortest duration trip began?",
            "What are the coordinates (latitude and longitude) and city of the station from which the quickest trip originated?",
            "Please tell me the latitude, longitude, and city of the starting station for the trip with the least duration."
        ],
        "ref_sql": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "MQL": "db.trip.aggregate([\n  {\n    $sort: {\n      duration: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"start_station_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      lat: {\n        $arrayElemAt: [\"$Docs1.lat\", 0]\n      },\n      long: {\n        $arrayElemAt: [\"$Docs1.long\", 0]\n      },\n      city: {\n        $arrayElemAt: [\"$Docs1.city\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2153,
        "db_id": "document_management",
        "nl_queries": [
            "What is the average access count of documents?",
            "Find the average access count across all documents?",
            "How many times, on average, are documents accessed?",
            "What is the mean access frequency for all documents?",
            "Determine the average number of accesses for documents in the collection."
        ],
        "ref_sql": "SELECT avg(access_count) FROM documents",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_access_count: {\n        $avg: \"$Documents.access_count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_access_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 201,
        "db_id": "race_track",
        "nl_queries": [
            "What are the distinct classes that races can have?",
            "Return the different classes of races.",
            "What unique classifications do races possess?",
            "List the various classifications for races.",
            "Identify the different race classes available."
        ],
        "ref_sql": "SELECT DISTINCT CLASS FROM race",
        "MQL": "db.track.aggregate([\n  {\n    $unwind: \"$race\"\n  },\n  {\n    $group: {\n      _id: \"$race.Class\"\n    }\n  },\n  {\n    $project: {\n      Class: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3644,
        "db_id": "museum_visit",
        "nl_queries": [
            "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "List the names of museums that employ more staff than the lowest staff count of museums established after 2010.",
            "Identify museums with staff numbers exceeding the minimum staff count of all museums that opened since 2010.",
            "Retrieve the names of museums that have a larger number of staff than the minimum found in museums opened post-2010.",
            "What are the names of museums that have a greater staff count than the smallest staff number among those that opened after the year 2010?"
        ],
        "ref_sql": "SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
        "MQL": "db.museum.aggregate([\n  { $match: { \"Open_Year\": { $gt: \"2010\" } } },\n  { $group: { _id: null, minStaff: { $min: \"$Num_of_Staff\" } } },\n  { $lookup: {\n      from: \"museum\",\n      let: { minStaff: \"$minStaff\" },\n      pipeline: [\n        { $match: { $expr: { $gt: [\"$Num_of_Staff\", \"$$minStaff\"] } } },\n        { $project: { \"Name\": 1, \"_id\": 0 } }\n      ],\n      as: \"Docs1\"\n  }},\n  { $unwind: \"$Docs1\" },\n  { $project: { \"Name\": \"$Docs1.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1777,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show the member name and hometown who registered a branch in 2016.",
            "What are the member names and hometowns of those who registered at a branch in 2016?",
            "List the names and hometowns of members who signed up at a branch in the year 2016.",
            "Provide the names and hometowns of members that registered with a branch during 2016.",
            "Can you give me the names and hometowns of all members who registered at a branch in 2016?"
        ],
        "ref_sql": "SELECT T2.name , T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016",
        "MQL": "db.member.aggregate([\n  {\n    $unwind: \"$membership_register_branch\"\n  },\n  {\n    $match: {\n      \"membership_register_branch.Register_Year\": \"2016\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      Hometown: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1529,
        "db_id": "movie_1",
        "nl_queries": [
            "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
            "For all directors who have directed more than one movie, what movies have they directed and what are their names?",
            "List titles of movies along with their directors for all directors who have directed more than one film, and order the results by director and movie title.",
            "Show the movie titles and corresponding directors for those directors who have more than one movie to their name, sorted by the director's name and the title of the movie.",
            "Retrieve the names of all movies directed by directors with multiple films, including the names of the directors, sorted by both the director's name and the title of the movies."
        ],
        "ref_sql": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director , T1.title",
        "MQL": "db.Movie.aggregate([\n  {\n    $group: {\n      _id: \"$director\",\n      movies: {\n        $push: {\n          title: \"$title\",\n          director: \"$director\"\n        }\n      },\n      movieCount: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      movieCount: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $unwind: \"$movies\"\n  },\n  {\n    $project: {\n      _id: 0,\n      title: \"$movies.title\",\n      director: \"$movies.director\"\n    }\n  },\n  {\n    $sort: {\n      director: 1,\n      title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2959,
        "db_id": "swimming",
        "nl_queries": [
            "Find the country that has the most stadiums.",
            "Which country boasts the highest number of stadiums?",
            "Identify the country with the greatest number of stadiums.",
            "What country has the largest count of stadiums?",
            "Which nation features the most stadiums?"
        ],
        "ref_sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2737,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "How many premises are there?",
            "What is the total number of premises recorded?",
            "Can you tell me the count of all premises in the database?",
            "How many total premises exist in the system?",
            "What is the number of premises available?"
        ],
        "ref_sql": "SELECT count(*) FROM premises",
        "MQL": "db.Premises.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1049,
        "db_id": "roller_coaster",
        "nl_queries": [
            "Show the names of countries that have more than one roller coaster.",
            "List the countries that have more than a single roller coaster.",
            "Provide the names of countries with at least two roller coasters.",
            "Which countries feature more than one roller coaster?",
            "Identify the names of countries that boast multiple roller coasters."
        ],
        "ref_sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "MQL": "db.country.aggregate([\n  {\n    $project: {\n      \"Name\": 1,\n      \"count_roller_coaster\": { $size: \"$roller_coaster\" }\n    }\n  },\n  {\n    $match: {\n      \"count_roller_coaster\": { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      \"_id\": 0,\n      \"Name\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2496,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How many dogs have an age below the average?",
            "Count the number of dogs of an age below the average.",
            "What is the total number of dogs that are younger than the average age?",
            "How many dogs have an age that is less than the average age of all dogs?",
            "Please count the dogs whose age falls below the average age."
        ],
        "ref_sql": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: { $avg: { $toDouble: \"$Dogs.age\" } }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Owners\",\n      let: { avg_age: \"$avg_age\" },\n      pipeline: [\n        { $unwind: \"$Dogs\" },\n        {\n          $match: {\n            $expr: { $lt: [{ $toDouble: \"$Dogs.age\" }, \"$$avg_age\"] }\n          }\n        },\n        { $count: \"count\" }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      count: \"$Docs1.count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 758,
        "db_id": "party_host",
        "nl_queries": [
            "Show the most common nationality of hosts.",
            "Which nationality has the most hosts?",
            "What is the nationality that has the largest number of hosts?",
            "Identify the nationality most represented among the hosts.",
            "Which nationality is most prevalent in the host list?"
        ],
        "ref_sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.host.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 456,
        "db_id": "performance_attendance",
        "nl_queries": [
            "What are the dates and locations of performances?",
            "Can you provide the dates and locations where performances are held?",
            "What are the performance dates and their corresponding locations?",
            "Show me the dates and venues for the performances.",
            "List the dates along with the locations of all performances."
        ],
        "ref_sql": "SELECT Date , LOCATION FROM performance",
        "MQL": "db.performance.find({}, { \"Date\": 1, \"Location\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3368,
        "db_id": "city_record",
        "nl_queries": [
            "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
            "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
            "Retrieve the match IDs for the competition titled \"1994 FIFA World Cup qualification.\"",
            "List the match ID associated with the \"1994 FIFA World Cup qualification\" event.",
            "What are the match IDs for matches in the \"1994 FIFA World Cup qualification\" tournament?"
        ],
        "ref_sql": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "MQL": "db.match.find({\n  \"Competition\": \"1994 FIFA World Cup qualification\"\n}, {\n  \"Match_ID\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 3458,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show the minimum, maximum, average price for all products.",
            "Provide the minimum, maximum, and average product prices across all products.",
            "What are the lowest, highest, and average prices for every product in the database?",
            "Can you display the minimum, maximum, and average prices of all available products?",
            "Retrieve the lowest, highest, and average prices for the complete range of products."
        ],
        "ref_sql": "SELECT min(product_price) , max(product_price) , avg(product_price) FROM products",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_product_price: { $min: \"$product_price\" },\n      max_product_price: { $max: \"$product_price\" },\n      avg_product_price: { $avg: \"$product_price\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_product_price: 1,\n      max_product_price: 1,\n      avg_product_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1922,
        "db_id": "riding_club",
        "nl_queries": [
            "Show the names and genders of players with a coach starting after 2011.",
            "Provide the names and genders of players whose coaches began coaching after 2011.",
            "List the names and genders of players with a coach who started after the year 2011.",
            "Display the player names and their genders for those whose coaches were appointed after 2011.",
            "Retrieve the names and genders of players associated with coaches who commenced their tenure after 2011."
        ],
        "ref_sql": "SELECT T3.Player_name , T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011",
        "MQL": "db.player.find({\n  \"player_coach.Starting_year\": { $gt: 2011 }\n}, {\n  \"Player_name\": 1,\n  \"Gender\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 1985,
        "db_id": "ship_mission",
        "nl_queries": [
            "Please show the most common type of ships.",
            "What is the most common type of ships?",
            "What type of ships appears most frequently in the database?",
            "Can you tell me which ship type is the most prevalent?",
            "Identify the ship type that is seen most often among the entries."
        ],
        "ref_sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.ship.aggregate([\n  {\n    $group: {\n      _id: \"$Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2326,
        "db_id": "city_record",
        "nl_queries": [
            "Which three cities have the largest regional population?",
            "What are the three largest cities in terms of regional population?",
            "What are the three cities with the highest regional populations?",
            "Name the three most populated cities in terms of regional population.",
            "List the three cities that have the greatest regional populations."
        ],
        "ref_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "MQL": "db.city.aggregate([\n  {\n    $sort: {\n      Regional_Population: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      City: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3935,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the state and country of all cities with post code starting with 4.",
            "What are the state and country of all the cities that have post codes starting with 4.\\",
            "Retrieve the state and country for all addresses where the zip code begins with the number 4.",
            "What states and countries are associated with cities that have zip codes starting with 4?",
            "List the state and country for each city that has a postal code beginning with the digit 4."
        ],
        "ref_sql": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "MQL": "db.Addresses.find(\n  {\n    zip_postcode: { $regex: \"^4\" }\n  },\n  {\n    state_province_county: 1,\n    country: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3752,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the patient who most recently stayed in room 111.",
            "What is the id of the patient who stayed in room 111 most recently?",
            "Who is the patient that had the latest stay in room number 111?",
            "Identify the patient that most recently occupied room 111.",
            "Can you tell me the ID of the patient who was in room 111 for their last stay?"
        ],
        "ref_sql": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1",
        "MQL": "db.Block.aggregate([\n  {\n    $match: {\n      \"Room.RoomNumber\": 111\n    }\n  },\n  {\n    $unwind: \"$Room\"\n  },\n  {\n    $match: {\n      \"Room.RoomNumber\": 111\n    }\n  },\n  {\n    $unwind: \"$Room.Stay\"\n  },\n  {\n    $sort: {\n      \"Room.Stay.StayEnd\": -1\n    }\n  },\n  {\n    $project: {\n      Patient: \"$Room.Stay.Patient\",\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 2582,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "How many templates do we have?",
            "Count the number of templates.",
            "What is the total number of templates available?",
            "Can you provide the count of all templates?",
            "How many total templates are there in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM Templates",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4091,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the name of the organization that has published the largest number of papers.",
            "Which institution has the most papers? Find the name of the institution.",
            "What is the name of the institution that has the highest number of published papers?",
            "Identify the organization with the greatest paper publication count. What is its name?",
            "Which institution has published the largest volume of papers? Please provide its name."
        ],
        "ref_sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Inst.aggregate([\n  {\n    $group: {\n      _id: \"$instID\",\n      paperCount: { $sum: { $size: \"$Authorship\" } }\n    }\n  },\n  {\n    $sort: {\n      paperCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"_id\",\n      foreignField: \"instID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      name: { $arrayElemAt: [\"$Docs1.name\", 0] },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2983,
        "db_id": "insurance_policies",
        "nl_queries": [
            "List the details of the customers who do not have any policies.",
            "Which customers do not have any policies? Find the details of these customers.",
            "Retrieve information about customers who currently hold no insurance policies.",
            "Which customers are without any policies? Provide their details.",
            "Show the details for customers who do not possess any active policies."
        ],
        "ref_sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $project: {\n      Customer_Details: 1,\n      count_customer_pllicies: {\n        $size: \"$Customer_Policies\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_customer_pllicies: 0\n    }\n  },\n  {\n    $project: {\n      Customer_Details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3438,
        "db_id": "party_people",
        "nl_queries": [
            "Show the member names which are in both the party with id 3 and the party with id 1.",
            "Which member names are shared among members in the party with the id 3 and the party with the id 1?",
            "List the names of members who belong to both the party with ID 1 and the party with ID 3.",
            "Identify which member names are present in both the party designated by ID 1 and the party designated by ID 3.",
            "Find the member names that are affiliated with both party ID 1 and party ID 3."
        ],
        "ref_sql": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $match: {\n      \"party.Party_ID\": { $in: [1, 3] }\n    }\n  },\n  {\n    $unwind: \"$party.member\"\n  },\n  {\n    $group: {\n      _id: \"$party.member.Member_Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $eq: 2 }\n    }\n  },\n  {\n    $project: {\n      Member_Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3333,
        "db_id": "student_1",
        "nl_queries": [
            "Find the last names of students studying in room 111.",
            "What are the last names of students in room 111?",
            "List the last names of students who are in classroom 111.",
            "Could you provide the last names of students enrolled in room 111?",
            "What last names belong to the students assigned to classroom 111?"
        ],
        "ref_sql": "SELECT lastname FROM list WHERE classroom = 111",
        "MQL": "db.list.find(\n  { Classroom: 111 },\n  { LastName: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 733,
        "db_id": "ship_mission",
        "nl_queries": [
            "Show the name of ships whose nationality is either United States or United Kingdom.",
            "What are the names of the ships that are from either the US or the UK?",
            "List the names of ships that belong to the United States or the United Kingdom.",
            "Provide the names of the vessels representing either the US or the UK.",
            "What are the names of the ships flagged under either United States or United Kingdom nationality?"
        ],
        "ref_sql": "SELECT Name FROM ship WHERE Nationality = \"United States\" OR Nationality = \"United Kingdom\"",
        "MQL": "db.ship.find(\n  {\n    Nationality: { $in: [\"United States\", \"United Kingdom\"] }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3894,
        "db_id": "school_finance",
        "nl_queries": [
            "List the name, location, mascot for all schools.",
            "Provide the names, locations, and mascots of every school.",
            "Show me the school names, their locations, and mascots for all institutions.",
            "Can you list all schools along with their names, locations, and mascots?",
            "Retrieve the school name, location, and mascot for each school in the database."
        ],
        "ref_sql": "SELECT school_name , LOCATION , mascot FROM school",
        "MQL": "db.School.find({}, { \"School_name\": 1, \"Location\": 1, \"Mascot\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2514,
        "db_id": "activity_1",
        "nl_queries": [
            "How many Professors are in building NEB?",
            "Count the number of Professors who have office in building NEB.",
            "What is the total number of Professors located in the NEB building?",
            "How many faculty members with the rank of Professor work in the NEB building?",
            "Determine the count of Professors that have their offices in the NEB building."
        ],
        "ref_sql": "SELECT count(*) FROM Faculty WHERE Rank = \"Professor\" AND building = \"NEB\"",
        "MQL": "db.Faculty.aggregate([\n  {\n    $match: {\n      Building: \"NEB\",\n      Rank: \"Professor\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 821,
        "db_id": "match_season",
        "nl_queries": [
            "Show the players and the years played.",
            "Who are the different players and how many years has each played?",
            "Provide the names of the players and the total years they have participated in matches.",
            "List the players along with the number of years each has been active in the game.",
            "Can you tell me the different players and how many years they have each been involved in their sport?"
        ],
        "ref_sql": "SELECT Player , Years_Played FROM player",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $project: {\n      Player: \"$player.Player\",\n      Years_Played: \"$player.Years_Played\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2241,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Find the average and minimum weight for each gender.",
            "What are the average and minimum weights for people of each sex?",
            "What is the average and lowest weight among individuals for each gender?",
            "Provide the average and minimum weights categorized by sex.",
            "Calculate the average weight and the least weight for every gender group."
        ],
        "ref_sql": "SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Sex\",\n      avg_weight: { $avg: \"$Weight\" },\n      min_weight: { $min: \"$Weight\" }\n    }\n  },\n  {\n    $project: {\n      Sex: \"$_id\",\n      avg_weight: 1,\n      min_weight: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 267,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show distinct first and last names for all customers with an account.",
            "What are the full names of customers who have accounts?",
            "List unique first and last names of all customers that possess an account.",
            "Provide the full names of customers who hold accounts.",
            "What are the distinct names of customers with accounts?"
        ],
        "ref_sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "MQL": "db.Accounts.aggregate([\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: {\n        customer_first_name: \"$Docs1.customer_first_name\",\n        customer_last_name: \"$Docs1.customer_last_name\"\n      }\n    }\n  },\n  {\n    $project: {\n      customer_first_name: \"$_id.customer_first_name\",\n      customer_last_name: \"$_id.customer_last_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2101,
        "db_id": "world_1",
        "nl_queries": [
            "What is the average life expectancy in African countries that are republics?",
            "Give the average life expectancy for countries in Africa which are republics?",
            "What is the mean life expectancy of republics in Africa?",
            "Calculate the average life span for African countries that are classified as republics.",
            "Determine the average life expectancy among republic-styled countries located in Africa."
        ],
        "ref_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: \"Africa\",\n      GovernmentForm: \"Republic\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_LifeExpectancy: { $avg: \"$LifeExpectancy\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"avg_LifeExpectancy\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4011,
        "db_id": "driving_school",
        "nl_queries": [
            "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
            "What is the total time for all lessons taught by Janessa Sawayn?",
            "What is the cumulative duration of lessons delivered by Janessa Sawayn?",
            "Calculate the total amount of lesson time provided by staff member Janessa Sawayn.",
            "How much lesson time has been accumulated from sessions taught by Janessa Sawayn?"
        ],
        "ref_sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $unwind: \"$Staff.Lessons\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_lesson_time: {\n        $sum: {\n          $toDouble: \"$Staff.Lessons.lesson_time\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_lesson_time: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1794,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show the stadium name and the number of concerts in each stadium.",
            "For each stadium, how many concerts play there?",
            "List the names of stadiums along with the total number of concerts held in each one.",
            "What is the count of concerts hosted in each stadium?",
            "Provide the stadium names and the respective number of concerts that take place in them."
        ],
        "ref_sql": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
        "MQL": "db.stadium.aggregate([\n  {\n    $unwind: \"$concert\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 897,
        "db_id": "riding_club",
        "nl_queries": [
            "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
            "List the sponsors associated with players residing in \"Brandon\" or \"Birtle\".",
            "Provide the names of sponsors for players who are based in either \"Brandon\" or \"Birtle\".",
            "Retrieve the sponsor names of players living in the towns of \"Brandon\" and \"Birtle\".",
            "Identify the names of sponsors for players whose homes are in either \"Brandon\" or \"Birtle\"."
        ],
        "ref_sql": "SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\"",
        "MQL": "db.player.find({\n  $or: [\n    { \"Residence\": \"Brandon\" },\n    { \"Residence\": \"Birtle\" }\n  ]\n}, { \"Sponsor_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1031,
        "db_id": "roller_coaster",
        "nl_queries": [
            "Show the names of countries and the average speed of roller coasters from each country.",
            "Provide a list of countries along with the average speeds of their roller coasters.",
            "What are the names of the countries and the average roller coaster speeds for each?",
            "Display the average speed of roller coasters per country, including the names of those countries.",
            "Can you show the country names together with the corresponding average speeds of roller coasters found in each?"
        ],
        "ref_sql": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $group: {\n      _id: \"$Name\",\n      avg_roller_coaster_Speed: { $avg: { $convert: { input: \"$roller_coaster.Speed\", to: \"double\", onError: 0, onNull: 0 } } }\n    }\n  },\n  { $project: {\n      _id: 0,\n      Name: \"$_id\",\n      \"avg_roller_coaster_Speed\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3129,
        "db_id": "document_management",
        "nl_queries": [
            "Find all the name of documents without any sections.",
            "What are the names of documents that do not have any sections?",
            "List the names of documents that do not contain any sections.",
            "Retrieve all document names that lack sections.",
            "What are the titles of documents that have no sections associated with them?"
        ],
        "ref_sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: {\n      path: \"$Documents\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { \"Documents.Document_Sections\": { $exists: false } },\n        { \"Documents.Document_Sections\": { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      document_name: \"$Documents.document_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3800,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show all distinct product categories along with the number of mailshots in each category.",
            "List all unique product categories and indicate how many mailshots belong to each one.",
            "Provide a summary of distinct product categories along with their corresponding mailshot counts.",
            "Retrieve all different product categories along with the total number of mailshots for each category.",
            "Display the unique product categories with the count of mailshots found in each category."
        ],
        "ref_sql": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "MQL": "db.Mailshot_Campaigns.aggregate([\n  {\n    $group: {\n      _id: \"$product_category\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      product_category: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2639,
        "db_id": "club_1",
        "nl_queries": [
            "How many members of club \"Bootup Baltimore\" are younger than 18?",
            "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.",
            "What is the total number of students under 18 in the \"Bootup Baltimore\" club?",
            "How many individuals in the \"Bootup Baltimore\" club are less than 18 years old?",
            "Determine the number of club members in \"Bootup Baltimore\" who are younger than 18."
        ],
        "ref_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Bootup Baltimore\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Age\": { $lt: 18 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4213,
        "db_id": "college_2",
        "nl_queries": [
            "List the names of all courses ordered by their titles and credits.",
            "Given the titles of all courses, in order of titles and credits.",
            "Provide a list of all course titles sorted by their names and the corresponding credits.",
            "Retrieve the titles of all courses arranged in ascending order based on their names and credits.",
            "Generate an ordered list of course names, sorted by title and credit hours."
        ],
        "ref_sql": "SELECT title FROM course ORDER BY title , credits",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $project: {\n      title: \"$course.title\",\n      credits: \"$course.credits\"\n    }\n  },\n  {\n    $sort: {\n      title: 1,\n      credits: 1\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 908,
        "db_id": "roller_coaster",
        "nl_queries": [
            "Show the statuses of roller coasters longer than 3300 or higher than 100.",
            "List the statuses of roller coasters that exceed 3300 in length or 100 in height.",
            "Provide the status of roller coasters that are either longer than 3300 units or taller than 100 units.",
            "What are the statuses of roller coasters that are greater than 3300 in length or higher than 100 in height?",
            "Display the statuses for roller coasters with a length of more than 3300 or a height exceeding 100."
        ],
        "ref_sql": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$roller_coaster\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"roller_coaster.Length\": { $gt: 3300 } },\n        { \"roller_coaster.Height\": { $gt: 100 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Status: \"$roller_coaster.Status\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2751,
        "db_id": "college_1",
        "nl_queries": [
            "Find the number of professors in accounting department.",
            "How many professors are in the accounting dept?",
            "How many professors work in the Accounting department?",
            "What is the total number of professors in the Accounting section?",
            "Count the professors affiliated with the Accounting department."
        ],
        "ref_sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\"",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"Accounting\"\n    }\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2287,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show card number, name, and hometown for all members in a descending order of level.",
            "What are the card numbers, names, and hometowns of every member ordered by descending level?",
            "Retrieve the card numbers, names, and hometowns of all members arranged by their level in descending order.",
            "List the card number, name, and hometown for every member sorted from highest to lowest membership level.",
            "What are the card numbers, names, and hometowns of all members, sorted in decreasing order by level?"
        ],
        "ref_sql": "SELECT card_number , name , hometown FROM member ORDER BY LEVEL DESC",
        "MQL": "db.member.aggregate([\n  {\n    $project: {\n      Card_Number: 1,\n      Name: 1,\n      Hometown: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Level: -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2037,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
            "What are the ids, date opened, name, and other details for all accounts?",
            "List the account IDs along with their opening dates, names, and any additional account information for every account.",
            "Provide the IDs, dates of account creation, account names, and other relevant details for all available accounts.",
            "Retrieve the account identification numbers, the dates they were opened, the names, and supplementary information for all accounts."
        ],
        "ref_sql": "SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $project: {\n      account_id: \"$Accounts.account_id\",\n      date_account_opened: \"$Accounts.date_account_opened\",\n      account_name: \"$Accounts.account_name\",\n      other_account_details: \"$Accounts.other_account_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2668,
        "db_id": "debate",
        "nl_queries": [
            "How many debates are there?",
            "What is the total number of debates recorded?",
            "Can you tell me how many debates exist?",
            "How many total debates are there in the system?",
            "Please provide the count of all the debates."
        ],
        "ref_sql": "SELECT count(*) FROM debate",
        "MQL": "db.debate.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3517,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the name and email of the user whose name contains the word ‘Swift’.",
            "Retrieve the names and email addresses of users who have \"Swift\" in their name.",
            "Get the name and email of any user whose name includes the substring 'Swift'.",
            "List the names and emails of users with 'Swift' appearing anywhere in their names.",
            "Find users whose names contain the term 'Swift' and return their name and email information."
        ],
        "ref_sql": "SELECT name , email FROM user_profiles WHERE name LIKE '%Swift%'",
        "MQL": "db.user_profiles.find({\n  \"name\": { $regex: \"Swift\", $options: \"i\" }\n}, { \"name\": 1, \"email\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1149,
        "db_id": "city_record",
        "nl_queries": [
            "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
            "Which cities have lower temperature in March than in Dec and have never served as host cities?",
            "Provide a list of cities where the March temperature is cooler than in December and which have not hosted any events.",
            "Identify cities that experience lower temperatures in March compared to December and have never acted as host cities.",
            "What cities have a March temperature that is less than that of December and have never been designated as host cities?"
        ],
        "ref_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city",
        "MQL": "db.city.aggregate([\n  {\n    $match: {\n      $expr: {\n        $lt: [\"$temperature.Mar\", \"$temperature.Dec\"]\n      },\n      \"hosting_city\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      City: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4262,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What is the mobile phone number of the student named Timmothy Ward ?",
            "Can you provide the cell number for the student named Timmothy Ward?",
            "What mobile number is associated with the student Timmothy Ward?",
            "Please tell me the mobile phone number of Timmothy Ward.",
            "What is Timmothy Ward's mobile contact number?"
        ],
        "ref_sql": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
        "MQL": "db.Addresses.aggregate([\n  {\n    $lookup: {\n      from: \"Students\",\n      localField: \"Students.student_id\",\n      foreignField: \"student_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.first_name\": \"Timmothy\",\n      \"Docs1.last_name\": \"Ward\"\n    }\n  },\n  {\n    $project: {\n      \"Docs1.cell_mobile_number\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2745,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "How many characteristics does the product named \"sesame\" have?",
            "Count the number of characteristics the product 'sesame' has.",
            "What is the total number of characteristics for the product called \"sesame\"?",
            "Can you tell me how many characteristics are associated with the product \"sesame\"?",
            "How many attributes does the product named \"sesame\" possess?"
        ],
        "ref_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"sesame\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: {\n        $size: \"$Products.Product_Characteristics\"\n      }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2660,
        "db_id": "student_assessment",
        "nl_queries": [
            "How many courses do the student whose id is 171 attend?",
            "How many courses does the student with id 171 actually attend?",
            "What is the total number of courses attended by the student identified as 171?",
            "Can you tell me how many courses the student with ID 171 has participated in?",
            "How many classes does the student (ID 171) actually attend?"
        ],
        "ref_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $match: {\n      \"Students.student_id\": 171\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Students.Student_Course_Registrations.Student_Course_Attendance\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2315,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show the city and the number of branches opened before 2010 for each city.",
            "For each city, how many branches opened before 2010?",
            "List the number of branches that were established in each city before the year 2010.",
            "Can you provide the count of branches opened in cities prior to 2010?",
            "How many branches were launched in each city before 2010?"
        ],
        "ref_sql": "SELECT city , count(*) FROM branch WHERE open_year < 2010 GROUP BY city",
        "MQL": "db.branch.aggregate([\n  {\n    $match: {\n      Open_year: { $lt: \"2010\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$City\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      City: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2583,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "How many templates have template type code CV?",
            "Count the number of templates of the type CV.",
            "What is the total number of templates that fall under the CV type code?",
            "How many templates are classified with the template type code CV?",
            "Determine the count of templates that are designated as type CV."
        ],
        "ref_sql": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $match: {\n      \"Templates.Template_Type_Code\": \"CV\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3024,
        "db_id": "driving_school",
        "nl_queries": [
            "Which customer status code has least number of customers?",
            "What is the status code with the least number of customers?",
            "What is the customer status code that has the fewest customers?",
            "Identify the customer status code with the lowest customer count.",
            "Which status code corresponds to the smallest number of customers?"
        ],
        "ref_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $group: {\n      _id: \"$Customers.customer_status_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      customer_status_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1180,
        "db_id": "college_1",
        "nl_queries": [
            "What is the code of the course which the student whose last name is Smithson took?",
            "What are the course codes for every class that the student with the last name Smithson took?",
            "Can you provide the course code for the class attended by the student with the last name Smithson?",
            "What course codes are associated with the classes taken by a student named Smithson?",
            "Identify the course code for the course that the student whose surname is Smithson has enrolled in."
        ],
        "ref_sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.STUDENT.STU_LNAME\": \"Smithson\"\n    }\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT.ENROLL\"\n  },\n  {\n    $lookup: {\n      from: \"EMPLOYEE\",\n      let: { class_code: \"$DEPARTMENT.STUDENT.ENROLL.CLASS_CODE\" },\n      pipeline: [\n        { $unwind: \"$DEPARTMENT\" },\n        { $unwind: \"$DEPARTMENT.COURSE\" },\n        { $unwind: \"$DEPARTMENT.COURSE.CLASS\" },\n        { $match: { $expr: { $eq: [\"$DEPARTMENT.COURSE.CLASS.CLASS_CODE\", \"$$class_code\"] } } },\n        { $project: { \"DEPARTMENT.COURSE.CRS_CODE\": 1, _id: 0 } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      CRS_CODE: \"$Docs1.DEPARTMENT.COURSE.CRS_CODE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2603,
        "db_id": "hospital_1",
        "nl_queries": [
            "How many appointments are there?",
            "Count how many appointments have been made in total.",
            "What is the total number of appointments scheduled?",
            "Can you tell me how many appointments have been recorded?",
            "How many total appointments exist in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM appointment",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Appointment\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 961,
        "db_id": "railway",
        "nl_queries": [
            "Show the builder of railways associated with the trains named \"Andaman Exp\".",
            "Retrieve the builder for the railways that include trains called \"Andaman Exp\".",
            "What is the name of the builder associated with the railway for the train titled \"Andaman Exp\"?",
            "Find out the builder of the railway linked to the train named \"Andaman Exp\".",
            "Identify the builder of railways that are connected to the train known as \"Andaman Exp\"."
        ],
        "ref_sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = \"Andaman Exp\"",
        "MQL": "db.railway.find({\n  \"train.Name\": \"Andaman Exp\"\n}, { \"Builder\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2476,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many colleges in total?",
            "How many different colleges are there?",
            "What is the total number of colleges available?",
            "Can you tell me the count of all the colleges?",
            "How many colleges are listed in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM College",
        "MQL": "db.College.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2320,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the city with post code 255.",
            "Which city is post code 255 located in?",
            "Identify the city that has the postal code of 255.",
            "What city corresponds to the zip code 255?",
            "Which city is associated with postcode 255?"
        ],
        "ref_sql": "SELECT city FROM addresses WHERE zip_postcode = 255",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: {\n      zip_postcode: \"255\"\n    }\n  },\n  {\n    $project: {\n      city: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2815,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "How many distinct FDA approval statuses are there for the medicines?",
            "How many different FDA approval statuses exist for medicines?",
            "What is the total number of unique FDA approval statuses for medicines?",
            "Can you tell me how many unique FDA approval classifications there are for medications?",
            "How many varied FDA approval statuses are present among the medicines?"
        ],
        "ref_sql": "SELECT count(DISTINCT FDA_approved) FROM medicine",
        "MQL": "db.medicine.aggregate([\n  {\n    $group: {\n      _id: \"$FDA_approved\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_FDA_approved: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_FDA_approved: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 100,
        "db_id": "book_2",
        "nl_queries": [
            "What is the number of distinct publication dates?",
            "How many distinct publication dates are there in our record?",
            "How many unique publication dates are recorded?",
            "What is the total count of different publication dates in the database?",
            "Can you tell me the number of varied publication dates we have?"
        ],
        "ref_sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
        "MQL": "db.book.aggregate([\n  {\n    $unwind: \"$publication\"\n  },\n  {\n    $group: {\n      _id: \"$publication.Publication_Date\"\n    },\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT__DISTINCT_Publication_Date\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT__DISTINCT_Publication_Date\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3531,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name and revenue of the company that earns the highest revenue in each city.",
            "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
            "List the names and revenues of the companies that generate the most income in each city.",
            "What are the highest earning companies' names and their respective revenues for each headquarter location?",
            "Show the company names and their revenues for those firms that have the highest earnings in every city."
        ],
        "ref_sql": "SELECT name , max(revenue) , Headquarter FROM manufacturers GROUP BY Headquarter",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $group: {\n      _id: \"$Headquarter\",\n      max_revenue: { $max: \"$Revenue\" },\n      highest_revenue_company: { $first: \"$Name\" }\n    }\n  },\n  {\n    $project: {\n      Name: \"$highest_revenue_company\",\n      max_revenue: 1,\n      Headquarter: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3873,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the description for role name \"Proof Reader\".",
            "What is the description of the role named \"Proof Reader\"?",
            "What does the role \"Proof Reader\" entail in terms of description?",
            "Can you provide the role description for \"Proof Reader\"?",
            "Give me the details about the job description for the \"Proof Reader\" role."
        ],
        "ref_sql": "SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\"",
        "MQL": "db.Roles.find(\n  { Role_Name: \"Proof Reader\" },\n  { Role_Description: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 4006,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What is the total amount of grants given by each organisations? Also list the organisation id.",
            "What is the total amount of grant money given to each organization and what is its id?",
            "How much grant funding has been allocated to each organization, and can you provide their IDs?",
            "What is the total sum of grants received by each organization along with their respective IDs?",
            "Could you detail the total grant amounts for each organization and include the organization identification number?"
        ],
        "ref_sql": "SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Grants\"\n  },\n  {\n    $group: {\n      _id: \"$Organisations.organisation_id\",\n      sum_grant_amount: {\n        $sum: \"$Organisations.Grants.grant_amount\"\n      }\n    }\n  },\n  {\n    $project: {\n      organisation_id: \"$_id\",\n      sum_grant_amount: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1155,
        "db_id": "riding_club",
        "nl_queries": [
            "How many gold medals has the club with the most coaches won?",
            "What is the total number of gold medals earned by the club with the largest coaching staff?",
            "How many gold medals does the club that has the most coaches possess?",
            "Find out the number of gold medals won by the club which employs the highest number of coaches.",
            "Can you tell me how many gold medals the club with the greatest number of coaches has achieved?"
        ],
        "ref_sql": "SELECT T1.club_id , T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.club.aggregate([\n  \n  { $unwind: \"$coach\" },\n  \n  \n  { $group: {\n      _id: \"$Club_ID\",\n      numCoaches: { $sum: 1 }\n  }},\n  \n  \n  { $sort: { numCoaches: -1 }},\n  \n  \n  { $limit: 1 },\n  \n  \n  { $lookup: {\n      from: \"club\",\n      localField: \"_id\",\n      foreignField: \"Club_ID\",\n      as: \"Docs1\"\n  }},\n  \n  \n  { $unwind: \"$Docs1\" },\n  { $unwind: \"$Docs1.match_result\" },\n  \n  \n  { $project: {\n      _id: 0,\n      Club_ID: \"$_id\",\n      Gold: \"$Docs1.match_result.Gold\"\n  }}\n]);\n"
    },
    {
        "record_id": 274,
        "db_id": "music_1",
        "nl_queries": [
            "List the file size and format for all songs that have resolution lower than 800.",
            "What are the file sizes and formats for all songs with a resolution lower than 800?",
            "Provide the file sizes and formats of all songs that feature a resolution of less than 800.",
            "Show me the file sizes and formats for songs with a resolution under 800.",
            "Can you list the formats and file sizes for all songs that have a resolution below 800?"
        ],
        "ref_sql": "SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $unwind: \"$artist.files.song\"\n  },\n  {\n    $match: {\n      \"artist.files.song.resolution\": {\n        $lt: 800\n      }\n    }\n  },\n  {\n    $project: {\n      file_size: \"$artist.files.file_size\",\n      formats: \"$artist.files.formats\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2242,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the average weight for each pet type.",
            "What is the average weight for each type of pet?",
            "What is the average weight associated with each type of pet?",
            "Calculate the mean weight for all pet types.",
            "Determine the average weight for various categories of pets."
        ],
        "ref_sql": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "MQL": "db.Pets.aggregate([\n  {\n    $group: {\n      _id: \"$PetType\",\n      avg_weight: { $avg: \"$weight\" }\n    }\n  },\n  {\n    $project: {\n      PetType: \"$_id\",\n      avg_weight: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3519,
        "db_id": "twitter_1",
        "nl_queries": [
            "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
            "Show the names of users along with their follower counts, ordered by the number of followers in descending order.",
            "Retrieve and display each user’s name and their follower total, sorted from the highest number of followers to the lowest.",
            "Provide a list of user names and their respective follower counts, arranging the entries in descending order based on follower numbers.",
            "Display user names along with the count of their followers, sorted in descending order by the follower count."
        ],
        "ref_sql": "SELECT name , followers FROM user_profiles ORDER BY followers DESC",
        "MQL": "db.user_profiles.find({}, { \"name\": 1, \"followers\": 1, \"_id\": 0 }).sort({ \"followers\": -1 });\n"
    },
    {
        "record_id": 2757,
        "db_id": "race_track",
        "nl_queries": [
            "How many races are there?",
            "Count the number of races.",
            "What is the total count of races?",
            "Determine how many races are currently held.",
            "Please provide the number of races taking place."
        ],
        "ref_sql": "SELECT count(*) FROM race",
        "MQL": "db.track.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: { $size: \"$race\" } }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3545,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name (in ascending order).",
            "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?",
            "Retrieve the names and prices of all products priced at $180 or more, sorted in descending order by price and ascending order by name.",
            "List the names and costs of products that have a price of at least $180, ordered by price in descending and by name in ascending order.",
            "What are the names and prices of products that sell for $180 or above, arranged with the highest prices first and alphabetically by name afterward?"
        ],
        "ref_sql": "SELECT name , price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.Price\": { $gte: 180 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Products.Name\",\n      Price: \"$Products.Price\"\n    }\n  },\n  {\n    $sort: {\n      Price: -1,\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 171,
        "db_id": "perpetrator",
        "nl_queries": [
            "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
            "Can you list the countries of the perpetrators along with the number of perpetrators from each country?",
            "Please provide the countries associated with perpetrators and the total count of perpetrators in those countries.",
            "What countries are linked to perpetrators? Include the count of perpetrators per country.",
            "Show me the different countries where the perpetrators originate and the respective number of perpetrators for each country."
        ],
        "ref_sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country",
        "MQL": "db.people.aggregate([\n  { \n    $unwind: \"$perpetrator\" \n  },\n  {\n    $group: {\n      _id: \"$perpetrator.Country\",\n      \"COUNT\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      \"Country\": \"$_id\",\n      \"COUNT\": \"$COUNT\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4079,
        "db_id": "swimming",
        "nl_queries": [
            "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
            "What is the name and capacity of the stadium that hosted the event titled \"World Junior\"?",
            "Retrieve the name along with the capacity of the stadium where the \"World Junior\" event took place.",
            "Can you provide the stadium's name and its capacity for the event named \"World Junior\"?",
            "List the name and capacity of the stadium that held the \"World Junior\" event."
        ],
        "ref_sql": "SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'",
        "MQL": "db.stadium.find({\n  \"event.Name\": \"World Junior\"\n}, { \"name\": 1, \"Capacity\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1956,
        "db_id": "browser_web",
        "nl_queries": [
            "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
            "What are the names of browsers that support both 'CACHEbox' and 'Fasterfox'?",
            "Retrieve the names of browsers that are compatible with both 'CACHEbox' and 'Fasterfox'.",
            "Provide a list of browser names that work with both 'CACHEbox' and 'Fasterfox' accelerators.",
            "Show me the names of browsers that can operate with both 'CACHEbox' and 'Fasterfox'."
        ],
        "ref_sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
        "MQL": "db.browser.find({\n  \"accelerator_compatible_browser\": {\n    $elemMatch: {\n      \"browser_id\": { $in: [1, 2] }\n    }\n  }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3673,
        "db_id": "scientist_1",
        "nl_queries": [
            "List the names of all scientists sorted in alphabetical order.",
            "What are the names of all the scientists in alphabetical order?",
            "Provide an alphabetical list of all scientist names.",
            "What are the names of scientists arranged in alphabetical order?",
            "Can you show me the names of all scientists sorted from A to Z?"
        ],
        "ref_sql": "SELECT name FROM scientists ORDER BY name",
        "MQL": "db.Scientists.find({}, { Name: 1, _id: 0 }).sort({ Name: 1 });\n"
    },
    {
        "record_id": 106,
        "db_id": "world_1",
        "nl_queries": [
            "How many countries speak both English and Dutch?",
            "What is the number of nations that use English and Dutch?",
            "What is the total count of countries where English and Dutch are both official languages?",
            "How many nations recognize both English and Dutch as their official languages?",
            "Determine the number of countries that have English and Dutch as official languages."
        ],
        "ref_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      $and: [\n        { \"countrylanguage.Language\": \"English\", \"countrylanguage.IsOfficial\": \"T\" },\n        { \"countrylanguage.Language\": \"Dutch\", \"countrylanguage.IsOfficial\": \"T\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1801,
        "db_id": "theme_gallery",
        "nl_queries": [
            "What is the name and country for the artist with most number of exhibitions?",
            "Return the name and country corresponding to the artist who has had the most exhibitions.",
            "Identify the artist with the highest number of exhibitions and provide their name and country.",
            "Who is the artist that has held the most exhibitions? Please state their name and country.",
            "Give the name and country of the artist who has participated in the greatest number of exhibitions."
        ],
        "ref_sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $group: {\n      _id: \"$Artist_ID\",\n      Name: { $first: \"$Name\" },\n      Country: { $first: \"$Country\" },\n      ExhibitionCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      ExhibitionCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      Country: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1905,
        "db_id": "phone_market",
        "nl_queries": [
            "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
            "Provide the names of phones along with their respective market districts, sorted by the market's ranking in increasing order.",
            "List the names of mobile phones and the corresponding districts of the markets they belong to, ordered by the market's rank from lowest to highest.",
            "Display the names of phones together with the districts of the markets they are sold in, arranged by the ranking of the market in ascending fashion.",
            "Fetch the phone names and their associated market districts, sorted in ascending order according to the market rankings."
        ],
        "ref_sql": "SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking",
        "MQL": "db.phone.aggregate([\n  {\n    $lookup: {\n      from: \"market\",\n      localField: \"phone_market.Market_ID\",\n      foreignField: \"Market_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"District\": \"$Docs1.District\",\n      \"Ranking\": \"$Docs1.Ranking\"\n    }\n  },\n  {\n    $sort: {\n      \"Ranking\": 1\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"District\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1429,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the names of the students who are in the position of striker and got a yes tryout decision.",
            "What are the names of all students who successfully tried out for the position of striker?",
            "List the names of players who tried out for the striker position and received a favorable decision.",
            "What are the names of all players accepted for the striker position after their tryouts?",
            "Show the names of those who successfully tried out for the role of striker."
        ],
        "ref_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.pPos\": \"striker\",\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $project: {\n      pName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3697,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the names of users whose emails contain ‘superstar’ or ‘edu’.",
            "List the names of users with email addresses that include the terms 'superstar' or 'edu'.",
            "Retrieve the names of those users whose emails have 'superstar' or 'edu' in them.",
            "Identify the names of individuals whose emails contain the keywords 'superstar' or 'edu'.",
            "Show the names of users whose email addresses feature either 'superstar' or 'edu'."
        ],
        "ref_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "MQL": "db.user_profiles.find({\n  $or: [\n    { \"email\": { $regex: \"superstar\", $options: \"i\" } },\n    { \"email\": { $regex: \"edu\", $options: \"i\" } }\n  ]\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3040,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "When did the first staff for the projects started working?",
            "When did the first staff member start working?",
            "What was the starting date for the first staff member involved in the projects?",
            "When did the earliest project staff begin their work?",
            "At what time did the first employee for the projects start their role?"
        ],
        "ref_sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Project_Staff\"\n  },\n  {\n    $project: {\n      date_from: \"$Organisations.Projects.Project_Staff.date_from\"\n    }\n  },\n  {\n    $sort: {\n      date_from: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      date_from: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3085,
        "db_id": "department_store",
        "nl_queries": [
            "What are the ids of the two department store chains with the largest number of department stores?",
            "Return the ids of the two department store chains with the most department stores.",
            "List the ids of the top two department store chains that have the highest number of stores.",
            "Provide the ids for the two department store chains with the greatest number of department stores.",
            "Identify the ids of the two department store chains that own the most department stores."
        ],
        "ref_sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "MQL": "db.Department_Store_Chain.aggregate([\n  {\n    $unwind: \"$Department_Stores\"\n  },\n  {\n    $group: {\n      _id: \"$dept_store_chain_id\",\n      total_department_stores: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { total_department_stores: -1 }\n  },\n  {\n    $limit: 2\n  },\n  {\n    $project: {\n      dept_store_chain_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3123,
        "db_id": "document_management",
        "nl_queries": [
            "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
            "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
            "What is the title of the document with the highest number of accesses, and how many times has it been accessed?",
            "Identify the document that has been accessed the most frequently and provide its access count.",
            "Can you tell me the name of the most accessed document along with its total access count?"
        ],
        "ref_sql": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.document_code\",\n      document_name: { $first: \"$Documents.document_name\" },\n      sum_access_count: { $sum: \"$Documents.access_count\" }\n    }\n  },\n  {\n    $sort: { sum_access_count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      document_name: 1,\n      access_count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3347,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the location code with the most documents?",
            "Find the code of the location with the largest number of documents.",
            "Identify the location code that has the highest number of documents associated with it.",
            "Which location code contains the greatest quantity of documents?",
            "What location code is linked to the most documents in the database?"
        ],
        "ref_sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $unwind: \"$All_Documents.Document_Locations\"\n  },\n  {\n    $group: {\n      _id: \"$All_Documents.Document_Locations.Location_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Location_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3000,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show customer ids who don't have an account.",
            "What are the customer ids for customers who do not have an account?",
            "Retrieve the IDs of customers that lack any accounts.",
            "List the customer IDs for those who do not possess an account.",
            "Provide the customer identification numbers for customers without accounts."
        ],
        "ref_sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "MQL": "db.Customers.find(\n  {\n    \"Accounts\": { $size: 0 }\n  },\n  {\n    \"customer_id\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 177,
        "db_id": "railway",
        "nl_queries": [
            "Show the countries that have managers of age above 50 or below 46.",
            "List the countries with managers aged over 50 or under 46.",
            "Identify countries where the managers are either older than 50 or younger than 46.",
            "Find the countries that have managers with an age greater than 50 or less than 46.",
            "Show the countries that employ managers who are either more than 50 years old or less than 46 years old."
        ],
        "ref_sql": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46",
        "MQL": "db.manager.find({\n  $or: [\n    { \"Age\": { $gt: 50 } }, \n    { \"Age\": { $lt: 46 } }  \n  ]\n}, { \"Country\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4188,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all template type codes and descriptions.",
            "What are the type codes and descriptions for all template types?",
            "Retrieve the list of all template type codes along with their descriptions.",
            "Can you provide the type codes and their corresponding descriptions for every template type?",
            "Display all available template type codes together with their descriptions."
        ],
        "ref_sql": "SELECT template_type_code , template_type_description FROM Ref_template_types",
        "MQL": "db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1, _id: 0 });\n"
    },
    {
        "record_id": 3972,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the total order quantities of photo products?",
            "Compute the total order quantities of the product \"photo\".",
            "How many total orders were placed for photo products?",
            "Find the sum of order quantities for the product named \"photo\".",
            "What is the overall quantity of orders for the product \"photo\"?"
        ],
        "ref_sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = \"photo\"",
        "MQL": "db.Products.aggregate([\n  {\n    $match: {\n      Product_Name: \"photo\"\n    }\n  },\n  {\n    $unwind: \"$Order_Items\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Order_Quantity: {\n        $sum: {\n          $toInt: \"$Order_Items.Order_Quantity\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Order_Quantity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 241,
        "db_id": "ship_mission",
        "nl_queries": [
            "Show the distinct fate of missions that involve ships with nationality \"United States\"",
            "What are the different fates of the mission that involved ships from the United States?",
            "List the unique outcomes of missions that feature ships registered under the United States flag.",
            "What unique mission fates can we find for ships that are from the United States?",
            "Identify the various fates of missions associated with American ships."
        ],
        "ref_sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = \"United States\"",
        "MQL": "db.ship.aggregate([\n  {\n    $match: {\n      Nationality: \"United States\"\n    }\n  },\n  {\n    $unwind: \"$mission\"\n  },\n  {\n    $group: {\n      _id: \"$mission.Fate\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Fate: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1026,
        "db_id": "orchestra",
        "nl_queries": [
            "Show the names of conductors and the orchestras they have conducted.",
            "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "List the names of conductors along with the orchestras they have worked with.",
            "Provide the names of conductors and the corresponding orchestras they have led.",
            "Give me the names of conductors and the orchestras they have performed with."
        ],
        "ref_sql": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $project: {\n      Name: 1,\n      Orchestra: \"$orchestra.Orchestra\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1699,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all company names with a movie directed in year 1999.",
            "What are all company names that have a corresponding movie directed in the year 1999?",
            "List the names of all companies associated with movies released in 1999.",
            "Which company names correspond to movies that were released in the year 1999?",
            "Identify all company names linked to films directed in 1999."
        ],
        "ref_sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.year = 1999",
        "MQL": "db.movie.aggregate([\n  {\n    $match: {\n      Year: 1999\n    }\n  },\n  {\n    $unwind: \"$culture_company\"\n  },\n  {\n    $project: {\n      Company_name: \"$culture_company.Company_name\",\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: \"$Company_name\"\n    }\n  },\n  {\n    $project: {\n      Company_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 844,
        "db_id": "solvency_ii",
        "nl_queries": [
            "Show the product type codes that have at least two products.",
            "List the product type codes that consist of two or more products.",
            "Retrieve the product type codes with a minimum of two associated products.",
            "Identify the product type codes that have at least two distinct products.",
            "Find all product type codes that are linked to two or more products."
        ],
        "ref_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$Product_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Product_Type_Code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1998,
        "db_id": "farm",
        "nl_queries": [
            "What are the themes of farm competitions sorted by year in ascending order?",
            "Return the themes of farm competitions, sorted by year ascending.",
            "What themes are associated with farm competitions when sorted by year in ascending order?",
            "List the themes for farm competitions, arranged in ascending order by year.",
            "Provide the themes from farm competitions, sorted by year from earliest to latest."
        ],
        "ref_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$farm_competition\"\n  },\n  {\n    $project: {\n      Theme: \"$farm_competition.Theme\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      \"farm_competition.Year\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1369,
        "db_id": "storm_record",
        "nl_queries": [
            "List the name for storms and the number of affected regions for each storm.",
            "How many regions were affected by each storm?",
            "Provide a list of storms along with the count of regions affected by each one.",
            "What is the total number of regions impacted by each storm?",
            "Show the names of the storms and how many regions were affected for each storm."
        ],
        "ref_sql": "SELECT T1.name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id",
        "MQL": "db.storm.aggregate([\n  {\n    $unwind: \"$affected_region\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3830,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show the product type codes which have at least two products.",
            "List the product types that contain two or more products.",
            "Identify product type codes that have a minimum of two associated products.",
            "Provide the product type codes for which there are at least two products available.",
            "Retrieve the product type codes that are represented by two or more products."
        ],
        "ref_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_type_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3808,
        "db_id": "department_store",
        "nl_queries": [
            "What are id and name of the products whose price is lower than 600 or higher than 900?",
            "Give the ids and names of products with price lower than 600 or higher than 900.",
            "What are the product IDs and names for products priced under 600 or above 900?",
            "List the IDs and names of all products that have a price either below 600 or above 900.",
            "Provide the ID and name of products whose prices are less than 600 or exceed 900."
        ],
        "ref_sql": "SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900",
        "MQL": "db.Products.find({\n  $or: [\n    { product_price: { $lt: 600 } },\n    { product_price: { $gt: 900 } }\n  ]\n}, {\n  product_id: 1,\n  product_name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2339,
        "db_id": "student_1",
        "nl_queries": [
            "For each grade 0 classroom, report the total number of students.",
            "For each grade 0 classroom, return the classroom number and the count of students.",
            "Provide the total number of students for each classroom with grade 0.",
            "List the classroom numbers and student counts for all classrooms at grade level 0.",
            "Show the count of students per classroom for grade 0 classes."
        ],
        "ref_sql": "SELECT classroom , count(*) FROM list WHERE grade = \"0\" GROUP BY classroom",
        "MQL": "db.list.aggregate([\n  {\n    $match: {\n      Grade: 0\n    }\n  },\n  {\n    $group: {\n      _id: \"$Classroom\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Classroom: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 195,
        "db_id": "election",
        "nl_queries": [
            "Show the name of the county with the biggest population.",
            "Which county has the largest population? Give me the name of the county.",
            "Identify the county that has the highest population and provide its name.",
            "What is the name of the county with the most inhabitants?",
            "Please tell me the name of the county that boasts the largest population."
        ],
        "ref_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "MQL": "db.county.aggregate([\n  {\n    $sort: { \"Population\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      County_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 689,
        "db_id": "roller_coaster",
        "nl_queries": [
            "List the names of countries whose language is not \"German\".",
            "Provide the names of countries that do not have \"German\" as one of their languages.",
            "Identify countries where \"German\" is not a spoken language.",
            "Show a list of country names that are not associated with the German language.",
            "Retrieve the names of countries where \"German\" is absent from the list of languages."
        ],
        "ref_sql": "SELECT Name FROM country WHERE Languages != \"German\"",
        "MQL": "db.country.find({ \"Languages\": { $ne: \"German\" } }, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3136,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "List all document type codes and document type names.",
            "What are all the document type codes and document type names?",
            "Provide a list of all document type codes along with their names.",
            "Show me all the document type codes and their corresponding names.",
            "Can you give me the document type codes and names for all document types?"
        ],
        "ref_sql": "SELECT document_type_code , document_type_name FROM Ref_document_types",
        "MQL": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1, _id: 0 })\n"
    },
    {
        "record_id": 1072,
        "db_id": "solvency_ii",
        "nl_queries": [
            "Show the names of products that are in at least two events.",
            "List the names of products that feature in at least two different events.",
            "Provide the names of products linked to two or more events.",
            "What are the names of products that occur in a minimum of two events?",
            "Identify the product names that are present in at least two events."
        ],
        "ref_sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2",
        "MQL": "db.Finances.aggregate([\n  { $unwind: \"$Events\" },\n  { $unwind: \"$Events.Products_in_Events\" },\n  {\n    $group: {\n      _id: \"$Events.Products_in_Events.Product_ID\",\n      eventCount: { $sum: 1 }\n    }\n  },\n  { $match: { eventCount: { $gte: 2 } } },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"_id\",\n      foreignField: \"Product_ID\",\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  { $project: { \"Product_Name\": \"$Docs1.Product_Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1650,
        "db_id": "election",
        "nl_queries": [
            "Show the name of the party that has the most delegates.",
            "Which party has the largest number of delegates?",
            "Identify the party with the highest delegate count.",
            "Which political party holds the most delegates?",
            "Name the party that possesses the greatest number of delegates."
        ],
        "ref_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.county.aggregate([\n  {\n    $lookup: {\n      from: \"party\",\n      localField: \"election.Party\",\n      foreignField: \"Party_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.Party\",\n      delegateCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      delegateCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Party: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3608,
        "db_id": "world_1",
        "nl_queries": [
            "What are the cities whose population is between 160000 and 900000?",
            "Which cities have populations ranging from 160,000 to 900,000?",
            "Identify the cities with a population between 160,000 and 900,000.",
            "List the cities whose populations fall within the range of 160,000 to 900,000.",
            "What cities are there with populations that are at least 160,000 but no more than 900,000?"
        ],
        "ref_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$city\" },\n  { $match: { \"city.Population\": { $gte: 160000, $lte: 900000 } } },\n  { $project: { \"Name\": \"$city.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3355,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the average rating star for each movie that received at least 2 ratings.",
            "For each movie that received more than 3 reviews, what is the average rating?",
            "What is the average star rating for movies that have garnered two or more ratings?",
            "Calculate the average rating for each film that has received over 3 reviews.",
            "Identify the average star score for movies with at least 2 reviews submitted."
        ],
        "ref_sql": "SELECT mID , avg(stars) FROM Rating GROUP BY mID HAVING count(*) >= 2",
        "MQL": "db.Movie.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: \"$mID\",\n      avg_stars: { $avg: \"$Rating.stars\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      mID: \"$_id\",\n      avg_stars: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3402,
        "db_id": "perpetrator",
        "nl_queries": [
            "In which year did the most recent crime happen?",
            "What year saw the latest crime event?",
            "In which year was the most recent crime reported?",
            "Identify the year when the last recorded crime took place.",
            "Which year marks the occurrence of the newest crime?"
        ],
        "ref_sql": "SELECT max(YEAR) FROM perpetrator;",
        "MQL": "db.people.aggregate([\n  { \n    $unwind: \"$perpetrator\" \n  },\n  {\n    $group: {\n      _id: null,\n      max_YEAR: { $max: \"$perpetrator.Year\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_YEAR: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 643,
        "db_id": "world_1",
        "nl_queries": [
            "What are the names and areas of countries with the top 5 largest area?",
            "Return the names and surface areas of the 5 largest countries.",
            "List the names and surface areas of the five countries with the largest land area.",
            "What are the top 5 countries by surface area along with their names and areas?",
            "Provide the names and respective areas of the five largest countries in terms of surface area."
        ],
        "ref_sql": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "MQL": "db.country.aggregate([\n  {\n    $sort: { SurfaceArea: -1 }\n  },\n  {\n    $limit: 5\n  },\n  {\n    $project: {\n      Name: 1,\n      SurfaceArea: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1204,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the names of customers having an order with shipping method FedEx and order status Paid.",
            "List the names of customers who have orders shipped via FedEx and marked as Paid.",
            "Retrieve the customer names for those who have opted for FedEx shipping with their orders labeled as Paid.",
            "Can you provide the names of customers whose orders are shipped through FedEx and are in a Paid status?",
            "Identify customers having orders that utilized FedEx as the shipping method and have a status of Paid."
        ],
        "ref_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE shipping_method_code = 'FedEx' AND order_status_code = 'Paid'",
        "MQL": "db.Customers.find({\n  \"Customer_Orders\": {\n    $elemMatch: {\n      \"shipping_method_code\": \"FedEx\",\n      \"order_status_code\": \"Paid\"\n    }\n  }\n}, { \"customer_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 261,
        "db_id": "student_assessment",
        "nl_queries": [
            "Find distinct cities of address of students?",
            "What are the different cities where students live?",
            "What unique cities are associated with the addresses of students?",
            "List all the distinct cities in which students reside.",
            "Identify the various cities where student addresses are located."
        ],
        "ref_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$People_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"People_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.city\"\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3792,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "List all the log ids and their descriptions from the problem logs.",
            "What are the log id and entry description of each problem?",
            "Provide a list of all problem log IDs along with their corresponding descriptions.",
            "Show me the log IDs and their entry descriptions for each recorded problem.",
            "What log ID and description are associated with every problem in the logs?"
        ],
        "ref_sql": "SELECT problem_log_id , log_entry_description FROM problem_log",
        "MQL": "db.Product.aggregate([\n  { $unwind: \"$Problems\" },\n  { $unwind: \"$Problems.Problem_Log\" },\n  { $project: { problem_log_id: \"$Problems.Problem_Log.problem_log_id\", log_entry_description: \"$Problems.Problem_Log.log_entry_description\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 559,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show all investor details.",
            "Retrieve all details for each investor.",
            "List all the information about investors.",
            "Provide complete investor details.",
            "Give me the details for all investors."
        ],
        "ref_sql": "SELECT Investor_details FROM INVESTORS",
        "MQL": "db.Investors.find({}, { \"Investor_details\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2236,
        "db_id": "train_station",
        "nl_queries": [
            "What is the average and maximum number of total passengers for train stations in London or Glasgow?",
            "Can you provide the average and highest number of passengers at train stations located in London or Glasgow?",
            "What are the average and maximum total passengers for the railway stations in either London or Glasgow?",
            "Please tell me the average and maximum total passenger counts for train stations found in London or Glasgow.",
            "What is the average and largest number of total passengers at train stations in London or Glasgow?"
        ],
        "ref_sql": "SELECT avg(total_passengers) , max(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Location\": \"London\" },\n        { \"Location\": \"Glasgow\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_total_passengers: { $avg: \"$Total_Passengers\" },\n      max_total_passengers: { $max: \"$Total_Passengers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_total_passengers: 1,\n      max_total_passengers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 31,
        "db_id": "candidate_poll",
        "nl_queries": [
            "List all info about all people.",
            "What is all the information about all people?",
            "Provide comprehensive details for all individuals.",
            "Can you show me the complete information regarding every person?",
            "Give me all the details available on each person."
        ],
        "ref_sql": "SELECT * FROM people",
        "MQL": "db.people.find({}, {\n  People_ID: 1,\n  Sex: 1,\n  Name: 1,\n  Date_of_Birth: 1,\n  Height: 1,\n  Weight: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2793,
        "db_id": "train_station",
        "nl_queries": [
            "Show the number of trains",
            "How many trains are present in the database?",
            "Retrieve the total count of trains.",
            "Give me the number of train records available.",
            "What is the total number of trains listed in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM train",
        "MQL": "db.train.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1659,
        "db_id": "match_season",
        "nl_queries": [
            "Show the season, the player, and the name of the country that player belongs to.",
            "For each player, what are their name, season, and country that they belong to?",
            "List the season, player names, and their corresponding country names for each player.",
            "Can you provide the season, names of players, and the countries they represent?",
            "Display each player's season, their name, and the country they are associated with."
        ],
        "ref_sql": "SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $lookup: {\n      from: \"country\",\n      localField: \"match_season.Country\",\n      foreignField: \"Country_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Season: \"$match_season.Season\",\n      Player: \"$match_season.Player\",\n      Country_name: \"$Docs1.Country_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2024,
        "db_id": "book_2",
        "nl_queries": [
            "List the writers of the books in ascending alphabetical order.",
            "Provide a list of authors of the books sorted alphabetically in ascending order.",
            "Retrieve the names of book writers arranged in alphabetical order from A to Z.",
            "Display the writers of the books organized in ascending alphabetical sequence.",
            "Show me the authors of the books sorted by their names in ascending order."
        ],
        "ref_sql": "SELECT Writer FROM book ORDER BY Writer ASC",
        "MQL": "db.book.find({}, { \"Writer\": 1, \"_id\": 0 }).sort({ \"Writer\": 1 });\n"
    },
    {
        "record_id": 3809,
        "db_id": "department_store",
        "nl_queries": [
            "What are the product id and product type of the cheapest product?",
            "Give the id and product type of the product with the lowest price.",
            "Identify the product ID and its type for the least expensive product available.",
            "What is the ID and type of the product that has the lowest cost?",
            "Can you provide the ID and product type of the most affordable product in the store?"
        ],
        "ref_sql": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
        "MQL": "db.Products.aggregate([\n  {\n    $sort: {\n      product_price: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      product_id: 1,\n      product_type_code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 819,
        "db_id": "tvshow",
        "nl_queries": [
            "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "List the pixel aspect ratios and countries of TV channels that are not available in English.",
            "What are the pixel aspect ratio values and nationalities of TV channels that do not feature English content?",
            "Provide the pixel aspect ratios along with the countries for all TV channels that are offered in languages other than English."
        ],
        "ref_sql": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
        "MQL": "db.TV_Channel.find(\n  { Language: { $ne: \"English\" } },\n  { Pixel_aspect_ratio_PAR: 1, Country: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2789,
        "db_id": "workshop_paper",
        "nl_queries": [
            "How many submissions are there?",
            "Count the number of submissions.",
            "What is the total number of submissions recorded?",
            "Could you provide the count of all submissions?",
            "How many entries are there in the submissions collection?"
        ],
        "ref_sql": "SELECT count(*) FROM submission",
        "MQL": "db.submission.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 72,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
            "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
            "What is the settlement value for the claim that has the highest amount claimed? Please provide both the claimed amount and the settlement amount.",
            "Identify the settlement amount corresponding to the claim with the largest amount claimed. Include both the amounts in your response.",
            "Can you tell me the settlement amount for the claim with the highest claim value? Make sure to list both the settlement and claim amounts."
        ],
        "ref_sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $project: {\n      Amount_Claimed: \"$Customer_Policies.Claims.Amount_Claimed\",\n      Amount_Settled: \"$Customer_Policies.Claims.Amount_Settled\"\n    }\n  },\n  {\n    $sort: {\n      Amount_Claimed: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Amount_Claimed: 1,\n      Amount_Settled: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3977,
        "db_id": "perpetrator",
        "nl_queries": [
            "What is the total kills of the perpetrators with height more than 1.84.",
            "What is the total number of kills attributed to perpetrators taller than 1.84 meters?",
            "Can you provide the aggregate count of kills for individuals with a height exceeding 1.84?",
            "How many kills have been committed by perpetrators with a height greater than 1.84?",
            "What is the combined total of kills for those perpetrators who measure more than 1.84 in height?"
        ],
        "ref_sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"Height\": { $gt: 1.84 }\n    }\n  },\n  {\n    $unwind: \"$perpetrator\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Killed: { $sum: \"$perpetrator.Killed\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Killed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 191,
        "db_id": "election",
        "nl_queries": [
            "Show the county name and population of all counties.",
            "What are the name and population of each county?",
            "Provide a list of all counties along with their populations.",
            "Can you display the names and populations for every county?",
            "Retrieve the names and respective populations of all counties."
        ],
        "ref_sql": "SELECT County_name , Population FROM county",
        "MQL": "db.county.find({}, { County_name: 1, Population: 1, _id: 0 })\n"
    },
    {
        "record_id": 749,
        "db_id": "wrestler",
        "nl_queries": [
            "What is the name of the wrestler with the fewest days held?",
            "Return the name of the wrestler who had the lowest number of days held.",
            "Who is the wrestler that has the least number of days held in a title?",
            "Can you provide the name of the wrestler with the shortest title reign?",
            "Identify the wrestler who has held a title for the minimum number of days."
        ],
        "ref_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "MQL": "db.wrestler.aggregate([\n  {\n    $group: {\n      _id: \"$Name\",\n      min_Days_held: { $min: { $toInt: \"$Days_held\" } }\n    }\n  },\n  {\n    $sort: {\n      min_Days_held: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2350,
        "db_id": "club_1",
        "nl_queries": [
            "Find the name of all the clubs at \"AKW\".",
            "Which clubs are located at \"AKW\"? Return the club names.",
            "List all the clubs situated in \"AKW\" and provide their names.",
            "What are the names of the clubs that can be found at \"AKW\"?",
            "Identify the clubs located in \"AKW\" and return their names."
        ],
        "ref_sql": "SELECT clubname FROM club WHERE clublocation = \"AKW\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubLocation: \"AKW\"\n    }\n  },\n  {\n    $project: {\n      ClubName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2642,
        "db_id": "club_1",
        "nl_queries": [
            "How many members does the club \"Tennis Club\" has?",
            "Count the members of the club \"Tennis Club\".",
            "What is the total number of members in the \"Tennis Club\"?",
            "How many students are part of the \"Tennis Club\"?",
            "Please provide the member count for the \"Tennis Club\"."
        ],
        "ref_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Tennis Club\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Member_of_club\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2389,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the number of pets for each student who has any pet and student id.",
            "Calculate how many pets each student has, along with their student IDs.",
            "Get the count of pets for every student who owns at least one pet, including their Student ID.",
            "What is the number of pets owned by each student, along with their respective student IDs?",
            "List each student’s Student ID along with the total number of pets they have."
        ],
        "ref_sql": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$Has_Pet\"\n  },\n  {\n    $group: {\n      _id: \"$StuID\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      StuID: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 688,
        "db_id": "world_1",
        "nl_queries": [
            "What are the names of all the countries that became independent after 1950?",
            "Give the names of the nations that were founded after 1950.",
            "List the names of all countries that achieved independence after the year 1950.",
            "Provide the names of all nations that gained their independence post-1950.",
            "Identify the countries that became independent subsequent to 1950 and state their names."
        ],
        "ref_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
        "MQL": "db.country.find(\n  {\n    IndepYear: { $gt: 1950 }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 360,
        "db_id": "college_2",
        "nl_queries": [
            "Find the buildings which have rooms with capacity more than 50.",
            "What are the distinct buildings with capacities of greater than 50?",
            "List the buildings that have classrooms accommodating more than 50 students.",
            "Identify the unique buildings with room capacities exceeding 50.",
            "Which buildings contain rooms that can hold over 50 individuals?"
        ],
        "ref_sql": "SELECT DISTINCT building FROM classroom WHERE capacity > 50",
        "MQL": "db.classroom.aggregate([\n  {\n    $match: {\n      capacity: { $gt: 50 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$building\"\n    }\n  },\n  {\n    $project: {\n      building: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3536,
        "db_id": "manufacturer",
        "nl_queries": [
            "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
            "List the names and opening years of manufacturers with either fewer than 10 factories or over 10 shops.",
            "Show me the manufacturer names along with their years of establishment for those having less than 10 factories or more than 10 shops.",
            "Provide the names and the years of establishment for manufacturers that operate with fewer than 10 factories or more than 10 retail shops.",
            "What are the names and opening years of manufacturers that have either a small number of factories (less than 10) or a large number of shops (more than 10)?"
        ],
        "ref_sql": "SELECT name , open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10",
        "MQL": "db.manufacturer.find({\n  $or: [\n    { \"Num_of_Factories\": { $lt: 10 } },\n    { \"Num_of_Shops\": { $gt: 10 } }\n  ]\n}, { \"Name\": 1, \"Open_Year\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2525,
        "db_id": "network_1",
        "nl_queries": [
            "How many high schoolers are there in grade 9 or 10?",
            "Count the number of high schoolers in grades 9 or 10.",
            "What is the total number of high school students in the 9th and 10th grades?",
            "How many students are in high school grades 9 or 10?",
            "Determine the count of high schoolers who are either in grade 9 or grade 10."
        ],
        "ref_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $match: {\n      grade: {\n        $in: [9, 10]\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3141,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What document type codes do we have?",
            "Can you provide the list of document type codes available?",
            "What are the different document type codes in the system?",
            "Please show me all the document type codes that exist.",
            "What document type codes can we find in the database?"
        ],
        "ref_sql": "SELECT document_type_code FROM Ref_Document_Types;",
        "MQL": "db.Ref_Document_Types.find({}, { \"document_type_code\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2394,
        "db_id": "tracking_orders",
        "nl_queries": [
            "List the count and id of each product in all the orders.",
            "For each product, return its id and the number of times it was ordered.",
            "Provide the product IDs along with their respective order counts for all products in the orders.",
            "Count and display each product's ID based on the number of times it has been included in orders.",
            "Show the ID of every product and tally the total instances it has appeared in orders."
        ],
        "ref_sql": "SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$Orders.Order_Items.product_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      product_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2017,
        "db_id": "tvshow",
        "nl_queries": [
            "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "Can you tell me the weekly rank of the episode titled \"A Love of a Lifetime\"?",
            "What is the weekly ranking for the TV series episode \"A Love of a Lifetime\"?",
            "How does the episode \"A Love of a Lifetime\" rank weekly in the TV series?"
        ],
        "ref_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$TV_series\"\n  },\n  {\n    $match: {\n      \"TV_series.Episode\": \"A Love of a Lifetime\"\n    }\n  },\n  {\n    $project: {\n      Weekly_Rank: \"$TV_series.Weekly_Rank\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3823,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What are the names of products with category \"Spices\"?",
            "Return the names of products in the category 'Spices'.",
            "List the product names belonging to the \"Spices\" category.",
            "What are the product names categorized under 'Spices'?",
            "Provide the names of products classified as \"Spices\"."
        ],
        "ref_sql": "SELECT product_name FROM products WHERE product_category_code = \"Spices\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $match: {\n      product_category_description: \"Spices\"\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 443,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find the names of customers who either have an deputy policy or uniformed policy.",
            "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.",
            "List the customers who possess an insurance policy that is classified as either \"Deputy\" or \"Uniform.\"",
            "Which customers are enrolled in policies with the type codes \"Deputy\" or \"Uniform\"? Provide their detailed information.",
            "Identify the customers that have a policy type of either \"Deputy\" or \"Uniform\" and return their details."
        ],
        "ref_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\"",
        "MQL": "db.Customers.find({\n  Policies: {\n    $elemMatch: {\n      Policy_Type_Code: {\n        $in: [\"Deputy\", \"Uniform\"]\n      }\n    }\n  }\n}, {\n  Customer_Details: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3190,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
            "What are the event IDs that lack any participants named 'Kenyatta Kuhn'?",
            "List the event IDs where there are no participants with the details 'Kenyatta Kuhn'.",
            "Identify event IDs that do not include any participant identified as 'Kenyatta Kuhn'.",
            "Which event IDs do not feature a participant with the name 'Kenyatta Kuhn'?"
        ],
        "ref_sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'",
        "MQL": "db.Services.aggregate([\n  { $unwind: \"$Events\" },\n  { \n    $lookup: {\n      from: \"Participants\",\n      localField: \"Events.Participants_in_Events.Participant_ID\",\n      foreignField: \"Participant_ID\",\n      as: \"Docs1\"\n    }\n  },\n  { \n    $match: { \n      \"Docs1.Participant_Details\": { $ne: \"Kenyatta Kuhn\" },\n    }\n  },\n  { $group: { _id: \"$Events.Event_ID\" } },\n  { $project: { \"Event_ID\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3922,
        "db_id": "game_1",
        "nl_queries": [
            "Show all sport name and the number of students.",
            "How many students play each sport?",
            "List each sport along with the total number of students participating in it.",
            "What is the student count for every sport available?",
            "Present the names of the sports and the corresponding number of students involved in each."
        ],
        "ref_sql": "SELECT sportname , count(*) FROM Sportsinfo GROUP BY sportname",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: \"$SportsInfo.SportName\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      SportName: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2999,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What is the maximum total amount paid by a customer? List the customer id and amount.",
            "Who is the customer with the highest total payments? Provide their customer ID and the amount paid.",
            "Identify the customer that has paid the most in total. Please share their customer ID and the total payment amount.",
            "Which customer has the largest sum of payments? List their customer ID along with the total amount they have paid.",
            "Find the customer who has made the biggest total payment. Include the customer ID and the total amount they have contributed."
        ],
        "ref_sql": "SELECT customer_id , sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "MQL": "db.Discount_Coupons.aggregate([\n  { $unwind: \"$Customers\" },\n  { $unwind: \"$Customers.Payments\" },\n  {\n    $group: {\n      _id: \"$Customers.customer_id\",\n      sum_amount_paid: { $sum: \"$Customers.Payments.amount_paid\" }\n    }\n  },\n  { $sort: { sum_amount_paid: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      customer_id: \"$_id\",\n      sum_amount_paid: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4013,
        "db_id": "inn_1",
        "nl_queries": [
            "What is the total number of people who could stay in the modern rooms in this inn?",
            "How many people in total can stay in the modern rooms of this inn?",
            "How many guests can be accommodated in the modern rooms at this inn?",
            "What is the total capacity for guests in the rooms that have a modern style?",
            "Please provide the overall number of occupants that modern rooms in this inn can support."
        ],
        "ref_sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor = 'modern';",
        "MQL": "db.Rooms.aggregate([\n  {\n    $match: {\n      decor: \"modern\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_maxOccupancy: {\n        $sum: \"$maxOccupancy\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_maxOccupancy: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2115,
        "db_id": "phone_1",
        "nl_queries": [
            "Find the average ram mib size of the chip models that are never used by any phone.",
            "What is the average RAM size (in MiB) of chip models that are not used by any phones?",
            "Determine the average RAM MiB of chip models that have never been utilized in a phone.",
            "Calculate the mean RAM size of chip models that do not belong to any phone.",
            "Can you find the average MiB of RAM for chip models with no associated phones?"
        ],
        "ref_sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "MQL": "db.chip_model.aggregate([\n  {\n    $match: {\n      \"phone\": { $size: 0 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_RAM_MiB: { $avg: \"$RAM_MiB\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_RAM_MiB: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3099,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find all the catalog publishers whose name contains \"Murray\"",
            "Which catalog publishers have substring \"Murray\" in their names?",
            "List all catalog publishers that have \"Murray\" in their names.",
            "Retrieve the names of catalog publishers containing the substring \"Murray\".",
            "Identify catalog publishers whose names include the term \"Murray\"."
        ],
        "ref_sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "MQL": "db.Catalogs.find(\n  { \"catalog_publisher\": { $regex: \"Murray\", $options: \"i\" } },\n  { \"catalog_publisher\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1493,
        "db_id": "driving_school",
        "nl_queries": [
            "List the states which have between 2 to 4 staffs living there.",
            "What are the names of the states that have 2 to 4 employees living there?",
            "Identify the states that have between 2 and 4 staff members residing in them.",
            "Which states contain 2 to 4 employees living there?",
            "Show me the names of states with a staff count ranging from 2 to 4."
        ],
        "ref_sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $group: {\n      _id: \"$state_province_county\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2, $lte: 4 }\n    }\n  },\n  {\n    $project: {\n      state_province_county: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1400,
        "db_id": "hospital_1",
        "nl_queries": [
            "What are the names of the physician who prescribed the highest dose?",
            "Find the physician who prescribed the highest dose. What is his or her name?",
            "Who is the physician that prescribed the maximum dosage of medication?",
            "Identify the physician with the highest prescription dose. What is their name?",
            "Can you tell me the name of the doctor who provided the highest dose in prescriptions?"
        ],
        "ref_sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Prescribes\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      max_Dose: { $max: \"$Prescribes.Dose\" }\n    }\n  },\n  {\n    $sort: {\n      max_Dose: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 970,
        "db_id": "ship_mission",
        "nl_queries": [
            "Show codes and fates of missions, and names of ships involved.",
            "What are the mission codes, fates, and names of the ships involved?",
            "Display the mission codes and their outcomes along with the names of the ships associated.",
            "List the codes and fates of the missions alongside the corresponding ship names.",
            "What are the names of the ships, together with the codes and fates of their missions?"
        ],
        "ref_sql": "SELECT T1.Code , T1.Fate , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "MQL": "db.ship.aggregate([\n  {\n    $unwind: \"$mission\"\n  },\n  {\n    $project: {\n      Code: \"$mission.Code\",\n      Fate: \"$mission.Fate\",\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1565,
        "db_id": "election",
        "nl_queries": [
            "Which delegates are from counties with population smaller than 100000?",
            "Find the delegates who are from counties with population below 100000.",
            "Who are the delegates representing counties that have fewer than 100,000 residents?",
            "List the delegates from counties that are populated with less than 100,000 people.",
            "Identify the delegates associated with counties whose population is under 100,000."
        ],
        "ref_sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000",
        "MQL": "db.county.aggregate([\n  {\n    $match: {\n      Population: { $lt: 100000 }\n    }\n  },\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $project: {\n      Delegate: \"$election.Delegate\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 919,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the ids of the students who don't participate in any activity.",
            "What are the ids of the students who are not involved in any activity",
            "List the student IDs for those who are not engaged in any activities.",
            "Provide the IDs of students who have no participation in activities.",
            "Retrieve the IDs of students who do not take part in any activities."
        ],
        "ref_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
        "MQL": "db.Student.find({\n  Participates_in: { $size: 0 }\n}, {\n  StuID: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 298,
        "db_id": "bike_1",
        "nl_queries": [
            "Return the unique name for stations that have ever had 7 bikes available.",
            "What are the different names for each station that has ever had 7 bikes available?",
            "List the distinct names of stations that have reached a total of 7 bikes available at any time.",
            "Retrieve the unique station names where there have been instances of 7 bikes being available.",
            "Provide the different names for each station that has had at least 7 bicycles available at some point."
        ],
        "ref_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
        "MQL": "db.station.aggregate([\n  {\n    $project: {\n      _id: 0,\n      name: 1,\n      has_7_bikes_available: {\n        $in: [7, \"$status.bikes_available\"]\n      }\n    }\n  },\n  {\n    $match: {\n      has_7_bikes_available: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2956,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show countries where a singer above age 40 and a singer below 30 are from.",
            "Identify the countries where there are both singers aged over 40 and those under 30.",
            "List the countries that feature both singers younger than 30 and singers older than 40.",
            "Which countries have singers that are both above the age of 40 and below the age of 30?",
            "Show me the countries with singers in both age groups: above 40 and below 30."
        ],
        "ref_sql": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
        "MQL": "db.singer.aggregate([\n  {\n    $facet: {\n      above_40: [\n        { $match: { Age: { $gt: 40 } } },\n        { $group: { _id: \"$Country\" } }\n      ],\n      below_30: [\n        { $match: { Age: { $lt: 30 } } },\n        { $group: { _id: \"$Country\" } }\n      ]\n    }\n  },\n  {\n    $project: {\n      commonCountries: { $setIntersection: [\"$above_40._id\", \"$below_30._id\"] }\n    }\n  },\n  {\n    $unwind: \"$commonCountries\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$commonCountries\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3658,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
            "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
            "List all procedures priced above 1000 that John Wen is not trained to conduct.",
            "Which procedures exceeding a cost of 1000 are not within the expertise of physician John Wen?",
            "Identify the names of procedures that cost more than 1000 and that John Wen has not been trained in."
        ],
        "ref_sql": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
        "MQL": "db.Procedures.aggregate([\n  {\n    $match: {\n      Cost: { $gt: 1000 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"Trained_In.Physician\",\n      foreignField: \"EmployeeID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $not: { $elemMatch: { Name: \"John Wen\" } } }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3523,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
            "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?",
            "Retrieve the names, headquarters, and revenues of manufacturers, organized in order of descending revenue.",
            "List the names, headquarters, and revenue figures of all manufacturers sorted from highest to lowest revenue.",
            "Show me the manufacturer names, their headquarters, and respective revenues, sorted by revenue in descending order."
        ],
        "ref_sql": "SELECT name , headquarter , revenue FROM manufacturers ORDER BY revenue DESC",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      Headquarter: 1,\n      Revenue: 1\n    }\n  },\n  {\n    $sort: {\n      Revenue: -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1412,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the name of the user who gave the highest rating.",
            "Who is the user that submitted the highest rating?",
            "Can you tell me the name of the user with the best review rating?",
            "Identify the user who provided the highest review score.",
            "What is the name of the person who gave the top rating?"
        ],
        "ref_sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1",
        "MQL": "db.useracct.aggregate([\n  { $unwind: \"$review\" },\n  { $sort: { \"review.rating\": -1 } },\n  { $limit: 1 },\n  { $project: { \"name\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2488,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "How many debit cards do we have?",
            "Count the number of customer cards of the type Debit.",
            "What is the total number of debit cards available?",
            "How many customer cards are classified as Debit?",
            "Please provide the count of debit card types issued to customers."
        ],
        "ref_sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code = \"Debit\"",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $match: {\n      card_type_code: \"Debit\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2857,
        "db_id": "inn_1",
        "nl_queries": [
            "How many different types of beds are there?",
            "Find the number of distinct bed types available in this inn.",
            "What is the total number of unique bed types offered?",
            "How many unique types of beds can be found in this inn?",
            "Count the distinct bed types available in the rooms."
        ],
        "ref_sql": "SELECT count(DISTINCT bedType) FROM Rooms;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_bedType: { $addToSet: \"$bedType\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_bedType: { $size: \"$count_DISTINCT_bedType\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3962,
        "db_id": "world_1",
        "nl_queries": [
            "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "Which continents have an average life expectancy under 72, and what are their total populations and average life expectancies?",
            "List the continents with an average life expectancy of less than 72, including their total population and average life expectancy.",
            "Identify the continents where the average life expectancy is below 72 years along with their total population and average life expectancy figures."
        ],
        "ref_sql": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "MQL": "db.country.aggregate([\n  {\n    $group: {\n      _id: \"$Continent\",\n      sum_Population: { $sum: \"$Population\" },\n      avg_LifeExpectancy: { $avg: \"$LifeExpectancy\" }\n    }\n  },\n  {\n    $match: {\n      avg_LifeExpectancy: { $lt: 72 }\n    }\n  },\n  {\n    $project: {\n      sum_Population: 1,\n      avg_LifeExpectancy: 1,\n      Continent: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2786,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of female students (with F sex) living in Smith Hall",
            "How many female students live in Smith Hall?",
            "How many women are currently living in Smith Hall?",
            "Count the number of female residents in Smith Hall.",
            "What is the total number of female students residing in Smith Hall?"
        ],
        "ref_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      dorm_name: \"Smith Hall\"\n    }\n  },\n  {\n    $unwind: \"$Lives_in\"\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"Lives_in.stuid\",\n      foreignField: \"StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Sex\": \"F\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3095,
        "db_id": "chinook_1",
        "nl_queries": [
            "What are the distinct billing countries of the invoices?",
            "Find the different billing countries for all invoices.",
            "List the unique billing countries of the invoices.",
            "Identify all the different billing countries associated with invoices.",
            "What are the various billing countries found in the invoices?"
        ],
        "ref_sql": "SELECT distinct(BillingCountry) FROM INVOICE",
        "MQL": "db.Employee.aggregate([\n  { $unwind: \"$Customer\" },\n  { $unwind: \"$Customer.Invoice\" },\n  {\n    $group: {\n      _id: \"$Customer.Invoice.BillingCountry\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      BillingCountry: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3244,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the first and last name of students who are not in the largest major.",
            "What is the first and last name of the students who are not in the largest major?",
            "List the first and last names of students who are not part of the predominant major.",
            "Identify students whose majors are not the largest, and provide their first and last names.",
            "Who are the students that do not belong to the largest major, and what are their first and last names?"
        ],
        "ref_sql": "SELECT fname , lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_major: { $max: \"$Major\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      let: { max_major: \"$max_major\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $ne: [\"$max_major\", \"$$max_major\"] }\n          }\n        },\n        {\n          $project: {\n            Fname: 1,\n            LName: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 2777,
        "db_id": "concert_singer",
        "nl_queries": [
            "How many singers do we have?",
            "What is the total number of singers?",
            "How many singers are there?",
            "What is the count of singers?",
            "What is the total count of singers in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM singer",
        "MQL": "db.singer.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 976,
        "db_id": "car_1",
        "nl_queries": [
            "How many car makers are there in each continents? List the continent name and the count.",
            "What is the name of each continent and how many car makers are there in each one?",
            "Can you provide the count of car manufacturers for each continent along with their names?",
            "What are the names of all continents, and how many automobile makers are located in each?",
            "List the continents and indicate the number of car makers available in each one."
        ],
        "ref_sql": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $group: {\n      _id: \"$Continent\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Continent: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2309,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How much does each charge type costs? List both charge type and amount.",
            "List each charge type and its amount.",
            "Provide a list of charge types along with their corresponding amounts.",
            "What are the amounts for each type of charge? Show both the charge type and the amount.",
            "Display each charge type and its associated charge amount."
        ],
        "ref_sql": "SELECT charge_type , charge_amount FROM Charges",
        "MQL": "db.Charges.find({}, { charge_type: 1, charge_amount: 1, _id: 0 });\n"
    },
    {
        "record_id": 62,
        "db_id": "tvshow",
        "nl_queries": [
            "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "When did the episode \"A Love of a Lifetime\" air?",
            "What date did the episode \"A Love of a Lifetime\" air?",
            "Can you tell me the air date for the TV series episode titled \"A Love of a Lifetime\"?",
            "When was the episode \"A Love of a Lifetime\" broadcast?"
        ],
        "ref_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$TV_series\"\n  },\n  {\n    $match: {\n      \"TV_series.Episode\": \"A Love of a Lifetime\"\n    }\n  },\n  {\n    $project: {\n      Air_Date: \"$TV_series.Air_Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1537,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the name of the item with the lowest average rating.",
            "What is the title of the item that has the lowest average rating?",
            "Retrieve the name of the item with the least average rating.",
            "Identify the item that holds the lowest average rating and provide its title.",
            "Show me the title of the item with the minimum average rating."
        ],
        "ref_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
        "MQL": "db.item.aggregate([\n  \n  { $unwind: \"$review\" },\n  \n  \n  {\n    $group: {\n      _id: \"$i_id\",\n      averageRating: { $avg: \"$review.rating\" }\n    }\n  },\n  \n  \n  { $sort: { averageRating: 1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  {\n    $lookup: {\n      from: \"item\",\n      localField: \"_id\",\n      foreignField: \"i_id\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      title: { $arrayElemAt: [\"$Docs1.title\", 0] }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 194,
        "db_id": "election",
        "nl_queries": [
            "Show the 3 counties with the smallest population.",
            "What are the 3 counties that have the smallest population? Give me the county names.",
            "List the three counties that have the lowest population numbers.",
            "Which three counties are the least populated? Please provide their names.",
            "Identify the three counties with the smallest number of inhabitants."
        ],
        "ref_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
        "MQL": "db.county.aggregate([\n  {\n    $sort: { Population: 1 }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      County_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3620,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "List the name of enzymes in descending lexicographical order.",
            "What are the names of enzymes in descending order?",
            "Provide the names of enzymes sorted from Z to A.",
            "Show the enzyme names in reverse alphabetical order.",
            "Retrieve the names of enzymes listed in descending alphabetical order."
        ],
        "ref_sql": "SELECT name FROM enzyme ORDER BY name DESC",
        "MQL": "db.enzyme.find({}, { _id: 0, name: 1 }).sort({ name: -1 });\n"
    },
    {
        "record_id": 879,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the id and name of the most expensive base price room.",
            "Which room has the highest base price?",
            "Retrieve the RoomId and room name for the room with the highest base price.",
            "What is the name and ID of the room that has the highest base price?",
            "Identify the room with the most expensive base price and provide its ID and name."
        ],
        "ref_sql": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $sort: { basePrice: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      RoomId: 1,\n      roomName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4241,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "Show the details of all trucks in the order of their license number.",
            "List all truck details sorted by their license numbers.",
            "Retrieve the information of every truck in ascending order based on their license plate numbers.",
            "Display all trucks along with their details, arranged according to their license numbers.",
            "Provide the details of all trucks, ordered by the license number."
        ],
        "ref_sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "MQL": "db.Trucks.find({}, { \"truck_details\": 1, \"_id\": 0 }).sort({ \"truck_licence_number\": 1 });\n"
    },
    {
        "record_id": 1427,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name and college of students whose decisions are yes in the tryout.",
            "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
            "List the names and colleges of players who have a positive decision in their tryouts.",
            "Provide the names of players accepted during the tryouts along with the colleges they are associated with.",
            "What are the names of players approved after the tryout, and which colleges do they represent?"
        ],
        "ref_sql": "SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"College\",\n      localField: \"Tryout.cName\",\n      foreignField: \"cName\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      pName: 1,\n      cName: \"$Docs1.cName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 964,
        "db_id": "flight_2",
        "nl_queries": [
            "Which city has most number of arriving flights?",
            "Which city has the most frequent destination airport?",
            "Which city experiences the highest volume of incoming flights?",
            "What city serves as the primary destination for the most flights?",
            "Identify the city that has the greatest number of flights arriving."
        ],
        "ref_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.airports.aggregate([\n  {\n    $unwind: \"$flights\"\n  },\n  {\n    $group: {\n      _id: \"$City\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      City: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3279,
        "db_id": "game_1",
        "nl_queries": [
            "What is the type of video game Call of Destiny.",
            "What type of game is Call of Destiny?",
            "Can you tell me what category the video game Call of Destiny falls into?",
            "What classification does the game Call of Destiny belong to?",
            "What genre is the video game Call of Destiny?"
        ],
        "ref_sql": "SELECT gtype FROM Video_games WHERE gname = \"Call of Destiny\"",
        "MQL": "db.Video_Games.find(\n  { \"GName\": \"Call of Destiny\" },\n  { \"GType\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 799,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "What are all the the participant ids, type code and details?",
            "Can you provide the participant IDs along with their type codes and details?",
            "What participant identifiers, type codes, and details are available?",
            "Please list all the participant IDs, type codes, and their corresponding details.",
            "What are the IDs, type codes, and details for all participants?"
        ],
        "ref_sql": "SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants",
        "MQL": "db.Participants.find({}, {\n  \"Participant_ID\": 1,\n  \"Participant_Type_Code\": 1,\n  \"Participant_Details\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 2866,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the number of distinct cities the stations are located at?",
            "How many different cities have these stations?",
            "How many unique cities are represented by the bike stations?",
            "What is the total number of different cities with bike stations?",
            "Can you tell me the count of distinct cities where the stations are found?"
        ],
        "ref_sql": "SELECT count(DISTINCT city) FROM station",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$city\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_city: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_city: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1061,
        "db_id": "poker_player",
        "nl_queries": [
            "What are the names of poker players whose earnings is higher than 300000?",
            "Give the names of poker players who have earnings above 300000.",
            "List the names of poker players with earnings over 300000.",
            "Show the names of poker players whose income exceeds 300000.",
            "Provide the names of poker players that have earned more than 300000."
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
        "MQL": "db.people.find(\n  {\n    \"poker_player.Earnings\": { $gt: 300000 }\n  },\n  {\n    \"Name\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 2278,
        "db_id": "csu_1",
        "nl_queries": [
            "Which campus was opened between 1935 and 1939?",
            "What campuses opened between 1935 and 1939?",
            "Which campuses were established between the years 1935 and 1939?",
            "List the campuses that were founded from 1935 to 1939.",
            "Can you tell me what campuses were initiated during the period of 1935 to 1939?"
        ],
        "ref_sql": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
        "MQL": "db.Campuses.find({\n  Year: {\n    $gte: 1935,\n    $lte: 1939\n  }\n}, {\n  Campus: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3927,
        "db_id": "bike_1",
        "nl_queries": [
            "Find the ids and names of stations from which at least 200 trips started.",
            "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
            "List the station IDs and names for all stations where 200 or more trips have commenced.",
            "Provide the IDs and names of any stations that served as the starting point for at least 200 trips.",
            "Identify the IDs and names of stations that have seen at least 200 trips begin from them."
        ],
        "ref_sql": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
        "MQL": "db.trip.aggregate([\n  {\n    $group: {\n      _id: {\n        start_station_id: \"$start_station_id\",\n        start_station_name: \"$start_station_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 200 }\n    }\n  },\n  {\n    $project: {\n      start_station_id: \"$_id.start_station_id\",\n      start_station_name: \"$_id.start_station_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2656,
        "db_id": "election",
        "nl_queries": [
            "How many counties are there in total?",
            "Count the total number of counties.",
            "What is the total count of counties in the dataset?",
            "Please provide the number of counties currently recorded.",
            "Can you tell me how many counties exist in the collection?"
        ],
        "ref_sql": "SELECT count(*) FROM county",
        "MQL": "db.county.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1822,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the name of scientists who are assigned to some project.",
            "What are the names of scientists who are assigned to any project?",
            "List the names of scientists who are currently working on any project.",
            "What names are associated with scientists assigned to projects?",
            "Identify the scientists who have been assigned to at least one project and provide their names."
        ],
        "ref_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn",
        "MQL": "db.Scientists.find({\n  AssignedTo: {\n    $exists: true,\n    $not: {\n      $size: 0\n    }\n  }\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2179,
        "db_id": "swimming",
        "nl_queries": [
            "What is the average capacity of the stadiums that were opened in year 2005?",
            "What is the mean capacity for stadiums that opened in the year 2005?",
            "Can you tell me the average stadium capacity for those established in 2005?",
            "Determine the average capacity of stadiums built in 2005.",
            "How much is the average capacity of stadiums that were inaugurated in the year 2005?"
        ],
        "ref_sql": "SELECT avg(capacity) FROM stadium WHERE opening_year = 2005",
        "MQL": "db.stadium.aggregate([\n  {\n    $match: {\n      \"Opening_year\": 2005\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_capacity: {\n        $avg: \"$Capacity\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_capacity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 80,
        "db_id": "workshop_paper",
        "nl_queries": [
            "Show the names of authors from college \"Florida\" or \"Temple\"",
            "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
            "List the authors who submitted works from Florida or Temple colleges.",
            "Who are the authors associated with submissions from either Florida or Temple universities?",
            "Provide the names of authors that have submissions coming from \"Florida\" or \"Temple\"."
        ],
        "ref_sql": "SELECT Author FROM submission WHERE College = \"Florida\" OR College = \"Temple\"",
        "MQL": "db.submission.find({\n  $or: [\n    { College: \"Florida\" },\n    { College: \"Temple\" }\n  ]\n}, {\n  Author: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1726,
        "db_id": "college_1",
        "nl_queries": [
            "What is the name and the average gpa of department whose students have the highest average gpa?",
            "Which department has the highest average student GPA, and what is the average gpa?",
            "Can you tell me which department has the highest student GPA and what that average GPA is?",
            "Identify the department with the top average GPA for students and provide the average GPA.",
            "What is the name of the department that achieves the highest average GPA among its students, along with the average GPA value?"
        ],
        "ref_sql": "SELECT T2.dept_name , avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_NAME\",\n      avg_STU_GPA: { $avg: \"$DEPARTMENT.STUDENT.STU_GPA\" }\n    }\n  },\n  {\n    $sort: { avg_STU_GPA: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      DEPT_NAME: \"$_id\",\n      avg_STU_GPA: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 936,
        "db_id": "film_rank",
        "nl_queries": [
            "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
            "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
            "List the studios that have worked with both directors Nicholas Meyer and Walter Hill.",
            "Identify the names of studios that produced films featuring both Nicholas Meyer and Walter Hill as directors.",
            "Which studios are known for producing films directed by both Nicholas Meyer and Walter Hill?"
        ],
        "ref_sql": "SELECT Studio FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
        "MQL": "db.film.aggregate([\n  {\n    $match: {\n      $or: [\n        { Director: \"Nicholas Meyer\" },\n        { Director: \"Walter Hill\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Studio\",\n      directors: {\n        $addToSet: \"$Director\"\n      }\n    }\n  },\n  {\n    $match: {\n      directors: {\n        $all: [\"Nicholas Meyer\", \"Walter Hill\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Studio: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3932,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the state which has the most number of customers.",
            "Which state has the greatest total number of bank customers?",
            "Identify the state that has the highest number of bank customers.",
            "Which state boasts the largest customer count at the bank?",
            "Determine the state with the most bank customers overall."
        ],
        "ref_sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "MQL": "db.bank.aggregate([\n  {\n    $group: {\n      _id: \"$state\",\n      total_customers: { $sum: \"$no_of_customers\" }\n    }\n  },\n  {\n    $sort: {\n      total_customers: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      state: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1627,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
            "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
            "Can you tell me the name of the tourist attraction linked to the photo named \"game1\"?",
            "What is the name of the tourist attraction that features the photo titled \"game1\"?",
            "Identify the tourist attraction associated with the image called \"game1\" and provide its name."
        ],
        "ref_sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\"",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Photos\"\n  },\n  {\n    $match: {\n      \"Tourist_Attractions.Photos.Name\": \"game1\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Tourist_Attractions.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2206,
        "db_id": "museum_visit",
        "nl_queries": [
            "Find the average number of staff working for the museums that were open before 2009.",
            "What is the average staff size in museums that were established before the year 2009?",
            "Calculate the mean number of employees across museums that opened before 2009.",
            "Determine the average number of staff members in museums that started their operations prior to 2009.",
            "Find out the average staff count for museums that have been open since before 2009."
        ],
        "ref_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009",
        "MQL": "db.museum.aggregate([\n  {\n    $match: {\n      \"Open_Year\": { $lt: \"2009\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_num_of_staff: { $avg: \"$Num_of_Staff\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_num_of_staff: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1222,
        "db_id": "tracking_orders",
        "nl_queries": [
            "When was the order placed whose shipment tracking number is 3452? Give me the date.",
            "On which day was the order placed whose shipment tracking number is 3452?",
            "What is the date on which the order associated with the tracking number 3452 was placed?",
            "Can you tell me when the order linked to the shipment tracking number 3452 was made?",
            "Please provide the order placement date for the shipment that has a tracking number of 3452."
        ],
        "ref_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Shipments\"\n  },\n  {\n    $match: {\n      \"Orders.Shipments.shipment_tracking_number\": \"3452\"\n    }\n  },\n  {\n    $project: {\n      date_order_placed: \"$Orders.date_order_placed\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 364,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show all card type codes.",
            "What are the different card type codes?",
            "List all unique card type codes available.",
            "What types of card codes can be found?",
            "Provide all distinct codes for card types."
        ],
        "ref_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: \"$card_type_code\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      card_type_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3361,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the major and age of students who do not have a cat pet.",
            "What major is every student who does not own a cat as a pet, and also how old are they?",
            "List the major and age of all students without a pet cat.",
            "What are the majors and ages of students who don't own cats as pets?",
            "Identify the major and age of each student who does not have a cat pet."
        ],
        "ref_sql": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.PetType\": { $ne: \"cat\" }\n    }\n  },\n  {\n    $project: {\n      Major: \"$Major\",\n      Age: \"$Age\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3495,
        "db_id": "department_management",
        "nl_queries": [
            "List the name, born state and age of the heads of departments ordered by age.",
            "Provide a list showing the names, states of birth, and ages of department heads arranged by their age.",
            "Retrieve the names, birth states, and ages of all department heads, sorted in ascending order by age.",
            "Show the names, the states where heads of departments were born, and their respective ages, ordered from youngest to oldest.",
            "Display the names, regions of origin, and ages of department heads, sorted by age in an increasing order."
        ],
        "ref_sql": "SELECT name , born_state , age FROM head ORDER BY age",
        "MQL": "db.head.find({}, { \"name\": 1, \"born_state\": 1, \"age\": 1, \"_id\": 0 }).sort({ \"age\": 1 });\n"
    },
    {
        "record_id": 775,
        "db_id": "museum_visit",
        "nl_queries": [
            "What are the opening year and staff number of the museum named Plaza Museum?",
            "Can you provide the opening year and the number of staff at the Plaza Museum?",
            "What is the staff count and the year of establishment for the Plaza Museum?",
            "Tell me about the opening year and total staff members of the museum called Plaza Museum.",
            "What are the staff size and the year the Plaza Museum was opened?"
        ],
        "ref_sql": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
        "MQL": "db.museum.find({\n  \"Name\": \"Plaza Museum\"\n}, { \"Num_of_Staff\": 1, \"Open_Year\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3194,
        "db_id": "music_1",
        "nl_queries": [
            "What are the id of songs whose format is mp3.",
            "What are the id of all the files in mp3 format?",
            "List the identifiers of songs that are available in mp3 format.",
            "Can you provide the IDs for all files that are in mp3 format?",
            "What are the identifiers for the files that utilize mp3 as their format?"
        ],
        "ref_sql": "SELECT f_id FROM files WHERE formats = \"mp3\"",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $match: {\n      \"artist.files.formats\": \"mp3\"\n    }\n  },\n  {\n    $project: {\n      f_id: \"$artist.files.f_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 910,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "Show all the Store_Name of drama workshop groups.",
            "What are the store names of drama workshop groups?",
            "List all the store names belonging to drama workshop groups.",
            "Can you provide the names of the stores for the drama workshop groups?",
            "What store names are associated with the drama workshop groups?"
        ],
        "ref_sql": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Drama_Workshop_Groups\"\n  },\n  {\n    $project: {\n      Store_Name: \"$Drama_Workshop_Groups.Store_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1772,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Return the lot details of lots that belong to investors with details \"l\"?",
            "Provide the details of lots owned by investors whose details include the letter \"l\".",
            "Can you show me the lot information for investors that have \"l\" in their details?",
            "List the lot details for those investors whose details contain the character \"l\".",
            "Retrieve the information about lots linked to investors whose details feature the letter \"l\"."
        ],
        "ref_sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\"",
        "MQL": "db.Investors.aggregate([\n  {\n    $match: {\n      \"Investor_details\": { $regex: \"l\", $options: \"i\" }\n    }\n  },\n  {\n    $unwind: \"$Lots\"\n  },\n  {\n    $project: {\n      lot_details: \"$Lots.lot_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4209,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the name of the movie produced after 2000 and directed by James Cameron?",
            "What are the titles of all movies that James Cameron directed after 2000?",
            "Can you provide the title of any movie directed by James Cameron that came out after the year 2000?",
            "List all movie titles that were directed by James Cameron and released after 2000.",
            "What titles can we find for films directed by James Cameron that were produced following 2000?"
        ],
        "ref_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000",
        "MQL": "db.Movie.find({\n  director: \"James Cameron\",\n  year: { $gt: 2000 }\n}, {\n  title: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 567,
        "db_id": "world_1",
        "nl_queries": [
            "Which language is spoken by the largest number of countries?",
            "Give the language that is spoken in the most countries.",
            "What is the language that is represented in the greatest number of countries?",
            "Identify the language with the widest geographical distribution among countries.",
            "Which language is utilized by the highest count of nations?"
        ],
        "ref_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.Language\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Language: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1733,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the document type name for the document with name \"How to read a book\"?",
            "Find the document type name of the document named \"How to read a book\".",
            "What is the name of the document type for \"How to read a book\"?",
            "Can you tell me the document type associated with the document titled \"How to read a book\"?",
            "Identify the document type name for the document named \"How to read a book\"."
        ],
        "ref_sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = \"How to read a book\"",
        "MQL": "db.Ref_Document_Types.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $match: {\n      \"All_Documents.Document_Name\": \"How to read a book\"\n    }\n  },\n  {\n    $project: {\n      Document_Type_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3247,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the first names of all the authors ordered in alphabetical order.",
            "Sort the first names of all the authors in alphabetical order.",
            "List the first names of all the authors arranged in alphabetical order.",
            "Retrieve all authors' first names sorted alphabetically.",
            "Provide the first names of authors in a sorted list based on alphabetical order."
        ],
        "ref_sql": "SELECT fname FROM authors ORDER BY fname",
        "MQL": "db.Authors.aggregate([\n  {\n    $project: {\n      fname: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      fname: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1652,
        "db_id": "election_representative",
        "nl_queries": [
            "What is the party of the representative that has the smallest number of votes.",
            "Which party does the representative with the least number of votes belong to?",
            "Identify the political party of the representative who received the fewest votes.",
            "What political affiliation does the representative with the smallest vote count have?",
            "Find the party associated with the representative that garnered the lowest number of votes."
        ],
        "ref_sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1",
        "MQL": "db.representative.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $sort: { \"election.Votes\": 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { \"Party\": 1, \"_id\": 0 }\n  }\n]);\n"
    },
    {
        "record_id": 43,
        "db_id": "flight_2",
        "nl_queries": [
            "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "Which abbreviation corresponds to Jetblue Airways?",
            "What abbreviation is used for the airline JetBlue Airways?",
            "Can you tell me the abbreviation associated with JetBlue Airways?",
            "What is the short form of the airline named JetBlue Airways?"
        ],
        "ref_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      \"Airline\": \"JetBlue Airways\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Abbreviation: \"$Abbreviation\"\n    }\n  }\n])\n"
    },
    {
        "record_id": 874,
        "db_id": "riding_club",
        "nl_queries": [
            "Show the residences that have at least two players.",
            "List the residences that have a minimum of two players.",
            "Identify the residences with at least two registered players.",
            "What residences are home to two or more players?",
            "Display the residences where two or more players reside."
        ],
        "ref_sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2",
        "MQL": "db.player.aggregate([\n  {\n    $group: {\n      _id: \"$Residence\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Residence: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2210,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the average and maximum age for each type of pet.",
            "What is the average and maximum age for each pet type?",
            "Please provide the average and maximum ages for each category of pet.",
            "What are the average and maximum ages for pets categorized by type?",
            "Calculate both the average and highest age for every type of pet."
        ],
        "ref_sql": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
        "MQL": "db.Pets.aggregate([\n  {\n    $group: {\n      _id: \"$PetType\",\n      avg_pet_age: { $avg: \"$pet_age\" },\n      max_pet_age: { $max: \"$pet_age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_pet_age: 1,\n      max_pet_age: 1,\n      PetType: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1636,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the names of representatives with more than 10000 votes in election?",
            "Which representatives received more than 10,000 votes in their elections?",
            "List the names of representatives who garnered over 10,000 votes in an election.",
            "Identify the representatives that achieved more than 10,000 votes during elections.",
            "Provide the names of representatives with vote counts exceeding 10,000 in their respective elections."
        ],
        "ref_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
        "MQL": "db.representative.find({\n  \"election.Votes\": { $gt: 10000 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4160,
        "db_id": "club_1",
        "nl_queries": [
            "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
            "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
            "List all students who are members of \"Bootup Baltimore\" and have a major code of \"600\". Provide their first and last names.",
            "Who are the members of \"Bootup Baltimore\" studying under major \"600\"? Please show their first and last names.",
            "Retrieve the first and last names of all members from \"Bootup Baltimore\" whose major is classified as \"600\"."
        ],
        "ref_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Bootup Baltimore\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Major\": 600\n    }\n  },\n  {\n    $project: {\n      Fname: \"$Docs1.Fname\",\n      LName: \"$Docs1.LName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3186,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the name, role code, and date of birth for the employee with name 'Armani'.",
            "What are the name, role code, and date of birth of the employee named 'Armani'?",
            "Provide the employee name, role code, and birth date for the individual named 'Armani'.",
            "Can you tell me the name, role code, and date of birth of the employee called 'Armani'?",
            "What is the employee's name, role code, and date of birth for someone known as 'Armani'?"
        ],
        "ref_sql": "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $match: {\n      \"Employees.Employee_Name\": \"Armani\"\n    }\n  },\n  {\n    $project: {\n      Employee_Name: \"$Employees.Employee_Name\",\n      Role_Code: \"$Employees.Role_Code\",\n      Date_of_Birth: \"$Employees.Date_of_Birth\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2725,
        "db_id": "party_people",
        "nl_queries": [
            "How many party events do we have?",
            "Count the number of party events.",
            "What is the total count of party events?",
            "How many events are there for the parties?",
            "Please provide the number of party events available."
        ],
        "ref_sql": "SELECT count(*) FROM party_events",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $unwind: \"$party.party_events\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1208,
        "db_id": "tracking_orders",
        "nl_queries": [
            "What is the name of the customer who has the largest number of orders?",
            "Find the name of the customer who made the most orders.",
            "Who is the customer with the highest order count?",
            "Identify the customer that placed the most orders.",
            "Which customer has submitted the greatest number of orders?"
        ],
        "ref_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $group: {\n      _id: {\n        customer_id: \"$customer_id\",\n        customer_name: \"$customer_name\"\n      },\n      order_count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { order_count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_name: \"$_id.customer_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3971,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What is the total money requested by entrepreneurs with height more than 1.85?",
            "Give the total money requested by entrepreneurs who are taller than 1.85.",
            "What is the cumulative amount of money requested by entrepreneurs whose height exceeds 1.85 meters?",
            "Can you provide the total amount of money that entrepreneurs over 1.85 meters tall have asked for?",
            "Determine the sum of money requested by entrepreneurs taller than 1.85 meters."
        ],
        "ref_sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      Height: { $gt: 1.85 }\n    }\n  },\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Money_Requested: { $sum: \"$entrepreneur.Money_Requested\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Money_Requested: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2558,
        "db_id": "inn_1",
        "nl_queries": [
            "How many times does ROY SWEAZY has reserved a room.",
            "Find the number of times ROY SWEAZY has reserved a room.",
            "What is the total number of room reservations made by ROY SWEAZY?",
            "How often has ROY SWEAZY booked a room?",
            "Count the number of times a room has been reserved by ROY SWEAZY."
        ],
        "ref_sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";",
        "MQL": "db.Rooms.aggregate([\n  {\n    $match: {\n      \"Reservations.LastName\": \"SWEAZY\",\n      \"Reservations.FirstName\": \"ROY\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3529,
        "db_id": "train_station",
        "nl_queries": [
            "Show the names and main services for train stations that have the top three total number of passengers.",
            "List the names and primary services of the three train stations with the highest total passenger counts.",
            "Provide the names and main services for the top three train stations based on total passenger numbers.",
            "What are the names and major services of the three train stations that have the largest number of passengers?",
            "Retrieve the names and key services for the three train stations that rank highest in total passenger traffic."
        ],
        "ref_sql": "SELECT name , main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "MQL": "db.station.aggregate([\n  {\n    $sort: { \"Total_Passengers\": -1 }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Main_Services\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2205,
        "db_id": "coffee_shop",
        "nl_queries": [
            "What are the average score and average staff number of all shops?",
            "What is the average number of staff and the average score for shops overall?",
            "Can you provide the average staff count and average score of all coffee shops?",
            "Please tell me the average score and average employee number across all shops.",
            "What are the average scores and staff numbers found in all coffee shops?"
        ],
        "ref_sql": "SELECT avg(num_of_staff) , avg(score) FROM shop",
        "MQL": "db.shop.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_num_of_staff: { $avg: { $toInt: \"$Num_of_staff\" } },\n      avg_score: { $avg: \"$Score\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_num_of_staff: 1,\n      avg_score: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1391,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the names of Japanese constructors that have once earned more than 5 points?",
            "What are the names of all the Japanese constructors that have earned more than 5 points?",
            "List the names of constructors from Japan who have achieved more than 5 points.",
            "Provide the names of all Japanese constructors that have scored over 5 points in any race.",
            "What are the names of constructors of Japanese nationality that have once earned in excess of 5 points?"
        ],
        "ref_sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "MQL": "db.constructors.aggregate([\n  {\n    $match: {\n      nationality: \"Japanese\"\n    }\n  },\n  {\n    $unwind: \"$constructorStandings\"\n  },\n  {\n    $match: {\n      \"constructorStandings.points\": { $gt: 5 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$constructorId\",\n      name: { $first: \"$name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3653,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the name of physicians whose position title contains the word 'senior'.",
            "What are the names of the physicians who have 'senior' in their titles.",
            "List the names of physicians with 'senior' in their position titles.",
            "Retrieve the names of all physicians whose job title includes the term 'senior'.",
            "What are the names of physicians that have 'senior' in their position descriptions?"
        ],
        "ref_sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "MQL": "db.Physician.find({\n  \"Position\": {\n    $regex: \"senior\",\n    $options: \"i\" \n  }\n}, {\n  \"Name\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 2915,
        "db_id": "college_1",
        "nl_queries": [
            "how many schools exist in total?",
            "How many schools are there in the department?",
            "What is the total number of distinct schools?",
            "How many unique schools are present within the department?",
            "Can you tell me the count of schools that are present in total?"
        ],
        "ref_sql": "SELECT count(DISTINCT school_code) FROM department",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.SCHOOL_CODE\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_school_code\"\n  }\n]);\n"
    },
    {
        "record_id": 3964,
        "db_id": "world_1",
        "nl_queries": [
            "How many people live in Gelderland district?",
            "What is the total population of Gelderland district?",
            "What is the population count for the Gelderland district?",
            "How many inhabitants are there in the Gelderland district?",
            "Can you tell me the total number of residents living in the Gelderland district?"
        ],
        "ref_sql": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $match: {\n      \"city.District\": \"Gelderland\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Population: {\n        $sum: \"$city.Population\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Population: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1214,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
            "Retrieve the starting and ending dates of behavioral incidents for students named Fahey.",
            "What are the dates of occurrence for behavior incidents involving students with the last name Fahey?",
            "Get the beginning and conclusion dates of behavior incidents for any student whose last name is Fahey.",
            "Show me the start and finish dates for behavior-related incidents of students identified as Fahey."
        ],
        "ref_sql": "SELECT T1.date_incident_start , date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $match: {\n      \"Students.last_name\": \"Fahey\"\n    }\n  },\n  {\n    $unwind: \"$Students.Behavior_Incident\"\n  },\n  {\n    $project: {\n      \"date_incident_start\": \"$Students.Behavior_Incident.date_incident_start\",\n      \"date_incident_end\": \"$Students.Behavior_Incident.date_incident_end\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 670,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "List the name of artworks whose type is not \"Program Talent Show\".",
            "Provide the names of all artworks that are not classified as \"Program Talent Show\".",
            "Show me the titles of artworks that do not fall under the type \"Program Talent Show\".",
            "Retrieve the names of artworks whose type differs from \"Program Talent Show\".",
            "Identify the artworks whose type is anything except \"Program Talent Show\" and list their names."
        ],
        "ref_sql": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
        "MQL": "db.artwork.find({\n  \"Type\": { $ne: \"Program Talent Show\" }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 779,
        "db_id": "riding_club",
        "nl_queries": [
            "Please show the most common occupation of players.",
            "What is the most frequently occurring occupation among the players?",
            "Can you provide the occupation that the highest number of players have?",
            "Identify the occupation that is most prevalent among the players.",
            "What occupation do the majority of players belong to?"
        ],
        "ref_sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.player.aggregate([\n  {\n    $group: {\n      _id: \"$Occupation\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Occupation: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1981,
        "db_id": "film_rank",
        "nl_queries": [
            "What are the types of film market estimations in year 1995?",
            "Return the types of film market estimations in 1995.",
            "Can you list the categories of film market estimations for the year 1995?",
            "What types of film market estimations were recorded in 1995?",
            "Please provide the types of film market estimation for the year 1995."
        ],
        "ref_sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995",
        "MQL": "db.market.aggregate([\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $match: {\n      \"film_market_estimation.Year\": 1995\n    }\n  },\n  {\n    $group: {\n      _id: \"$film_market_estimation.Type\"\n    }\n  },\n  {\n    $project: {\n      Type: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3255,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Who is the founder of Sony?",
            "Return the founder of Sony.",
            "Can you tell me who founded Sony?",
            "What is the name of the founder of Sony?",
            "Please provide the details about who established Sony."
        ],
        "ref_sql": "SELECT founder FROM manufacturers WHERE name = 'Sony'",
        "MQL": "db.Manufacturers.find(\n  { \"Name\": \"Sony\" },\n  { \"Founder\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1148,
        "db_id": "city_record",
        "nl_queries": [
            "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
            "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
            "List the cities where the temperature in February exceeds that of June or that have previously hosted events.",
            "Identify cities with a February temperature higher than in June or those that have acted as host cities in the past.",
            "Show me the cities with February temperatures surpassing those in June or which have been host cities before."
        ],
        "ref_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city",
        "MQL": "db.city.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"temperature.Feb\": { $gt: \"$temperature.Jun\" } },\n        { \"hosting_city\": { $exists: true, $ne: [] } }\n      ]\n    }\n  },\n  {\n    $project: {\n      City: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3236,
        "db_id": "game_1",
        "nl_queries": [
            "Find the first name and age of the students who are playing both Football and Lacrosse.",
            "What are the first names and ages of all students who are playing both Football and Lacrosse?",
            "List the first names and ages of students who participate in both Football and Lacrosse.",
            "What are the ages and first names of all students playing both Football and Lacrosse?",
            "Provide the first names and ages of those students engaged in both Football and Lacrosse activities."
        ],
        "ref_sql": "SELECT fname , age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = \"Lacrosse\")",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $match: {\n      \"SportsInfo.SportName\": { $in: [\"Football\", \"Lacrosse\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$StuID\",\n      Fname: { $first: \"$Fname\" },\n      Age: { $first: \"$Age\" },\n      sports: { $addToSet: \"$SportsInfo.SportName\" }\n    }\n  },\n  {\n    $match: {\n      sports: { $all: [\"Football\", \"Lacrosse\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Fname: 1,\n      Age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3546,
        "db_id": "mountain_photos",
        "nl_queries": [
            "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
            "List the name and prominence of mountains captured with camera lenses that are not from the Sigma brand.",
            "Provide the names and prominence levels of mountains whose photos are not taken using a Sigma lens.",
            "Display the name and prominence for those mountains whose pictures were taken with a camera lens other than Sigma.",
            "Retrieve the names and prominence of mountains associated with any camera lens brand except Sigma."
        ],
        "ref_sql": "SELECT name , prominence FROM mountain EXCEPT SELECT T1.name , T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'",
        "MQL": "db.mountain.aggregate([\n  {\n    $lookup: {\n      from: \"camera_lens\",\n      localField: \"photos.camera_lens_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.brand\": { $ne: \"Sigma\" }\n    }\n  },\n  {\n    $project: {\n      \"name\": 1,\n      \"Prominence\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2967,
        "db_id": "college_2",
        "nl_queries": [
            "Find courses that ran in Fall 2009 or in Spring 2010.",
            "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
            "Retrieve the courses that were available during Fall 2009 or Spring 2010.",
            "Can you provide the course IDs for classes held in the Fall of 2009 or the Spring of 2010?",
            "List the identifiers of courses that took place in either Fall 2009 or Spring 2010."
        ],
        "ref_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"course.section.semester\": \"Fall\",\n          \"course.section.year\": 2009\n        },\n        {\n          \"course.section.semester\": \"Spring\",\n          \"course.section.year\": 2010\n        }\n      ]\n    }\n  },\n  {\n    $project: {\n      course_id: \"$course.course_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4035,
        "db_id": "department_store",
        "nl_queries": [
            "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
            "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
            "List the IDs of suppliers whose average purchase amount per product is either over 50,000 or under 30,000.",
            "Identify the supplier IDs that have an average amount spent on products exceeding 50,000 or below 30,000.",
            "Retrieve the IDs of suppliers with average product purchase amounts greater than 50,000 or less than 30,000."
        ],
        "ref_sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000",
        "MQL": "db.Suppliers.aggregate([\n  {\n    $unwind: \"$Product_Suppliers\"\n  },\n  {\n    $group: {\n      _id: \"$supplier_id\",\n      avg_total_amount_purchased: {\n        $avg: {\n          $toDouble: \"$Product_Suppliers.total_amount_purchased\"\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { avg_total_amount_purchased: { $gt: 50000 } },\n        { avg_total_amount_purchased: { $lt: 30000 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      supplier_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1380,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the name of account that has the lowest total checking and saving balance.",
            "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
            "Retrieve the name of the account with the lowest combined balance from checking and savings.",
            "What is the name of the account that has the least amount when considering both checking and savings balances?",
            "Identify the account name that holds the smallest total balance from both the checking and saving accounts."
        ],
        "ref_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $group: {\n      _id: {\n        custid: \"$custid\",\n        name: \"$name\"\n      },\n      total_balance: {\n        $sum: {\n          $add: [\"$SAVINGS.balance\", \"$CHECKING.balance\"]\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      total_balance: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: \"$_id.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4176,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find all the papers published by \"Aaron Turon\".",
            "Find the titles of all the papers written by \"Aaron Turon\".",
            "List all titles of papers authored by \"Aaron Turon\".",
            "Retrieve every paper written by \"Aaron Turon\".",
            "Provide the titles of all publications associated with \"Aaron Turon\"."
        ],
        "ref_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.fname\": \"Aaron\",\n      \"Docs1.lname\": \"Turon\"\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3002,
        "db_id": "department_store",
        "nl_queries": [
            "What are the names and ids of customers whose address contains TN?",
            "Return the names and ids of customers who have TN in their address.",
            "List the customer names and IDs for those whose addresses include \"TN\".",
            "Provide the names and IDs of customers with \"TN\" present in their address.",
            "Show the names and IDs of customers whose addresses feature the substring \"TN\"."
        ],
        "ref_sql": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "MQL": "db.Customers.find(\n  {\n    customer_address: { $regex: \"TN\", $options: \"i\" }\n  },\n  {\n    customer_name: 1,\n    customer_id: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2308,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What are the names, details and data types of the characteristics which are never used by any product?",
            "Give the names, details, and data types of characteristics that are not found in any product.",
            "Can you provide the names, details, and data types of characteristics that are unused by any product?",
            "What are the names, additional details, and data types for characteristics that do not appear in any product?",
            "Please list the names, descriptions, and data types of characteristics not associated with any product."
        ],
        "ref_sql": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id",
        "MQL": "db.Ref_Characteristic_Types.aggregate([\n  {\n    $unwind: \"$Characteristics\"\n  },\n  {\n    $match: {\n      \"Characteristics.Product_Characteristics\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      characteristic_name: \"$Characteristics.characteristic_name\",\n      other_characteristic_details: \"$Characteristics.other_characteristic_details\",\n      characteristic_data_type: \"$Characteristics.characteristic_data_type\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 67,
        "db_id": "flight_2",
        "nl_queries": [
            "What is the airport name for airport 'AKO'?",
            "Return the name of the airport with code 'AKO'.",
            "What is the name of the airport corresponding to the code 'AKO'?",
            "Please provide the airport name for the airport with the code 'AKO'.",
            "Could you tell me the airport's name that has the code 'AKO'?"
        ],
        "ref_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
        "MQL": "db.airports.find(\n  { AirportCode: 'AKO' },\n  { AirportName: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3632,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of all instructors whose name includes the substring “dar”.",
            "What are the names of all instructors with names that include \"dar\"?",
            "List all instructors whose names contain the letters \"dar.\"",
            "Can you provide the names of instructors that have \"dar\" in their names?",
            "Show me all instructor names that feature the substring \"dar.\""
        ],
        "ref_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "MQL": "db.department.find({\n  \"instructor.name\": {\n    $regex: \"dar\",\n    $options: \"i\" \n  }\n}, {\n  \"instructor.name\": 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 4046,
        "db_id": "club_1",
        "nl_queries": [
            "Which club has the most members majoring in \"600\"?",
            "Find the club which has the largest number of members majoring in \"600\".",
            "Which club has the greatest number of members studying the major coded as \"600\"?",
            "Identify the club with the highest membership of students majoring in \"600\".",
            "What is the club with the most members enrolled in the major represented by \"600\"?"
        ],
        "ref_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Club.aggregate([\n  {\n    $unwind: \"$Member_of_club\"\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"Member_of_club.StuID\",\n      foreignField: \"StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Major\": 600\n    }\n  },\n  {\n    $group: {\n      _id: \"$ClubID\",\n      ClubName: { $first: \"$ClubName\" },\n      memberCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      memberCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      ClubName: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2971,
        "db_id": "department_management",
        "nl_queries": [
            "List the creation year, name and budget of each department.",
            "Provide the year of establishment, department name, and budget allocated to each department.",
            "Show the creation year, name, and budget in billions for all departments.",
            "Retrieve and list the establishment year, the name, and the budget figures of every department.",
            "What are the creation years, names, and financial budgets for each of the departments?"
        ],
        "ref_sql": "SELECT creation , name , budget_in_billions FROM department",
        "MQL": "db.department.find({}, { \"Creation\": 1, \"Name\": 1, \"Budget_in_Billions\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4259,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the average age of students who do not have any pet .",
            "What is the average age for all students who do not own any pets ?",
            "Calculate the average age of students that do not have any pets.",
            "What is the mean age for students who do not keep pets?",
            "Determine the average age of students without any pet ownership."
        ],
        "ref_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "MQL": "db.Student.aggregate([\n  {\n    $project: {\n      avg_age: {\n        $cond: [\n          {\n            $eq: [\n              {\n                $size: \"$Has_Pet\"\n              },\n              0\n            ]\n          },\n          \"$Age\",\n          null\n        ]\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: {\n        $avg: \"$avg_age\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2620,
        "db_id": "school_finance",
        "nl_queries": [
            "How many budget record has a budget amount smaller than the invested amount?",
            "How many entries exist in the budget where the amount budgeted is less than the amount invested?",
            "What is the count of budget records that have a budget amount lower than the invested amount?",
            "Determine the number of budget lines with a budgeted figure that is beneath the invested figure.",
            "Count the budget records where the budgeted amount is less than the amount that has been invested."
        ],
        "ref_sql": "SELECT count(*) FROM budget WHERE budgeted < invested",
        "MQL": "db.School.aggregate([\n  { $unwind: \"$budget\" },\n  { $match: { $expr: { $lt: [\"$budget.Budgeted\", \"$budget.Invested\"] } } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 94,
        "db_id": "race_track",
        "nl_queries": [
            "What is the race class with most number of races.",
            "Give the class of races that is most common.",
            "Which race class has the highest number of races recorded?",
            "Identify the race classification that appears most frequently.",
            "What is the most prevalent race class based on the number of races?"
        ],
        "ref_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.track.aggregate([\n  { $unwind: \"$race\" },\n  {\n    $group: {\n      _id: \"$race.Class\",\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, Class: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 230,
        "db_id": "book_2",
        "nl_queries": [
            "What are the distinct publishers of publications with price higher than 5000000?",
            "Who are the unique publishers for publications priced over 5,000,000?",
            "List the distinct publishers associated with publications that have a price greater than 5 million.",
            "Identify the unique publishers of books whose publication price exceeds 5,000,000.",
            "What are the names of publishers for publications where the price is higher than 5 million?"
        ],
        "ref_sql": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000",
        "MQL": "db.book.aggregate([\n  { $unwind: \"$publication\" },\n  { $match: { \"publication.Price\": { $gt: 5000000 } } },\n  { $group: { _id: \"$publication.Publisher\" } },\n  { $project: { _id: 0, Publisher: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 3158,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is draft detail of the document with id 7?",
            "Can you provide the draft details for the document that has the ID of 7?",
            "What are the draft details associated with the document identified by ID 7?",
            "Please tell me the draft details for the document with an ID of 7.",
            "What draft information is available for the document numbered 7?"
        ],
        "ref_sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  { $unwind: \"$Documents\" },\n  { $unwind: \"$Documents.Document_Drafts\" },\n  { $match: { \"Documents.document_id\": 7 } },\n  { $project: { \"draft_details\": \"$Documents.Document_Drafts.draft_details\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2479,
        "db_id": "company_office",
        "nl_queries": [
            "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
            "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
            "Count the total number of companies operating in the \"Banking\" or \"Conglomerate\" sector.",
            "How many companies exist in the industries of \"Banking\" or \"Conglomerate\"?",
            "What is the total count of companies in either the \"Banking\" or \"Conglomerate\" industries?"
        ],
        "ref_sql": "SELECT count(*) FROM Companies WHERE Industry = \"Banking\" OR Industry = \"Conglomerate\"",
        "MQL": "db.Companies.aggregate([\n  {\n    $match: {\n      Industry: {\n        $in: [\"Banking\", \"Conglomerate\"]\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3553,
        "db_id": "battle_death",
        "nl_queries": [
            "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "Show the names and tonnages of ships sorted in reverse alphabetical order by their names.",
            "Provide a list of ships containing their names and tonnage, arranged from Z to A based on the names.",
            "Display the ship names along with their tonnages listed in descending order of the ship names.",
            "Retrieve the names and tonnages of the ships, sorted by name in descending alphabetical order."
        ],
        "ref_sql": "SELECT name , tonnage FROM ship ORDER BY name DESC",
        "MQL": "db.battle.aggregate([\n  { $unwind: \"$ship\" },\n  { $project: { \"name\": \"$ship.name\", \"tonnage\": \"$ship.tonnage\", \"_id\": 0 } },\n  { $sort: { \"name\": -1 } }\n]);\n"
    },
    {
        "record_id": 2807,
        "db_id": "museum_visit",
        "nl_queries": [
            "Find the number of visitors who did not visit any museum opened after 2010.",
            "How many visitors have not visited any museums that were established after 2010?",
            "Count the number of visitors with no visits to museums opened post-2010.",
            "Determine the total number of visitors who have visited only museums that opened before 2011.",
            "What is the count of visitors who haven't been to any museum that started operating after the year 2010?"
        ],
        "ref_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
        "MQL": "db.visitor.aggregate([\n  {\n    $lookup: {\n      from: \"museum\",\n      localField: \"visit.Museum_ID\",\n      foreignField: \"Museum_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $addFields: {\n      visited_museums_after_2010: {\n        $filter: {\n          input: \"$Docs1\",\n          as: \"museum\",\n          cond: { $gt: [{ $toInt: \"$$museum.Open_Year\" }, 2010] }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      \"visited_museums_after_2010\": { $eq: [] }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 852,
        "db_id": "book_2",
        "nl_queries": [
            "List the publisher of the publication with the highest price.",
            "Who is the publisher of the most expensive publication?",
            "Identify the publisher for the publication that has the highest price.",
            "Name the publisher of the publication with the highest price point.",
            "What is the publisher associated with the publication priced highest?"
        ],
        "ref_sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
        "MQL": "db.book.aggregate([\n  {\n    $unwind: \"$publication\"\n  },\n  {\n    $sort: { \"publication.Price\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { \"Publisher\": \"$publication.Publisher\", \"_id\": 0 }\n  }\n]);\n"
    },
    {
        "record_id": 842,
        "db_id": "solvency_ii",
        "nl_queries": [
            "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
            "Retrieve the prices for the products called \"Dining\" and \"Trading Policy\".",
            "What are the prices for the products named \"Dining\" or \"Trading Policy\"?",
            "List the product prices for \"Dining\" and \"Trading Policy\".",
            "Can you show me the prices of the products titled \"Dining\" or \"Trading Policy\"?"
        ],
        "ref_sql": "SELECT Product_Price FROM Products WHERE Product_Name = \"Dining\" OR Product_Name = \"Trading Policy\"",
        "MQL": "db.Products.find({\n  \"Product_Name\": { $in: [\"Dining\", \"Trading Policy\"] }\n}, { \"Product_Price\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1077,
        "db_id": "match_season",
        "nl_queries": [
            "Show the season, the player, and the name of the team that players belong to.",
            "Who are the different players, what season do they play in, and what is the name of the team they are on?",
            "List each player along with the season they participate in and the corresponding team name.",
            "Identify the players, the seasons they are part of, and the names of the teams they belong to.",
            "Provide the details of players, including the season they are playing in and the name of their respective teams."
        ],
        "ref_sql": "SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $lookup: {\n      from: \"country\",\n      localField: \"match_season.Country\",\n      foreignField: \"Country_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Season: \"$match_season.Season\",\n      Player: \"$match_season.Player\",\n      Name: \"$Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 260,
        "db_id": "student_assessment",
        "nl_queries": [
            "Find distinct cities of addresses of people?",
            "What are the different cities where people live?",
            "List all the unique cities where individuals have their addresses.",
            "What unique cities can be found in the addresses of the people?",
            "Identify the various cities that correspond to the addresses of the residents."
        ],
        "ref_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$People_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"People_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.city\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      city: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3912,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Find the id and address of the shops whose score is below the average score.",
            "List the Shop_ID and Address for shops that have a score lower than the average score.",
            "Retrieve the IDs and addresses of all shops that score beneath the average benchmark.",
            "Identify the Shop_ID and Address of shops whose scores are less than the average score calculated for all shops.",
            "What are the Shop_IDs and Addresses of shops with scores that fall below the average score?"
        ],
        "ref_sql": "SELECT shop_id , address FROM shop WHERE score < (SELECT avg(score) FROM shop)",
        "MQL": "db.shop.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Score: { $avg: \"$Score\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"shop\",\n      let: { avg_Score: \"$avg_Score\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $lt: [\"$Score\", \"$$avg_Score\"] }\n          }\n        },\n        {\n          $project: {\n            \"Shop_ID\": 1,\n            \"Address\": 1,\n            \"_id\": 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Shop_ID\": \"$Docs1.Shop_ID\",\n      \"Address\": \"$Docs1.Address\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3418,
        "db_id": "mountain_photos",
        "nl_queries": [
            "What are the maximum and average height of the mountains?",
            "What are the tallest and average heights of the mountains?",
            "Can you tell me the maximum height and the mean height of the mountains?",
            "What is the highest mountain height and the average mountain height?",
            "What are the extremes in mountain height, including the maximum and the average?"
        ],
        "ref_sql": "SELECT max(height) , avg(height) FROM mountain",
        "MQL": "db.mountain.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_height: { $max: \"$Height\" },\n      avg_height: { $avg: \"$Height\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_height: 1,\n      avg_height: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3437,
        "db_id": "party_people",
        "nl_queries": [
            "Show all member names who are not in charge of any event.",
            "What are the names of members who are not in charge of any events?",
            "List the names of members who do not oversee any party events.",
            "Identify member names who are not responsible for any events.",
            "Provide the names of members who aren't in charge of any event activities."
        ],
        "ref_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $unwind: \"$party.member\"\n  },\n  {\n    $lookup: {\n      from: \"region\",\n      localField: \"party.member.Member_ID\",\n      foreignField: \"party.member.Member_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      $expr: { $eq: [{ $size: \"$party.member.party_events\" }, 0] }\n    }\n  },\n  {\n    $project: {\n      Member_Name: \"$party.member.Member_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 152,
        "db_id": "match_season",
        "nl_queries": [
            "Show the name of colleges that have at least two players in descending alphabetical order.",
            "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
            "List the colleges that have two or more players, sorted in reverse alphabetical order.",
            "Provide the names of colleges with at least two players, arranged in descending alphabetical order.",
            "Which colleges have a minimum of two players? Please arrange them in descending alphabetical order."
        ],
        "ref_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.College\",\n      playerCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      playerCount: { $gte: 2 }\n    }\n  },\n  {\n    $sort: {\n      _id: -1\n    }\n  },\n  {\n    $project: {\n      College: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3652,
        "db_id": "hospital_1",
        "nl_queries": [
            "List the name of physicians who never took any appointment.",
            "Which physicians have never taken any appointment? Find their names.",
            "Identify the names of physicians who do not have any recorded appointments.",
            "Provide a list of physicians that have had no appointments.",
            "Who are the physicians that have never had any appointments? Please name them."
        ],
        "ref_sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
        "MQL": "db.Physician.aggregate([\n  {\n    $project: {\n      Name: 1,\n      count_Appointment: { $size: \"$Appointment\" }\n    }\n  },\n  {\n    $match: {\n      count_Appointment: 0\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 876,
        "db_id": "restaurant_1",
        "nl_queries": [
            "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.",
            "Which restaurant had the lowest total spending by students? Please include the restaurant name and the total amount spent.",
            "Identify the restaurant where students spent the least money overall, and provide the name and total expenditure.",
            "What is the name of the restaurant with the least aggregated spending by student visits, along with the total money spent?",
            "Can you tell me which restaurant students spent the least amount of money at, including the restaurant's name and total spending?"
        ],
        "ref_sql": "SELECT Restaurant.ResName , sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;",
        "MQL": "db.Restaurant.aggregate([\n  \n  { $unwind: \"$Visits_Restaurant\" },\n  \n  \n  {\n    $group: {\n      _id: \"$ResID\",\n      sum_Visits_Restaurant_Spent: { $sum: \"$Visits_Restaurant.Spent\" }\n    }\n  },\n  \n  \n  { $sort: { sum_Visits_Restaurant_Spent: 1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  {\n    $lookup: {\n      from: \"Restaurant\",\n      localField: \"_id\",\n      foreignField: \"ResID\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      ResName: \"$Docs1.ResName\",\n      sum_Visits_Restaurant_Spent: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2990,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the first names and last names of customers without any account.",
            "What are the full names of customers who do not have any accounts?",
            "List the first and last names of customers who do not possess an account.",
            "Provide the names of customers that lack any linked accounts.",
            "Retrieve the full names of customers who currently have no accounts registered."
        ],
        "ref_sql": "SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $lookup: {\n      from: \"Accounts\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      customer_first_name: 1,\n      customer_last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3077,
        "db_id": "college_2",
        "nl_queries": [
            "What is the name and building of the departments whose budget is more than the average budget?",
            "Give the name and building of the departments with greater than average budget.",
            "List the names and buildings of departments that have a budget higher than the average.",
            "Identify the departments whose budget exceeds the average, along with their names and buildings.",
            "Provide the names and building locations of departments with budgets above the average budget."
        ],
        "ref_sql": "SELECT dept_name , building FROM department WHERE budget > (SELECT avg(budget) FROM department)",
        "MQL": "db.department.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_budget: { $avg: \"$budget\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { avg_budget: \"$avg_budget\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$budget\", \"$$avg_budget\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            dept_name: 1,\n            building: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 3052,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
            "List the dates of transactions where the share count exceeds 100 or the amount of the transaction is over 1000.",
            "Provide the transaction dates if either the share count is greater than 100 or the transaction amount exceeds 1000.",
            "Show transaction dates for cases where the share count is above 100 or the transaction amount surpasses 1000.",
            "Retrieve the dates of transactions when the share count is more than 100 or when the amount exceeds 1000."
        ],
        "ref_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $match: {\n      $or: [\n        { \"Transactions.share_count\": { $gt: \"100\" } },\n        { \"Transactions.amount_of_transaction\": { $gt: 1000 } }\n      ]\n    }\n  },\n  { $project: { \"date_of_transaction\": \"$Transactions.date_of_transaction\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 273,
        "db_id": "formula_1",
        "nl_queries": [
            "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
            "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
            "Retrieve the unique driver IDs and nationalities of all drivers who recorded lap times longer than 100,000 milliseconds.",
            "List the distinct IDs and nationalities of drivers with lap times exceeding 100,000 milliseconds.",
            "Provide the different driver IDs along with their nationalities for those who have lap times greater than 100,000 milliseconds."
        ],
        "ref_sql": "SELECT DISTINCT T1.driverid , T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: \"$lapTimes\"\n  },\n  {\n    $match: {\n      \"lapTimes.milliseconds\": { $gt: 100000 }\n    }\n  },\n  {\n    $project: {\n      driverId: 1,\n      nationality: 1,\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: {\n        driverId: \"$driverId\",\n        nationality: \"$nationality\"\n      }\n    }\n  },\n  {\n    $project: {\n      driverId: \"$_id.driverId\",\n      nationality: \"$_id.nationality\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2847,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
            "What is the number of unique locations where items with the service detail 'Unsatisfied' have been found?",
            "How many different locations have been recorded for things classified under the service detail 'Unsatisfied'?",
            "Count the distinct locations of items having a service detail marked as 'Unsatisfied'.",
            "How many various locations are associated with the items that have a service detail of 'Unsatisfied'?"
        ],
        "ref_sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'",
        "MQL": "db.Organizations.aggregate([\n  {\n    $unwind: \"$Things\"\n  },\n  {\n    $match: {\n      \"Things.service_details\": \"Unsatisfied\"\n    }\n  },\n  {\n    $unwind: \"$Things.Timed_Locations_of_Things\"\n  },\n  {\n    $group: {\n      _id: \"$Things.Timed_Locations_of_Things.Location_Code\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Timed_Locations_of_Things_Location_Code: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2894,
        "db_id": "network_2",
        "nl_queries": [
            "How many type of jobs do they have?",
            "How many different jobs are listed?",
            "What is the total count of unique job titles available?",
            "How many distinct job roles are present in the data?",
            "Can you tell me the number of different job positions recorded?"
        ],
        "ref_sql": "SELECT count(DISTINCT job) FROM Person",
        "MQL": "db.Person.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_job: { $addToSet: \"$job\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_job: { $size: \"$count_DISTINCT_job\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2962,
        "db_id": "school_finance",
        "nl_queries": [
            "Show each county along with the number of schools and total enrollment in each county.",
            "List each county, including the total number of schools and their cumulative enrollment figures.",
            "Provide a breakdown of each county highlighting the count of schools and the overall enrollment in each area.",
            "For each county, display the number of schools together with the total enrollment across those schools.",
            "Present a summary of schools per county, showing both the total school count and the collective enrollment statistics."
        ],
        "ref_sql": "SELECT county , count(*) , sum(enrollment) FROM school GROUP BY county",
        "MQL": "db.School.aggregate([\n  {\n    $group: {\n      _id: \"$County\",\n      count: { $sum: 1 },\n      sum_enrollment: { $sum: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      County: \"$_id\",\n      count: 1,\n      sum_enrollment: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3315,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the number of transactions for different investors.",
            "Display the total count of transactions for each investor.",
            "Provide the number of transactions associated with various investors.",
            "Retrieve the transaction counts for different investors.",
            "How many transactions does each investor have?"
        ],
        "ref_sql": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$investor_id\",\n      investor_id: { $first: \"$investor_id\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      investor_id: 1,\n      COUNT: \"$count\"\n    }\n  }\n])\n"
    },
    {
        "record_id": 2794,
        "db_id": "station_weather",
        "nl_queries": [
            "How many trains have 'Express' in their names?",
            "What is the total number of trains with 'Express' in their names?",
            "Can you tell me how many trains feature 'Express' in their name?",
            "How many train names contain the term 'Express'?",
            "Please provide the count of trains that have 'Express' as part of their names."
        ],
        "ref_sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "MQL": "db.train.aggregate([\n  {\n    $match: {\n      \"name\": { $regex: \"Express\", $options: \"i\" }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2412,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "How many accounts does each customer have? List the number and customer id.",
            "Count the number of accounts corresponding to each customer id.",
            "What is the account count for each customer? Provide the customer ID alongside the count.",
            "For each customer ID, how many accounts are there? Please list the counts accordingly.",
            "Display the number of accounts associated with every customer ID."
        ],
        "ref_sql": "SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      customer_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2291,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show card type codes with at least 5 cards.",
            "What are the codes of card types that have 5 or more cards?",
            "List the card type codes that have five or more associated cards.",
            "Identify the codes for card types with at least five cards.",
            "Provide the card type codes that correspond to card types having five or more cards."
        ],
        "ref_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*) >= 5",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: \"$card_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 5 }\n    }\n  },\n  {\n    $project: {\n      card_type_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3317,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the average amount of transactions for different investors.",
            "What is the average transaction amount for each investor?",
            "Provide the mean transaction values associated with different investors.",
            "Calculate the average amount that each investor has transacted.",
            "Display the average value of transactions made by various investors."
        ],
        "ref_sql": "SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$investor_id\",\n      avg_amount_of_transaction: { $avg: \"$Transactions.amount_of_transaction\" }\n    }\n  },\n  {\n    $project: {\n      investor_id: \"$_id\",\n      avg_amount_of_transaction: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3989,
        "db_id": "small_bank_1",
        "nl_queries": [
            "What is the total checking balance in all accounts?",
            "Find the total balance across checking accounts.",
            "What is the combined checking balance for all customers' accounts?",
            "Calculate the overall total of checking account balances.",
            "Determine the grand total of balances in all checking accounts."
        ],
        "ref_sql": "SELECT sum(balance) FROM checking",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_balance: {\n        $sum: \"$CHECKING.balance\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_balance: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2189,
        "db_id": "protein_institute",
        "nl_queries": [
            "What are the average, maximum, and minimum number of floors for all buildings?",
            "Can you provide the average, highest, and lowest number of floors in all buildings?",
            "What is the average, maximum, and minimum count of floors across every building?",
            "Please tell me the average, maximum, and minimum number of floors for all the buildings present.",
            "How many floors do the buildings have on average, and what are the maximum and minimum counts?"
        ],
        "ref_sql": "SELECT avg(floors) , max(floors) , min(floors) FROM building",
        "MQL": "db.building.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_floors: { $avg: \"$Floors\" },\n      max_floors: { $max: \"$Floors\" },\n      min_floors: { $min: \"$Floors\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_floors: 1,\n      max_floors: 1,\n      min_floors: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1840,
        "db_id": "party_people",
        "nl_queries": [
            "What are the names of parties with at least 2 events?",
            "Return the names of parties that have two or more events.",
            "List the names of political parties that host two or more events.",
            "Provide the names of parties having at least 2 associated events.",
            "What are the names of parties that organize two or more events?"
        ],
        "ref_sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count(*) >= 2",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $project: {\n      Party_name: \"$party.Party_name\",\n      count_party_events: {\n        $size: \"$party.party_events\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_party_events: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      Party_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3946,
        "db_id": "student_assessment",
        "nl_queries": [
            "List the id of students who attended some courses?",
            "What are the ids of all students who have attended at least one course?",
            "Provide the IDs of students who have participated in any courses.",
            "Can you list the student IDs of those who have attended one or more courses?",
            "How many students are there who have logged attendance in at least one course, and what are their IDs?"
        ],
        "ref_sql": "SELECT student_id FROM student_course_attendance",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$Students.Student_Course_Registrations\"\n  },\n  {\n    $project: {\n      student_id: \"$Students.student_id\",\n      count_Student_Course_Attendance: {\n        $size: \"$Students.Student_Course_Registrations.Student_Course_Attendance\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Student_Course_Attendance: {\n        $gt: 0\n      }\n    }\n  },\n  {\n    $project: {\n      student_id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3462,
        "db_id": "body_builder",
        "nl_queries": [
            "What is the minimum snatch score?",
            "What is the lowest score recorded for the Snatch lift?",
            "Can you tell me the minimum Snatch score achieved?",
            "What is the least snatch performance among the records?",
            "Find the smallest Snatch score from the data available."
        ],
        "ref_sql": "SELECT min(snatch) FROM body_builder",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$body_builder\"\n  },\n  {\n    $group: {\n      _id: null,\n      min_snatch: { $min: \"$body_builder.Snatch\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_snatch: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2997,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "List all the customers in increasing order of IDs.",
            "What is the ordered list of customer ids?",
            "Provide a sorted list of all customers based on their IDs in ascending order.",
            "Show the customer IDs in a list, arranged from the lowest to the highest.",
            "Retrieve the complete list of customers ordered by their Customer IDs, starting from the smallest."
        ],
        "ref_sql": "SELECT customer_id , customer_name FROM customers ORDER BY customer_id ASC",
        "MQL": "db.Customers.find({}, { Customer_ID: 1, Customer_name: 1, _id: 0 }).sort({ Customer_ID: 1 });\n"
    },
    {
        "record_id": 1538,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
            "List the titles of items with a maximum rank above 3 and an average rating exceeding 5.",
            "Retrieve the names of items that have an average rating higher than 5 and a rank greater than 3.",
            "What are the titles of items whose reviews average above 5 in rating and have a rank greater than 3?",
            "Identify the names of items whose maximum review rank exceeds 3 and whose average rating is greater than 5."
        ],
        "ref_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating) > 5",
        "MQL": "db.item.aggregate([\n  {\n    $unwind: \"$review\"\n  },\n  {\n    $group: {\n      _id: \"$i_id\",\n      title: { $first: \"$title\" },\n      avg_rating: { $avg: \"$review.rating\" },\n      max_rank: { $max: \"$review.rank\" }\n    }\n  },\n  {\n    $match: {\n      max_rank: { $gt: 3 },\n      avg_rating: { $gt: 5 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2872,
        "db_id": "college_2",
        "nl_queries": [
            "How many different courses offered by Physics department?",
            "Count the number of courses in the Physics department.",
            "What is the total number of unique courses provided by the Physics department?",
            "How many distinct courses are available within the Physics department?",
            "Determine the count of different courses that the Physics department offers."
        ],
        "ref_sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'",
        "MQL": "db.department.aggregate([\n  {\n    $match: {\n      dept_name: \"Physics\"\n    }\n  },\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_course_id: {\n        $addToSet: \"$course.course_id\"\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_course_id: {\n        $size: \"$count_DISTINCT_course_id\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3698,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the names of users who did not leave any review.",
            "List the names of users who have not posted any reviews.",
            "Retrieve the names of users with no reviews submitted.",
            "Identify users that haven’t left a review and display their names.",
            "Show the names of users who did not write any reviews."
        ],
        "ref_sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "MQL": "db.useracct.find({\n  \"review\": { $exists: true, $size: 0 }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3369,
        "db_id": "car_1",
        "nl_queries": [
            "What is the maximum accelerate for different number of cylinders?",
            "What is the maximum accelerate for all the different cylinders?",
            "What is the highest acceleration for the different cylinder counts?",
            "Can you provide the maximum acceleration figures for various numbers of cylinders?",
            "What are the maximum acceleration values associated with each cylinder count?"
        ],
        "ref_sql": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "MQL": "db.continents.aggregate([\n  { $unwind: \"$countries\" },\n  { $unwind: \"$countries.car_makers\" },\n  { $unwind: \"$countries.car_makers.model_list\" },\n  { $unwind: \"$countries.car_makers.model_list.car_names\" },\n  { $unwind: \"$countries.car_makers.model_list.car_names.cars_data\" },\n  {\n    $group: {\n      _id: \"$countries.car_makers.model_list.car_names.cars_data.Cylinders\",\n      max_Accelerate: { $max: \"$countries.car_makers.model_list.car_names.cars_data.Accelerate\" }\n    }\n  },\n  {\n    $project: {\n      Cylinders: \"$_id\",\n      max_Accelerate: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2387,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "How many tasks does each project have? List the task count and the project detail.",
            "For each project id, how many tasks are there?",
            "What is the task count for each project, along with their respective project details?",
            "Can you provide the number of tasks per project along with the details for each project id?",
            "For each project, how many tasks are assigned? Please include the project details in the output."
        ],
        "ref_sql": "SELECT count(*) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $group: {\n      _id: \"$Organisations.Projects.project_id\",\n      count: {\n        $sum: {\n          $size: \"$Organisations.Projects.Tasks\"\n        }\n      },\n      project_details: {\n        $first: \"$Organisations.Projects.project_details\"\n      }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      project_details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2079,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "List the asset id, details, make and model for every asset.",
            "Retrieve the asset ID, details, make, and model for each asset.",
            "Provide a list of all asset IDs along with their details, makes, and models.",
            "Show the asset identifier, description, manufacturer, and model for all assets.",
            "List down every asset's ID, its details, the make, and the model."
        ],
        "ref_sql": "SELECT asset_id , asset_details , asset_make , asset_model FROM Assets",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { $unwind: \"$Assets\" },\n  { $project: {\n      _id: 0,\n      asset_id: \"$Assets.asset_id\",\n      asset_details: \"$Assets.asset_details\",\n      asset_make: \"$Assets.asset_make\",\n      asset_model: \"$Assets.asset_model\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1433,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which parts have more than 2 faults? Show the part name and id.",
            "Which parts are associated with more than two faults? Please provide both the part name and its ID.",
            "Identify the parts that have over two faults. Include the part name and its identifier in the results.",
            "List the parts that exhibit more than two fault instances, along with their names and IDs.",
            "Show me the parts with greater than two faults, along with both their part names and IDs."
        ],
        "ref_sql": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count(*) > 2",
        "MQL": "db.Parts.aggregate([\n  {\n    $unwind: \"$Part_Faults\"\n  },\n  {\n    $group: {\n      _id: \"$part_id\",\n      part_name: { $first: \"$part_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      part_id: \"$_id\",\n      part_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2527,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "How many invoices do we have?",
            "Count the number of invoices.",
            "What is the total number of invoices in our records?",
            "Can you tell me how many invoices exist?",
            "Please provide a count of all invoices available."
        ],
        "ref_sql": "SELECT count(*) FROM Invoices",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Invoices\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 494,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the ids of the faculty who don't participate in any activity.",
            "Which faculty do not participate in any activity? Find their faculty ids.",
            "List the IDs of faculty members who are not involved in any activities.",
            "Identify the faculty who do not engage in any activities and provide their IDs.",
            "Provide the faculty IDs for those who do not participate in any activities."
        ],
        "ref_sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
        "MQL": "db.Faculty.aggregate([\n  {\n    $project: {\n      FacID: 1,\n      count_Faculty_Participates_in: {\n        $size: \"$Faculty_Participates_in\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Faculty_Participates_in: 0\n    }\n  },\n  {\n    $project: {\n      FacID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1701,
        "db_id": "driving_school",
        "nl_queries": [
            "Which country does customer with first name as Carole and last name as Bernhard lived in?",
            "What is the country in which the customer Carole Bernhard lived?",
            "In which country does the customer named Carole Bernhard reside?",
            "What country is associated with the customer Carole Bernhard?",
            "Can you tell me the country where Carole Bernhard lives?"
        ],
        "ref_sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.first_name\": \"Carole\",\n      \"Customers.last_name\": \"Bernhard\"\n    }\n  },\n  {\n    $project: {\n      country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 752,
        "db_id": "wrestler",
        "nl_queries": [
            "List the names of wrestlers that have not been eliminated.",
            "What are the names of wrestlers who have never been eliminated?",
            "Provide a list of wrestlers who have never been removed from a match.",
            "Show the names of wrestlers that remain uneliminated.",
            "Identify wrestlers who have not faced elimination."
        ],
        "ref_sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)",
        "MQL": "db.wrestler.aggregate([\n  {\n    $match: {\n      \"Elimination.Eliminated_By\": { $exists: false }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 499,
        "db_id": "music_4",
        "nl_queries": [
            "Please list the age and famous title of artists in descending order of age.",
            "What are the famous titles and ages of each artist, listed in descending order by age?",
            "Can you provide the ages and famous titles of artists, sorted from oldest to youngest?",
            "Show me the famous titles along with the ages of artists, arranged in decreasing order of age.",
            "Please share a list of artists with their ages and famous titles, ordered by age from highest to lowest."
        ],
        "ref_sql": "SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
        "MQL": "db.artist.find({}, { Famous_Title: 1, Age: 1, _id: 0 }).sort({ Age: -1 });\n"
    },
    {
        "record_id": 657,
        "db_id": "scientist_1",
        "nl_queries": [
            "Select the project names which are not assigned yet.",
            "What are the names of projects that have not been assigned?",
            "List the names of projects that are currently unassigned.",
            "Show me the project names that have yet to be assigned to anyone.",
            "What are the names of projects that do not have any assignments yet?"
        ],
        "ref_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
        "MQL": "db.Projects.aggregate([\n  {\n    $match: {\n      AssignedTo: { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3554,
        "db_id": "train_station",
        "nl_queries": [
            "Show the names and total passengers for all train stations not in London.",
            "Retrieve the names and total passenger counts for train stations that are not located in London.",
            "List the names along with total passengers for all stations that do not serve the London area.",
            "Display the names and total number of passengers for every train station except those in London.",
            "Provide the names and total passenger data for train stations outside of London."
        ],
        "ref_sql": "SELECT name , total_passengers FROM station WHERE LOCATION != 'London'",
        "MQL": "db.station.find({\n  \"Location\": { $ne: \"London\" }\n}, { \"Name\": 1, \"Total_Passengers\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2940,
        "db_id": "hospital_1",
        "nl_queries": [
            "How many patients stay in room 112?",
            "Count the number of patients who stayed in room 112.",
            "What is the total number of patients located in room 112?",
            "How many patients are currently assigned to room 112?",
            "Determine the count of patients who are residing in room 112."
        ],
        "ref_sql": "SELECT count(patient) FROM stay WHERE room = 112",
        "MQL": "db.Block.aggregate([\n  {\n    $unwind: \"$Room\"\n  },\n  {\n    $match: {\n      \"Room.RoomNumber\": 112\n    }\n  },\n  {\n    $unwind: \"$Room.Stay\"\n  },\n  {\n    $group: {\n      _id: \"$Room.Stay.Patient\"\n    }\n  },\n  {\n    $count: \"count_patient\"\n  }\n]);\n"
    },
    {
        "record_id": 3591,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the names of buildings except for those having an institution founded in 2003.",
            "List the names of buildings that are not linked to institutions founded in the year 2003.",
            "Retrieve the names of all buildings, excluding those with institutions established in 2003.",
            "Provide the names of buildings, omitting any associated with institutions that were founded in 2003.",
            "Display the names of buildings except for those that belong to institutions founded in 2003."
        ],
        "ref_sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003",
        "MQL": "db.building.find({\n  \"Institution.Founded\": { $ne: 2003 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2636,
        "db_id": "college_2",
        "nl_queries": [
            "Count the number of rooms that are not in the Lamberton building.",
            "How many classrooms are not in Lamberton?",
            "How many classrooms are located outside the Lamberton building?",
            "Determine the total number of rooms that do not belong to the Lamberton building.",
            "What is the count of classroom spaces that aren’t in Lamberton?"
        ],
        "ref_sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
        "MQL": "db.classroom.aggregate([\n  {\n    $match: {\n      building: { $ne: \"Lamberton\" }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 889,
        "db_id": "body_builder",
        "nl_queries": [
            "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
            "Show the snatch and clean jerk scores of body builders sorted in ascending order by their snatch scores.",
            "Retrieve the snatch and clean jerk results for body builders, arranged from the lowest to the highest snatch score.",
            "Provide a list of body builders' snatch and clean jerk scores, ordered by increasing snatch score.",
            "Display the clean jerk and snatch scores of body builders, with the results sorted by snatch score in ascending order."
        ],
        "ref_sql": "SELECT Snatch , Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$body_builder\" },\n  { $project: { \"Snatch\": \"$body_builder.Snatch\", \"Clean_Jerk\": \"$body_builder.Clean_Jerk\", \"_id\": 0 } },\n  { $sort: { \"Snatch\": 1 } }\n]);\n"
    },
    {
        "record_id": 3876,
        "db_id": "inn_1",
        "nl_queries": [
            "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
            "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
            "List the names and IDs of all rooms that are priced over 160 and can hold more than two guests.",
            "Retrieve room names and identifiers for rooms that have a base price exceeding 160 and can accommodate more than 2 individuals.",
            "Show me all the room names and IDs for rooms that cost above 160 and have a maximum capacity greater than two."
        ],
        "ref_sql": "SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;",
        "MQL": "db.Rooms.find({\n  basePrice: { $gt: 160 },\n  maxOccupancy: { $gt: 2 }\n}, {\n  roomName: 1,\n  RoomId: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2030,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
            "Which years feature festivals held in both the United States and other countries?",
            "In which years do festivals occur both in the United States and abroad?",
            "What are the years when festivals took place in the United States as well as outside of it?",
            "During which years are there festivals located in the United States and outside its borders?"
        ],
        "ref_sql": "SELECT YEAR FROM festival_detail WHERE LOCATION = 'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
        "MQL": "db.festival_detail.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Location\": \"United States\" },\n        { \"Location\": { $ne: \"United States\" } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Year\",\n      locations: { $addToSet: \"$Location\" }\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { \"locations\": \"United States\" },\n        { \"locations\": { $ne: [\"United States\"] } }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Year: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1860,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the name of rooms booked by some customers whose first name contains ROY.",
            "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
            "List the names of rooms reserved by customers whose first name includes the string \"ROY\".",
            "Provide the room names booked by individuals with a first name that contains \"ROY\".",
            "What are the names of rooms that were reserved by guests whose first names feature \"ROY\"?"
        ],
        "ref_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'",
        "MQL": "db.Rooms.find({\n  \"Reservations.FirstName\": {\n    $regex: \"ROY\",\n    $options: \"i\"\n  }\n}, {\n  \"roomName\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 1360,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
            "What are names and savings balances of the three accounts with the highest savings balances?",
            "List the names and savings balances of the three accounts that have the highest savings balances.",
            "Provide the top three accounts ranked by their savings balance along with their corresponding names.",
            "Show the names and savings amounts for the three accounts with the largest savings balances."
        ],
        "ref_sql": "SELECT T1.name , T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $sort: {\n      \"SAVINGS.balance\": -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      name: 1,\n      balance: \"$SAVINGS.balance\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1066,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the order details of the products with price higher than 2000?",
            "Find the order detail for the products with price above 2000.",
            "Can you provide the order details for products that cost more than 2000?",
            "What are the details of orders associated with products priced over 2000?",
            "Show me the order information for products whose price exceeds 2000."
        ],
        "ref_sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000",
        "MQL": "db.Products.aggregate([\n  {\n    $match: {\n      Product_Price: { $gt: 2000 }\n    }\n  },\n  {\n    $unwind: \"$Order_Items\"\n  },\n  {\n    $project: {\n      Other_Item_Details: \"$Order_Items.Other_Item_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3155,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of dorms that do not have any amenity",
            "What are the names of all the dorms that don't have any amenities?",
            "List the names of dormitories that do not offer any amenities.",
            "What dorm names are there that lack any amenities?",
            "Identify all dorms that have no amenities available."
        ],
        "ref_sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
        "MQL": "db.Dorm.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"dormid\",\n      foreignField: \"Has_amenity.dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 920,
        "db_id": "game_1",
        "nl_queries": [
            "Show ids of students who don't play video game.",
            "What are the ids of all students who are not video game players?",
            "List the student IDs of individuals who do not engage in playing video games.",
            "Provide the IDs of students who are not involved in video gaming.",
            "Retrieve the identifiers of students who do not participate in playing any video games."
        ],
        "ref_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Plays_Games\": { $exists: false } },\n        { \"Plays_Games\": { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      StuID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1310,
        "db_id": "game_injury",
        "nl_queries": [
            "What are the id and name of the stadium where the most injury accidents happened?",
            "Find the id and name of the stadium where the largest number of injury accidents occurred.",
            "Identify the stadium's ID and name with the highest count of injury incidents.",
            "Retrieve the ID and name of the stadium that recorded the greatest number of injury incidents.",
            "What stadium has the most injury incidents, and what are its ID and name?"
        ],
        "ref_sql": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.stadium.aggregate([\n  {\n    $unwind: \"$game\"\n  },\n  {\n    $unwind: \"$game.injury_accident\"\n  },\n  {\n    $group: {\n      _id: {\n        stadium_id: \"$id\",\n        stadium_name: \"$name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      id: \"$_id.stadium_id\",\n      name: \"$_id.stadium_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2388,
        "db_id": "college_1",
        "nl_queries": [
            "What is the number of professors for different school?",
            "How many different professors are there for the different schools?",
            "How many professors are there across the various schools?",
            "Count the number of different professors for each school.",
            "What is the total number of professors associated with different school codes?"
        ],
        "ref_sql": "SELECT count(*) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.SCHOOL_CODE\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      SCHOOL_CODE: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 46,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What is the address of the location \"UK Gallery\"?",
            "Find the address of the location named \"UK Gallery\".",
            "Can you tell me the address for the location \"UK Gallery\"?",
            "What is the address for the venue named \"UK Gallery\"?",
            "Please provide the address of the \"UK Gallery\" location."
        ],
        "ref_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
        "MQL": "db.Locations.find(\n  { \"Location_Name\": \"UK Gallery\" },\n  { \"Address\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1377,
        "db_id": "network_2",
        "nl_queries": [
            "Find the names of females who are friends with Zach",
            "What are the names of all females who are friends with Zach?",
            "List the names of all females who are friends with Zach.",
            "What are the names of female individuals who have Zach as a friend?",
            "Retrieve the names of women who count Zach among their friends."
        ],
        "ref_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'",
        "MQL": "db.Person.find({\n  gender: \"female\",\n  \"PersonFriend.name\": \"Zach\"\n}, {\n  name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1675,
        "db_id": "farm",
        "nl_queries": [
            "Show the years and the official names of the host cities of competitions.",
            "Give the years and official names of the cities of each competition.",
            "List the years alongside the official names of cities that hosted competitions.",
            "Provide the competition years and the corresponding official city names of the hosts.",
            "What are the years and the official names of cities that served as hosts for the competitions?"
        ],
        "ref_sql": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$farm_competition\"\n  },\n  {\n    $project: {\n      Year: \"$farm_competition.Year\",\n      Official_Name: \"$Official_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3570,
        "db_id": "network_2",
        "nl_queries": [
            "Who is the oldest person?",
            "What is the name of the person who is the oldest?",
            "Who is the person with the maximum age?",
            "Can you tell me the name of the oldest individual in the dataset?",
            "Identify the oldest individual and provide their name."
        ],
        "ref_sql": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)",
        "MQL": "db.Person.aggregate([\n  {\n    $sort: { age: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 687,
        "db_id": "world_1",
        "nl_queries": [
            "What is the name of country that has the shortest life expectancy in Asia?",
            "Give the name of the country in Asia with the lowest life expectancy.",
            "Which country in Asia has the least life expectancy?",
            "Identify the Asian country with the shortest life span.",
            "What is the name of the country in Asia that experiences the lowest life expectancy?"
        ],
        "ref_sql": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: \"Asia\"\n    }\n  },\n  {\n    $sort: {\n      LifeExpectancy: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1599,
        "db_id": "poker_player",
        "nl_queries": [
            "What is the money rank of the tallest poker player?",
            "Return the money rank of the poker player with the greatest height.",
            "What is the earning rank of the tallest player in poker?",
            "Provide the money ranking for the player with the maximum height in poker.",
            "Find the money rank of the poker player who stands the tallest."
        ],
        "ref_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $sort: { Height: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Money_Rank: \"$poker_player.Money_Rank\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1683,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the name and checking balance of the account with the lowest saving balance.",
            "What is the name and checking balance of the account which has the lowest savings balance?",
            "Retrieve the name and the checking account balance for the account holding the least amount in savings.",
            "What is the name and checking balance of the account that has the smallest savings balance?",
            "Show me the name and checking balance of the account with the lowest savings account balance."
        ],
        "ref_sql": "SELECT T2.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $sort: {\n      \"SAVINGS.balance\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      balance: {\n        $arrayElemAt: [\"$CHECKING.balance\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3690,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of students who didn't take any course from Biology department.",
            "What are the names of students who haven't taken any Biology courses?",
            "List the names of students who have not enrolled in any courses offered by the Biology department.",
            "Which students haven't registered for any courses related to Biology?",
            "Provide the names of students who are not taking any classes in the Biology department."
        ],
        "ref_sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $unwind: \"$student.takes\"\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      localField: \"student.takes.course_id\",\n      foreignField: \"course.course_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$student.ID\",\n      name: { $first: \"$student.name\" },\n      courses: { $addToSet: \"$Docs1.dept_name\" }\n    }\n  },\n  {\n    $match: {\n      courses: {\n        $not: {\n          $elemMatch: { $eq: \"Biology\" }\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1406,
        "db_id": "storm_record",
        "nl_queries": [
            "Show storm name with at least two regions and 10 cities affected.",
            "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
            "List the names of storms that impacted at least two regions and affected a minimum of 10 cities.",
            "Identify storm names that have influenced two or more regions and have had an impact on at least 10 cities.",
            "Provide the names of storms that have caused disruptions in two or more regions and impacted at least ten cities."
        ],
        "ref_sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10",
        "MQL": "db.storm.aggregate([\n  {\n    $unwind: \"$affected_region\"\n  },\n  {\n    $group: {\n      _id: \"$Storm_ID\",\n      Name: { $first: \"$Name\" },\n      count: { $sum: 1 },\n      sum_Number_city_affected: { $sum: \"$affected_region.Number_city_affected\" }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 },\n      sum_Number_city_affected: { $gte: 10 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3039,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "When do all the researcher role staff start to work, and when do they stop working?",
            "When did researchers start and stop working?",
            "What are the start and end dates for all staff with the researcher role?",
            "Can you provide the working periods for researchers, specifying their start and stop dates?",
            "What are the dates when researchers commenced and concluded their work?"
        ],
        "ref_sql": "SELECT date_from , date_to FROM Project_Staff WHERE role_code = 'researcher'",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Project_Staff\"\n  },\n  {\n    $match: {\n      \"Organisations.Projects.Project_Staff.role_code\": \"researcher\"  \n    }\n  },\n  {\n    $project: {\n      date_from: \"$Organisations.Projects.Project_Staff.date_from\",\n      date_to: \"$Organisations.Projects.Project_Staff.date_to\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2895,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the numbers of different majors and cities.",
            "How many different majors are there and how many different city codes are there for each student?",
            "What are the counts of unique majors and city codes among students?",
            "How many unique fields of study and city identifiers exist for the students?",
            "Determine the number of distinct academic majors and city codes represented by the students."
        ],
        "ref_sql": "SELECT count(DISTINCT major) , count(DISTINCT city_code) FROM student",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_major: { $addToSet: \"$Major\" },\n      count_DISTINCT_city_code: { $addToSet: \"$city_code\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_major: { $size: \"$count_DISTINCT_major\" },\n      count_DISTINCT_city_code: { $size: \"$count_DISTINCT_city_code\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2005,
        "db_id": "tvshow",
        "nl_queries": [
            "List all cartoon directed by \"Ben Jones\".",
            "What are the names of all cartoons directed by Ben Jones?",
            "Provide a list of all cartoons that were directed by Ben Jones.",
            "Can you name the cartoons directed by \"Ben Jones\"?",
            "Show me the titles of cartoons helmed by Ben Jones."
        ],
        "ref_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $match: {\n      \"Cartoon.Directed_by\": \"Ben Jones\"\n    }\n  },\n  {\n    $project: {\n      Title: \"$Cartoon.Title\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 847,
        "db_id": "book_2",
        "nl_queries": [
            "Please show the most common publication date.",
            "What is the publication date that appears most frequently among the books?",
            "Can you provide the date on which the highest number of books were published?",
            "Identify the publication date with the most occurrences in the dataset.",
            "What is the date that has the highest count of book publications?"
        ],
        "ref_sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.book.aggregate([\n  { $unwind: \"$publication\" },\n  { $group: { _id: \"$publication.Publication_Date\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, Publication_Date: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 1954,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show all artist names with an average exhibition attendance over 200.",
            "What are the names of artist whose exhibitions draw over 200 attendees on average?",
            "List the names of artists whose exhibitions receive an average attendance greater than 200.",
            "Provide the names of artists with an average of over 200 attendees at their exhibitions.",
            "Identify all artists that have an average exhibition attendance of more than 200 people."
        ],
        "ref_sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance) > 200",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $unwind: \"$exhibition.exhibition_record\"\n  },\n  {\n    $group: {\n      _id: \"$Artist_ID\",\n      Name: { $first: \"$Name\" },\n      avg_attendance: { $avg: \"$exhibition.exhibition_record.Attendance\" }\n    }\n  },\n  {\n    $match: {\n      avg_attendance: { $gt: 200 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4032,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What is the total number of products that are in orders with status \"Cancelled\"?",
            "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
            "How many products were ordered in total from the cancelled orders?",
            "What is the combined quantity of products from orders that have a \"Cancelled\" status?",
            "Calculate the overall number of items in orders that were marked as \"Cancelled.\""
        ],
        "ref_sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $match: {\n      \"Customer_Orders.order_status\": \"Cancelled\"\n    }\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_order_quantity: {\n        $sum: {\n          $toInt: \"$Customer_Orders.Order_Items.order_quantity\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_order_quantity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2868,
        "db_id": "college_1",
        "nl_queries": [
            "How many different classes are there?",
            "How many unique classes are offered?",
            "What is the total number of unique classes available?",
            "Can you tell me how many distinct classes are present?",
            "How many classes are there that are different from each other?"
        ],
        "ref_sql": "SELECT count(DISTINCT class_code) FROM CLASS",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $group: {\n      _id: \"$CLASS.CLASS_CODE\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_class_code: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_class_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1048,
        "db_id": "world_1",
        "nl_queries": [
            "What are the names of nations speak both English and French?",
            "Give the names of nations that speak both English and French.",
            "Which countries have both English and French as official languages?",
            "List the names of countries where both English and French are spoken.",
            "Identify nations that communicate in both English and French languages."
        ],
        "ref_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      languages: { $addToSet: \"$countrylanguage.Language\" }\n    }\n  },\n  {\n    $match: {\n      languages: { $all: [\"English\", \"French\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 170,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the different countries and the number of members from each.",
            "List all countries along with the number of members belonging to each one.",
            "Provide a count of members from each country represented.",
            "Display the unique countries and how many members are associated with each.",
            "Present a summary of countries and their respective member totals."
        ],
        "ref_sql": "SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $group: { _id: \"$member.Country\", \"COUNT\": { $sum: 1 } } },\n  { $project: { \"Country\": \"$_id\", \"COUNT\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1403,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name of product that is produced by both companies Creative Labs and Sony.",
            "What are the names of products produced by both Creative Labs and Sony?",
            "What products are made by both Creative Labs and Sony?",
            "List the names of products supplied by both Creative Labs and Sony.",
            "Identify the products that are manufactured by both Creative Labs and Sony."
        ],
        "ref_sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      $or: [\n        { Name: \"Creative Labs\" },\n        { Name: \"Sony\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Products.Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 545,
        "db_id": "farm",
        "nl_queries": [
            "What are the hosts of competitions whose theme is not \"Aliens\"?",
            "Return the hosts of competitions for which the theme is not Aliens?",
            "Can you provide the hosts for competitions that aren't themed \"Aliens\"?",
            "List the hosts of all competitions where the theme does not include \"Aliens\".",
            "What hosts are associated with competitions that have themes other than \"Aliens\"?"
        ],
        "ref_sql": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$farm_competition\"\n  },\n  {\n    $match: {\n      \"farm_competition.Theme\": { $ne: \"Aliens\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Hosts: \"$farm_competition.Hosts\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2459,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "How many bookings do we have?",
            "Count the total number of bookings made.",
            "What is the total number of bookings recorded?",
            "Can you provide the count of all bookings made?",
            "How many total bookings have been processed?"
        ],
        "ref_sql": "SELECT count(*) FROM BOOKINGS",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Clients\"\n  },\n  {\n    $unwind: \"$Clients.Bookings\"\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3843,
        "db_id": "culture_company",
        "nl_queries": [
            "What is the publisher with most number of books?",
            "Return the publisher that has published the most books.",
            "Which publisher has released the highest number of books?",
            "Identify the publisher with the greatest number of published works.",
            "Who is the publisher that has issued the most books?"
        ],
        "ref_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.book_club.aggregate([\n  {\n    $group: {\n      _id: \"$Publisher\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Publisher: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1942,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the location name for document \"Robin CV\".",
            "What is the location name of the document \"Robin CV\"?",
            "What location is associated with the document titled \"Robin CV\"?",
            "Provide the location name for the document called \"Robin CV\".",
            "Can you tell me the location name of the document \"Robin CV\"?"
        ],
        "ref_sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\"",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $match: {\n      \"All_Documents.Document_Name\": \"Robin CV\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Ref_Locations\",\n      localField: \"All_Documents.Document_Locations.Location_Code\",\n      foreignField: \"Location_Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Location_Name: \"$Docs1.Location_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3022,
        "db_id": "driving_school",
        "nl_queries": [
            "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
            "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?",
            "Can you provide the customer status code, mobile number, and email address for the customer named Kohler or Marina?",
            "What are the email address, cell phone number, and status code for customers who have the last name Kohler or the first name Marina?",
            "Please share the status code, mobile phone number, and email of any customer with the last name Kohler or the first name Marina."
        ],
        "ref_sql": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Customers.last_name\": \"Kohler\" },\n        { \"Customers.first_name\": \"Marina\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      customer_status_code: \"$Customers.customer_status_code\",\n      cell_mobile_phone_number: \"$Customers.cell_mobile_phone_number\",\n      email_address: \"$Customers.email_address\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3996,
        "db_id": "college_1",
        "nl_queries": [
            "What is the total credit does each department offer?",
            "How many credits does the department offer?",
            "What is the total number of credits available in each department?",
            "Can you provide the total credits offered by the department?",
            "How many total credits does each department provide through its courses?"
        ],
        "ref_sql": "SELECT sum(crs_credit) , dept_code FROM course GROUP BY dept_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_CODE\",\n      sum_crs_credit: { $sum: \"$DEPARTMENT.COURSE.CRS_CREDIT\" }\n    }\n  },\n  {\n    $project: {\n      DEPT_CODE: \"$_id\",\n      sum_crs_credit: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 374,
        "db_id": "concert_singer",
        "nl_queries": [
            "What are all distinct countries where singers above age 20 are from?",
            "What are the different countries with singers above age 20?",
            "Which unique countries have singers who are over the age of 20?",
            "List the different countries that are home to singers above 20 years old.",
            "Identify all the distinct nations where singers aged over 20 originate."
        ],
        "ref_sql": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "MQL": "db.singer.aggregate([\n  {\n    $match: {\n      Age: { $gt: 20 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Country\"\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1275,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List pairs of the owner's first name and the dogs's name.",
            "What are each owner's first name and their dogs's name?",
            "Provide a list of owners along with the names of their dogs.",
            "Show each owner's first name alongside the names of their dogs.",
            "Can you give me the first names of dog owners and their respective dogs' names?"
        ],
        "ref_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $project: {\n      first_name: 1,\n      name: \"$Dogs.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3788,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the price ranges of hotels with 5 star ratings.",
            "What are the price ranges of five star hotels?",
            "Can you provide the price ranges for hotels that are rated five stars?",
            "List the price ranges available for five-star rated hotels.",
            "What are the pricing tiers for hotels that have a star rating of 5?"
        ],
        "ref_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\"",
        "MQL": "db.Ref_Hotel_Star_Ratings.aggregate([\n  {\n    $unwind: \"$Hotels\"\n  },\n  {\n    $match: {\n      \"Hotels.star_rating_code\": \"5\"\n    }\n  },\n  {\n    $project: {\n      price_range: \"$Hotels.price_range\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 707,
        "db_id": "performance_attendance",
        "nl_queries": [
            "List the names of members who did not attend any performance.",
            "Provide the names of members who have not participated in any performances.",
            "Identify members who did not show up for any performances and list their names.",
            "Can you retrieve the names of those members who haven't attended any performance events?",
            "Generate a list of names for members that were absent from all performances."
        ],
        "ref_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
        "MQL": "db.member.find({\n  \"member_attendance\": { $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 172,
        "db_id": "perpetrator",
        "nl_queries": [
            "What are the countries that have at least two perpetrators?",
            "Which countries have two or more individuals identified as perpetrators?",
            "List the countries with at least a pair of perpetrators.",
            "Identify the nations that have no fewer than two perpetrators.",
            "What countries are reported to have two or more people involved as perpetrators?"
        ],
        "ref_sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$perpetrator\"\n  },\n  {\n    $group: {\n      _id: \"$perpetrator.Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      \"Country\": \"$_id\",\n      \"COUNT\": \"$count\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4152,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What are characteristic names used at least twice across all products?",
            "Give the names of characteristics that are in two or more products?",
            "List the names of characteristics that appear in at least two different products.",
            "What characteristic names are utilized by two or more products?",
            "Identify the names of characteristics that are associated with a minimum of two products."
        ],
        "ref_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2",
        "MQL": "db.Ref_Characteristic_Types.aggregate([\n  {\n    $unwind: \"$Characteristics\"\n  },\n  {\n    $unwind: \"$Characteristics.Product_Characteristics\"\n  },\n  {\n    $group: {\n      _id: \"$Characteristics.characteristic_name\",\n      productCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      productCount: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      characteristic_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 232,
        "db_id": "sports_competition",
        "nl_queries": [
            "List the distinct region of clubs in ascending alphabetical order.",
            "What are the different regions of clubs in ascending alphabetical order?",
            "Provide a list of unique club regions arranged in alphabetical order.",
            "What are the unique regions of the clubs sorted in ascending order?",
            "Show me the distinct regions where clubs are located, sorted alphabetically."
        ],
        "ref_sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
        "MQL": "db.club.aggregate([\n  {\n    $group: {\n      _id: \"$Region\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      Region: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2006,
        "db_id": "book_2",
        "nl_queries": [
            "List the titles of the books in ascending order of issues.",
            "Retrieve the titles of the books sorted by their issues from least to most.",
            "Show the book titles arranged in ascending order based on the number of times they were issued.",
            "Provide a list of book titles, ordered by their issuance count in increasing order.",
            "Display the titles of books ordered by the frequency of their issues, starting with the least issued."
        ],
        "ref_sql": "SELECT Title FROM book ORDER BY Issues ASC",
        "MQL": "db.book.find({}, { \"Title\": 1, \"_id\": 0 }).sort({ \"Issues\": 1 });\n"
    },
    {
        "record_id": 3313,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
            "List the names and addresses of private institutions established after 1990.",
            "Provide the names and locations of institutions that are privately funded and were founded post-1990.",
            "Retrieve the names and sites of institutions created after 1990 that are classified as private.",
            "What are the names and locations of institutions founded after 1990 that fall into the private category?"
        ],
        "ref_sql": "SELECT institution , LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'",
        "MQL": "db.building.aggregate([\n  { $unwind: \"$Institution\" },\n  { $match: { \n      \"Institution.Founded\": { $gt: 1990 },\n      \"Institution.Type\": \"Private\"\n    }\n  },\n  { $project: { \n      \"Institution\": \"$Institution.Institution\", \n      \"Location\": \"$Institution.Location\", \n      \"_id\": 0 \n    }\n  }\n]);\n"
    },
    {
        "record_id": 2593,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "How many addresses are there in country USA?",
            "What is the total number of addresses located in the USA?",
            "How many addresses can be found in the country USA?",
            "Count the addresses that exist in the United States.",
            "What is the address count for those registered in the USA?"
        ],
        "ref_sql": "SELECT count(*) FROM addresses WHERE country = 'USA'",
        "MQL": "db.Addresses.aggregate([\n  { $match: { \"country\": \"USA\" } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 2234,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
            "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?",
            "What are the average, lowest, and highest ticket prices for exhibitions held before 2009?",
            "Provide the average, minimum, and maximum prices of tickets for exhibitions that occurred prior to 2009.",
            "List the average, minimum, and maximum ticket prices for exhibitions conducted in years earlier than 2009."
        ],
        "ref_sql": "SELECT avg(ticket_price) , min(ticket_price) , max(ticket_price) FROM exhibition WHERE YEAR < 2009",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $match: {\n      \"exhibition.Year\": { $lt: 2009 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_ticket_price: { $avg: \"$exhibition.Ticket_Price\" },\n      min_ticket_price: { $min: \"$exhibition.Ticket_Price\" },\n      max_ticket_price: { $max: \"$exhibition.Ticket_Price\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_ticket_price: 1,\n      min_ticket_price: 1,\n      max_ticket_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2277,
        "db_id": "csu_1",
        "nl_queries": [
            "Find all the campuses opened in 1958.",
            "What are the campuses that opened in 1958?",
            "List all campuses that were established in the year 1958.",
            "Which campuses were opened in 1958?",
            "Show me the campuses that started in 1958."
        ],
        "ref_sql": "SELECT campus FROM campuses WHERE YEAR = 1958",
        "MQL": "db.Campuses.find({ \"Year\": 1958 }, { \"Campus\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1893,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
            "List the names of festivals that feature artworks classified as \"Program Talent Show\".",
            "Provide the names of festivals with nominations for artworks of type \"Program Talent Show\".",
            "What are the festival names that have nominated artworks categorized under \"Program Talent Show\"?",
            "Retrieve the names of festivals where artworks of the type \"Program Talent Show\" have been nominated."
        ],
        "ref_sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = \"Program Talent Show\"",
        "MQL": "db.festival_detail.aggregate([\n  {\n    $lookup: {\n      from: \"artwork\",\n      localField: \"nomination.Artwork_ID\",\n      foreignField: \"Artwork_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Type\": \"Program Talent Show\"\n    }\n  },\n  {\n    $project: {\n      \"Festival_Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1697,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
            "What is the count of business rates for each cmi cross reference? Please provide the cross reference ID, master customer ID, and the count.",
            "For each cmi cross reference, how many business rates are associated with it? Include the cross reference ID and master customer ID in the results.",
            "How many business rates correspond to each cmi cross reference? Deliver the cmi cross reference ID, the master customer ID, and their respective counts.",
            "Can you tell me the number of business rates linked to each cmi cross reference? Make sure to list the cross reference ID, master customer ID, and the count."
        ],
        "ref_sql": "SELECT T2.cmi_cross_ref_id , T2.master_customer_id , count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
        "MQL": "db.Customer_Master_Index.aggregate([\n  { \n    $unwind: \"$CMI_Cross_References\" \n  },\n  { \n    $unwind: \"$CMI_Cross_References.Business_Rates\" \n  },\n  { \n    $group: {\n      _id: {\n        cmi_cross_ref_id: \"$CMI_Cross_References.cmi_cross_ref_id\",\n        master_customer_id: \"$master_customer_id\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  { \n    $project: {\n      _id: 0,\n      cmi_cross_ref_id: \"$_id.cmi_cross_ref_id\",\n      master_customer_id: \"$_id.master_customer_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2173,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "What is the average number of bedrooms of all apartments?",
            "Find the average number of bedrooms of all the apartments.",
            "How many bedrooms are there on average in the apartments?",
            "What is the typical number of bedrooms found in all apartments?",
            "Can you tell me the average bedroom count for the apartments overall?"
        ],
        "ref_sql": "SELECT avg(bedroom_count) FROM Apartments",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_bedroom_count: {\n        $avg: \"$Apartments.bedroom_count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_bedroom_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4137,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "What is the name of the shop that is hiring the largest number of employees?",
            "Which shop has the most employees? Give me the shop name.",
            "Which shop employs the highest number of staff members currently hiring?",
            "Name the shop that has the greatest number of ongoing employee hires.",
            "What is the name of the store that is currently bringing on the most employees?"
        ],
        "ref_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.shop.aggregate([\n  {\n    $unwind: \"$hiring\"\n  },\n  {\n    $group: {\n      _id: \"$Shop_ID\",\n      count: { $sum: 1 },\n      shop_name: { $first: \"$Name\" }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$shop_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2517,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "How many transaction does account with name 337 have?",
            "Count the number of financial transactions that the account with the name 337 has.",
            "What is the total number of transactions for the account named 337?",
            "How many financial transactions exist for the account labeled 337?",
            "Find the count of financial transactions associated with the account titled 337."
        ],
        "ref_sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $match: {\n      \"Accounts.account_name\": \"337\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Accounts.Financial_Transactions\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4054,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What is the name of the customer that has purchased the most items?",
            "Give me the name of the customer who ordered the most items in total.",
            "Who is the customer that has made the most purchases in terms of item quantity?",
            "Identify the customer who has ordered the largest number of items.",
            "Can you tell me the name of the customer with the highest total number of ordered items?"
        ],
        "ref_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      total_items: {\n        $sum: {\n          $toInt: \"$Customer_Orders.Order_Items.order_quantity\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      total_items: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      customer_name: \"$Docs1.customer_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 943,
        "db_id": "aircraft",
        "nl_queries": [
            "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
            "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
            "Can you provide the names and descriptions of aircraft linked to airports that accommodate more than 10 million passengers?",
            "What names and descriptions are available for aircraft that are tied to airports with a total passenger count greater than 10,000,000?",
            "Show me the aircraft names and their descriptions associated with airports that have a total passenger volume exceeding 10 million."
        ],
        "ref_sql": "SELECT T1.Aircraft , T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000",
        "MQL": "db.aircraft.aggregate([\n  {\n    $lookup: {\n      from: \"airport\",\n      localField: \"airport_aircraft.Airport_ID\",\n      foreignField: \"Airport_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Total_Passengers\": { $gt: 10000000 }\n    }\n  },\n  {\n    $project: {\n      Aircraft: 1,\n      Description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1541,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the titles of items whose rating is higher than the average review rating of all items.",
            "List the titles of items that have a review rating above the average rating for all items.",
            "What are the titles of items with ratings that surpass the average review rating of all items?",
            "Identify the titles of items whose ratings exceed the average review rating across the entire collection.",
            "Provide the titles of items rated higher than the average rating of all reviews."
        ],
        "ref_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT avg(rating) FROM review)",
        "MQL": "db.item.aggregate([\n  { $unwind: \"$review\" },\n  { $group: { _id: null, avg_rating: { $avg: \"$review.rating\" } } },\n  { $addFields: { avg_rating: \"$avg_rating\" } },\n  { $lookup: {\n      from: \"item\",\n      let: { avg_rating: \"$avg_rating\" },\n      pipeline: [\n        { $unwind: \"$review\" },\n        { $match: { $expr: { $gt: [\"$review.rating\", \"$$avg_rating\"] } } },\n        { $project: { title: 1, _id: 0 } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  { $replaceRoot: { newRoot: \"$Docs1\" } }\n])\n"
    },
    {
        "record_id": 1932,
        "db_id": "department_management",
        "nl_queries": [
            "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
            "Identify the states in which the heads of both the Treasury department and the Homeland Security department were born.",
            "Which states are home to the secretaries of both the Treasury and Homeland Security departments?",
            "Provide a list of states where the leaders of the Treasury and Homeland Security departments originate from.",
            "Enumerate the states where the secretaries for both the Treasury and Homeland Security departments came from."
        ],
        "ref_sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
        "MQL": "db.department.aggregate([\n  {\n    $match: {\n      Name: { $in: [\"Treasury\", \"Homeland Security\"] }\n    }\n  },\n  {\n    $lookup: {\n      from: \"head\",\n      localField: \"management.head_ID\",\n      foreignField: \"head_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.born_state\",\n      departments: { $addToSet: \"$Name\" }\n    }\n  },\n  {\n    $match: {\n      departments: { $all: [\"Treasury\", \"Homeland Security\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      born_state: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4210,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the titles of all movies directed by steven spielberg.",
            "What are the names of all movies directed by Steven Spielberg?",
            "List the titles of all films directed by Steven Spielberg.",
            "What titles do all movies directed by Steven Spielberg have?",
            "Show me the names of every movie helmed by Steven Spielberg."
        ],
        "ref_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "MQL": "db.Movie.aggregate([\n  {\n    $match: {\n      director: \"Steven Spielberg\"\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4009,
        "db_id": "game_1",
        "nl_queries": [
            "Show total hours per week and number of games played for student David Shieber.",
            "What is the total number of hours per work and number of games played by David Shieber?",
            "Provide the total number of weekly hours and games played by David Shieber.",
            "Can you tell me the total hours per week and the games played by student David Shieber?",
            "What are the total weekly hours and the count of games played for David Shieber?"
        ],
        "ref_sql": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = \"David\" AND T2.Lname = \"Shieber\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Fname: \"David\",\n      LName: \"Shieber\"\n    }\n  },\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_hoursperweek: {\n        $sum: \"$SportsInfo.HoursPerWeek\"\n      },\n      sum_gamesplayed: {\n        $sum: \"$SportsInfo.GamesPlayed\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_hoursperweek: 1,\n      sum_gamesplayed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3780,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find all the policy type codes associated with the customer \"Dayana Robel\"",
            "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
            "What policy type codes are associated with the customer named \"Dayana Robel\"?",
            "Retrieve the types of policies belonging to \"Dayana Robel\".",
            "List all policy type codes linked to the customer \"Dayana Robel\"."
        ],
        "ref_sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      Customer_Details: \"Dayana Robel\"\n    }\n  },\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Policy_Type_Code: \"$Policies.Policy_Type_Code\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3713,
        "db_id": "tracking_orders",
        "nl_queries": [
            "what are the order id and customer id of the oldest order?",
            "Find the order id and customer id associated with the oldest order.",
            "What are the order ID and customer ID for the earliest order placed?",
            "Retrieve the order ID and customer ID corresponding to the oldest placed order.",
            "Can you provide the order ID and customer ID of the first order recorded?"
        ],
        "ref_sql": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $sort: {\n      \"Orders.date_order_placed\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      order_id: \"$Orders.order_id\",\n      customer_id: \"$Orders.customer_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1502,
        "db_id": "college_1",
        "nl_queries": [
            "What is the last name of the student who got a grade A in the class with code 10018.",
            "What is the last name of the student who received an A in the class with the code 10018?",
            "Who is the student with the last name that earned an A in class 10018?",
            "Can you tell me the last name of the student who achieved an A grade in the course identified by code 10018?",
            "What is the surname of the student that received an A for the class numbered 10018?"
        ],
        "ref_sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT.ENROLL\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.STUDENT.ENROLL.CLASS_CODE\": \"10018\",\n      \"DEPARTMENT.STUDENT.ENROLL.ENROLL_GRADE\": \"A\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      STU_LNAME: \"$DEPARTMENT.STUDENT.STU_LNAME\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4260,
        "db_id": "concert_singer",
        "nl_queries": [
            "What is the average and maximum capacities for all stadiums ?",
            "Can you provide the average and highest capacities of all stadiums?",
            "What are the average capacity and the maximum capacity across all stadiums?",
            "Please tell me the average and the largest capacities of the stadiums.",
            "What is the overall average capacity and the peak capacity of stadiums?"
        ],
        "ref_sql": "select avg(capacity) , max(capacity) from stadium",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_capacity: { $avg: \"$Capacity\" },\n      max_capacity: { $max: \"$Capacity\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_capacity: 1,\n      max_capacity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3680,
        "db_id": "swimming",
        "nl_queries": [
            "Find the names of stadiums which have never had any event.",
            "List the names of stadiums that have never hosted any events.",
            "Retrieve the names of stadiums with no recorded events.",
            "Get the names of stadiums that do not have any events associated with them.",
            "Identify the stadiums that haven’t held any events and return their names."
        ],
        "ref_sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
        "MQL": "db.stadium.find({\n  \"event\": { $size: 0 }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3954,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Find the total claimed amount of all the claims.",
            "What is total amount claimed summed across all the claims?",
            "What is the total amount of claims made by all customers?",
            "Calculate the overall claimed amount across all insurance claims.",
            "Sum up the claimed amounts for every claim submitted."
        ],
        "ref_sql": "SELECT sum(Amount_Claimed) FROM Claims",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Amount_Claimed: {\n        $sum: \"$Customer_Policies.Claims.Amount_Claimed\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Amount_Claimed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2704,
        "db_id": "protein_institute",
        "nl_queries": [
            "How many institutions do not have an associated protein in our record?",
            "What is the total count of institutions without any linked protein records?",
            "How many institutions lack associated protein information in our database?",
            "Can you tell me the number of institutions that do not have a protein entry recorded?",
            "How many institutions are there that are not connected to any protein in our records?"
        ],
        "ref_sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
        "MQL": "db.building.aggregate([\n  { $unwind: \"$Institution\" },\n  { $match: { $or: [ { \"Institution.protein\": { $exists: false } }, { \"Institution.protein\": { $size: 0 } } ] } },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 3252,
        "db_id": "music_1",
        "nl_queries": [
            "What is the most popular file format?",
            "Find the file format that is used by the most files.",
            "Which file format is the most commonly used?",
            "Identify the file format that has the highest usage across files.",
            "What file format is utilized by the greatest number of files?"
        ],
        "ref_sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $group: {\n      _id: \"$artist.files.formats\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      formats: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 426,
        "db_id": "bike_1",
        "nl_queries": [
            "List all the distinct stations from which a trip of duration below 100 started.",
            "What are all the different start station names for a trip that lasted less than 100?",
            "Retrieve the unique names of stations where trips with a duration under 100 minutes began.",
            "Can you provide a list of all the different stations that initiated trips lasting less than 100 minutes?",
            "Identify all the distinct start stations for trips that were under 100 minutes in length."
        ],
        "ref_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
        "MQL": "db.trip.aggregate([\n  {\n    $match: {\n      duration: { $lt: 100 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$start_station_name\"\n    }\n  },\n  {\n    $project: {\n      start_station_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 732,
        "db_id": "ship_mission",
        "nl_queries": [
            "What is the name of the ship with the largest tonnage?",
            "What is the ship with the largest amount of tonnage called?",
            "Which ship has the highest tonnage, and what is its name?",
            "Can you tell me the name of the ship that possesses the largest tonnage?",
            "What is the name of the vessel with the most tonnage?"
        ],
        "ref_sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
        "MQL": "db.ship.aggregate([\n  {\n    $sort: {\n      Tonnage: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3642,
        "db_id": "architecture",
        "nl_queries": [
            "Which of the mill names contains the french word 'Moulin'?",
            "What are the names of the mills that feature the French term 'Moulin'?",
            "Identify any mill names that have the word 'Moulin' in them.",
            "Which mill names include the French word 'Moulin'?",
            "List the mills whose names contain 'Moulin'."
        ],
        "ref_sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "MQL": "db.architect.aggregate([\n  { $unwind: \"$mill\" },\n  { $match: { \"mill.name\": { $regex: \"Moulin\", $options: \"i\" } } },\n  { $project: { \"name\": \"$mill.name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3841,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all publishers and the number of books for each publisher.",
            "How many books are there for each publisher?",
            "Provide a list of publishers and the total number of books published by each one.",
            "What is the total book count for every publisher?",
            "Can you display all publishers along with how many books each has published?"
        ],
        "ref_sql": "SELECT publisher , count(*) FROM book_club GROUP BY publisher",
        "MQL": "db.book_club.aggregate([\n  {\n    $group: {\n      _id: \"$Publisher\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Publisher: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 811,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
            "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
            "Can you provide the payment ID, date, and amount for all transactions processed using a Visa card?",
            "List the payment identification number, the date of payment, and the total amount for payments made via Visa.",
            "What are the payment IDs, dates, and amounts for all Visa transactions?"
        ],
        "ref_sql": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements.Payments\"\n  },\n  {\n    $match: {\n      \"Customer_Policies.Claims.Settlements.Payments.Payment_Method_Code\": \"Visa\"\n    }\n  },\n  {\n    $project: {\n      Payment_ID: \"$Customer_Policies.Claims.Settlements.Payments.Payment_ID\",\n      Date_Payment_Made: \"$Customer_Policies.Claims.Settlements.Payments.Date_Payment_Made\",\n      Amount_Payment: \"$Customer_Policies.Claims.Settlements.Payments.Amount_Payment\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2619,
        "db_id": "browser_web",
        "nl_queries": [
            "How many main stream browsers whose market share is at least 5 exist?",
            "What is the total number of browsers with a market share of 5% or more?",
            "How many browsers qualify as mainstream with a market share that meets or exceeds 5?",
            "Can you tell me the count of browsers that have at least 5% market share?",
            "How many browsers are there that have a market share of no less than 5?"
        ],
        "ref_sql": "SELECT count(*) FROM browser WHERE market_share >= 5",
        "MQL": "db.browser.aggregate([\n  {\n    $match: {\n      \"market_share\": { $gte: 5 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3306,
        "db_id": "college_2",
        "nl_queries": [
            "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
            "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
            "Retrieve the identifiers of instructors who conducted classes in Fall 2009 and did not teach during Spring 2010.",
            "List the IDs of instructors who were active in Fall 2009 but did not teach in the Spring of 2010.",
            "Identify the IDs of faculty members who taught in the Fall semester of 2009 while skipping Spring 2010."
        ],
        "ref_sql": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $unwind: \"$instructor.teaches\"\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"instructor.teaches.semester\": \"Fall\",\n          \"instructor.teaches.year\": 2009\n        },\n        {\n          \"instructor.teaches.semester\": \"Spring\",\n          \"instructor.teaches.year\": 2010\n        }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$instructor.ID\",\n      semesters_taught: {\n        $addToSet: \"$instructor.teaches.semester\"\n      }\n    }\n  },\n  {\n    $match: {\n      semesters_taught: \"Fall\",\n      semesters_taught: {\n        $nin: [\"Spring\"]\n      }\n    }\n  },\n  {\n    $project: {\n      ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2908,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How many professionals have performed any treatment to dogs?",
            "Find the number of professionals who have ever treated dogs.",
            "What is the total number of professionals who have treated dogs?",
            "How many distinct professionals have provided treatment to dogs?",
            "Count the number of professionals who have ever treated a dog."
        ],
        "ref_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "MQL": "db.Professionals.aggregate([\n  {\n    $unwind: \"$Treatments\"\n  },\n  {\n    $group: {\n      _id: \"$Treatments.professional_id\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_professional_id: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_professional_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3903,
        "db_id": "college_2",
        "nl_queries": [
            "Find the semester and year which has the least number of student taking any class.",
            "Which semeseter and year had the fewest students?",
            "Identify the semester and year during which the lowest number of students enrolled in any courses.",
            "What semester and year had the least student enrollments in classes?",
            "Which semester and year recorded the smallest number of students taking courses?"
        ],
        "ref_sql": "SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count(*) LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $group: {\n      _id: {\n        semester: \"$course.section.semester\",\n        year: \"$course.section.year\"\n      },\n      count_takes: {\n        $sum: {\n          $size: \"$course.section.takes\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count_takes: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      semester: \"$_id.semester\",\n      year: \"$_id.year\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1445,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
            "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?",
            "Provide a list of product names, their color descriptions, and descriptions for items categorized as \"Herbs\".",
            "What product names, color descriptions, and descriptions can you share for products within the 'Herbs' category?",
            "Can you enumerate the names, color descriptions, and detailed descriptions of products that fall under the \"Herbs\" category?"
        ],
        "ref_sql": "SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = \"Herbs\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $match: {\n      product_category_description: \"Herbs\"\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Colors\",\n      localField: \"Products.color_code\",\n      foreignField: \"color_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      color_description: \"$Docs1.color_description\",\n      product_description: \"$Products.product_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 42,
        "db_id": "chinook_1",
        "nl_queries": [
            "What is the average unit price of all the tracks?",
            "Find the average unit price for a track.",
            "What is the average price for all tracks available in the database?",
            "Calculate the mean unit cost of every track.",
            "What is the typical unit price for tracks in the collection?"
        ],
        "ref_sql": "SELECT AVG(UnitPrice) FROM TRACK",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $unwind: \"$Album.Track\"\n  },\n  {\n    $group: {\n      _id: null,\n      AVG_UnitPrice: { $avg: \"$Album.Track.UnitPrice\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"AVG_UnitPrice\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2001,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find the title of all the albums of the artist \"AC/DC\".",
            "What are the titles of albums by the artist \"AC/DC\"?",
            "List the album titles released by the artist \"AC/DC\".",
            "Show me the titles of all albums associated with \"AC/DC\".",
            "What are the names of the albums from the artist known as \"AC/DC\"?"
        ],
        "ref_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\"",
        "MQL": "db.Artist.aggregate([\n  {\n    $match: {\n      Name: \"AC/DC\"\n    }\n  },\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Title: \"$Album.Title\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3486,
        "db_id": "battle_death",
        "nl_queries": [
            "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "Provide the battle names, outcomes, and Bulgarian commanders for battles without any ships lost in the English Channel.",
            "List the names and results of battles along with the Bulgarian commanders where no ships were lost in the English Channel.",
            "What are the names, results, and Bulgarian commanders of battles that had no ship losses in the English Channel?",
            "Give me the names, results, and Bulgarian commanders of battles that did not have any ships lost in the English Channel."
        ],
        "ref_sql": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
        "MQL": "db.battle.find({\n  \"ship\": {\n    $not: {\n      $elemMatch: {\n        \"location\": \"English Channel\",\n        \"lost_in_battle\": { $gt: 0 }\n      }\n    }\n  }\n}, { \"name\": 1, \"result\": 1, \"bulgarian_commander\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3057,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What is the last date of the staff leaving the projects?",
            "What is the last date that a staff member left a project?",
            "What is the most recent date when staff members exited the projects?",
            "Can you tell me the latest date a staff member left their project?",
            "What was the final date that any staff member departed from a project?"
        ],
        "ref_sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Project_Staff\"\n  },\n  {\n    $project: {\n      date_to: \"$Organisations.Projects.Project_Staff.date_to\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      last_date_to: { $max: \"$date_to\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      date_to: \"$last_date_to\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3762,
        "db_id": "e_government",
        "nl_queries": [
            "Find the payment method code used by more than 3 parties.",
            "What are the payment method codes that have been used by more than 3 parties?",
            "Identify the payment method codes that have been utilized by over three parties.",
            "List the payment method codes that are associated with more than three different parties.",
            "What payment method codes do more than three parties use?"
        ],
        "ref_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3",
        "MQL": "db.Parties.aggregate([\n  {\n    $group: {\n      _id: \"$payment_method_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 3 }\n    }\n  },\n  {\n    $project: {\n      payment_method_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1978,
        "db_id": "flight_company",
        "nl_queries": [
            "What is the most common company type, and how many are there?",
            "What company type is the most frequent, and what is its total count?",
            "Identify the type of company that appears most often and the number of such companies.",
            "Which company type has the highest occurrence, and how many are there of that type?",
            "Can you tell me the most prevalent company type and the corresponding number of companies?"
        ],
        "ref_sql": "SELECT TYPE , count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.operate_company.aggregate([\n  {\n    $group: {\n      _id: \"$Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 534,
        "db_id": "company_employee",
        "nl_queries": [
            "Show the headquarters that have at least two companies.",
            "Retrieve the headquarters where two or more companies are located.",
            "Identify the headquarters that host a minimum of two companies.",
            "List the headquarters that have at least a pair of companies based in them.",
            "Find the headquarters with two or more businesses established there."
        ],
        "ref_sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*) >= 2",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: \"$Headquarters\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Headquarters: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1364,
        "db_id": "epinions_1",
        "nl_queries": [
            "For each user, return the name and the average rating of reviews given by them.",
            "List each user along with the average rating of their submitted reviews.",
            "Provide the names of users together with the average rating they have given in their reviews.",
            "Show the average review rating for each user along with their name.",
            "For all users, display their names along with the average scores of the reviews they have written."
        ],
        "ref_sql": "SELECT T1.name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
        "MQL": "db.useracct.aggregate([\n  {\n    $unwind: \"$review\"\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      avg_rating: { $avg: \"$review.rating\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id\",\n      avg_review_rating: \"$avg_rating\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3740,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name and training hours of players whose hours are below 1500.",
            "What are the names and number of hours spent training for each player who trains for less than 1500 hours?",
            "List the names and training hours for players with fewer than 1500 hours of training.",
            "Retrieve the names along with their training hours for players who have less than 1500 hours logged.",
            "Provide the names and training hour totals for each player whose training hours are under 1500."
        ],
        "ref_sql": "SELECT pName , HS FROM Player WHERE HS < 1500",
        "MQL": "db.Player.aggregate([\n  {\n    $match: {\n      HS: {\n        $lt: 1500\n      }\n    }\n  },\n  {\n    $project: {\n      pName: 1,\n      HS: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2271,
        "db_id": "soccer_2",
        "nl_queries": [
            "What are the names of schools with the top 3 largest size?",
            "What are the names of the schools with the top 3 largest class sizes?",
            "Which colleges have the highest three enrollment numbers?",
            "List the names of the top three schools with the largest enrollment.",
            "What are the names of the three colleges with the greatest enrollment sizes?"
        ],
        "ref_sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "MQL": "db.College.aggregate([\n  {\n    $sort: {\n      enr: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      cName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1260,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "what are the event details of the services that have the type code 'Marriage'?",
            "What are the details of events linked to services with the type code 'Marriage'?",
            "Can you provide the event information for services categorized as 'Marriage'?",
            "List the event details associated with services that have a type code of 'Marriage'.",
            "What event specifics can you give for the services identified as 'Marriage'?"
        ],
        "ref_sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'",
        "MQL": "db.Services.aggregate([\n  {\n    $match: {\n      \"Service_Type_Code\": \"Marriage\"\n    }\n  },\n  {\n    $unwind: \"$Events\"\n  },\n  {\n    $project: {\n      \"Event_Details\": \"$Events.Event_Details\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1390,
        "db_id": "sports_competition",
        "nl_queries": [
            "Show the names of clubs that have players with position \"Right Wing\".",
            "What are the names of the clubs that have players in the position of \"Right Wing\"?",
            "List the names of clubs that include players who play as \"Right Wing\".",
            "Identify the clubs that have players occupying the \"Right Wing\" position.",
            "Provide the names of clubs with athletes in the \"Right Wing\" role."
        ],
        "ref_sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\"",
        "MQL": "db.club.find({\n  player: {\n    $elemMatch: {\n      Position: \"Right Wing\"\n    }\n  }\n}, {\n  name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 506,
        "db_id": "chinook_1",
        "nl_queries": [
            "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
            "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
            "Can you provide the first and last name of the customer with the email address \"luisg@embraer.com.br\"?",
            "What are the first and last names of the customer whose email is \"luisg@embraer.com.br\"?",
            "Give me the full name of the customer associated with the email \"luisg@embraer.com.br\"."
        ],
        "ref_sql": "SELECT FirstName , LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $unwind: \"$Customer\"\n  },\n  {\n    $match: {\n      \"Customer.Email\": \"luisg@embraer.com.br\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FirstName: \"$Customer.FirstName\",\n      LastName: \"$Customer.LastName\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2671,
        "db_id": "department_store",
        "nl_queries": [
            "How many department stores does the store chain South have?",
            "Count the number of stores the chain South has.",
            "What is the total number of department stores within the South chain?",
            "How many stores are there in the South department store chain?",
            "Find the count of department stores that belong to the South chain."
        ],
        "ref_sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = \"South\"",
        "MQL": "db.Department_Store_Chain.aggregate([\n  {\n    $match: {\n      dept_store_chain_name: \"South\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Department_Stores\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2458,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "How many apartments do not have any facility?",
            "Find the number of apartments that have no facility.",
            "What is the total number of apartments without any facilities?",
            "Count the apartments that do not have any facilities available.",
            "How many apartments are there that lack facilities?"
        ],
        "ref_sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $project: {\n      count: {\n        $cond: {\n          if: {\n            $eq: [\n              {\n                $size: \"$Apartments.Apartment_Facilities\"\n              },\n              0\n            ]\n          },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: \"$count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 705,
        "db_id": "decoration_competition",
        "nl_queries": [
            "List the names of members in ascending alphabetical order.",
            "Retrieve a sorted list of member names in alphabetical order.",
            "Show the names of all members arranged in ascending alphabetical sequence.",
            "Provide the names of members sorted from A to Z.",
            "Generate a list of member names in alphabetical order, starting from the beginning of the alphabet."
        ],
        "ref_sql": "SELECT Name FROM member ORDER BY Name ASC",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $project: { \"Name\": \"$member.Name\", \"_id\": 0 } },\n  { $sort: { \"Name\": 1 } }\n]);\n"
    },
    {
        "record_id": 2787,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the total number of students living in the male dorm (with gender M).",
            "What are the total number of students who are living in a male dorm?",
            "How many students are currently residing in male dormitories?",
            "What is the count of students living in dorms designated for males?",
            "Determine the total number of male students who reside in male dorms."
        ],
        "ref_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm\",\n      localField: \"Lives_in.dormid\",\n      foreignField: \"dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.gender\": \"M\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2779,
        "db_id": "swimming",
        "nl_queries": [
            "How many stadiums are not in country \"Russia\"?",
            "What is the number of stadiums that are not situated in Russia?",
            "How many stadiums exist outside of Russia?",
            "Count the number of stadiums located in countries other than Russia.",
            "Find out how many stadiums are located away from Russia."
        ],
        "ref_sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'",
        "MQL": "db.stadium.aggregate([\n  {\n    $match: {\n      \"Country\": { $ne: \"Russia\" }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 109,
        "db_id": "chinook_1",
        "nl_queries": [
            "Hom many albums does the artist \"Metallica\" have?",
            "Find the number of albums by the artist \"Metallica\".",
            "How many albums are there by the artist \"Metallica\"?",
            "What is the total number of albums released by \"Metallica\"?",
            "Can you tell me the count of albums associated with the artist \"Metallica\"?"
        ],
        "ref_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"",
        "MQL": "db.Artist.aggregate([\n  {\n    $match: {\n      Name: \"Metallica\"\n    }\n  },\n  {\n    $project: {\n      \"COUNT\": {\n        $size: \"$Album\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1104,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
            "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
            "Provide the account name along with any additional details for all accounts linked to the customer named Meaghan Keeling.",
            "Can you list the account names and supplementary information for accounts associated with Meaghan Keeling?",
            "What account names and related details exist for the customer identified as Meaghan Keeling?"
        ],
        "ref_sql": "SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_first_name: \"Meaghan\",\n      customer_last_name: \"Keeling\"\n    }\n  },\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $project: {\n      account_name: \"$Accounts.account_name\",\n      other_account_details: \"$Accounts.other_account_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3394,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the maximum stars and year for the most recent movie?",
            "What is highest rating for the most recent movie and when was it released?",
            "What was the highest rating and release year for the latest movie?",
            "Can you tell me the top star rating and the year of the newest movie?",
            "What is the most stars assigned to the most recently released film, and in what year did it come out?"
        ],
        "ref_sql": "SELECT max(T1.stars) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT max(YEAR) FROM Movie)",
        "MQL": "db.Movie.aggregate([\n  {\n    $sort: { year: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      max_Rating_stars: { $max: \"$Rating.stars\" },\n      year: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2262,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the short names of the buildings managed by \"Emma\".",
            "Which buildings does \"Emma\" manage? Give me the short names of the buildings.",
            "List the short names of the buildings overseen by \"Emma\".",
            "What are the short names of the buildings that are managed by \"Emma\"?",
            "Provide the short names of the buildings that \"Emma\" manages."
        ],
        "ref_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $match: {\n      building_manager: \"Emma\"\n    }\n  },\n  {\n    $project: {\n      building_short_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1426,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name and hours of the students whose tryout decision is yes.",
            "What are the names and hours spent practicing of every student who received a yes at tryouts?",
            "List the names and practice hours of players who passed their tryouts.",
            "Retrieve the names and the hours invested in training for each student who got a positive decision at their tryout.",
            "What are the names and hours of practice for every student that was accepted based on their tryout decision?"
        ],
        "ref_sql": "SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $project: {\n      pName: 1,\n      HS: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2686,
        "db_id": "theme_gallery",
        "nl_queries": [
            "How many exhibition are there in year 2005 or after?",
            "Count the number of exhibitions that happened in or after 2005.",
            "What is the total number of exhibitions since 2005?",
            "How many exhibitions took place in 2005 or later?",
            "Can you provide the count of exhibitions held from the year 2005 onwards?"
        ],
        "ref_sql": "SELECT count(*) FROM exhibition WHERE YEAR >= 2005",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $match: {\n      \"exhibition.Year\": { $gte: 2005 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4003,
        "db_id": "csu_1",
        "nl_queries": [
            "How many faculty is there in total in the year of 2002?",
            "How many faculty, in total, are there in the year 2002?",
            "What is the total count of faculty members for the year 2002?",
            "Can you tell me the overall number of faculty in the year 2002?",
            "How many faculty members were there in total during the year 2002?"
        ],
        "ref_sql": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$faculty\"\n  },\n  {\n    $match: {\n      \"faculty.Year\": 2002\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_faculty: {\n        $sum: \"$faculty.Faculty\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_faculty: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1730,
        "db_id": "department_store",
        "nl_queries": [
            "What is the id and name of the department store that has both marketing and managing department?",
            "What are the ids and names of department stores with both marketing and managing departments?",
            "Can you provide the IDs and names of department stores that have departments in both marketing and managing?",
            "Which department stores contain marketing and managing departments, and what are their IDs and names?",
            "List the department store IDs and names that include both a marketing department and a managing department."
        ],
        "ref_sql": "SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\"",
        "MQL": "db.Department_Store_Chain.aggregate([\n  {\n    $unwind: \"$Department_Stores\"\n  },\n  {\n    $unwind: \"$Department_Stores.Departments\"\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"Department_Stores.Departments.department_name\": \"marketing\"\n        },\n        {\n          \"Department_Stores.Departments.department_name\": \"managing\"\n        }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: {\n        dept_store_id: \"$Department_Stores.dept_store_id\",\n        store_name: \"$Department_Stores.store_name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      dept_store_id: \"$_id.dept_store_id\",\n      store_name: \"$_id.store_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1381,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
            "What are the names of customers with a higher checking balance than savings balance?",
            "List the names of accounts where the checking account has a greater balance than the savings account.",
            "Which customers have a checking balance that surpasses their savings balance?",
            "Provide the names of account holders whose balance in checking exceeds that in savings."
        ],
        "ref_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $match: {\n      $expr: {\n        $gt: [\"$CHECKING.balance\", \"$SAVINGS.balance\"]\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2919,
        "db_id": "station_weather",
        "nl_queries": [
            "How many different services are provided by all stations?",
            "What is the total count of unique services available at all stations?",
            "How many distinct services are offered by the various stations?",
            "Can you tell me the number of different services provided across all stations?",
            "What is the number of unique services that all stations provide?"
        ],
        "ref_sql": "SELECT count(DISTINCT services) FROM station",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_services: { $addToSet: \"$services\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_services: { $size: \"$count_DISTINCT_services\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 234,
        "db_id": "wrestler",
        "nl_queries": [
            "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
            "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
            "List the unique reigns of wrestlers located outside of Tokyo, Japan.",
            "Show me the different reigns of wrestlers who do not have Tokyo, Japan as their location.",
            "Identify the distinct reigns among wrestlers not situated in Tokyo, Japan."
        ],
        "ref_sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "MQL": "db.wrestler.aggregate([\n  {\n    $match: {\n      Location: {\n        $ne: \"Tokyo, Japan\"\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Reign\"\n    }\n  },\n  {\n    $project: {\n      Reign: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 807,
        "db_id": "election_representative",
        "nl_queries": [
            "What parties have at least three representatives?",
            "Which political parties have three or more representatives?",
            "List the parties that possess at least three representatives.",
            "Identify the parties that have no fewer than three representatives.",
            "What are the parties represented by three or more representatives?"
        ],
        "ref_sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3",
        "MQL": "db.representative.aggregate([\n  {\n    $group: {\n      _id: \"$Party\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 3 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Party: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 91,
        "db_id": "race_track",
        "nl_queries": [
            "Show the race class and number of races in each class.",
            "What are the different classes of races, and how many races correspond to each?",
            "List the different race classes along with the total number of races in each class.",
            "What race classes exist, and how many races are there in every class?",
            "Provide the race classification and the count of races in each of those classifications."
        ],
        "ref_sql": "SELECT CLASS , count(*) FROM race GROUP BY CLASS",
        "MQL": "db.track.aggregate([\n  { $unwind: \"$race\" },\n  {\n    $group: {\n      _id: \"$race.Class\",\n      \"count\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Class: \"$_id\",\n      \"count\": 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1422,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What are the result description of the project whose detail is 'sint'?",
            "What is the description for the results whose project detail is 'sint'?",
            "Can you provide the outcome descriptions for projects that have 'sint' as their detail?",
            "What descriptions are associated with the outcomes of the project that has 'sint' in its details?",
            "Please tell me the outcome description for the project with the detail labeled 'sint'."
        ],
        "ref_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $match: {\n      \"Organisations.Projects.project_details\": \"sint\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Research_Outcomes\",\n      localField: \"Organisations.Projects.project_id\",\n      foreignField: \"Project_Outcomes.project_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      outcome_description: \"$Docs1.outcome_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2858,
        "db_id": "bike_1",
        "nl_queries": [
            "From the trip record, find the number of unique bikes.",
            "How many different bike ids are there?",
            "What is the total number of unique bike identifiers in the trip records?",
            "Count how many distinct bike IDs are present in the trip data.",
            "Determine the number of unique bikes recorded in the trip information."
        ],
        "ref_sql": "SELECT count(DISTINCT bike_id) FROM trip",
        "MQL": "db.trip.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_bike_id: { $addToSet: \"$bike_id\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_bike_id: { $size: \"$count_DISTINCT_bike_id\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2421,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of students in each major.",
            "How many students are there in each major?",
            "What is the count of students enrolled in each major?",
            "List the number of students per major.",
            "Retrieve the total number of students for each academic major."
        ],
        "ref_sql": "SELECT count(*) , major FROM student GROUP BY major",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Major: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2247,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the branch names of banks in the New York state.",
            "What are the names of banks in the state of New York?",
            "List the names of bank branches situated in the state of New York.",
            "Show me the branch names of banks located in New York.",
            "What are the names of the banks operating in New York state?"
        ],
        "ref_sql": "SELECT bname FROM bank WHERE state = 'New York'",
        "MQL": "db.bank.find(\n  { state: \"New York\" },\n  { bname: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3829,
        "db_id": "department_store",
        "nl_queries": [
            "Find the product type whose average price is higher than the average price of all products.",
            "What is the code of the product type with an average price higher than the average price of all products?",
            "Identify the product type that has an average price exceeding the overall average price of all products.",
            "Which product type code corresponds to a product type that has an average price greater than the overall average price of all products?",
            "What is the type code for those product types whose average pricing is above the overall average for all products?"
        ],
        "ref_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)",
        "MQL": "db.Products.aggregate([\n  \n  {\n    $group: {\n      _id: null,\n      overallAvgPrice: { $avg: \"$product_price\" }\n    }\n  },\n  \n  {\n    $addFields: {\n      overallAvgPrice: \"$overallAvgPrice\"\n    }\n  },\n  \n  {\n    $lookup: {\n      from: \"Products\",\n      pipeline: [\n        {\n          $group: {\n            _id: \"$product_type_code\",\n            avg_product_price: { $avg: \"$product_price\" }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  \n  {\n    $match: {\n      $expr: {\n        $gt: [\"$Docs1.avg_product_price\", \"$overallAvgPrice\"]\n      }\n    }\n  },\n  \n  {\n    $project: {\n      _id: 0,\n      product_type_code: \"$Docs1._id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1301,
        "db_id": "architecture",
        "nl_queries": [
            "What are the ids, names and genders of the architects who built two bridges or one mill?",
            "Can you provide the ids, names, and genders of architects who have constructed two bridges or a single mill?",
            "List the ids, names, and genders of those architects responsible for two bridges or one mill.",
            "What are the ids, names, and genders of architects that built either two bridges or one mill?",
            "Show me the ids, names, and genders of the architects who have built two bridges or a mill."
        ],
        "ref_sql": "SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count(*) = 2 UNION SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count(*) = 1",
        "MQL": "db.architect.find({\n  $or: [\n    { \"bridge\": { $size: 2 } },\n    { \"mill\": { $size: 1 } }\n  ]\n}, { \"id\": 1, \"name\": 1, \"gender\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3407,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What are the maximum, minimum, and average booked count for the products booked?",
            "Can you provide the maximum, minimum, and average number of bookings made for the products?",
            "What is the highest, lowest, and average count of product bookings recorded?",
            "How many times have products been booked on average, and what are the maximum and minimum numbers?",
            "Show me the max, min, and average booking counts for the products available for hire."
        ],
        "ref_sql": "SELECT max(booked_count) , min(booked_count) , avg(booked_count) FROM products_booked",
        "MQL": "db.Products_for_Hire.aggregate([\n  {\n    $unwind: \"$Products_Booked\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_booked_count: { $max: \"$Products_Booked.booked_count\" },\n      min_booked_count: { $min: \"$Products_Booked.booked_count\" },\n      avg_booked_count: { $avg: \"$Products_Booked.booked_count\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_booked_count: 1,\n      min_booked_count: 1,\n      avg_booked_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 340,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the names of all reviewers who rated Gone with the Wind.",
            "What are the names of all the different reviewers who rates Gone with the Wind?",
            "List all reviewers' names who have given ratings for the film Gone with the Wind.",
            "Who are the reviewers that rated the movie Gone with the Wind?",
            "Provide the names of all unique reviewers who provided ratings for Gone with the Wind."
        ],
        "ref_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $lookup: {\n      from: \"Movie\",\n      localField: \"Rating.mID\",\n      foreignField: \"mID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.title\": \"Gone with the Wind\"\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2755,
        "db_id": "program_share",
        "nl_queries": [
            "how many programs are there?",
            "Count the number of programs.",
            "What is the total number of programs in the database?",
            "Can you tell me how many programs exist?",
            "Please provide the count of all the available programs."
        ],
        "ref_sql": "SELECT count(*) FROM program",
        "MQL": "db.program.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1846,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show all product names and the total quantity ordered for each product name.",
            "What are the different product names, and what is the sum of quantity ordered for each product?",
            "Provide a list of all product names along with the aggregated quantity ordered for each item.",
            "Display unique product names and the total number of units ordered for each product.",
            "Retrieve the names of products with the corresponding total quantity ordered for each product."
        ],
        "ref_sql": "SELECT T2.product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Order_Items\"\n  },\n  {\n    $lookup: {\n      from: \"Product_Categories\",\n      let: { product_id: \"$Orders.Order_Items.product_id\" },\n      pipeline: [\n        { $unwind: \"$Products\" },\n        { $match: { $expr: { $eq: [\"$Products.product_id\", \"$$product_id\"] } } },\n        { $project: { product_name: \"$Products.product_name\" } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.product_name\",\n      sum_product_quantity: {\n        $sum: {\n          $toInt: \"$Orders.Order_Items.product_quantity\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      product_name: \"$_id\",\n      sum_product_quantity: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2022,
        "db_id": "railway",
        "nl_queries": [
            "Show the working years of managers in descending order of their level.",
            "List the managers’ working years, arranged in descending order according to their level.",
            "Retrieve the working years of managers, sorted from highest to lowest based on their level.",
            "Display the working years of managerial staff in order of their level, starting with the highest.",
            "Provide the working years of managers, organized in decreasing order of managerial level."
        ],
        "ref_sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
        "MQL": "db.manager.find({}, { \"Working_year_starts\": 1, \"_id\": 0 }).sort({ \"Level\": -1 });\n"
    },
    {
        "record_id": 2607,
        "db_id": "theme_gallery",
        "nl_queries": [
            "How many artists do we have?",
            "Count the number of artists.",
            "How many artists are there?",
            "What is the total number of artists?",
            "Determine how many artists are present."
        ],
        "ref_sql": "SELECT count(*) FROM artist",
        "MQL": "db.artist.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3826,
        "db_id": "department_store",
        "nl_queries": [
            "What is the average price for each type of product?",
            "Return the average price for each product type.",
            "Can you provide the average pricing for each category of products?",
            "What is the mean price for different types of products?",
            "Give me the average cost associated with each product type."
        ],
        "ref_sql": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_type_code\",\n      avg_product_price: { $avg: \"$product_price\" }\n    }\n  },\n  {\n    $project: {\n      product_type_code: \"$_id\",\n      avg_product_price: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4227,
        "db_id": "station_weather",
        "nl_queries": [
            "Find the number and time of the train that goes from Chennai to Guruvayur.",
            "Retrieve the train number and schedule for trains traveling from Chennai to Guruvayur.",
            "What are the train number and departure time for trains going from Chennai to Guruvayur?",
            "List the train number and time for the train services that operate between Chennai and Guruvayur.",
            "Provide the details of the train number and timing for the route from Chennai to Guruvayur."
        ],
        "ref_sql": "SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'",
        "MQL": "db.train.find({\n  \"origin\": \"Chennai\",\n  \"destination\": \"Guruvayur\"\n}, { \"train_number\": 1, \"time\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1356,
        "db_id": "sports_competition",
        "nl_queries": [
            "Please show the names and the players of clubs.",
            "What are the names and players of all the clubs?",
            "Can you provide the names along with the players of each club?",
            "Show me the players associated with all the clubs along with their names.",
            "List the names of the clubs together with their respective players."
        ],
        "ref_sql": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $project: {\n      name: 1,\n      Player_ID: \"$player.Player_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2498,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "How many draft copies does the document with id 2 have?",
            "What is the total number of draft copies associated with the document that has an ID of 2?",
            "Can you tell me how many draft copies exist for the document with document ID 2?",
            "How many copies of drafts are there for the document identified by ID 2?",
            "Please provide the count of draft copies for the document that is assigned the ID 2."
        ],
        "ref_sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  { $unwind: \"$Documents\" },\n  { $match: { \"Documents.document_id\": 2 } },\n  { $unwind: \"$Documents.Document_Drafts\" },\n  { $unwind: \"$Documents.Document_Drafts.Draft_Copies\" },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 1269,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List each owner's first name, last name, and the size of his for her dog.",
            "What are each owner's first name, last name, and the size of their dog?",
            "Provide the first and last names of each owner along with the size of their dog.",
            "Can you show me the first names, last names, and dog sizes for all owners?",
            "Display each owner's first name, last name, and the size attributed to their dog."
        ],
        "ref_sql": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $project: {\n      first_name: 1,\n      last_name: 1,\n      size_code: \"$Dogs.size_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3421,
        "db_id": "browser_web",
        "nl_queries": [
            "What is the maximum, minimum and average market share of the listed browsers?",
            "Can you provide the highest, lowest, and average market shares for the browsers listed?",
            "What are the peak, bottom, and mean market share figures for the available browsers?",
            "Please give me the maximum, minimum, and average market share values for all the browsers.",
            "What is the maximum, minimum, and average market share observed among the listed web browsers?"
        ],
        "ref_sql": "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser",
        "MQL": "db.browser.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_market_share: { $max: \"$market_share\" },\n      min_market_share: { $min: \"$market_share\" },\n      avg_market_share: { $avg: \"$market_share\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_market_share: 1,\n      min_market_share: 1,\n      avg_market_share: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2449,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "How many accounts do we have?",
            "Count the number of accounts.",
            "Show the number of accounts.",
            "How many accounts are there?",
            "What is the total number of accounts in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM Accounts",
        "MQL": "db.Accounts.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 458,
        "db_id": "debate",
        "nl_queries": [
            "What are the date and venue of each debate?",
            "Can you provide the date and location for every debate?",
            "What are the dates and venues associated with each debate event?",
            "List the date and venue for all debates.",
            "What is the date and venue for every debate that has occurred?"
        ],
        "ref_sql": "SELECT Date , Venue FROM debate",
        "MQL": "db.debate.find({}, { \"Date\": 1, \"Venue\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2455,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the number of documents with document type code CV or BK.",
            "How many documents have document type code CV or BK?",
            "What is the total count of documents with the type codes CV or BK?",
            "How many documents fall under the document type codes CV or BK?",
            "Provide the number of documents classified with type codes CV and BK."
        ],
        "ref_sql": "SELECT count(*) FROM All_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\"",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"All_Documents.Document_Type_Code\": \"CV\" },\n        { \"All_Documents.Document_Type_Code\": \"BK\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1645,
        "db_id": "ship_mission",
        "nl_queries": [
            "Show names of ships involved in a mission launched after 1928.",
            "What are the names of ships that were involved in a mission launched after 1928?",
            "List the names of ships that took part in missions initiated after 1928.",
            "Provide the names of ships that were part of any mission launched later than 1928.",
            "Can you tell me the names of ships involved in missions that started after the year 1928?"
        ],
        "ref_sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
        "MQL": "db.ship.find({\n  mission: {\n    $elemMatch: {\n      Launched_Year: { $gt: 1928 }\n    }\n  }\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1713,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the names of customers who have the most mailshots.",
            "Retrieve the name of the customer who has received the highest number of mailshots.",
            "Provide the name of the customer associated with the most mailshots.",
            "Identify the customer with the greatest number of mailshots and display their name.",
            "What is the name of the customer that has partaken in the most mailshots?"
        ],
        "ref_sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  \n  { $unwind: \"$Mailshot_Customers\" },\n  \n  \n  { \n    $group: {\n      _id: \"$customer_id\",\n      mailshotCount: { $sum: 1 },\n      customer_name: { $first: \"$customer_name\" } \n    }\n  },\n  \n  \n  { $sort: { mailshotCount: -1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  { \n    $project: {\n      _id: 0,\n      customer_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2625,
        "db_id": "mountain_photos",
        "nl_queries": [
            "How many camera lenses are not used in taking any photos?",
            "What is the total number of camera lenses that have not been utilized for any photographs?",
            "Identify how many camera lenses are currently not associated with any photos.",
            "How many camera lenses exist without being used for taking pictures?",
            "Count the camera lenses that haven’t been used in any photography."
        ],
        "ref_sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "MQL": "db.camera_lens.aggregate([\n  {\n    $lookup: {\n      from: \"mountain\",\n      localField: \"id\",\n      foreignField: \"photos.camera_lens_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2084,
        "db_id": "game_injury",
        "nl_queries": [
            "What is the average attendance of stadiums with capacity percentage higher than 100%?",
            "How much is the average attendance for stadiums that have a capacity usage over 100%?",
            "What is the average attendance figure for stadiums exceeding their capacity percentage of 100%?",
            "Can you tell me the average attendance of stadiums with a capacity percentage that surpasses 100%?",
            "What average attendance is recorded in stadiums that utilize more than their full capacity?"
        ],
        "ref_sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage > 100",
        "MQL": "db.stadium.find({\n  \"Capacity_Percentage\": { $gt: 100 }\n}, { \"Average_Attendance\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3200,
        "db_id": "csu_1",
        "nl_queries": [
            "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
            "How many faculty lines are there at San Francisco State University in 2004?",
            "What is the total number of faculty members at \"San Francisco State University\" for the year 2004?",
            "Can you tell me how many faculty lines exist in 2004 at San Francisco State University?",
            "How many faculty positions were there at San Francisco State University in the year 2004?"
        ],
        "ref_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Francisco State University\"\n    }\n  },\n  {\n    $unwind: \"$faculty\"\n  },\n  {\n    $match: {\n      \"faculty.Year\": 2004\n    }\n  },\n  {\n    $project: {\n      Faculty: \"$faculty.Faculty\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 751,
        "db_id": "wrestler",
        "nl_queries": [
            "What are the names of wrestlers days held less than 100?",
            "Return the names of wrestlers with fewer than 100 days held.",
            "List the names of wrestlers who have held their title for less than 100 days.",
            "Provide the names of wrestlers with a reign of fewer than 100 days.",
            "Identify the wrestlers whose days held is under 100 and present their names."
        ],
        "ref_sql": "SELECT Name FROM wrestler WHERE Days_held < 100",
        "MQL": "db.wrestler.find(\n  {\n    Days_held: { $lt: \"100\" }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 1548,
        "db_id": "driving_school",
        "nl_queries": [
            "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
            "What is the zip code of the hosue of the employee named Janessa Sawayn?",
            "Can you provide the zip code for the staff member whose first name is Janessa and last name is Sawayn?",
            "What zip code is associated with the employee named Janessa Sawayn?",
            "Please tell me the postal code for Janessa Sawayn, the staff member."
        ],
        "ref_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $project: {\n      zip_postcode: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2029,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "List the year in which there are more than one festivals.",
            "Identify the years that hosted multiple festivals.",
            "Provide a list of years with more than one festival taking place.",
            "Which years had more than a single festival event?",
            "List all years during which there were at least two festivals."
        ],
        "ref_sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*) > 1",
        "MQL": "db.festival_detail.aggregate([\n  {\n    $group: {\n      _id: \"$Year\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Year: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3267,
        "db_id": "game_1",
        "nl_queries": [
            "Show the game name that has most number of hours played.",
            "What is the name of the game that has been played the most?",
            "Which game has the highest total hours of gameplay?",
            "Identify the name of the game that has accumulated the greatest number of hours played.",
            "What is the title of the game that players have spent the most time on?"
        ],
        "ref_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $unwind: \"$Plays_Games\"\n  },\n  {\n    $group: {\n      _id: \"$GameID\",\n      GName: { $first: \"$GName\" },\n      sum_Hours_Played: { $sum: \"$Plays_Games.Hours_Played\" }\n    }\n  },\n  {\n    $sort: { sum_Hours_Played: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      GName: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1407,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of the students who have more than one advisor?",
            "What are the names of students who have more than one advisor?",
            "List the names of students who possess multiple advisors.",
            "Which students have more than one advisor? Please provide their names.",
            "Show me the names of all students with an excess of one advisor."
        ],
        "ref_sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count(*) > 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $unwind: \"$student.advisor\"\n  },\n  {\n    $group: {\n      _id: \"$student.ID\",\n      name: { $first: \"$student.name\" },\n      advisorCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      advisorCount: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2273,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show all calendar dates and day Numbers.",
            "What are all the calendar dates and day Numbers?",
            "Retrieve all calendar dates along with their corresponding day numbers.",
            "List out every calendar date and its associated day number.",
            "Can you provide the complete list of calendar dates paired with their day numbers?"
        ],
        "ref_sql": "SELECT calendar_date , day_Number FROM Ref_calendar",
        "MQL": "db.Ref_Calendar.find({}, { Calendar_Date: 1, Day_Number: 1, _id: 0 });\n"
    },
    {
        "record_id": 2879,
        "db_id": "college_1",
        "nl_queries": [
            "How many different locations does each school have?",
            "Count different addresses of each school.",
            "What is the count of unique locations for each school?",
            "How many unique department addresses are there for each school?",
            "Determine the number of distinct addresses for each school's departments."
        ],
        "ref_sql": "SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.SCHOOL_CODE\",\n      count_DISTINCT_dept_address: {\n        $addToSet: \"$DEPARTMENT.DEPT_ADDRESS\"\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_dept_address: {\n        $size: \"$count_DISTINCT_dept_address\"\n      },\n      SCHOOL_CODE: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3875,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What are the name and description for role code \"MG\"?",
            "Find the name and description of the role with code \"MG\".",
            "Can you provide the name and description of the role that has the code \"MG\"?",
            "Show me the role name and description for the role with the code \"MG\".",
            "What is the role name and its description for the code \"MG\"?"
        ],
        "ref_sql": "SELECT role_name , role_description FROM ROLES WHERE role_code = \"MG\"",
        "MQL": "db.Roles.find(\n  { Role_Code: \"MG\" },\n  { Role_Name: 1, Role_Description: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3810,
        "db_id": "department_store",
        "nl_queries": [
            "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
            "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
            "List all product IDs for those that have been ordered more than three times or have a total purchase amount exceeding 80000.",
            "Provide the IDs of products that have been ordered more than three times or have accumulated a total purchase value above 80000.",
            "What are the IDs of products that are either ordered more than thrice or whose total amount purchased is greater than 80000?"
        ],
        "ref_sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased) > 80000",
        "MQL": "db.Products.aggregate([\n  {\n    $lookup: {\n      from: \"Customers\",\n      let: { product_id: \"$product_id\" },\n      pipeline: [\n        { $unwind: \"$Customer_Orders\" },\n        { $unwind: \"$Customer_Orders.Order_Items\" },\n        {\n          $match: {\n            $expr: { $eq: [\"$Customer_Orders.Order_Items.product_id\", \"$$product_id\"] }\n          }\n        },\n        {\n          $group: {\n            _id: \"$Customer_Orders.Order_Items.product_id\",\n            order_count: { $sum: 1 }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Suppliers\",\n      let: { product_id: \"$product_id\" },\n      pipeline: [\n        { $unwind: \"$Product_Suppliers\" },\n        {\n          $match: {\n            $expr: { $eq: [\"$Product_Suppliers.product_id\", \"$$product_id\"] }\n          }\n        },\n        {\n          $group: {\n            _id: \"$Product_Suppliers.product_id\",\n            total_amount_purchased: { $sum: { $toDouble: \"$Product_Suppliers.total_amount_purchased\" } }\n          }\n        }\n      ],\n      as: \"Docs2\"\n    }\n  },\n  {\n    $project: {\n      product_id: 1,\n      order_count: { $arrayElemAt: [\"$Docs1.order_count\", 0] },\n      total_amount_purchased: { $arrayElemAt: [\"$Docs2.total_amount_purchased\", 0] }\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { order_count: { $gt: 3 } },\n        { total_amount_purchased: { $gt: 80000 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      product_id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3721,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
            "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
            "Can you provide the details of all organizations that are labeled as 'Sponsor'? Please arrange them in ascending order.",
            "Retrieve the information for all entities classified under the description 'Sponsor' and sort the results in alphabetical order.",
            "What details can you share about the organizations identified as Sponsors? Make sure to sort them in an ascending sequence."
        ],
        "ref_sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $match: {\n      organisation_type_description: \"Sponsor\"\n    }\n  },\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $project: {\n      organisation_details: \"$Organisations.organisation_details\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      organisation_details: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4245,
        "db_id": "flight_company",
        "nl_queries": [
            "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
            "Retrieve the vehicle flight number, date, and pilot for all flights sorted by their altitude.",
            "Show the flight details, including vehicle flight number, date, and pilot, arranged in ascending order of altitude.",
            "Provide a list of all flights with their vehicle flight numbers, dates, and pilots, ordered by altitude.",
            "Fetch the vehicle flight number, date, and pilot information for every flight, sorted by altitude."
        ],
        "ref_sql": "SELECT vehicle_flight_number , date , pilot FROM flight ORDER BY altitude ASC",
        "MQL": "db.operate_company.aggregate([\n  { $unwind: \"$flight\" },\n  { $project: {\n      \"Vehicle_Flight_number\": \"$flight.Vehicle_Flight_number\",\n      \"Date\": \"$flight.Date\",\n      \"Pilot\": \"$flight.Pilot\",\n      \"Altitude\": \"$flight.Altitude\",\n      \"_id\": 0\n    }\n  },\n  { $sort: { \"Altitude\": 1 } },\n  { $project: {\n      \"Vehicle_Flight_number\": 1,\n      \"Date\": 1,\n      \"Pilot\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1532,
        "db_id": "movie_1",
        "nl_queries": [
            "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
            "For each director who directed more than one movie, what are the titles and dates of release for all those movies?",
            "List the titles and release years of all films directed by directors who have created more than one movie.",
            "For each director with multiple films, provide the titles along with the years of release for those films.",
            "Return the titles and production years of every movie directed by directors who have at least two films to their name."
        ],
        "ref_sql": "SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title",
        "MQL": "db.Movie.aggregate([\n  {\n    $group: {\n      _id: \"$director\",\n      movies: {\n        $push: {\n          title: \"$title\",\n          year: \"$year\"\n        }\n      },\n      movieCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      movieCount: { $gt: 1 }\n    }\n  },\n  {\n    $unwind: \"$movies\"\n  },\n  {\n    $project: {\n      _id: 0,\n      title: \"$movies.title\",\n      year: \"$movies.year\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 991,
        "db_id": "election",
        "nl_queries": [
            "Show the delegates and the names of the party they belong to.",
            "For each delegate, find the names of the party they are part of.",
            "List the names of the parties along with their respective delegates.",
            "Retrieve the names of each delegate alongside the party affiliations.",
            "Provide the party names corresponding to each delegate."
        ],
        "ref_sql": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
        "MQL": "db.county.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $lookup: {\n      from: \"party\",\n      localField: \"election.Party\",\n      foreignField: \"Party_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Delegate: \"$election.Delegate\",\n      Party: \"$Docs1.Party\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 349,
        "db_id": "sports_competition",
        "nl_queries": [
            "What are the distinct years in which the competitions type is not \"Tournament\"?",
            "What are the different years for all competitions that are not of type equal to tournament?",
            "Which years feature competitions that are not categorized as \"Tournament\"?",
            "Can you list the unique years of competitions excluding those labeled as tournaments?",
            "What years are associated with competitions that do not fall under the \"Tournament\" category?"
        ],
        "ref_sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
        "MQL": "db.competition.aggregate([\n  {\n    $match: {\n      Competition_type: { $ne: \"Tournament\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Year\"\n    }\n  },\n  {\n    $project: {\n      Year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4196,
        "db_id": "twitter_1",
        "nl_queries": [
            "Return the text of tweets about the topic 'intern'.",
            "Provide the text of tweets discussing the topic 'intern'.",
            "Fetch tweets that are related to 'intern' and return their texts.",
            "List the tweets that mention 'intern' and display their content.",
            "Extract and show the texts of tweets that pertain to the subject of 'intern'."
        ],
        "ref_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "MQL": "db.user_profiles.aggregate([\n  { $unwind: \"$tweets\" },\n  { $match: { \"tweets.text\": { $regex: \"intern\", $options: \"i\" } } },\n  { $project: { \"text\": \"$tweets.text\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2032,
        "db_id": "election",
        "nl_queries": [
            "Show the zip code of the county with name \"Howard\".",
            "What is the zip code the county named \"Howard\" is located in?",
            "What is the zip code for the county called \"Howard\"?",
            "Provide the postal code for the county named \"Howard\".",
            "Can you tell me the zip code of the county with the name \"Howard\"?"
        ],
        "ref_sql": "SELECT Zip_code FROM county WHERE County_name = \"Howard\"",
        "MQL": "db.county.find(\n  { \"County_name\": \"Howard\" },\n  { \"Zip_code\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 3465,
        "db_id": "party_people",
        "nl_queries": [
            "Return the minister who left office at the latest time.",
            "Which minister left office the latest?",
            "Who is the most recently departed minister?",
            "Identify the minister that left office last.",
            "Name the minister who exited office most recently."
        ],
        "ref_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $sort: {\n      \"party.Left_office\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Minister: \"$party.Minister\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2987,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find the names of customers whose name contains \"Diana\".",
            "Which customers have the substring \"Diana\" in their names? Return the customer details.",
            "List the customers that have \"Diana\" appearing in their names.",
            "Retrieve customer details for those whose names include the string \"Diana\".",
            "Identify which customers possess \"Diana\" somewhere in their names and provide their details."
        ],
        "ref_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      Customer_Details: {\n        $regex: \"Diana\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $project: {\n      Customer_Details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 544,
        "db_id": "course_teach",
        "nl_queries": [
            "What is the hometown of the youngest teacher?",
            "Where is the youngest teacher from?",
            "What is the place of origin for the youngest teacher?",
            "Can you tell me the hometown of the teacher with the least age?",
            "Where does the youngest teacher hail from?"
        ],
        "ref_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "MQL": "db.teacher.aggregate([\n  {\n    $addFields: {\n      age_numeric: { $toInt: \"$Age\" }\n    }\n  },\n  {\n    $sort: { age_numeric: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Hometown: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1047,
        "db_id": "world_1",
        "nl_queries": [
            "What are the names of nations where both English and French are official languages?",
            "Give the names of countries with English and French as official languages.",
            "List the countries where English and French are recognized as official languages.",
            "Identify nations that have both English and French as their official languages.",
            "What countries designate English and French as official languages?"
        ],
        "ref_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      \"countrylanguage\": {\n        $all: [\n          {\n            $elemMatch: {\n              Language: \"English\",\n              IsOfficial: \"T\"\n            }\n          },\n          {\n            $elemMatch: {\n              Language: \"French\",\n              IsOfficial: \"T\"\n            }\n          }\n        ]\n      }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 433,
        "db_id": "club_1",
        "nl_queries": [
            "Find the names of the clubs that have at least a member from the city with city code \"HOU\".",
            "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.",
            "List the names of clubs that include members from the city designated by the code \"HOU\".",
            "Identify the clubs that have members whose city code is \"HOU\" and provide their names.",
            "What are the names of clubs that have at least one member located in the city with the code \"HOU\"?"
        ],
        "ref_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\"",
        "MQL": "db.Club.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.city_code\": \"HOU\"\n    }\n  },\n  {\n    $project: {\n      ClubName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 113,
        "db_id": "chinook_1",
        "nl_queries": [
            "How many tracks belong to rock genre?",
            "Count the number of tracks that are part of the rock genre.",
            "What is the total number of tracks in the rock genre?",
            "How many music tracks are categorized under the Rock genre?",
            "Please provide the count of all tracks that fall within the rock genre."
        ],
        "ref_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
        "MQL": "db.Genre.aggregate([\n  {\n    $match: {\n      Name: \"Rock\"\n    }\n  },\n  {\n    $project: {\n      \"COUNT\": {\n        $size: \"$Track\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 782,
        "db_id": "farm",
        "nl_queries": [
            "List the official names of cities that have not held any competition.",
            "What are the official names of cities that have not hosted a farm competition?",
            "Provide the names of cities that have not participated in any farm competitions.",
            "Identify the official names of cities without any records of hosting competitions.",
            "Which cities have not been involved in any farm competitions? List their official names."
        ],
        "ref_sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
        "MQL": "db.city.find({\n  \"farm_competition\": {\n    $exists: false\n  }\n}, {\n  \"Official_Name\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 754,
        "db_id": "party_host",
        "nl_queries": [
            "Show different nationalities along with the number of hosts of each nationality.",
            "How many hosts does each nationality have? List the nationality and the count.",
            "List each nationality and the total number of hosts associated with it.",
            "Provide a count of hosts for each nationality, including the nationality names.",
            "Display the nationalities along with their respective host counts."
        ],
        "ref_sql": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
        "MQL": "db.host.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Nationality: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 385,
        "db_id": "student_1",
        "nl_queries": [
            "Report the first name and last name of all the students.",
            "Show each student's first name and last name.",
            "Provide the first and last names of all students enrolled.",
            "List the first and last names for each student in the database.",
            "Display every student's first name along with their last name."
        ],
        "ref_sql": "SELECT DISTINCT firstname , lastname FROM list",
        "MQL": "db.list.find({}, { FirstName: 1, LastName: 1, _id: 0 });\n"
    },
    {
        "record_id": 3170,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
            "Can you provide the email address for the student named Emma Rohan?",
            "What is the email address of Emma Rohan, the student?",
            "Please tell me the email of the student who goes by the name Emma Rohan.",
            "I would like to know the email address of the student with the first name Emma and the last name Rohan."
        ],
        "ref_sql": "SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Students\"  \n  },\n  {\n    $match: {\n      \"Students.first_name\": \"Emma\",  \n      \"Students.last_name\": \"Rohan\"  \n    }\n  },\n  {\n    $project: {\n      email_address: \"$Students.email_address\",  \n      _id: 0  \n    }\n  }\n]);\n"
    },
    {
        "record_id": 839,
        "db_id": "solvency_ii",
        "nl_queries": [
            "List the name of products in ascending order of price.",
            "List all product names in ascending order of price.",
            "Sort the names of products in ascending order of their price.",
            "Retrieve the names of all products sorted by price in increasing order.",
            "Display all product names arranged by their prices from lowest to highest."
        ],
        "ref_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "MQL": "db.Products.find({}, { Product_Name: 1, _id: 0 }).sort({ Product_Price: 1 });\n"
    },
    {
        "record_id": 3966,
        "db_id": "program_share",
        "nl_queries": [
            "Find the total rating ratio for each channel owner.",
            "What is the total rating of channel for each channel owner?",
            "Calculate the overall rating percentage for each owner of the channels.",
            "What is the cumulative rating score for each channel's owner?",
            "Determine the total channel ratings attributed to each owner."
        ],
        "ref_sql": "SELECT sum(Rating_in_percent) , OWNER FROM channel GROUP BY OWNER",
        "MQL": "db.channel.aggregate([\n  {\n    $group: {\n      _id: \"$Owner\",\n      sum_Rating_in_percent: {\n        $sum: \"$Rating_in_percent\"\n      }\n    }\n  },\n  {\n    $project: {\n      sum_Rating_in_percent: 1,\n      Owner: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 351,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "What are the distinct address type codes for all customer addresses?",
            "List all the unique address type codes found in customer addresses.",
            "What are the various address type codes for customer addresses that are distinct?",
            "Can you provide the unique codes representing different types of customer addresses?",
            "Identify the different address type codes present across all customer addresses."
        ],
        "ref_sql": "SELECT DISTINCT address_type_code FROM customer_addresses",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Customer_Addresses\" },\n  { $group: { _id: \"$Customer_Addresses.address_type_code\" } },\n  { $project: { _id: 0, address_type_code: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 3669,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the names of races held after 12:00:00 or before 09:00:00?",
            "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
            "Please list the names of races that take place either after 12:00 PM or before 9:00 AM.",
            "What are the names of the races that happen post 12:00:00 or prior to 09:00:00?",
            "Identify the names of all races scheduled after 12:00:00 or those that occur before 09:00:00."
        ],
        "ref_sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"races.time\": { $gt: \"12:00:00\" } },\n        { \"races.time\": { $lt: \"09:00:00\" } }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$races.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 304,
        "db_id": "department_store",
        "nl_queries": [
            "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
            "What are the distinct names and phone numbers for suppliers who have red jeans?",
            "Retrieve the unique names and contact numbers of suppliers that offer red jeans.",
            "Show the distinct supplier names along with their phone numbers for those that supply red jeans.",
            "What are the names and phone numbers of all unique suppliers providing red jeans?"
        ],
        "ref_sql": "SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = \"red jeans\"",
        "MQL": "db.Suppliers.aggregate([\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"Product_Suppliers.product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.product_name\": \"red jeans\"\n    }\n  },\n  {\n    $project: {\n      supplier_name: 1,\n      supplier_phone: 1\n    }\n  },\n  {\n    $group: {\n      _id: {\n        supplier_name: \"$supplier_name\",\n        supplier_phone: \"$supplier_phone\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      supplier_name: \"$_id.supplier_name\",\n      supplier_phone: \"$_id.supplier_phone\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4014,
        "db_id": "loan_1",
        "nl_queries": [
            "How many customers are there?",
            "What is the total number of customers across banks?",
            "What is the total count of customers in all banks?",
            "How many total customers are registered across the banking system?",
            "Can you tell me the aggregate number of customers from all bank branches?"
        ],
        "ref_sql": "SELECT sum(no_of_customers) FROM bank",
        "MQL": "db.bank.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_no_of_customers: {\n        $sum: \"$no_of_customers\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_no_of_customers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 820,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "Show all the planned delivery dates and actual delivery dates of bookings.",
            "What are the planned delivery date and actual delivery date for each booking?",
            "List all planned and actual delivery dates for each booking made by clients.",
            "Retrieve the planned and actual delivery dates associated with all bookings.",
            "Provide the planned and actual delivery dates for every booking in the system."
        ],
        "ref_sql": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Clients\"\n  },\n  {\n    $unwind: \"$Clients.Bookings\"\n  },\n  {\n    $project: {\n      Planned_Delivery_Date: \"$Clients.Bookings.Planned_Delivery_Date\",\n      Actual_Delivery_Date: \"$Clients.Bookings.Actual_Delivery_Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2944,
        "db_id": "swimming",
        "nl_queries": [
            "How many stadiums does each country have?",
            "What is the total number of stadiums found in each country?",
            "Can you provide the count of stadiums for every country?",
            "How many stadiums are there in total for each country?",
            "Please list the number of stadiums located in each country."
        ],
        "ref_sql": "SELECT country , count(*) FROM stadium GROUP BY country",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3144,
        "db_id": "document_management",
        "nl_queries": [
            "Find the types of documents with more than 4 documents.",
            "What are the codes of types of documents of which there are for or more?",
            "List the document types that have more than four associated documents.",
            "Identify the codes for document types that contain four or more documents.",
            "What document type codes are there for types that have over four documents?"
        ],
        "ref_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.document_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 4 }\n    }\n  },\n  {\n    $project: {\n      document_type_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3851,
        "db_id": "activity_1",
        "nl_queries": [
            "For each faculty rank, show the number of faculty members who have it.",
            "How many faculty members do we have for each faculty rank?",
            "Provide the count of faculty members for each rank they hold.",
            "List each faculty rank along with the number of members associated with it.",
            "How many faculty members belong to each rank category?"
        ],
        "ref_sql": "SELECT rank , count(*) FROM Faculty GROUP BY rank",
        "MQL": "db.Faculty.aggregate([\n  {\n    $group: {\n      _id: \"$Rank\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3174,
        "db_id": "college_1",
        "nl_queries": [
            "Find the count and code of the job has most employees.",
            "What is the count and code of the job with the most employee?",
            "What is the job code associated with the largest number of employees, and how many are there?",
            "Identify the job with the highest employee count and provide its code along with the total number of employees.",
            "Determine which job has the most employees and indicate both the job code and the corresponding employee count."
        ],
        "ref_sql": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $group: {\n      _id: \"$EMP_JOBCODE\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      EMP_JOBCODE: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2301,
        "db_id": "product_catalog",
        "nl_queries": [
            "Which catalog publisher has published the most catalogs?",
            "Find the catalog publisher that has the most catalogs.",
            "Who is the catalog publisher with the highest number of published catalogs?",
            "Identify the catalog publisher that has issued the most catalogs.",
            "Which publisher holds the record for publishing the most catalogs?"
        ],
        "ref_sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $group: {\n      _id: \"$catalog_publisher\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      catalog_publisher: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 307,
        "db_id": "flight_company",
        "nl_queries": [
            "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
            "Which unique types of companies have conducted flights with a velocity of less than 200?",
            "Can you list the different company types that operate flights with a speed under 200?",
            "What are the various types of companies that have flights with velocities below 200?",
            "Identify the distinct company categories involved in flights that fly at a velocity less than 200."
        ],
        "ref_sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200",
        "MQL": "db.operate_company.aggregate([\n  \n  { $unwind: \"$flight\" },\n  \n  { $match: { \"flight.Velocity\": { $lt: 200 } } },\n  \n  { $group: { _id: \"$Type\" } },\n  \n  { $project: { \"Type\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1333,
        "db_id": "party_people",
        "nl_queries": [
            "List member names and their party names.",
            "What are the names of members and their corresponding parties?",
            "Provide the names of the members along with the names of their respective political parties.",
            "Can you give me the names of members and the parties they belong to?",
            "Show me the member names together with the names of the parties they represent."
        ],
        "ref_sql": "SELECT T1.member_name , T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $unwind: \"$party.member\"\n  },\n  {\n    $project: {\n      Member_Name: \"$party.member.Member_Name\",\n      Party_name: \"$party.Party_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3940,
        "db_id": "college_1",
        "nl_queries": [
            "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
            "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?",
            "Who is the youngest student with a GPA higher than 3, and what are their first name, last name, and GPA?",
            "Identify the first name, last name, and GPA of the student with the highest GPA who is also the youngest in the group with GPAs over 3.",
            "Can you tell me the first and last names, along with the GPA, of the youngest student among those having a GPA above 3?"
        ],
        "ref_sql": "SELECT stu_fname , stu_lname , stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.STUDENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.STUDENT.STU_GPA\": { $gt: 3 }\n    }\n  },\n  {\n    $sort: {\n      \"DEPARTMENT.STUDENT.STU_DOB\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      STU_FNAME: \"$DEPARTMENT.STUDENT.STU_FNAME\",\n      STU_LNAME: \"$DEPARTMENT.STUDENT.STU_LNAME\",\n      STU_GPA: \"$DEPARTMENT.STUDENT.STU_GPA\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1000,
        "db_id": "flight_2",
        "nl_queries": [
            "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "Give the flight numbers of flights arriving in Aberdeen.",
            "What are the flight numbers for flights that go to Aberdeen?",
            "List the flight numbers for all flights heading to the city of Aberdeen.",
            "Can you provide the flight numbers for flights arriving at Aberdeen?"
        ],
        "ref_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      City: \"Aberdeen\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FlightNo: \"$flights.FlightNo\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1974,
        "db_id": "ship_mission",
        "nl_queries": [
            "What are the type and nationality of ships?",
            "What are the types and nationalities of every ship?",
            "Can you provide the types and nationalities of ships?",
            "List the ship types along with their nationalities.",
            "What ship classifications and their respective nationalities can you share?"
        ],
        "ref_sql": "SELECT TYPE , Nationality FROM ship",
        "MQL": "db.ship.find({}, { Type: 1, Nationality: 1, _id: 0 });\n"
    },
    {
        "record_id": 1852,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the protein name and the institution name.",
            "List the names of proteins along with their corresponding institution names.",
            "Provide the protein names together with the names of the institutions they belong to.",
            "Display the institution name alongside each protein name.",
            "Retrieve the names of proteins and the institutions they are associated with."
        ],
        "ref_sql": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
        "MQL": "db.building.aggregate([\n  { $unwind: \"$Institution\" },\n  { $unwind: \"$Institution.protein\" },\n  {\n    $project: {\n      \"protein_name\": \"$Institution.protein.protein_name\",\n      \"Institution\": \"$Institution.Institution\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1482,
        "db_id": "department_store",
        "nl_queries": [
            "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
            "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
            "Retrieve the names and genders of staff assigned to the role of Sales Person, excluding anyone who has worked as Clerical Staff.",
            "List the names and genders of staff members who have been identified as Sales Persons but have never held the title of Clerical Staff.",
            "What are the names and genders of employees who are designated as Sales Persons and have had no prior assignments as Clerical Staff?"
        ],
        "ref_sql": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Sales Person\" EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\"",
        "MQL": "db.Staff.aggregate([\n  {\n    $unwind: \"$Staff_Department_Assignments\"\n  },\n  {\n    $group: {\n      _id: \"$staff_id\",\n      staff_name: { $first: \"$staff_name\" },\n      staff_gender: { $first: \"$staff_gender\" },\n      job_titles: { $addToSet: \"$Staff_Department_Assignments.job_title_code\" }\n    }\n  },\n  {\n    $match: {\n      job_titles: { $in: [\"Sales Person\"], $nin: [\"Clerical Staff\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      staff_name: 1,\n      staff_gender: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3908,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "List the type of the services in alphabetical order.",
            "Generate an alphabetical list of service types available.",
            "Provide a sorted list of service types in ascending order.",
            "Display the types of services sorted alphabetically.",
            "Show all service types organized in alphabetical sequence."
        ],
        "ref_sql": "SELECT service_type_code FROM services ORDER BY service_type_code",
        "MQL": "db.Services.find({}, { \"Service_Type_Code\": 1, \"_id\": 0 }).sort({ \"Service_Type_Code\": 1 });\n"
    },
    {
        "record_id": 493,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "What is the id of the event with the most participants?",
            "Which event has the highest number of participants, and what is its ID?",
            "Can you tell me the event ID for the event with the largest participant count?",
            "What is the identifier of the event that attracts the most participants?",
            "Provide the ID for the event that has the most attendees."
        ],
        "ref_sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Services.aggregate([\n  { $unwind: \"$Events\" },\n  { $unwind: \"$Events.Participants_in_Events\" },\n  { \n    $group: {\n      _id: \"$Events.Event_ID\",\n      participantCount: { $sum: 1 }\n    }\n  },\n  { $sort: { participantCount: -1 } },\n  { $limit: 1 },\n  { $project: { Event_ID: \"$_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 2936,
        "db_id": "epinions_1",
        "nl_queries": [
            "How many different users wrote some reviews?",
            "What is the total number of unique users who submitted reviews?",
            "How many distinct users have written reviews?",
            "Can you tell me the count of individual users who have posted reviews?",
            "How many users are there that contributed reviews?"
        ],
        "ref_sql": "SELECT count(DISTINCT u_id) FROM review",
        "MQL": "db.useracct.aggregate([\n  { $unwind: \"$review\" },\n  { $group: { _id: \"$review.u_id\" } },\n  { $count: \"count_DISTINCT_u_id\" }\n]);\n"
    },
    {
        "record_id": 3496,
        "db_id": "architecture",
        "nl_queries": [
            "What are the names and year of construction for the mills of 'Grondzeiler' type?",
            "Can you provide the names along with the construction years of the mills categorized as 'Grondzeiler'?",
            "List the names and the corresponding years of construction for the mills that are of 'Grondzeiler' type.",
            "What are the names and the built years of mills that belong to the 'Grondzeiler' classification?",
            "Give me the names and the year of establishment for the mills identified as 'Grondzeiler'."
        ],
        "ref_sql": "SELECT name , built_year FROM mill WHERE TYPE = 'Grondzeiler'",
        "MQL": "db.architect.aggregate([\n  { $unwind: \"$mill\" },\n  { \n    $match: { \n      \"mill.type\": \"Grondzeiler\" \n    }\n  },\n  { \n    $project: { \n      \"_id\": 0, \n      \"name\": \"$mill.name\", \n      \"built_year\": \"$mill.built_year\" \n    } \n  }\n]);\n"
    },
    {
        "record_id": 894,
        "db_id": "music_4",
        "nl_queries": [
            "What is the song in the volume with the maximum weeks on top?",
            "Return the song in the volume that has spent the most weeks on top?",
            "Which song has the highest number of weeks in the top position?",
            "Identify the song from the volume that achieved the most weeks at the top.",
            "What is the title of the song that has spent the greatest number of weeks on top of the charts?"
        ],
        "ref_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $sort: {\n      \"volume.Weeks_on_Top\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Song: \"$volume.Song\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4171,
        "db_id": "station_weather",
        "nl_queries": [
            "Find names and times of trains that run through stations for the local authority Chiltern.",
            "Retrieve the names and schedules of trains serving stations under the Chiltern local authority.",
            "List the train names and their respective departure times for those running through Chiltern-authority stations.",
            "What are the names and timings of trains that stop at stations governed by the local authority of Chiltern?",
            "Show the names and time departures of trains that travel through stations associated with the Chiltern local authority."
        ],
        "ref_sql": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"",
        "MQL": "db.train.aggregate([\n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"route.station_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.local_authority\": \"Chiltern\"\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      time: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1097,
        "db_id": "gymnast",
        "nl_queries": [
            "What is the total point count of the youngest gymnast?",
            "Return the total points of the gymnast with the lowest age.",
            "What are the total points scored by the youngest athlete in gymnastics?",
            "Provide the total points for the gymnast who is the youngest.",
            "Can you tell me the total point score of the gymnast with the least age?"
        ],
        "ref_sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $sort: {\n      Age: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Total_Points: \"$gymnast.Total_Points\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3720,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
            "Provide the shipping charge and customer ID for orders that are either Cancelled or Paid.",
            "List the customer ID and the shipping charge for customer orders with a status of Cancelled or Paid.",
            "Display the customer ID along with the shipping fees for orders marked as Cancelled or Paid.",
            "Share the shipping costs and customer identification for orders that fall under the Cancelled or Paid status."
        ],
        "ref_sql": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'",
        "MQL": "db.Customers.aggregate([\n  { \n    $unwind: \"$Customer_Orders\" \n  },\n  { \n    $match: { \n      \"Customer_Orders.order_status_code\": { $in: [\"Cancelled\", \"Paid\"] }\n    }\n  },\n  {\n    $project: {\n      \"order_shipping_charges\": \"$Customer_Orders.order_shipping_charges\",\n      \"customer_id\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3874,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What is the complete description of the researcher role.",
            "What is the complete description of the job of a researcher?",
            "Can you provide the full description of the role associated with a researcher?",
            "What does the job description of a researcher entail in full detail?",
            "Describe in detail the responsibilities of the researcher role."
        ],
        "ref_sql": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'",
        "MQL": "db.Staff_Roles.find(\n  { role_code: \"researcher\" },\n  { role_description: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3104,
        "db_id": "company_1",
        "nl_queries": [
            "List all department names ordered by their starting date.",
            "Retrieve all department names sorted by the date their manager began.",
            "Show a list of department names arranged according to their manager's start date.",
            "Provide the names of all departments in the order of when their managers were hired.",
            "Display the department names listed by the starting date of their respective managers."
        ],
        "ref_sql": "SELECT dname FROM department ORDER BY mgr_start_date",
        "MQL": "db.department.find({}, { \"Dname\": 1, \"_id\": 0 }).sort({ \"Mgr_start_date\": 1 });\n"
    },
    {
        "record_id": 3898,
        "db_id": "game_injury",
        "nl_queries": [
            "List the season, home team, away team of all the games.",
            "Show the season, home team, and away team for every game played.",
            "Provide a list of all games with their respective season, home team, and away team.",
            "Retrieve the season along with the home and away teams for all recorded matches.",
            "What are the seasons and the corresponding home and away teams for each game?"
        ],
        "ref_sql": "SELECT season , home_team , away_team FROM game",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $project: {\n      \"Season\": \"$game.Season\",\n      \"Home_team\": \"$game.Home_team\",\n      \"Away_team\": \"$game.Away_team\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3701,
        "db_id": "swimming",
        "nl_queries": [
            "List countries that have more than one swimmer.",
            "Identify the nations that have multiple swimmers participating.",
            "Find all countries with a swimmer count exceeding one.",
            "Provide a list of countries that feature more than one swimmer.",
            "Which nations are represented by more than one swimmer in the database?"
        ],
        "ref_sql": "SELECT nationality , count(*) FROM swimmer GROUP BY nationality HAVING count(*) > 1",
        "MQL": "db.swimmer.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Nationality: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 145,
        "db_id": "singer",
        "nl_queries": [
            "Please show the most common citizenship of singers.",
            "What is the most frequent citizenship among singers?",
            "Can you tell me which citizenship is most common for singers?",
            "Identify the citizenship that the largest number of singers belong to.",
            "Show me the citizenship that occurs most often among singers."
        ],
        "ref_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.singer.aggregate([\n  { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { \"Citizenship\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2682,
        "db_id": "entrepreneur",
        "nl_queries": [
            "How many entrepreneurs are there?",
            "Count the number of entrepreneurs.",
            "What is the total number of entrepreneurs present?",
            "How many individuals are classified as entrepreneurs?",
            "Please provide the count of all entrepreneurial individuals."
        ],
        "ref_sql": "SELECT count(*) FROM entrepreneur",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2422,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the numbers of constructors for different nationalities?",
            "For each nationality, how many different constructors are there?",
            "How many unique constructors exist across various nationalities?",
            "What is the count of constructors grouped by their respective nationalities?",
            "Can you list the number of distinct constructors for each nationality?"
        ],
        "ref_sql": "SELECT count(*) , nationality FROM constructors GROUP BY nationality",
        "MQL": "db.constructors.aggregate([\n  {\n    $group: {\n      _id: \"$nationality\",\n      constructors: {\n        $addToSet: \"$constructorId\"\n      }\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$constructors\"\n      },\n      nationality: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1618,
        "db_id": "performance_attendance",
        "nl_queries": [
            "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
            "List the names of members along with the locations of the performances they have attended, sorted alphabetically by name.",
            "Provide the names of members and the corresponding performance locations they attended, arranged in ascending order of their names.",
            "Display members' names and the locations for the performances they participated in, organized in alphabetical order by the names.",
            "Retrieve the names of the members and the venues of their attended performances, sorted in ascending alphabetical order by member names."
        ],
        "ref_sql": "SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name ASC",
        "MQL": "db.member.aggregate([\n  {\n    $lookup: {\n      from: \"performance\",\n      localField: \"member_attendance.Performance_ID\",\n      foreignField: \"Performance_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Location\": \"$Docs1.Location\",\n      \"_id\": 0\n    }\n  },\n  {\n    $sort: { \"Name\": 1 }\n  }\n]);\n"
    },
    {
        "record_id": 29,
        "db_id": "college_2",
        "nl_queries": [
            "List the information of all instructors ordered by their salary in ascending order.",
            "Give all information regarding instructors, in order of salary from least to greatest.",
            "Retrieve the details of all instructors sorted by their salary in increasing order.",
            "Show all the information related to instructors arranged by salary from the smallest to the largest.",
            "Provide the complete information of instructors listed by their salaries in ascending sequence."
        ],
        "ref_sql": "SELECT * FROM instructor ORDER BY salary",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $sort: {\n      \"instructor.salary\": 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      ID: \"$instructor.ID\",\n      name: \"$instructor.name\",\n      dept_name: \"$instructor.dept_name\",\n      salary: \"$instructor.salary\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1248,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
            "Can you provide the electoral register IDs for entries with a source system code of 'Electoral' or 'Tax'?",
            "What electoral registration IDs correspond to the cross references with source system codes 'Electoral' or 'Tax'?",
            "List the IDs of electoral registers linked to source systems identified as 'Electoral' or 'Tax'.",
            "What are the IDs associated with electoral registries that are linked to the source systems named 'Electoral' and 'Tax'?"
        ],
        "ref_sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'",
        "MQL": "db.Customer_Master_Index.aggregate([\n  { \n    $unwind: \"$CMI_Cross_References\" \n  },\n  { \n    $match: { \n      \"CMI_Cross_References.source_system_code\": { \n        $in: [\"Electoral\", \"Tax\"] \n      } \n    } \n  },\n  { \n    $unwind: \"$CMI_Cross_References.Electoral_Register\" \n  },\n  { \n    $project: { \n      \"electoral_register_id\": \"$CMI_Cross_References.Electoral_Register.electoral_register_id\", \n      \"_id\": 0 \n    } \n  }\n]);\n"
    },
    {
        "record_id": 391,
        "db_id": "student_1",
        "nl_queries": [
            "Which grade is studying in classroom 103?",
            "Find the grade taught in classroom 103.",
            "What grade level is assigned to students in classroom 103?",
            "Identify the grade of the class in room number 103.",
            "Which grade corresponds to students studying in classroom 103?"
        ],
        "ref_sql": "SELECT DISTINCT grade FROM list WHERE classroom = 103",
        "MQL": "db.list.find({ \"Classroom\": 103 }, { \"Grade\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2513,
        "db_id": "activity_1",
        "nl_queries": [
            "How many activities does Mark Giuliano participate in?",
            "Find the number of activities Mark Giuliano is involved in.",
            "What is the total number of activities involving Mark Giuliano?",
            "How many activities is Mark Giuliano a part of?",
            "Count the activities that Mark Giuliano participates in."
        ],
        "ref_sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\"",
        "MQL": "db.Activity.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"Participates_in.stuid\",\n      foreignField: \"StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Faculty\",\n      localField: \"Faculty_Participates_in.FacID\",\n      foreignField: \"FacID\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"Docs1.Fname\": \"Mark\",\n          \"Docs1.LName\": \"Giuliano\"\n        },\n        {\n          \"Docs2.Fname\": \"Mark\",\n          \"Docs2.Lname\": \"Giuliano\"\n        }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2881,
        "db_id": "college_1",
        "nl_queries": [
            "Find the number of departments in each school.",
            "How many departments are in each school?",
            "How many distinct departments are there for each school?",
            "Calculate the total count of departments in each school.",
            "Determine the number of unique departments associated with every school."
        ],
        "ref_sql": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.SCHOOL_CODE\",\n      count_DISTINCT_dept_name: {\n        $addToSet: \"$DEPARTMENT.DEPT_NAME\"\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_dept_name: {\n        $size: \"$count_DISTINCT_dept_name\"\n      },\n      SCHOOL_CODE: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2965,
        "db_id": "college_2",
        "nl_queries": [
            "Find courses that ran in Fall 2009 but not in Spring 2010.",
            "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
            "Retrieve the IDs of courses that were offered in Fall 2009 but skipped Spring 2010.",
            "List the course IDs that ran during the Fall semester of 2009 and were not held in Spring 2010.",
            "What course IDs correspond to classes available in Fall 2009 but absent in Spring 2010?"
        ],
        "ref_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"course.section.semester\": \"Fall\",\n          \"course.section.year\": 2009\n        },\n        {\n          \"course.section.semester\": \"Spring\",\n          \"course.section.year\": 2010\n        }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$course.course_id\",\n      semesters: {\n        $addToSet: \"$course.section.semester\"\n      }\n    }\n  },\n  {\n    $match: {\n      semesters: {\n        $ne: \"Spring\"\n      }\n    }\n  },\n  {\n    $project: {\n      course_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1862,
        "db_id": "school_finance",
        "nl_queries": [
            "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
            "List the names of all schools along with their budgeted and invested amounts for the years starting from 2002.",
            "Provide a breakdown of each school’s name, together with the amounts budgeted and invested in 2002 and subsequent years.",
            "Display each school’s name along with their budgeted and invested funds for the years from 2002 onward.",
            "Retrieve the school names along with their budgeted and invested amounts for any budgets recorded from the year 2002 and later."
        ],
        "ref_sql": "SELECT T2.school_name , T1.budgeted , T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002",
        "MQL": "db.School.aggregate([\n  { $unwind: \"$budget\" },\n  { $match: { \"budget.Year\": { $gte: 2002 } } },\n  { $project: {\n      \"School_name\": 1,\n      \"Budgeted\": \"$budget.Budgeted\",\n      \"Invested\": \"$budget.Invested\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1526,
        "db_id": "theme_gallery",
        "nl_queries": [
            "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
            "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
            "List the themes and names of artists whose exhibitions charged a ticket price exceeding the average.",
            "Identify the artist names along with the themes for exhibitions that had ticket prices higher than the average amount.",
            "Show the exhibition themes and corresponding artist names for those events where ticket prices were above the average ticket price."
        ],
        "ref_sql": "SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT avg(ticket_price) FROM exhibition)",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Ticket_Price: { $avg: \"$exhibition.Ticket_Price\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"artist\",\n      let: { avg_Ticket_Price: \"$avg_Ticket_Price\" },\n      pipeline: [\n        {\n          $unwind: \"$exhibition\"\n        },\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$exhibition.Ticket_Price\", \"$$avg_Ticket_Price\"]\n            }\n          }\n        },\n        {\n          $project: {\n            Theme: \"$exhibition.Theme\",\n            Name: \"$Name\",\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Theme: \"$Docs1.Theme\",\n      Name: \"$Docs1.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3522,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
            "What are the names, headquarters and founders of the company with the highest revenue?",
            "What is the name, headquarters, and founder of the manufacturer that generates the most revenue?",
            "Provide the name, head office location, and founder of the company with the highest earnings.",
            "Identify the manufacturer with the largest revenue, along with its name, headquarter, and founder."
        ],
        "ref_sql": "SELECT name , headquarter , founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $sort: { Revenue: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Headquarter: 1,\n      Founder: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2746,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Compute the number of products with a price larger than or equal to $180.",
            "How many products have prices of at least 180?",
            "Find out how many products are priced at $180 or more.",
            "What is the total count of products that cost at least $180?",
            "Determine the number of items with a price of $180 or above."
        ],
        "ref_sql": "SELECT count(*) FROM products WHERE price >= 180",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.Price\": {\n        $gte: 180\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 441,
        "db_id": "icfp_1",
        "nl_queries": [
            "What are the papers published under the institution \"Indiana University\"?",
            "List the titles of the papers whose authors are from the institution \"Indiana University\".",
            "Can you provide the titles of papers authored by researchers from \"Indiana University\"?",
            "What papers have been published by individuals affiliated with the institution \"Indiana University\"?",
            "Show me the titles of the works produced by authors connected to \"Indiana University.\""
        ],
        "ref_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"Authorship.instID\",\n      foreignField: \"instID\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $match: {\n      \"Docs2.name\": \"Indiana University\"\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 159,
        "db_id": "phone_1",
        "nl_queries": [
            "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
            "Identify the company that produces the fewest number of phone models, including both the company name and the total count of models.",
            "What is the name of the company with the smallest number of phone models? Also provide the count of those models.",
            "Show the company name and the number of phone models for the company that has the least models manufactured.",
            "List the company that offers the fewest phone models, including its name and the respective model count."
        ],
        "ref_sql": "SELECT Company_name , count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
        "MQL": "db.chip_model.aggregate([\n  { $unwind: \"$phone\" },\n  { $group: { _id: \"$phone.Company_name\", count: { $sum: 1 } } },\n  { $sort: { count: 1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, Company_name: \"$_id\", count: 1 } }\n]);\n"
    },
    {
        "record_id": 4287,
        "db_id": "concert_singer",
        "nl_queries": [
            "What are the names , themes , and number of singers for every concert ?",
            "Can you provide the concert names, their themes, and the total number of singers for each event?",
            "What are the concert titles, themes, and singer counts for all concerts?",
            "List the names and themes of all concerts along with the number of singers participating in each.",
            "Show me the names, themes, and singer totals for every concert in the database."
        ],
        "ref_sql": "select t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$concert\" },\n  { $unwind: \"$concert.singer_in_concert\" },\n  {\n    $group: {\n      _id: \"$concert.concert_ID\",\n      concert_Name: { $first: \"$concert.concert_Name\" },\n      Theme: { $first: \"$concert.Theme\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      concert_Name: 1,\n      Theme: 1,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4178,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the papers which have \"Olin Shivers\" as an author.",
            "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
            "Retrieve the titles of papers authored by \"Olin Shivers\".",
            "List the papers written by the author \"Olin Shivers\" and show their titles.",
            "What are the titles of the papers that have \"Olin Shivers\" as one of their authors?"
        ],
        "ref_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.lname\": \"Shivers\",\n      \"Docs1.fname\": \"Olin\"\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3913,
        "db_id": "coffee_shop",
        "nl_queries": [
            "which shop has happy hour most frequently? List its id and number of happy hours.",
            "Which shop offers the highest number of happy hours? Please provide its ID along with the total count of happy hours.",
            "Identify the shop that has the most frequent happy hours and provide its identifier and the number of happy hours available.",
            "Which coffee shop has the most instances of happy hours? Include the shop ID and the corresponding happy hour count.",
            "What is the shop with the highest frequency of happy hours? List the shop's ID alongside the number of times happy hours are held."
        ],
        "ref_sql": "SELECT shop_id , count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.shop.aggregate([\n  { \n    $unwind: \"$happy_hour\" \n  },\n  { \n    $group: {\n      _id: \"$Shop_ID\",\n      count: { $sum: 1 }\n    }\n  },\n  { \n    $sort: { count: -1 } \n  },\n  { \n    $limit: 1 \n  },\n  { \n    $project: {\n      _id: 0,\n      Shop_ID: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1853,
        "db_id": "storm_record",
        "nl_queries": [
            "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
            "What are the names of regions that were affected by the storm in which the most people died?",
            "Which regions were impacted by the storm responsible for the highest number of casualties?",
            "List the names of the regions that experienced the storm with the most fatalities.",
            "What regions were affected by the storm that resulted in the greatest number of deaths?"
        ],
        "ref_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "MQL": "db.storm.aggregate([\n  {\n    $lookup: {\n      from: \"region\",\n      localField: \"affected_region.Region_id\",\n      foreignField: \"Region_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $sort: {\n      Number_Deaths: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Region_name: \"$Docs1.Region_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1727,
        "db_id": "college_1",
        "nl_queries": [
            "Find the name of department that offers the class whose description has the word \"Statistics\".",
            "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
            "Which department provides a class that includes \"Statistics\" in its course description?",
            "Identify the department that has a course described with the term \"Statistics\".",
            "What is the name of the department offering courses that mention \"Statistics\" in their descriptions?"
        ],
        "ref_sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.COURSE.CRS_DESCRIPTION\": {\n        $regex: \"Statistics\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      DEPT_NAME: \"$DEPARTMENT.DEPT_NAME\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 932,
        "db_id": "film_rank",
        "nl_queries": [
            "Show the studios that have not produced films with director \"Walter Hill\".",
            "Which studios have never worked with the director Walter Hill?",
            "List the studios that have not collaborated with director Walter Hill.",
            "Identify studios that have not made any films featuring Walter Hill as a director.",
            "Which film studios have not worked alongside Walter Hill on any projects?"
        ],
        "ref_sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
        "MQL": "db.film.aggregate([\n  {\n    $match: {\n      Director: \"Walter Hill\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      studiosWithWalterHill: { $addToSet: \"$Studio\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"film\",\n      pipeline: [\n        {\n          $group: {\n            _id: null,\n            allStudios: { $addToSet: \"$Studio\" }\n          }\n        }\n      ],\n      as: \"allStudios\"\n    }\n  },\n  {\n    $unwind: \"$allStudios\"\n  },\n  {\n    $project: {\n      studiosWithWalterHill: 1,\n      allStudios: \"$allStudios.allStudios\"\n    }\n  },\n  {\n    $project: {\n      studiosWithoutWalterHill: {\n        $setDifference: [\"$allStudios\", \"$studiosWithWalterHill\"]\n      }\n    }\n  },\n  {\n    $unwind: \"$studiosWithoutWalterHill\"\n  },\n  {\n    $project: {\n      Studio: \"$studiosWithoutWalterHill\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4200,
        "db_id": "film_rank",
        "nl_queries": [
            "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
            "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
            "List the titles and studios of films produced by any studio including the term \"Universal\" in its name.",
            "Show me the film titles and their respective studios for movies made by studios that feature \"Universal\" in their names.",
            "Get the names and studios of films where the producing studio has \"Universal\" somewhere in its title."
        ],
        "ref_sql": "SELECT title , Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "MQL": "db.film.aggregate([\n  {\n    $match: {\n      Studio: {\n        $regex: \"Universal\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $project: {\n      Title: 1,\n      Studio: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2080,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "List the all the assets make, model, details by the disposed date ascendingly.",
            "Retrieve the makes, models, and details of all assets sorted by their disposal date in ascending order.",
            "Show me a list of asset makes, models, and details organized by the disposed date from earliest to latest.",
            "Provide a list of all assets including their make, model, and details, ordered by the date they were disposed of, from oldest to newest.",
            "Can you list the asset makes, models, and details sorted in ascending order based on their disposal dates?"
        ],
        "ref_sql": "SELECT asset_make , asset_model , asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { \n    $unwind: \"$Assets\" \n  },\n  { \n    $sort: { \"Assets.asset_disposed_date\": 1 } \n  },\n  { \n    $project: { \n      _id: 0, \n      asset_make: \"$Assets.asset_make\", \n      asset_model: \"$Assets.asset_model\", \n      asset_details: \"$Assets.asset_details\" \n    } \n  }\n]);\n"
    },
    {
        "record_id": 4109,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What is the payment method of the customer that has purchased the least quantity of items?",
            "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
            "What payment method does the customer use who bought the fewest items?",
            "Can you provide the payment method for the customer who made the smallest number of purchases?",
            "What is the payment method for the customer with the least total order quantity?"
        ],
        "ref_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      total_quantity: {\n        $sum: {\n          $toInt: \"$Customer_Orders.Order_Items.order_quantity\"\n        }\n      },\n      payment_method: { $first: \"$payment_method\" }\n    }\n  },\n  {\n    $sort: { total_quantity: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      payment_method: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1109,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Which address holds the most number of students currently? List the address id and all lines.",
            "What is the id, line 1, and line 2 of the address with the most students?",
            "Identify the address that has the highest number of current students. Provide the address ID along with lines one and two.",
            "Which address is associated with the most students currently enrolled? Please include the address ID and both line 1 and line 2.",
            "What is the address ID and details (line 1, line 2) of the address that accommodates the largest student population?"
        ],
        "ref_sql": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $group: {\n      _id: \"$address_id\",\n      count: { $sum: 1 },\n      line_1: { $first: \"$line_1\" },\n      line_2: { $first: \"$line_2\" }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      address_id: \"$_id\",\n      line_1: 1,\n      line_2: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4269,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Tell me the number of dogs that have not received any treatment .",
            "How many dogs are there that haven't undergone any treatments?",
            "Provide me with the total count of dogs that received no veterinary treatment.",
            "Can you tell me the number of dogs that have not been treated at all?",
            "What is the count of dogs that do not have any recorded treatments?"
        ],
        "ref_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $match: {\n      \"Dogs.Treatments\": { $size: 0 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4136,
        "db_id": "station_weather",
        "nl_queries": [
            "Find the id and local authority of the station with has the highest average high temperature.",
            "Identify the station's id and local authority that records the highest average high temperature.",
            "What is the id and local authority of the station with the greatest average high temperature?",
            "Please provide the id and local authority for the station that has the highest weekly average of maximum temperatures.",
            "Find the station id and its local authority that experiences the highest average of high temperatures."
        ],
        "ref_sql": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
        "MQL": "db.station.aggregate([\n  {\n    $unwind: \"$weekly_weather\"\n  },\n  {\n    $group: {\n      _id: \"$id\",\n      local_authority: { $first: \"$local_authority\" },\n      avg_high_temperature: { $avg: \"$weekly_weather.high_temperature\" }\n    }\n  },\n  {\n    $sort: { avg_high_temperature: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      id: \"$_id\",\n      local_authority: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 229,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "Show all the distinct product names with price higher than the average.",
            "What are the distinct names of the products that cost more than the average?",
            "List all unique product names that have a price exceeding the average.",
            "Identify distinct product names priced above the average value.",
            "Provide the names of products that cost more than the average price, ensuring they are unique."
        ],
        "ref_sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > (SELECT avg(Product_Price) FROM PRODUCTS)",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Product_Price: { $avg: \"$Product_Price\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      let: { avg_Product_Price: \"$avg_Product_Price\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$Product_Price\", \"$$avg_Product_Price\"] }\n          }\n        },\n        {\n          $group: {\n            _id: \"$Product_Name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Product_Name: \"$Docs1._id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1757,
        "db_id": "network_2",
        "nl_queries": [
            "Find the female friends of Alice.",
            "What are all the friends of Alice who are female?",
            "List Alice's friends who are female.",
            "Identify the female friends associated with Alice.",
            "Who are Alice's friends that are women?"
        ],
        "ref_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      name: \"Alice\"\n    }\n  },\n  {\n    $unwind: \"$PersonFriend\"\n  },\n  {\n    $lookup: {\n      from: \"Person\",\n      localField: \"PersonFriend.friend\",\n      foreignField: \"name\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.gender\": \"female\"\n    }\n  },\n  {\n    $project: {\n      friend: \"$PersonFriend.friend\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3524,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
            "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
            "List the names and headquarters of all manufacturers, arranged in descending order of their revenue.",
            "Can you provide the names and headquarter locations for each manufacturer, sorted by highest revenue first?",
            "Show me the names and headquarters of manufacturers, prioritized by their revenue from highest to lowest."
        ],
        "ref_sql": "SELECT name , headquarter FROM manufacturers ORDER BY revenue DESC",
        "MQL": "db.Manufacturers.find({}, { Name: 1, Headquarter: 1, _id: 0 }).sort({ Revenue: -1 });\n"
    },
    {
        "record_id": 2811,
        "db_id": "wrestler",
        "nl_queries": [
            "How many wrestlers are there?",
            "Count the number of wrestlers.",
            "What is the total number of wrestlers in the database?",
            "Please provide the count of wrestlers available.",
            "How many wrestlers are present in the collection?"
        ],
        "ref_sql": "SELECT count(*) FROM wrestler",
        "MQL": "db.wrestler.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3877,
        "db_id": "inn_1",
        "nl_queries": [
            "Which room has cheapest base price? List the room's name and the base price.",
            "What are the room name and base price of the room with the lowest base price?",
            "What is the name and base price of the least expensive room available?",
            "Identify the room with the minimum base price; provide its name and base price.",
            "Which room offers the lowest base price? Please state the room's name along with the price."
        ],
        "ref_sql": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $sort: {\n      basePrice: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      roomName: 1,\n      basePrice: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1146,
        "db_id": "city_record",
        "nl_queries": [
            "Find the cities which were once a host city after 2010?",
            "Which cities served as a host city after 2010?",
            "List the cities that have hosted events since 2010.",
            "Which cities have acted as host cities after the year 2010?",
            "Identify the cities that have served as hosts for any events post-2010."
        ],
        "ref_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010",
        "MQL": "db.city.find({\n  hosting_city: {\n    $elemMatch: {\n      Year: { $gt: 2010 }\n    }\n  }\n}, {\n  City: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 471,
        "db_id": "election",
        "nl_queries": [
            "Show the delegate and committee information of elections.",
            "What are the delegate and committee information for each election record?",
            "Retrieve the details of delegates and committees from election records.",
            "What delegate and committee details are available for each election entry?",
            "Provide the delegate and committee information associated with all elections."
        ],
        "ref_sql": "SELECT Delegate , Committee FROM election",
        "MQL": "db.county.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $project: {\n      Delegate: \"$election.Delegate\",\n      Committee: \"$election.Committee\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 739,
        "db_id": "singer",
        "nl_queries": [
            "List the name of singers whose citizenship is not \"France\".",
            "What are the names of the singers who are not French citizens?",
            "Provide the names of singers who are not citizens of France.",
            "Show the names of singers that do not have French citizenship.",
            "Can I get a list of singer names whose citizenship is other than France?"
        ],
        "ref_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "MQL": "db.singer.find(\n  { Citizenship: { $ne: \"France\" } },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 509,
        "db_id": "flight_2",
        "nl_queries": [
            "What are flight numbers of flights arriving at Airport \"APG\"?",
            "Give the flight numbers of flights landing at APG.",
            "List the flight numbers for flights that are scheduled to arrive at airport code \"APG\".",
            "Provide the flight numbers of the flights that land at the APG airport.",
            "What are the flight numbers for arrivals into the airport designated by the code APG?"
        ],
        "ref_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
        "MQL": "db.airports.aggregate([\n  {\n    $unwind: \"$flights\"\n  },\n  {\n    $match: {\n      \"flights.DestAirport\": \"APG\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FlightNo: \"$flights.FlightNo\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3023,
        "db_id": "driving_school",
        "nl_queries": [
            "List all customer status codes and the number of customers having each status code.",
            "For each customer status code, how many customers are classified that way?",
            "Provide a breakdown of customer status codes along with the count of customers for each category.",
            "How many customers does each status code account for in the database?",
            "Enumerate the different customer status codes and indicate how many customers fall under each one."
        ],
        "ref_sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $group: {\n      _id: \"$Customers.customer_status_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      customer_status_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 28,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Give me all the information about hiring.",
            "What is all the information about hiring?",
            "Can you provide all details regarding employee hiring?",
            "Please show me all the information related to hires.",
            "What details can you give me about the hiring process for employees?"
        ],
        "ref_sql": "SELECT * FROM hiring",
        "MQL": "db.employee.aggregate([\n  {\n    $unwind: \"$hiring\"\n  },\n  {\n    $project: {\n      Shop_ID: \"$hiring.Shop_ID\",\n      Employee_ID: \"$hiring.Employee_ID\",\n      Start_from: \"$hiring.Start_from\",\n      Is_full_time: \"$hiring.Is_full_time\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1612,
        "db_id": "roller_coaster",
        "nl_queries": [
            "Show the names of roller coasters and names of country they are in.",
            "List the names of roller coasters along with their associated country names.",
            "Provide the names of roller coasters and the countries where they are found.",
            "Display the roller coaster names together with the names of the countries they belong to.",
            "Retrieve the names of roller coasters alongside the names of the countries in which they are located."
        ],
        "ref_sql": "SELECT T2.Name , T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { \n    $project: {\n            \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3349,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What are the name and description for location code x?",
            "Give me the name and description of the location with code x.",
            "Can you provide the name and description associated with location code x?",
            "Show me the name and description for the location that has the code x.",
            "What is the name and description of the location identified by code x?"
        ],
        "ref_sql": "SELECT location_name , location_description FROM Ref_locations WHERE location_code = \"x\"",
        "MQL": "db.Ref_Locations.find(\n  { \"Location_Code\": \"x\" },\n  { \"Location_Name\": 1, \"Location_Description\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 2435,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Find the number of employees hired in each shop; show the shop name as well.",
            "For each shop, return the number of employees working there and the name of the shop.",
            "What is the count of employees hired at each shop along with the respective shop names?",
            "List the number of employees working at every shop and include the name of each shop.",
            "Provide the number of hires per shop along with the name of each shop."
        ],
        "ref_sql": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
        "MQL": "db.employee.aggregate([\n  {\n    $unwind: \"$hiring\"\n  },\n  {\n    $group: {\n      _id: \"$hiring.Shop_ID\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"shop\",\n      localField: \"_id\",\n      foreignField: \"Shop_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1,\n      Name: { $arrayElemAt: [\"$Docs1.Name\", 0] }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1610,
        "db_id": "railway",
        "nl_queries": [
            "Show the names of trains and locations of railways they are in.",
            "Provide the names of trains along with the locations of their respective railways.",
            "List the train names and the corresponding locations of the railways.",
            "Display the names of the trains and the railway locations they belong to.",
            "Retrieve the names of the trains in conjunction with their railway locations."
        ],
        "ref_sql": "SELECT T2.Name , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID",
        "MQL": "db.railway.aggregate([\n  {\n    $unwind: \"$train\"\n  },\n  {\n    $project: {\n      \"Name\": \"$train.Name\",\n      \"Location\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 289,
        "db_id": "car_1",
        "nl_queries": [
            "Which distinct car models are the produced after 1980?",
            "What are the different models for the cards produced after 1980?",
            "What unique car models were manufactured after the year 1980?",
            "Can you list the various car models that have been produced since 1980?",
            "Identify the distinct models of cars that have been made post-1980."
        ],
        "ref_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.model_list.car_names.cars_data.Year\": {\n        $gt: 1980\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$countries.car_makers.model_list.car_names.Model\",\n      Model: {\n        $first: \"$countries.car_makers.model_list.car_names.Model\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Model: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2386,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "How many problems does the product with the most problems have? List the number of the problems and product name.",
            "Which product has the most problems? Give me the number of problems and the product name.",
            "What is the number of problems linked to the product that experiences the most issues, and what is its name?",
            "Identify the product that has the highest problem count, including its name and the total number of problems.",
            "Can you tell me the product with the most logged problems along with the number of those problems?"
        ],
        "ref_sql": "SELECT count(*) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Product.aggregate([\n  {\n    $unwind: \"$Problems\"\n  },\n  {\n    $group: {\n      _id: {\n        product_id: \"$product_id\",\n        product_name: \"$product_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      product_name: \"$_id.product_name\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1657,
        "db_id": "railway",
        "nl_queries": [
            "Show id and location of railways that are associated with more than one train.",
            "Provide the IDs and locations of railways that have more than one train linked to them.",
            "List the railway IDs along with their locations for those railways that are connected to multiple trains.",
            "Display the Railway ID and location for railways associated with more than one train.",
            "Retrieve the IDs and locations of railways that are affiliated with several trains."
        ],
        "ref_sql": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*) > 1",
        "MQL": "db.railway.aggregate([\n  { $unwind: \"$train\" },\n  { \n    $group: {\n      _id: { Railway_ID: \"$Railway_ID\", Location: \"$Location\" },\n      trainCount: { $sum: 1 }\n    }\n  },\n  { $match: { trainCount: { $gt: 1 } } },\n  { \n    $project: {\n      _id: 0,\n      Railway_ID: \"$_id.Railway_ID\",\n      Location: \"$_id.Location\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 193,
        "db_id": "election",
        "nl_queries": [
            "Return the names of all counties sorted by population in ascending order.",
            "Sort the names of all counties in ascending order of population.",
            "List the names of all counties ordered by their population from lowest to highest.",
            "Retrieve the county names arranged in ascending order based on population size.",
            "Provide the names of every county sorted by population in increasing order."
        ],
        "ref_sql": "SELECT County_name FROM county ORDER BY Population ASC",
        "MQL": "db.county.find({}, { County_name: 1, _id: 0 }).sort({ Population: 1 });\n"
    },
    {
        "record_id": 2841,
        "db_id": "match_season",
        "nl_queries": [
            "How many distinct official languages are there among countries of players whose positions are defenders.",
            "Count the number of different official languages corresponding to countries that players who play Defender are from.",
            "What is the total number of unique official languages represented by the countries of players in the Defender position?",
            "Determine the count of distinct official native languages spoken in the countries where Defender-positioned players are from.",
            "How many different official languages are there among the countries associated with players designated as Defenders?"
        ],
        "ref_sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $match: {\n      \"match_season.Position\": \"Defender\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"country\",\n      localField: \"match_season.Country\",\n      foreignField: \"Country_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.Official_native_language\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_country_Official_native_language: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2347,
        "db_id": "club_1",
        "nl_queries": [
            "Find the location of the club \"Pen and Paper Gaming\".",
            "Where is the club \"Pen and Paper Gaming\" located?",
            "What is the geographical location of the club named \"Pen and Paper Gaming\"?",
            "Can you tell me where the \"Pen and Paper Gaming\" club is situated?",
            "Show me the location for the \"Pen and Paper Gaming\" club."
        ],
        "ref_sql": "SELECT clublocation FROM club WHERE clubname = \"Pen and Paper Gaming\"",
        "MQL": "db.Club.find(\n  { ClubName: \"Pen and Paper Gaming\" },\n  { ClubLocation: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2169,
        "db_id": "museum_visit",
        "nl_queries": [
            "What is the average age of the visitors whose membership level is not higher than 4?",
            "What is the mean age of visitors who have a membership level of 4 or lower?",
            "Calculate the average age of visitors with a membership level not exceeding 4.",
            "How old, on average, are the visitors whose membership level is 4 or less?",
            "Find the average age of visitors whose level of membership is at most 4."
        ],
        "ref_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4",
        "MQL": "db.visitor.aggregate([\n  {\n    $match: {\n      \"Level_of_membership\": { $lte: 4 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 829,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Which kind of policy type was chosen by the most customers?",
            "Find the policy type the most customers choose.",
            "What is the most popular type of insurance policy among customers?",
            "Identify the insurance policy type that the majority of customers have opted for.",
            "Which insurance policy type do customers prefer the most?"
        ],
        "ref_sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Policies.Policy_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Policy_Type_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2078,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "When was the first asset acquired?",
            "What is the acquisition date of the earliest asset?",
            "When was the first asset obtained?",
            "Can you tell me the date when the initial asset was acquired?",
            "What date marks the acquisition of the first asset in the records?"
        ],
        "ref_sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { $unwind: \"$Assets\" },\n  { $sort: { \"Assets.asset_acquired_date\": 1 } },\n  { $limit: 1 },\n  { $project: { \"asset_acquired_date\": \"$Assets.asset_acquired_date\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2187,
        "db_id": "school_finance",
        "nl_queries": [
            "Show the average, maximum, minimum enrollment of all schools.",
            "Provide the average, highest, and lowest enrollment figures for all schools.",
            "What are the average, maximum, and minimum enrollments recorded in the school database?",
            "Can you show the average, peak, and bottom enrollment numbers for every school?",
            "Display the average enrollment, as well as the maximum and minimum enrollments across all schools."
        ],
        "ref_sql": "SELECT avg(enrollment) , max(enrollment) , min(enrollment) FROM school",
        "MQL": "db.School.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_enrollment: { $avg: \"$Enrollment\" },\n      max_enrollment: { $max: \"$Enrollment\" },\n      min_enrollment: { $min: \"$Enrollment\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_enrollment: 1,\n      max_enrollment: 1,\n      min_enrollment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1558,
        "db_id": "election",
        "nl_queries": [
            "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
            "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
            "Who held the position of comptroller for the parties linked to delegates from either district 1 or district 2?",
            "Identify the comptrollers of the political parties representing delegates from districts 1 and 2.",
            "List the individuals who served as comptroller for the parties associated with delegates from either district 1 or district 2."
        ],
        "ref_sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2",
        "MQL": "db.party.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"election.District\": 1 },\n        { \"election.District\": 2 }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Comptroller: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1819,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
            "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
            "Retrieve the names of instructors who advise students enrolled in the Math department, ordered by the students' total credits.",
            "List the names of all instructors advising students from the Math department, sorted according to the total credits of those students.",
            "Can you provide the names of instructors who are the advisors for Math department students, arranged by the total credits that each student has earned?"
        ],
        "ref_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $match: {\n      \"student.dept_name\": \"Math\"\n    }\n  },\n  {\n    $unwind: \"$student.advisor\"\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { advisor_id: \"$student.advisor.i_ID\" },\n      pipeline: [\n        { $unwind: \"$instructor\" },\n        { $match: { $expr: { $eq: [\"$instructor.ID\", \"$$advisor_id\"] } } },\n        { $project: { \"instructor.name\": 1, _id: 0 } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $sort: {\n      \"student.tot_cred\": 1\n    }\n  },\n  {\n    $project: {\n      name: \"$Docs1.instructor.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3737,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the details of the top 3 most expensive hotels.",
            "What are the details of the three most expensive hotels?",
            "Retrieve the details for the three highest-priced hotels.",
            "Provide information about the top three hotels with the highest prices.",
            "What details can you give me about the three most costly hotels?"
        ],
        "ref_sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
        "MQL": "db.Ref_Hotel_Star_Ratings.aggregate([\n  {\n    $unwind: \"$Hotels\"\n  },\n  {\n    $sort: { \"Hotels.price_range\": -1 }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      other_hotel_details: \"$Hotels.other_hotel_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4270,
        "db_id": "world_1",
        "nl_queries": [
            "Which unique cities are in Asian countries where Chinese is the official language ?",
            "What are the distinct cities located in Asian nations where Chinese is the official language?",
            "List the unique cities within countries in Asia that have Chinese as an official language.",
            "Identify the cities that are exclusively found in Asian countries with Chinese recognized as their official language.",
            "Which cities are there in Asian countries where the official language is Chinese?"
        ],
        "ref_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      \"Continent\": \"Asia\",\n      \"countrylanguage.Language\": \"Chinese\",\n      \"countrylanguage.IsOfficial\": \"T\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"city\",\n      localField: \"Code\",\n      foreignField: \"CountryCode\",\n      as: \"Doc1\"\n    }\n  },\n  {\n    $unwind: \"$Doc1\"\n  },\n  {\n    $group: {\n      _id: \"$Doc1.Name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2307,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "List all the contact channel codes that were used less than 5 times.",
            "Which contact channel codes were used less than 5 times?",
            "Retrieve all contact channel codes that have been utilized fewer than 5 times.",
            "What are the contact channel codes that show usage of less than 5 occurrences?",
            "Identify the contact channel codes that were accessed fewer than 5 times."
        ],
        "ref_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Contact_Channels\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Contact_Channels.channel_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $lt: 5 }\n    }\n  },\n  {\n    $project: {\n      channel_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1008,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show details of all investors if they make any transaction with share count greater than 100.",
            "Retrieve the information of investors who have conducted any transactions with a share count exceeding 100.",
            "List all investors along with their details if they have executed transactions involving more than 100 shares.",
            "Provide details for investors with at least one transaction that includes a share count greater than 100.",
            "Display the details of investors who made transactions where the share count is greater than 100."
        ],
        "ref_sql": "SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100",
        "MQL": "db.Investors.find({\n  \"Transactions\": {\n    $elemMatch: {\n      \"share_count\": { $gt: \"100\" }\n    }\n  }\n}, { \"Investor_details\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3296,
        "db_id": "mountain_photos",
        "nl_queries": [
            "List the id, color scheme, and name for all the photos.",
            "Provide the identifiers, color descriptions, and titles of all the photos.",
            "Generate a list showing the IDs, color schemes, and names of every photo available.",
            "Show the photo IDs along with their corresponding color and name for all photos.",
            "Retrieve the ID, color, and name for each photo in the collection."
        ],
        "ref_sql": "SELECT id , color , name FROM photos",
        "MQL": "db.mountain.aggregate([\n  { $unwind: \"$photos\" },\n  { $project: { \n      \"id\": \"$photos.id\", \n      \"color\": \"$photos.color\", \n      \"name\": \"$photos.name\", \n      \"_id\": 0 \n    } \n  }\n]);\n"
    },
    {
        "record_id": 535,
        "db_id": "company_employee",
        "nl_queries": [
            "Show the most common headquarter for companies.",
            "What is the headquarters location with the highest number of companies?",
            "Identify the most frequently occurring headquarters among companies.",
            "Which headquarters is shared by the most companies?",
            "Find the headquarter that houses the greatest number of firms."
        ],
        "ref_sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: \"$Headquarters\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Headquarters: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2901,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "What are all the distinct participant ids who attended any events?",
            "Can you provide a list of unique participant IDs for all events?",
            "What are the distinct participant IDs that have taken part in any events?",
            "Show me all the different participant IDs who attended events.",
            "How many unique participant IDs participated in events?"
        ],
        "ref_sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "MQL": "db.Services.aggregate([\n  {\n    $unwind: \"$Events\"\n  },\n  {\n    $unwind: \"$Events.Participants_in_Events\"\n  },\n  {\n    $group: {\n      _id: \"$Events.Participants_in_Events.Participant_ID\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_participant_id: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_participant_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1848,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "Find the top 3 products which have the largest number of problems?",
            "What are the three products that have the most problems?s",
            "List the three products with the highest number of reported problems.",
            "Identify the top three products that have the most issues logged.",
            "What are the three products that report the largest quantity of problems?"
        ],
        "ref_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "MQL": "db.Product.aggregate([\n  {\n    $unwind: \"$Problems\"\n  },\n  {\n    $group: {\n      _id: \"$product_id\",\n      product_name: { $first: \"$product_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      product_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2877,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "How many different degree names are offered?",
            "How many different degrees are offered?",
            "What is the total count of distinct degree names available?",
            "How many unique degrees does the department offer?",
            "Can you tell me the number of different degree programs that are available?"
        ],
        "ref_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "MQL": "db.Departments.aggregate([\n  {\n    $unwind: \"$Degree_Programs\"\n  },\n  {\n    $group: {\n      _id: \"$Degree_Programs.degree_summary_name\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_degree_summary_name\"\n  }\n]);\n"
    },
    {
        "record_id": 1876,
        "db_id": "movie_1",
        "nl_queries": [
            "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
            "For each director, what are the titles and ratings for all the movies they reviewed?",
            "For each director, list their name along with the title and rating of the highest-rated movie they directed, excluding any movies by directors with no name.",
            "For every director in the database, provide the title of their most highly rated film and the corresponding rating, ignoring any entries where the director's name is missing.",
            "Retrieve the name of each director along with the title and highest rating of their best-performing movie, while excluding any movies by directors that are not specified."
        ],
        "ref_sql": "SELECT T2.title , T1.stars , T2.director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
        "MQL": "db.Movie.aggregate([\n  {\n    $match: {\n      director: { $ne: null }\n    }\n  },\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: {\n        director: \"$director\",\n        mID: \"$mID\",\n        title: \"$title\"\n      },\n      maxStars: { $max: \"$Rating.stars\" }\n    }\n  },\n  {\n    $sort: {\n      \"_id.director\": 1,\n      maxStars: -1\n    }\n  },\n  {\n    $group: {\n      _id: \"$_id.director\",\n      title: { $first: \"$_id.title\" },\n      stars: { $first: \"$maxStars\" },\n      director: { $first: \"$_id.director\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1,\n      stars: 1,\n      director: 1,\n      \"max_Rating_stars\": \"$stars\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3156,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of dorms only for female (F gender).",
            "What are the names of the all-female dorms?",
            "List the names of dormitories designated for female students.",
            "What are the names of dorms that accommodate only females?",
            "Provide the names of all dorms that are exclusively for women."
        ],
        "ref_sql": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      gender: \"F\"\n    }\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3091,
        "db_id": "movie_1",
        "nl_queries": [
            "What are the names of the directors who made exactly one movie excluding director NULL?",
            "What are the names of all directors who have made one movie except for the director named NULL?",
            "Which directors have directed only one movie, excluding those with a NULL name?",
            "List the names of directors who have created exactly one film, without considering directors with a NULL designation.",
            "Identify directors who have produced one and only one film, ensuring to omit any who are designated as NULL."
        ],
        "ref_sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*) = 1",
        "MQL": "db.Movie.aggregate([\n  {\n    $match: {\n      director: { $ne: null }\n    }\n  },\n  {\n    $group: {\n      _id: \"$director\",\n      movieCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      movieCount: 1\n    }\n  },\n  {\n    $project: {\n      director: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      director: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2333,
        "db_id": "restaurant_1",
        "nl_queries": [
            "Which city does student Linda Smith live in?",
            "In which city is Linda Smith residing?",
            "What city does Linda Smith call home?",
            "Can you tell me the city where student Linda Smith lives?",
            "What is the name of the city where Linda Smith, the student, resides?"
        ],
        "ref_sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "MQL": "db.Student.find({ \"Fname\": \"Linda\", \"LName\": \"Smith\" }, { \"city_code\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4130,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the color description of the product with name \"catnip\"?",
            "Give the color description for the product 'catnip'.",
            "Can you tell me the color description of the product named \"catnip\"?",
            "What color is associated with the product \"catnip\"?",
            "Please provide the color information for the product referred to as 'catnip'."
        ],
        "ref_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $match: {\n      \"Products.product_name\": \"catnip\"\n    }\n  },\n  {\n    $project: {\n      color_description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 928,
        "db_id": "game_1",
        "nl_queries": [
            "Show student ids who are female and play football.",
            "What are the ids of all female students who play football?",
            "List the IDs of female students who engage in playing football.",
            "Provide the student IDs of all girls who play football.",
            "What are the student IDs for female participants in football?"
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Sex: 'F'\n    }\n  },\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $match: {\n      \"SportsInfo.SportName\": \"Football\"\n    }\n  },\n  {\n    $project: {\n      StuID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1450,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "Which project made the most number of outcomes? List the project details and the project id.",
            "What are the details and id of the project with the most outcomes?",
            "Identify the project with the highest number of outcomes, and provide its ID along with the details.",
            "Which project has produced the greatest number of outcomes? Include both the project ID and its details.",
            "Can you list the project ID and details for the project that has the most outcomes?"
        ],
        "ref_sql": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Project_Outcomes\"\n  },\n  {\n    $group: {\n      _id: {\n        project_id: \"$Organisations.Projects.project_id\",\n        project_details: \"$Organisations.Projects.project_details\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      project_id: \"$_id.project_id\",\n      project_details: \"$_id.project_details\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 470,
        "db_id": "music_4",
        "nl_queries": [
            "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
            "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
            "List the ceremony dates for music festivals recognized in the \"Best Song\" category that received awards.",
            "What are the dates for the ceremonies of music festivals awarded in the category of \"Best Song\"?",
            "Provide the dates of the ceremonies for music festivals that won awards for the \"Best Song\" category."
        ],
        "ref_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = \"Best Song\" AND RESULT = \"Awarded\"",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $unwind: \"$volume.music_festival\"\n  },\n  {\n    $match: {\n      \"volume.music_festival.Category\": \"Best Song\",\n      \"volume.music_festival.Result\": \"Awarded\"\n    }\n  },\n  {\n    $project: {\n      Date_of_ceremony: \"$volume.music_festival.Date_of_ceremony\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3915,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show the name and the release year of the song by the youngest singer.",
            "What are the names and release years for all the songs of the youngest singer?",
            "Provide the title and release year of the song performed by the youngest artist.",
            "Can you tell me the names and release years of all songs by the youngest artist?",
            "What is the title and year of release for the song sung by the youngest singer?"
        ],
        "ref_sql": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
        "MQL": "db.singer.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_Age: { $min: \"$Age\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"singer\",\n      localField: \"min_Age\",\n      foreignField: \"Age\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Song_Name: \"$Docs1.Song_Name\",\n      Song_release_year: \"$Docs1.Song_release_year\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 669,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "List the name of artworks in ascending alphabetical order.",
            "Please provide a list of artwork names sorted alphabetically from A to Z.",
            "Retrieve the names of all artworks in alphabetical order.",
            "Show the names of artworks arranged in ascending order by name.",
            "Can you list the artwork titles in alphabetical sequence?"
        ],
        "ref_sql": "SELECT Name FROM artwork ORDER BY Name ASC",
        "MQL": "db.artwork.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Name\": 1 });\n"
    },
    {
        "record_id": 730,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the name of scientists who are not assigned to any project.",
            "What are the names of scientists who have not been assigned a project?",
            "List the names of scientists who do not have any active project assignments.",
            "Which scientists are not assigned to any ongoing projects?",
            "Provide the names of scientists that are without project assignments."
        ],
        "ref_sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
        "MQL": "db.Scientists.aggregate([\n  {\n    $project: {\n      Name: 1,\n      assigned_projects: {\n        $size: \"$AssignedTo\"\n      }\n    }\n  },\n  {\n    $match: {\n      assigned_projects: 0\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1011,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the details of the markets that can be accessed by walk or bus?",
            "Find the details of all the markets that are accessible by walk or bus.",
            "Could you provide the details of markets accessible by walking or using a bus?",
            "Show me the information about all markets that can be reached by walking or by bus.",
            "What information is available on the markets that are reachable by foot or bus?"
        ],
        "ref_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\"",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $match: {\n      \"Tourist_Attractions.How_to_Get_There\": {\n        $in: [\"walk\", \"bus\"]\n      },\n      \"Tourist_Attractions.Street_Markets\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Street_Markets\"\n  },\n  {\n    $project: {\n      Market_Details: \"$Tourist_Attractions.Street_Markets.Market_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2721,
        "db_id": "icfp_1",
        "nl_queries": [
            "How many papers are published in total?",
            "Count the number of total papers.",
            "What is the total number of papers that have been published?",
            "How many total papers are there in the database?",
            "Give me a count of all published papers."
        ],
        "ref_sql": "SELECT count(*) FROM papers",
        "MQL": "db.Papers.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3477,
        "db_id": "race_track",
        "nl_queries": [
            "What is the name, location and seating for the most recently opened track?",
            "Return the name, location, and seating of the track that was opened in the most recent year.",
            "What are the name, location, and seating capacity of the latest opened race track?",
            "Provide the details of the track that was inaugurated most recently, including its name, location, and seating arrangement.",
            "Can you give me the name, location, and seating details for the track that opened in the latest year?"
        ],
        "ref_sql": "SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "MQL": "db.track.aggregate([\n  {\n    $sort: { Year_Opened: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Location: 1,\n      Seating: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3955,
        "db_id": "insurance_policies",
        "nl_queries": [
            "What is the total amount of payment?",
            "Compute the total amount of payment processed.",
            "What is the overall sum of payments made?",
            "Calculate the grand total of processed payments.",
            "Determine the total sum of payment amounts received."
        ],
        "ref_sql": "SELECT sum(Amount_Payment) FROM Payments",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements.Payments\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Amount_Payment: {\n        $sum: \"$Customer_Policies.Claims.Settlements.Payments.Amount_Payment\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Amount_Payment: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 796,
        "db_id": "sports_competition",
        "nl_queries": [
            "What are the positions with both players having more than 20 points and less than 10 points.",
            "What are the positions of both players that have more than 20 20 points and less than 10 points?",
            "Which player positions have one player scoring over 20 points and another scoring below 10 points?",
            "Identify the positions where players both exceed 20 points and are below 10 points in scoring.",
            "What player positions show instances of one player achieving more than 20 points while another has less than 10 points?"
        ],
        "ref_sql": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $group: {\n      _id: \"$player.Position\",\n      points: { $push: \"$player.Points\" }\n    }\n  },\n  {\n    $match: {\n      points: {\n        $all: [\n          { $elemMatch: { $gt: 20 } },\n          { $elemMatch: { $lt: 10 } }\n        ]\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Position: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1507,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the id and first name of the student whose addresses have the highest average monthly rental?",
            "Who is the student with the highest average monthly rental, and what is their ID and first name?",
            "Identify the student whose addresses have the greatest average monthly rental, along with their student ID and first name.",
            "Can you give me the ID and first name of the student that has the highest average rental amount from their addresses?",
            "What are the first name and ID of the student with the highest average monthly rental across their addresses?"
        ],
        "ref_sql": "SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Students\" },\n  { $unwind: \"$Students.Student_Addresses\" },\n  {\n    $group: {\n      _id: \"$Students.student_id\",\n      avg_monthly_rental: { $avg: \"$Students.Student_Addresses.monthly_rental\" },\n      firstName: { $first: \"$Students.first_name\" }\n    }\n  },\n  { $sort: { avg_monthly_rental: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      student_id: \"$_id\",\n      first_name: \"$firstName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2243,
        "db_id": "inn_1",
        "nl_queries": [
            "What is the average base price of different bed type? List bed type and average base price.",
            "For each bed type, find the average base price of different bed type.",
            "For each bed type, find the average room price.",
            "What is the average base price of rooms, for each bed type?",
            "Provide the average base price of rooms, categorized by their bed types."
        ],
        "ref_sql": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $group: {\n      _id: \"$bedType\",\n      avg_basePrice: { $avg: \"$basePrice\" }\n    }\n  },\n  {\n    $project: {\n      bedType: \"$_id\",\n      avg_basePrice: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 990,
        "db_id": "music_4",
        "nl_queries": [
            "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
            "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
            "Could you provide the ceremony dates for volumes that remained on top for more than 2 weeks?",
            "What are the ceremony dates at music festivals for volumes that were on the top for over 2 weeks?",
            "Retrieve the dates of ceremonies for music festivals associated with volumes that lasted longer than 2 weeks at the top."
        ],
        "ref_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $match: {\n      \"volume.Weeks_on_Top\": { $gt: 2 }\n    }\n  },\n  {\n    $unwind: \"$volume.music_festival\"\n  },\n  {\n    $project: {\n      Date_of_ceremony: \"$volume.music_festival.Date_of_ceremony\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2082,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the list of attribute data types possessed by more than 3 attribute definitions.",
            "What are the attribute data types with more than 3 attribute definitions?",
            "Provide a list of attribute data types that have more than three definitions.",
            "What attribute data types are linked to over three attribute definitions?",
            "Identify the attribute data types with an occurrence exceeding three in the attribute definitions."
        ],
        "ref_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "MQL": "db.Attribute_Definitions.aggregate([\n  {\n    $group: {\n      _id: \"$attribute_data_type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 3 }\n    }\n  },\n  {\n    $project: {\n      attribute_data_type: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1017,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
            "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
            "Can you provide the names and descriptions of the pictures taken at the \"film festival\" tourist attraction?",
            "What are the details and titles of the images captured at the tourist site known as the \"film festival\"?",
            "List the names and descriptions of the images associated with the tourist attraction referred to as \"film festival\"."
        ],
        "ref_sql": "SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\"",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $match: {\n      \"Tourist_Attractions.Name\": \"film festival\"\n    }\n  },\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $match: {\n      \"Tourist_Attractions.Name\": \"film festival\"\n    }\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Photos\"\n  },\n  {\n    $project: {\n      Name: \"$Tourist_Attractions.Photos.Name\",\n      Description: \"$Tourist_Attractions.Photos.Description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1764,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the id and details of the investor that has the largest number of transactions.",
            "Retrieve the investor's ID and their details who has completed the highest number of transactions.",
            "Find the identity and information of the investor with the most transactions.",
            "Identify the investor with the greatest number of transactions and display their ID along with details.",
            "What are the ID and particulars of the investor who has conducted the largest number of transactions?"
        ],
        "ref_sql": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Investors.aggregate([\n  \n  { $unwind: \"$Transactions\" },\n  \n  \n  {\n    $group: {\n      _id: \"$investor_id\",\n      transactionCount: { $sum: 1 },\n      Investor_details: { $first: \"$Investor_details\" }\n    }\n  },\n  \n  \n  { $sort: { transactionCount: -1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      investor_id: \"$_id\",\n      Investor_details: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3623,
        "db_id": "swimming",
        "nl_queries": [
            "List all the event names by year from the most recent to the oldest.",
            "Retrieve the names of events sorted from the latest year to the earliest.",
            "Show all the event titles in descending order by year, starting with the most recent.",
            "List the names of events beginning with the most current year and going back in time.",
            "Provide a list of event names organized from the newest to the oldest year."
        ],
        "ref_sql": "SELECT name FROM event ORDER BY YEAR DESC",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$event\" },\n  { $sort: { \"event.Year\": -1 } },\n  { $project: { \"Name\": \"$event.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 420,
        "db_id": "activity_1",
        "nl_queries": [
            "What ranks do we have for faculty?",
            "Find the list of distinct ranks for faculty.",
            "Can you provide the different ranks held by faculty?",
            "What are the unique ranks that faculty members possess?",
            "List all the distinct faculty ranks available in the system."
        ],
        "ref_sql": "SELECT DISTINCT rank FROM Faculty",
        "MQL": "db.Faculty.aggregate([\n  {\n    $group: {\n      _id: \"$Rank\"\n    }\n  },\n  {\n    $project: {\n      Rank: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2113,
        "db_id": "company_office",
        "nl_queries": [
            "What are the average profits of companies?",
            "Compute the average profits companies make.",
            "Determine the average profit generated by companies.",
            "What is the mean profit for all companies?",
            "Find out the average earnings of companies in terms of profit."
        ],
        "ref_sql": "SELECT avg(Profits_billion) FROM Companies",
        "MQL": "db.Companies.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Profits_billion: { $avg: \"$Profits_billion\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"avg_Profits_billion\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3433,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "List the maximum weight and type for each type of pet.",
            "What is the heaviest weight for each category of pet? Please provide the pet type along with its maximum weight.",
            "Show the maximum weight alongside the type of pet for each pet category.",
            "Retrieve the maximum weight associated with every pet type and list both the pet type and its maximum weight."
        ],
        "ref_sql": "SELECT max(weight) , petType FROM pets GROUP BY petType",
        "MQL": "db.Pets.aggregate([\n  {\n    $group: {\n      _id: \"$PetType\",\n      max_weight: { $max: \"$weight\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      PetType: \"$_id\",\n      max_weight: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4240,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What is the last transcript release date?",
            "When was the last transcript released?",
            "Can you tell me the date when the most recent transcript was issued?",
            "What date marks the release of the latest transcript?",
            "Please provide the date of the last transcript's release."
        ],
        "ref_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "MQL": "db.Transcripts.aggregate([\n  {\n    $project: {\n      _id: 0,\n      transcript_date: 1\n    }\n  },\n  {\n    $sort: {\n      transcript_date: -1\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 871,
        "db_id": "restaurant_1",
        "nl_queries": [
            "Show me all the restaurants.",
            "Please display the names of all the restaurants.",
            "List every restaurant available in the database.",
            "Can you provide me with a complete list of restaurant names?",
            "I would like to see all the restaurant names listed."
        ],
        "ref_sql": "SELECT ResName FROM Restaurant;",
        "MQL": "db.Restaurant.find({}, { \"ResName\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4278,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show paragraph details for paragraph with text 'Korea ' .",
            "What are the details for the paragraph that includes the text 'Korea ' ?",
            "Retrieve the details for the paragraph that has the text 'Korea'.",
            "Can you provide the additional information for the paragraph containing 'Korea'?",
            "What details are available for the paragraph where the text is 'Korea'?"
        ],
        "ref_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $unwind: \"$Templates.Documents.Paragraphs\"\n  },\n  {\n    $match: {\n      \"Templates.Documents.Paragraphs.Paragraph_Text\": \"Korea\"\n    }\n  },\n  {\n    $project: {\n      Other_Details: \"$Templates.Documents.Paragraphs.Other_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2973,
        "db_id": "college_1",
        "nl_queries": [
            "How many credits does course CIS-220 have, and what its description?",
            "What is the description for the CIS-220 and how many credits does it have?",
            "What are the credit hours assigned to the course CIS-220, and could you provide its description?",
            "Can you tell me how many credits the CIS-220 course offers and its corresponding description?",
            "Please provide the details on how many credits course CIS-220 has along with its description."
        ],
        "ref_sql": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'CIS-220'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.COURSE.CRS_CODE\": \"CIS-220\"\n    }\n  },\n  {\n    $project: {\n      CRS_CREDIT: \"$DEPARTMENT.COURSE.CRS_CREDIT\",\n      CRS_DESCRIPTION: \"$DEPARTMENT.COURSE.CRS_DESCRIPTION\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 286,
        "db_id": "student_1",
        "nl_queries": [
            "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
            "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
            "List the last names of third-grade students who do not have COVIN JEROME as their teacher.",
            "What are the last names of students in the 3rd grade that aren't instructed by COVIN JEROME?",
            "Provide the last names of third-grade students who are not under the instruction of teacher COVIN JEROME."
        ],
        "ref_sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "MQL": "db.list.aggregate([\n  {\n    $match: {\n      Grade: 3\n    }\n  },\n  {\n    $lookup: {\n      from: \"teachers\",\n      localField: \"Classroom\",\n      foreignField: \"Classroom\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      $expr: {\n        $not: {\n          $in: [\"COVIN JEROME\", \"$Docs1.LastName\"]\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      LastName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4123,
        "db_id": "film_rank",
        "nl_queries": [
            "What is the title of the film that has the highest high market estimation.",
            "Return the title of the film with the highest high estimate?",
            "Which film has the highest value in its market estimation?",
            "Identify the title of the film with the largest high market estimation.",
            "Find the title of the film that possesses the maximum high estimate for market value."
        ],
        "ref_sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
        "MQL": "db.film.aggregate([\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $sort: {\n      \"film_market_estimation.High_Estimate\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3584,
        "db_id": "hospital_1",
        "nl_queries": [
            "What are names of patients who made an appointment?",
            "List the names of patients who have made appointments.",
            "Can you provide the names of patients who have scheduled an appointment?",
            "Show me the names of patients that have made an appointment.",
            "What are the names of patients who have booked appointments?"
        ],
        "ref_sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Patient\"\n  },\n  {\n    $unwind: \"$Patient.Appointment\"\n  },\n  {\n    $group: {\n      _id: \"$Patient.Name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 700,
        "db_id": "news_report",
        "nl_queries": [
            "List the names of journalists in ascending order of years working.",
            "Retrieve the names of journalists, sorted from the least to the most years of experience.",
            "Show a list of journalist names in order of increasing years of service.",
            "Provide a sorted list of journalist names based on their length of time working, starting with the least experienced.",
            "Generate a list of journalists' names arranged in ascending order according to their years in the profession."
        ],
        "ref_sql": "SELECT Name FROM journalist ORDER BY Years_working ASC",
        "MQL": "db.journalist.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Years_working\": 1 });\n"
    },
    {
        "record_id": 4212,
        "db_id": "college_2",
        "nl_queries": [
            "Find the title of the course that is offered by more than one department.",
            "What are the titles of courses that are offered in more than one department?",
            "List the course titles that are available in more than one department.",
            "Which courses are offered by multiple departments? Provide their titles.",
            "Identify the titles of courses that multiple departments offer."
        ],
        "ref_sql": "SELECT title FROM course GROUP BY title HAVING count(*) > 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $group: {\n      _id: \"$course.title\",\n      departments: {\n        $addToSet: \"$dept_name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      title: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2081,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which assets did not incur any fault log? List the asset model.",
            "What asset models have no entries in their fault logs? Please provide the list.",
            "Can you list the asset models that have not recorded any fault log?",
            "Identify the asset models that do not have any fault log entries.",
            "Which asset models are free from any recorded faults? Show me the list."
        ],
        "ref_sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
        "MQL": "db.Third_Party_Companies.aggregate([\n  \n  { $unwind: \"$Assets\" },\n  \n  \n  { $match: { \"Assets.Fault_Log\": { $eq: [] } } },\n  \n  \n  { $project: { \"asset_model\": \"$Assets.asset_model\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2792,
        "db_id": "race_track",
        "nl_queries": [
            "How many tracks do we have?",
            "Count the number of tracks.",
            "What is the total number of race tracks?",
            "Please provide the count of all available tracks.",
            "How many total tracks are there in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM track",
        "MQL": "db.track.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3981,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
            "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?",
            "Calculate the total number of hours for projects assigned to the scientists Michael Rogers and Carol Smith.",
            "What is the aggregate sum of hours for the projects worked on by scientists named Michael Rogers or Carol Smith?",
            "Determine the total hours associated with projects that are assigned to either Michael Rogers or Carol Smith."
        ],
        "ref_sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
        "MQL": "db.Projects.aggregate([\n  {\n    $lookup: {\n      from: \"Scientists\",\n      localField: \"AssignedTo.Scientist\",\n      foreignField: \"SSN\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Name\": {\n        $in: [\"Michael Rogers\", \"Carol Smith\"]\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Hours: {\n        $sum: \"$Hours\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Hours: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2419,
        "db_id": "network_2",
        "nl_queries": [
            "Find the number of people who is under 40 for each gender.",
            "How many people are under 40 for each gender?",
            "Count how many individuals under the age of 40 there are for each gender.",
            "What is the total number of people below 40 years of age, categorized by gender?",
            "Determine the count of persons under 40 years old, grouped by their gender."
        ],
        "ref_sql": "SELECT count(*) , gender FROM Person WHERE age < 40 GROUP BY gender",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      age: { $lt: 40 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$gender\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      gender: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1045,
        "db_id": "orchestra",
        "nl_queries": [
            "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "List the names of conductors whose orchestras were founded after 2008.",
            "Can you provide the names of conductors that lead orchestras established post-2008?",
            "Identify the conductors associated with orchestras that have been founded since the year 2008."
        ],
        "ref_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $match: {\n      \"orchestra.Year_of_Founded\": { $gt: 2008 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1054,
        "db_id": "perpetrator",
        "nl_queries": [
            "What is the name of the perpetrator with the biggest weight.",
            "Who is the perpetrator that weighs the most?",
            "Identify the name of the heaviest perpetrator.",
            "What is the name of the person with the largest weight among the perpetrators?",
            "Can you tell me the name of the perpetrator with the highest weight?"
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"perpetrator\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $sort: { \"Weight\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3606,
        "db_id": "wedding",
        "nl_queries": [
            "List all church names in descending order of opening date.",
            "Show all church names sorted by their opening date in reverse chronological order.",
            "Retrieve and display the names of churches, arranged from the most recently opened to the oldest.",
            "Provide a list of church names, organized in descending order based on when they were opened.",
            "Enumerate the names of churches, starting with those that opened last and moving towards the earlier openings."
        ],
        "ref_sql": "SELECT name FROM church ORDER BY open_date DESC",
        "MQL": "db.church.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Open_Date\": -1 });\n"
    },
    {
        "record_id": 3671,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the names of races held between 2009 and 2011?",
            "What are the names of all races held between 2009 and 2011?",
            "List the names of all races that took place from 2009 to 2011.",
            "Could you provide the names of races held during the years 2009 to 2011?",
            "Show me the names of races that occurred between the years 2009 and 2011."
        ],
        "ref_sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      \"races.year\": { $gte: 2009, $lte: 2011 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$races.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2497,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How many dogs have not gone through any treatment?",
            "What is the total number of dogs that have not received any medical treatment?",
            "How many dogs are there that haven't undergone any treatments?",
            "Can you tell me the count of dogs that have never had any treatment?",
            "Find out how many dogs lack any kind of treatment history."
        ],
        "ref_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "MQL": "db.Owners.aggregate([\n  { \n    $unwind: \"$Dogs\" \n  },\n  { \n    $match: { \n      \"Dogs.Treatments\": { $size: 0 } \n    } \n  },\n  { \n    $count: \"count\" \n  }\n]);\n"
    },
    {
        "record_id": 348,
        "db_id": "movie_1",
        "nl_queries": [
            "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",
            "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
            "List the years during which movies achieved ratings of 4 or 5 stars, sorted from the earliest to the latest year.",
            "What are the years in which films received a rating of either 4 or 5 stars, arranged in ascending order?",
            "Identify the years that had movies rated with 4 or 5 stars and display them in order from oldest to newest."
        ],
        "ref_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year",
        "MQL": "db.Movie.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $match: {\n      \"Rating.stars\": { $in: [4, 5] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$year\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2902,
        "db_id": "party_people",
        "nl_queries": [
            "How many parties do we have?",
            "Count the number of different parties.",
            "What is the total number of unique parties?",
            "How many distinct parties are present?",
            "Please provide the count of unique political parties."
        ],
        "ref_sql": "SELECT count(DISTINCT party_name) FROM party",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $group: {\n      _id: \"$party.Party_name\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_party_name\"\n  }\n]);\n"
    },
    {
        "record_id": 3844,
        "db_id": "culture_company",
        "nl_queries": [
            "Show publishers with a book published in 1989 and a book in 1990.",
            "What are the publishers who have published a book in both 1989 and 1990?",
            "List the publishers that published a book in the years 1989 and 1990.",
            "Which publishers have released books in both 1989 and 1990?",
            "Identify the publishers with books available from both 1989 and 1990."
        ],
        "ref_sql": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990",
        "MQL": "db.book_club.aggregate([\n  {\n    $match: {\n      $or: [\n        { Year: 1989 },\n        { Year: 1990 }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Publisher\",\n      years: {\n        $addToSet: \"$Year\"\n      }\n    }\n  },\n  {\n    $match: {\n      years: {\n        $all: [1989, 1990]\n      }\n    }\n  },\n  {\n    $project: {\n      Publisher: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2156,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the average age of all students living in the each city.",
            "What is the average age for each city and what are those cities?",
            "What is the average age of students in each city?",
            "Give me the average age of students from every city along with a list of those cities.",
            "Calculate the average age of students grouped by city names."
        ],
        "ref_sql": "SELECT avg(age) , city_code FROM student GROUP BY city_code",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$city_code\",\n      avg_age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      city_code: \"$_id\",\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3712,
        "db_id": "department_store",
        "nl_queries": [
            "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
            "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
            "Provide the order IDs and customer IDs for orders marked as Cancelled, sorted by the date of the orders.",
            "Show me the order IDs along with customer IDs for each order that has been Cancelled, ordered by their respective order dates.",
            "Give me a list of order IDs and customer IDs for all Cancelled orders, arranged in order of their order date."
        ],
        "ref_sql": "SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $match: {\n      \"Customer_Orders.order_status_code\": \"Cancelled\"\n    }\n  },\n  {\n    $project: {\n      order_id: \"$Customer_Orders.order_id\",\n      customer_id: \"$customer_id\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      \"Customer_Orders.order_date\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2861,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the number of card types.",
            "How many different card types are there?",
            "What is the total count of different types of cards?",
            "Provide the number of unique card types available.",
            "How many distinct card types can be found?"
        ],
        "ref_sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: \"$card_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_card_type_code: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_card_type_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1722,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Which department offers the most number of degrees? List department name and id.",
            "What department has the highest number of degree programs? Please provide the name and ID of the department.",
            "Which department holds the record for the most degree offerings? Include both the department name and its identification number.",
            "Identify the department with the largest quantity of degrees available. List its name and department ID.",
            "Find out which department offers the greatest number of degree programs and give me the name along with the department ID."
        ],
        "ref_sql": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Departments.aggregate([\n  { $unwind: \"$Degree_Programs\" },\n  {\n    $group: {\n      _id: { department_id: \"$department_id\", department_name: \"$department_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      department_id: \"$_id.department_id\",\n      department_name: \"$_id.department_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 823,
        "db_id": "riding_club",
        "nl_queries": [
            "List the name and residence for players whose occupation is not \"Researcher\".",
            "Provide the names and residences of all players who do not work as Researchers.",
            "Retrieve a list of player names and their residential addresses, excluding those with the occupation of Researcher.",
            "Show the names and homes of players whose job title is anything other than Researcher.",
            "Can you list the Player names and their places of residence for those whose occupation isn't Researcher?"
        ],
        "ref_sql": "SELECT Player_name , residence FROM player WHERE Occupation != \"Researcher\"",
        "MQL": "db.player.find({\n  \"Occupation\": { $ne: \"Researcher\" }\n}, { \"Player_name\": 1, \"Residence\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2991,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show all customer ids and the number of accounts for each customer.",
            "How many accounts are there for each customer id?",
            "List all customer IDs along with the total number of accounts each holds.",
            "What is the total count of accounts associated with each customer ID?",
            "Provide the customer IDs and the corresponding number of accounts for each customer."
        ],
        "ref_sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id",
        "MQL": "db.Accounts.aggregate([\n  {\n    $group: {\n      _id: \"$customer_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      customer_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2304,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Return the cell phone number and email address for all students.",
            "List the cell numbers and email addresses for every student.",
            "Provide me with the mobile phone numbers and email addresses of all students.",
            "Show the contact details, including cell phone numbers and email addresses, for each student.",
            "Can you return the mobile numbers and email addresses for all enrolled students?"
        ],
        "ref_sql": "SELECT cell_mobile_number , email_address FROM STUDENTS",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Students\" },\n  { $project: { \n      \"cell_mobile_number\": \"$Students.cell_mobile_number\", \n      \"email_address\": \"$Students.email_address\", \n      \"_id\": 0 \n    } \n  }\n]);\n"
    },
    {
        "record_id": 15,
        "db_id": "body_builder",
        "nl_queries": [
            "Show all information about each body builder.",
            "Provide detailed information regarding all body builders.",
            "List all details related to each body builder.",
            "Display complete information on every body builder present.",
            "Present all relevant data for each body builder."
        ],
        "ref_sql": "SELECT * FROM body_builder",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$body_builder\" },\n  { $project: {\n      \"Body_Builder_ID\": \"$body_builder.Body_Builder_ID\",\n      \"People_ID\": \"$body_builder.People_ID\",\n      \"Snatch\": \"$body_builder.Snatch\",\n      \"Clean_Jerk\": \"$body_builder.Clean_Jerk\",\n      \"Total\": \"$body_builder.Total\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3303,
        "db_id": "college_2",
        "nl_queries": [
            "Find the id of instructors who didn't teach any courses?",
            "What are the ids of instructors who didnt' teach?",
            "List the IDs of instructors who have not taught any classes.",
            "Provide the IDs of instructors that did not teach any courses.",
            "Retrieve the instructor IDs of those who haven't taught any subjects."
        ],
        "ref_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      localField: \"instructor.ID\",\n      foreignField: \"instructor.teaches.ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      ID: \"$instructor.ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 516,
        "db_id": "restaurant_1",
        "nl_queries": [
            "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
            "Identify the students who are older than 18 years and are enrolled in major 600. Please provide their first and last names.",
            "Find all students aged over 18 with a major of 600. List their first and last names.",
            "Can you list the first and last names of students who are more than 18 years old and whose major is 600?",
            "Who are the students majoring in 600 that are over 18 years of age? Provide their first and last names."
        ],
        "ref_sql": "SELECT Fname , Lname FROM Student WHERE Age > 18 AND Major = 600;",
        "MQL": "db.Student.find({\n  \"Age\": { $gt: 18 },\n  \"Major\": 600\n}, { \"Fname\": 1, \"LName\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1633,
        "db_id": "course_teach",
        "nl_queries": [
            "Show names of teachers that teach at least two courses.",
            "What are the names of the teachers who teach at least two courses?",
            "List the names of teachers who offer a minimum of two courses.",
            "Provide the names of instructors that are responsible for at least two courses.",
            "Identify teachers who conduct two or more courses and display their names."
        ],
        "ref_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
        "MQL": "db.teacher.aggregate([\n  {\n    $unwind: \"$course_arrange\"\n  },\n  {\n    $group: {\n      _id: \"$Teacher_ID\",\n      Name: { $first: \"$Name\" },\n      courseCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      courseCount: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1707,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "What is the first name, last name, and phone of the customer with card 4560596484842.",
            "Return the full name and phone of the customer who has card number 4560596484842.",
            "Can you provide the first name, last name, and contact number for the customer associated with the card number 4560596484842?",
            "Please return the customer's first and last name along with their phone number for card 4560596484842.",
            "What are the first name, last name, and phone details of the individual who holds the card numbered 4560596484842?"
        ],
        "ref_sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = \"4560596484842\"",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $match: {\n      card_number: \"4560596484842\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      customer_first_name: {\n        $arrayElemAt: [\"$Docs1.customer_first_name\", 0]\n      },\n      customer_last_name: {\n        $arrayElemAt: [\"$Docs1.customer_last_name\", 0]\n      },\n      customer_phone: {\n        $arrayElemAt: [\"$Docs1.customer_phone\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2229,
        "db_id": "document_management",
        "nl_queries": [
            "Find the average access counts of documents with functional area \"Acknowledgement\".",
            "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?",
            "What is the average number of accesses for documents categorized under the \"Acknowledgement\" functional area?",
            "Calculate the average access count for documents that belong to the \"Acknowledgement\" functional area.",
            "Determine the mean access frequency of documents with a functional area labeled \"Acknowledgement.\""
        ],
        "ref_sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = \"Acknowledgement\"",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Document_Functional_Areas\"\n  },\n  {\n    $lookup: {\n      from: \"Functional_Areas\",\n      localField: \"Documents.Document_Functional_Areas.functional_area_code\",\n      foreignField: \"functional_area_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.functional_area_description\": \"Acknowledgement\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_access_count: {\n        $avg: \"$Documents.access_count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_access_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3097,
        "db_id": "chinook_1",
        "nl_queries": [
            "What are the distinct unit prices of all tracks?",
            "Find the distinct unit prices for tracks.",
            "What are the unique prices for all available tracks?",
            "List the different unit prices for tracks.",
            "Retrieve all the distinct unit prices of tracks in the database."
        ],
        "ref_sql": "SELECT distinct(UnitPrice) FROM TRACK",
        "MQL": "db.MediaType.aggregate([\n  {\n    $unwind: \"$Track\"\n  },\n  {\n    $group: {\n      _id: \"$Track.UnitPrice\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      UnitPrice: \"$_id\"\n    }\n  }\n])\n"
    },
    {
        "record_id": 2018,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What is the weight of the shortest person?",
            "Return the weight of the shortest person.",
            "What is the weight of the person who is the shortest?",
            "Provide the weight for the individual with the least height.",
            "Can you tell me the weight of the shortest individual?"
        ],
        "ref_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $sort: { Height: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Weight: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2581,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "How many tasks are there in total?",
            "How many tasks are there?",
            "What is the total number of tasks?",
            "Can you tell me the total count of tasks?",
            "How many tasks exist in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM Tasks",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Tasks\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1143,
        "db_id": "driving_school",
        "nl_queries": [
            "Which city lives most of staffs? List the city name and number of staffs.",
            "In which city do the most employees live and how many of them live there?",
            "Identify the city with the highest number of staff members and provide the total count.",
            "Which city has the largest staff population? Include both the city name and the staff count.",
            "Where do most of the staff members reside? Please list the city and the number of staff living there."
        ],
        "ref_sql": "SELECT T1.city , count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $group: {\n      _id: \"$city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2845,
        "db_id": "election",
        "nl_queries": [
            "How many distinct delegates are from counties with population larger than 50000?",
            "Count the number of distinct delegates who are from counties with population above 50000.",
            "What is the number of unique delegates from counties with populations greater than 50,000?",
            "How many unique election delegates are there from counties that have a population exceeding 50,000?",
            "Can you tell me the count of distinct delegates representing counties with a population above 50,000?"
        ],
        "ref_sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
        "MQL": "db.county.aggregate([\n  {\n    $match: {\n      Population: { $gt: 50000 }\n    }\n  },\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $group: {\n      _id: \"$election.Delegate\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_election_Delegate: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_election_Delegate: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 223,
        "db_id": "match_season",
        "nl_queries": [
            "Show all distinct positions of matches.",
            "What are the different positions for match season?",
            "Provide a list of all unique match positions.",
            "Can you list the various positions available for the match season?",
            "What unique positions are represented in the match season?"
        ],
        "ref_sql": "SELECT DISTINCT POSITION FROM match_season",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.Position\"\n    }\n  },\n  {\n    $project: {\n      Position: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2377,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
            "What is the highest number of engineer visits recorded for any single fault log entry? Please provide the visit count along with the corresponding fault log entry ID.",
            "Identify the fault log entry that has the maximum number of associated engineer visits and state how many visits are linked to it.",
            "How many engineer visits are recorded for the fault log that requires the most visits? Include both the visit count and the fault log entry ID.",
            "Can you tell me the single fault log entry with the greatest number of engineer visits? Please list the number of visits and its log entry ID."
        ],
        "ref_sql": "SELECT count(*) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { $unwind: \"$Maintenance_Contracts\" },\n  { $unwind: \"$Maintenance_Contracts.Assets\" },\n  { $unwind: \"$Maintenance_Contracts.Assets.Fault_Log\" },\n  { $unwind: \"$Maintenance_Contracts.Assets.Fault_Log.Engineer_Visits\" },\n  {\n    $group: {\n      _id: \"$Maintenance_Contracts.Assets.Fault_Log.fault_log_entry_id\",\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      fault_log_entry_id: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3353,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Return the lot details and investor ids.",
            "Provide the details of the lots and the corresponding investor IDs.",
            "Fetch the investor IDs along with their respective lot details.",
            "List the lot information together with the investors' IDs.",
            "Show the details for each lot along with the IDs of the investors."
        ],
        "ref_sql": "SELECT lot_details , investor_id FROM LOTS",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Lots\" },\n  { $project: { \"lot_details\": \"$Lots.lot_details\", \"investor_id\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2267,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the names of schools that have some students playing in goalie and mid positions.",
            "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
            "List the names of colleges that have students trying out for both goalie and midfield positions.",
            "Identify the schools with players competing for the roles of goalie and midfielder.",
            "Which colleges have participants in both the goalie and mid positions during tryouts?"
        ],
        "ref_sql": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": { $in: [\"goalie\", \"mid\"] }\n    }\n  },\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.pPos\": { $in: [\"goalie\", \"mid\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$cName\",\n      positions: { $addToSet: \"$Tryout.pPos\" }\n    }\n  },\n  {\n    $match: {\n      positions: { $all: [\"goalie\", \"mid\"] }\n    }\n  },\n  {\n    $project: {\n      cName: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2216,
        "db_id": "product_catalog",
        "nl_queries": [
            "What are the average and minimum price (in Euro) of all products?",
            "Give me the average and minimum price (in Euro) of the products.",
            "What is the average and minimum price of all the products expressed in Euros?",
            "Can you provide the average and lowest prices (in Euros) for the products available?",
            "Display the average and minimum prices for the total range of products, specified in Euros."
        ],
        "ref_sql": "SELECT avg(price_in_euros) , min(price_in_euros) FROM catalog_contents",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_price_in_euros: { $avg: \"$Catalog_Structure.Catalog_Contents.price_in_euros\" },\n      min_price_in_euros: { $min: \"$Catalog_Structure.Catalog_Contents.price_in_euros\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_price_in_euros: 1,\n      min_price_in_euros: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2806,
        "db_id": "museum_visit",
        "nl_queries": [
            "How many visitors below age 30 are there?",
            "What is the total number of visitors under the age of 30?",
            "Can you tell me how many visitors are younger than 30 years old?",
            "How many visitors fall into the age group of below 30?",
            "Please provide the count of visitors aged less than 30."
        ],
        "ref_sql": "SELECT count(*) FROM visitor WHERE age < 30",
        "MQL": "db.visitor.aggregate([\n  {\n    $match: {\n      \"Age\": { $lt: 30 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 167,
        "db_id": "world_1",
        "nl_queries": [
            "Which continent is Anguilla in?",
            "What is the continent name which Anguilla belongs to?",
            "In which continent can Anguilla be found?",
            "What continent does Anguilla belong to?",
            "Identify the continent where Anguilla is located."
        ],
        "ref_sql": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
        "MQL": "db.country.find(\n  { \"Name\": \"Anguilla\" },\n  { \"Continent\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 2882,
        "db_id": "college_1",
        "nl_queries": [
            "Find the number of different departments in each school whose number of different departments is less than 5.",
            "How many different departments are there in each school that has less than 5 apartments?",
            "What is the count of unique departments in each school that has fewer than 5 distinct departments?",
            "List the number of different departments for each school, restricting to those with less than 5 departments.",
            "Determine how many distinct departments are found in each school where the department count is below 5."
        ],
        "ref_sql": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.SCHOOL_CODE\",\n      count_DISTINCT_dept_name: {\n        $addToSet: \"$DEPARTMENT.DEPT_NAME\"\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_dept_name: {\n        $size: \"$count_DISTINCT_dept_name\"\n      },\n      SCHOOL_CODE: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $match: {\n      count_DISTINCT_dept_name: {\n        $lt: 5\n      }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2220,
        "db_id": "mountain_photos",
        "nl_queries": [
            "What are the average prominence of the mountains in country 'Morocco'?",
            "What is the average prominence of the mountains found in Morocco?",
            "Calculate the mean prominence of mountains situated in Morocco.",
            "Determine the average prominence measurement for Moroccan mountains.",
            "What does the average prominence of mountains in the country of Morocco look like?"
        ],
        "ref_sql": "SELECT avg(prominence) FROM mountain WHERE country = 'Morocco'",
        "MQL": "db.mountain.aggregate([\n  { $match: { \"Country\": \"Morocco\" } },\n  { $group: { _id: null, avg_prominence: { $avg: \"$Prominence\" } } },\n  { $project: { _id: 0, avg_prominence: 1 } }\n]);\n"
    },
    {
        "record_id": 2151,
        "db_id": "news_report",
        "nl_queries": [
            "What is the average number of years spent working as a journalist?",
            "What is the mean number of years that journalists have been working?",
            "How many years, on average, do journalists spend in their profession?",
            "Can you tell me the average years of experience among journalists?",
            "What is the typical duration of employment for journalists in terms of years?"
        ],
        "ref_sql": "SELECT avg(Years_working) FROM journalist",
        "MQL": "db.journalist.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Years_working: { $avg: \"$Years_working\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Years_working: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 306,
        "db_id": "architecture",
        "nl_queries": [
            "What are the distinct types of mills that are built by American or Canadian architects?",
            "What unique types of mills have been designed by architects from the United States or Canada?",
            "Can you list the different mill types constructed by American or Canadian architects?",
            "Identify the various types of mills associated with architects of American or Canadian nationality.",
            "What are the unique categories of mills built by architects who are American or Canadian?"
        ],
        "ref_sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'",
        "MQL": "db.architect.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"nationality\": \"American\" },\n        { \"nationality\": \"Canadian\" }\n      ],\n      \"mill\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $unwind: \"$mill\"\n  },\n  {\n    $group: {\n      _id: \"$mill.type\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"type\": \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3282,
        "db_id": "department_management",
        "nl_queries": [
            "Which head's name has the substring 'Ha'? List the id and name.",
            "Which heads have names that include the letters 'Ha'? Please provide their ID and name.",
            "Can you list the head IDs and names of those whose names contain 'Ha'?",
            "Identify the heads with 'Ha' in their names and show their ID along with their name.",
            "Find all heads whose names feature the substring 'Ha', and display their IDs and names."
        ],
        "ref_sql": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'",
        "MQL": "db.head.find({\n  \"name\": { $regex: \"Ha\", $options: \"i\" }\n}, { \"head_ID\": 1, \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2362,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How much does the most recent treatment cost?",
            "Show me the cost of the most recently performed treatment.",
            "What is the price of the latest treatment administered?",
            "Can you tell me the fee for the most recently conducted treatment?",
            "What was the cost of the most up-to-date treatment received?"
        ],
        "ref_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $unwind: \"$Dogs.Treatments\"\n  },\n  {\n    $sort: {\n      \"Dogs.Treatments.date_of_treatment\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      cost_of_treatment: \"$Dogs.Treatments.cost_of_treatment\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1020,
        "db_id": "roller_coaster",
        "nl_queries": [
            "Show the name and population of the country that has the highest roller coaster.",
            "Provide the name and population of the country with the tallest roller coaster.",
            "What is the name and population of the country that boasts the highest roller coaster?",
            "Identify the country that has the tallest roller coaster along with its population.",
            "Retrieve the country name and population for the nation with the highest roller coaster."
        ],
        "ref_sql": "SELECT T1.Name , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $sort: { \"roller_coaster.Height\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Name\": 1, \"Population\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2695,
        "db_id": "game_injury",
        "nl_queries": [
            "How many games are free of injury accidents?",
            "What is the total number of games without any reported injury incidents?",
            "How many games did not record any injury accidents?",
            "Can you tell me the count of games that are free from injury incidents?",
            "How many matches have no injury accidents associated with them?"
        ],
        "ref_sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $match: { $or: [ { \"game.injury_accident\": { $exists: false } }, { \"game.injury_accident\": { $size: 0 } } ] } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 3714,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show order ids and the total quantity in each order.",
            "Give the order ids for all orders, as well as the total product quantity in each.",
            "List all order IDs alongside the total number of products for each order.",
            "Provide the order IDs and the corresponding total quantities of items for every order.",
            "Display the unique IDs for all orders and the total product count associated with each."
        ],
        "ref_sql": "SELECT order_id , sum(product_quantity) FROM Order_items GROUP BY order_id",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Orders\" },\n  { $unwind: \"$Orders.Order_Items\" },\n  {\n    $group: {\n      _id: \"$Orders.order_id\",\n      sum_product_quantity: {\n        $sum: {\n          $toInt: \"$Orders.Order_Items.product_quantity\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      order_id: \"$_id\",\n      sum_product_quantity: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4141,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "Find the name of services that have been used for more than 2 times in first notification of loss.",
            "Which services have been used more than twice in first notification of loss? Return the service name.",
            "List the names of services that have been employed over two times for first notifications of loss.",
            "Identify services that are recorded as being used more than twice in the first notifications of loss, and return their names.",
            "What are the service names that have appeared in first notifications of loss more than two times?"
        ],
        "ref_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2",
        "MQL": "db.Services.aggregate([\n  {\n    $unwind: \"$First_Notification_of_Loss\"\n  },\n  {\n    $group: {\n      _id: \"$Service_ID\",\n      service_name: { $first: \"$Service_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Service_name: \"$service_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 466,
        "db_id": "insurance_policies",
        "nl_queries": [
            "What are the claim dates and settlement dates of all the settlements?",
            "Tell me the the claim date and settlement date for each settlement case.",
            "Can you provide the dates when claims were filed and settled for all settlements?",
            "Please list the claim and settlement dates for each case of settlement.",
            "What are the filing and resolution dates for all settlement claims?"
        ],
        "ref_sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Settlements",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $project: {\n      Date_Claim_Made: \"$Customer_Policies.Claims.Settlements.Date_Claim_Made\",\n      Date_Claim_Settled: \"$Customer_Policies.Claims.Settlements.Date_Claim_Settled\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1855,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the role name and role description for employee called Ebba?",
            "Show the name and description of the role played by the employee named Ebba.",
            "What are the name and description of the role assigned to the employee named Ebba?",
            "Please provide the role name and its description for the employee referred to as Ebba.",
            "Can you tell me the name of the role and the accompanying description for the staff member named Ebba?"
        ],
        "ref_sql": "SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = \"Ebba\"",
        "MQL": "db.Roles.aggregate([\n  {\n    $match: {\n      \"Employees.Employee_Name\": \"Ebba\"\n    }\n  },\n  {\n    $project: {\n      Role_Name: 1,\n      Role_Description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1553,
        "db_id": "workshop_paper",
        "nl_queries": [
            "Show the authors who have submissions to more than one workshop.",
            "Which authors have submitted to more than one workshop?",
            "List the authors who have made submissions to multiple workshops.",
            "Identify the authors with submissions to more than one workshop.",
            "Who are the authors that have participated in more than one workshop with their submissions?"
        ],
        "ref_sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1",
        "MQL": "db.submission.aggregate([\n  {\n    $unwind: \"$Acceptance\"\n  },\n  {\n    $group: {\n      _id: \"$Author\",\n      uniqueWorkshops: { $addToSet: \"$Acceptance.Workshop_ID\" }\n    }\n  },\n  {\n    $project: {\n      Author: \"$_id\",\n      workshopCount: { $size: \"$uniqueWorkshops\" }\n    }\n  },\n  {\n    $match: {\n      workshopCount: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Author: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2083,
        "db_id": "product_catalog",
        "nl_queries": [
            "What is the attribute data type of the attribute with name \"Green\"?",
            "Find the attribute data type for the attribute named \"Green\".",
            "What type of data is associated with the attribute named \"Green\"?",
            "Can you tell me the data type for the attribute that has the name \"Green\"?",
            "Retrieve the data type of the attribute called \"Green\"."
        ],
        "ref_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\"",
        "MQL": "db.Attribute_Definitions.find(\n  { attribute_name: \"Green\" },\n  { attribute_data_type: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 632,
        "db_id": "railway",
        "nl_queries": [
            "What are the names and arrival times of trains?",
            "Can you provide the names and arrival schedule of all the trains?",
            "List out the names along with their respective arrival timings for the trains.",
            "What are the names of the trains and their corresponding arrival times?",
            "Show me the train names and the times they arrive at their destinations."
        ],
        "ref_sql": "SELECT Name , Arrival FROM train",
        "MQL": "db.railway.aggregate([\n  { $unwind: \"$train\" },\n  { $project: { \"Name\": \"$train.Name\", \"Arrival\": \"$train.Arrival\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 185,
        "db_id": "perpetrator",
        "nl_queries": [
            "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
            "List the countries where there are perpetrators who injured more than 50 individuals as well as those who injured fewer than 20.",
            "Provide the names of countries that feature both types of perpetrators: those inflicting over 50 injuries and those causing under 20 injuries.",
            "Identify countries that have at least one perpetrator with injuries exceeding 50 and at least one with injuries below 20.",
            "Find the countries where perpetrators exist with more than 50 injuries and others with less than 20 injuries."
        ],
        "ref_sql": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$perpetrator\"\n  },\n  {\n    $group: {\n      _id: \"$perpetrator.Country\",\n      injured_gt_50: { $sum: { $cond: [{ $gt: [\"$perpetrator.Injured\", 50] }, 1, 0] } },\n      injured_lt_20: { $sum: { $cond: [{ $lt: [\"$perpetrator.Injured\", 20] }, 1, 0] } }\n    }\n  },\n  {\n    $match: {\n      injured_gt_50: { $gt: 0 },\n      injured_lt_20: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 496,
        "db_id": "activity_1",
        "nl_queries": [
            "Show ids for all the male faculty.",
            "What are the faculty ids of all the male faculty members?",
            "List the faculty IDs for all male instructors.",
            "Provide the IDs of all faculty members who are male.",
            "Retrieve the IDs of male faculty staff."
        ],
        "ref_sql": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
        "MQL": "db.Faculty.find(\n  { Sex: \"M\" },\n  { FacID: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 753,
        "db_id": "news_report",
        "nl_queries": [
            "What are the nationalities and ages of journalists?",
            "Can you provide the nationalities and ages of all journalists?",
            "What are the ages and nationalities of the journalists?",
            "List the nationalities along with the ages of journalists.",
            "What nationalities and ages do the journalists have?"
        ],
        "ref_sql": "SELECT Nationality , Age FROM journalist",
        "MQL": "db.journalist.find({}, { \"Nationality\": 1, \"Age\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 127,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Find the id of the candidate who got the lowest oppose rate.",
            "What is the id of the candidate with the lowest oppose rate?",
            "Retrieve the id of the candidate with the least oppose rate.",
            "What candidate ID corresponds to the lowest oppose rate?",
            "Identify the candidate ID that has the smallest oppose rate."
        ],
        "ref_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$candidate\" },\n  { $sort: { \"candidate.Oppose_rate\": 1 } },\n  { $limit: 1 },\n  { $project: { Candidate_ID: \"$candidate.Candidate_ID\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 158,
        "db_id": "entrepreneur",
        "nl_queries": [
            "List the companies of entrepreneurs in descending order of money requested.",
            "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
            "Provide a list of entrepreneurial companies, sorted by the amount of money requested in a descending fashion.",
            "Show the companies associated with entrepreneurs ranked by their money requested, from highest to lowest.",
            "Enumerate the companies of entrepreneurs, arranged in descending order according to the requested funding amounts."
        ],
        "ref_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $sort: {\n      \"entrepreneur.Money_Requested\": -1\n    }\n  },\n  {\n    $project: {\n      Company: \"$entrepreneur.Company\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 517,
        "db_id": "restaurant_1",
        "nl_queries": [
            "List all students' first names and last names who majored in 600.",
            "Provide the first and last names of all students who are pursuing a major with ID 600.",
            "Fetch a list of students, including their first and last names, who have declared a major of 600.",
            "Show the first and last names of students whose major is categorized as 600.",
            "Can you list the first and last names of students enrolled in the major numbered 600?"
        ],
        "ref_sql": "SELECT Fname , Lname FROM Student WHERE Major = 600;",
        "MQL": "db.Student.find({ \"Major\": 600 }, { \"Fname\": 1, \"LName\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 174,
        "db_id": "tvshow",
        "nl_queries": [
            "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "What is the country with the most number of TV Channels and how many does it have?",
            "Identify the country that hosts the highest number of TV Channels along with the total count of those channels.",
            "Which country has the largest quantity of TV Channels? Please provide the country name and the total number of channels.",
            "Name the country with the greatest number of TV Channels and specify how many it has."
        ],
        "ref_sql": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1093,
        "db_id": "book_2",
        "nl_queries": [
            "Show the title and publication dates of books.",
            "List the titles along with their respective publication dates for each book.",
            "Provide the titles of books and their associated publication dates.",
            "Display the book titles and the dates they were published.",
            "Retrieve the titles of all books together with their publication dates."
        ],
        "ref_sql": "SELECT T1.Title , T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID",
        "MQL": "db.book.aggregate([\n  { $unwind: \"$publication\" },\n  { $project: { \"Title\": 1, \"Publication_Date\": \"$publication.Publication_Date\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2905,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the number of distinct type of pets.",
            "How many different types of pet are there?",
            "How many unique pet types are available?",
            "What is the total count of different pet types?",
            "Can you tell me the number of distinct types of pets?"
        ],
        "ref_sql": "SELECT count(DISTINCT pettype) FROM pets",
        "MQL": "db.Pets.aggregate([\n  {\n    $group: {\n      _id: \"$PetType\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_pettype\"\n  }\n]);\n"
    },
    {
        "record_id": 2979,
        "db_id": "loan_1",
        "nl_queries": [
            "List the name of all customers sorted by their account balance in ascending order.",
            "What are the names of all customers, ordered by account balance?",
            "Retrieve the names of all customers sorted by their account balance from lowest to highest.",
            "Provide a list of customer names arranged in ascending order based on their account balances.",
            "Show all customer names in order of their account balance, starting with the smallest."
        ],
        "ref_sql": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      acc_bal: \"$customer.acc_bal\"\n    }\n  },\n  {\n    $sort: {\n      acc_bal: 1\n    }\n  },\n  {\n    $project: {\n      cust_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3424,
        "db_id": "department_store",
        "nl_queries": [
            "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
            "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.",
            "Can you provide the maximum and minimum prices for products categorized by product type and arranged in alphabetical order?",
            "What are the highest and lowest prices for each type of product, listed and sorted by product type?",
            "Show me the maximum and minimum product prices for every product type, grouped accordingly and sorted alphabetically."
        ],
        "ref_sql": "SELECT max(product_price) , min(product_price) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_type_code\",\n      max_product_price: { $max: \"$product_price\" },\n      min_product_price: { $min: \"$product_price\" }\n    }\n  },\n  {\n    $project: {\n      product_type_code: \"$_id\",\n      max_product_price: 1,\n      min_product_price: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      product_type_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 266,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the unique first names, last names, and phone numbers for all customers with any account.",
            "What are the distinct first names, last names, and phone numbers for customers with accounts?",
            "Retrieve the distinct first names, last names, and phone numbers of customers who have accounts.",
            "What unique first names, last names, and phone numbers can be found for customers with any account?",
            "Provide a list of unique first names, last names, and phone numbers for customers that own accounts."
        ],
        "ref_sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      Accounts: { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      customer_first_name: 1,\n      customer_last_name: 1,\n      phone_number: 1,\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: {\n        customer_first_name: \"$customer_first_name\",\n        customer_last_name: \"$customer_last_name\",\n        phone_number: \"$phone_number\"\n      }\n    }\n  },\n  {\n    $project: {\n      customer_first_name: \"$_id.customer_first_name\",\n      customer_last_name: \"$_id.customer_last_name\",\n      phone_number: \"$_id.phone_number\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 975,
        "db_id": "car_1",
        "nl_queries": [
            "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "For each continent, list its id, name, and how many countries it has?",
            "What is the number of countries in each continent? Provide the continent ID, continent name, and the total number of countries.",
            "Can you provide a list of continents along with their IDs, names, and the count of countries they contain?",
            "For every continent, what are the continent ID and name, and how many countries belong to each?"
        ],
        "ref_sql": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $group: {\n      _id: {\n        ContId: \"$ContId\",\n        Continent: \"$Continent\"\n      },\n      countryCount: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      ContId: \"$_id.ContId\",\n      Continent: \"$_id.Continent\",\n      count: \"$countryCount\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 173,
        "db_id": "perpetrator",
        "nl_queries": [
            "What is the country that has the most perpetrators?",
            "Which country is home to the highest number of perpetrators?",
            "Identify the country with the largest count of perpetrators.",
            "What country has the greatest number of individuals identified as perpetrators?",
            "Can you tell me which country has the most perpetrators?"
        ],
        "ref_sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $group: { _id: \"$perpetrator.Country\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { Country: \"$_id\", COUNT: \"$count\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 2981,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of customers who have both saving and checking account types.",
            "What are the names of customers who have both savings and checking accounts?",
            "List the names of customers who hold both savings and checking accounts.",
            "What are the names of those customers that have both a savings account and a checking account?",
            "Identify the customers who possess both a savings type and a checking type account."
        ],
        "ref_sql": "SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'",
        "MQL": "db.bank.aggregate([\n  {\n    $project: {\n      customer: {\n        $filter: {\n          input: \"$customer\",\n          as: \"cust\",\n          cond: {\n            $and: [\n              { $eq: [\"$$cust.acc_type\", \"s\"] },\n              { $eq: [{ $size: \"$$cust.loan\" }, 0] }\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 102,
        "db_id": "culture_company",
        "nl_queries": [
            "How many movie directors are there?",
            "Count the number of different directors.",
            "What is the total number of unique directors in the movie database?",
            "How many distinct directors have contributed to the films?",
            "Please provide the count of all unique movie directors."
        ],
        "ref_sql": "SELECT COUNT (DISTINCT director) FROM movie",
        "MQL": "db.movie.aggregate([\n  {\n    $group: {\n      _id: \"$Director\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT__DISTINCT_director\": \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 406,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the distinct names of all races held between 2014 and 2017?",
            "What are the unique names of all race held between 2014 and 2017?",
            "List all unique names of races that took place from 2014 to 2017.",
            "Provide the distinct race names for all events held between the years 2014 and 2017.",
            "What are the unique race titles for races conducted during the period from 2014 to 2017?"
        ],
        "ref_sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      \"races.year\": {\n        $gte: 2014,\n        $lte: 2017\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$races.name\"\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2555,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the number of document types.",
            "How many document types are there?",
            "What is the total count of document types?",
            "Can you tell me how many different types of documents exist?",
            "Please provide the total number of distinct document types available."
        ],
        "ref_sql": "SELECT count(*) FROM Ref_document_types",
        "MQL": "db.Ref_Document_Types.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 180,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Which countries have more than two members?",
            "What countries have a membership exceeding two individuals?",
            "List the countries that have more than two participants.",
            "Identify countries that contain over two members in total.",
            "Which nations have more than two representatives?"
        ],
        "ref_sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" }, \n  { $group: { _id: \"$member.Country\", count: { $sum: 1 } } }, \n  { $match: { count: { $gt: 2 } } }, \n  { $project: { \"Country\": \"$_id\", \"_id\": 0 } } \n]);\n"
    },
    {
        "record_id": 1980,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "List the most common type of artworks.",
            "Identify the artwork type that appears most frequently.",
            "What is the most prevalent type of artwork?",
            "Determine which type of artwork is the most common.",
            "Find out the type of artwork with the highest occurrence."
        ],
        "ref_sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.artwork.aggregate([\n  {\n    $group: {\n      _id: \"$Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2224,
        "db_id": "manufactory_1",
        "nl_queries": [
            "What are the average, maximum and total revenues of all companies?",
            "Return the average, maximum, and total revenues across all manufacturers.",
            "What are the average, highest, and overall revenues of all manufacturers?",
            "Provide the average, peak, and cumulative revenues for every company in the dataset.",
            "Calculate the average, maximum, and total revenue figures across all manufacturers."
        ],
        "ref_sql": "SELECT avg(revenue) , max(revenue) , sum(revenue) FROM manufacturers",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_revenue: { $avg: \"$Revenue\" },\n      max_revenue: { $max: \"$Revenue\" },\n      sum_revenue: { $sum: \"$Revenue\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_revenue: 1,\n      max_revenue: 1,\n      sum_revenue: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2180,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the average credit score of the customers who have some loan.",
            "What is the average credit score for customers who have taken a loan?",
            "What is the mean credit score of customers who hold a loan?",
            "Determine the average credit score for those customers with loans.",
            "Calculate the average credit score of clients that have taken out loans."
        ],
        "ref_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $match: {\n      \"customer.loan\": { $ne: [] }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_credit_score: { $avg: \"$customer.credit_score\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_credit_score: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3475,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Return the name, location and district of all shops in descending order of number of products.",
            "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "List all shops along with their names, locations, and districts, ordered by the number of products from highest to lowest.",
            "Provide the name, location, and district for each shop, sorted in descending order based on the quantity of products they carry.",
            "Retrieve the names, locations, and districts of every shop, sorted by the number of products in descending order."
        ],
        "ref_sql": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
        "MQL": "db.shop.find(\n  {},\n  {\n    _id: 0,\n    Name: 1,\n    Location: 1,\n    District: 1\n  }\n).sort(\n  {\n    Number_products: -1\n  }\n);\n"
    },
    {
        "record_id": 446,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "What are all the policy types of the customer named \"Dayana Robel\"?",
            "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
            "Can you list the types of policies associated with the customer \"Dayana Robel\"?",
            "What policy types does the customer named \"Dayana Robel\" have?",
            "Provide all the types of insurance policies belonging to \"Dayana Robel.\""
        ],
        "ref_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      Customer_name: \"Dayana Robel\"\n    }\n  },\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $lookup: {\n      from: \"Available_Policies\",\n      localField: \"Customers_Policies.Policy_ID\",\n      foreignField: \"Policy_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      policy_type_code: \"$Docs1.policy_type_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1899,
        "db_id": "course_teach",
        "nl_queries": [
            "Show names of teachers and the courses they are arranged to teach.",
            "What is the name of each teacher and what course they teach?",
            "List the names of teachers alongside the courses they are designated to teach.",
            "Provide each teacher's name along with the respective course they are supposed to instruct.",
            "Display the names of teachers and the courses assigned to them for teaching."
        ],
        "ref_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "MQL": "db.teacher.aggregate([\n  {\n    $unwind: \"$course_arrange\"\n  },\n  {\n    $lookup: {\n      from: \"course\",\n      localField: \"course_arrange.Course_ID\",\n      foreignField: \"Course_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: 1,\n      Course: \"$Docs1.Course\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 735,
        "db_id": "ship_mission",
        "nl_queries": [
            "List the name of ships that are not involved in any mission",
            "What are the names of the ships that are not involved in any missions?",
            "Retrieve the names of ships that have no missions assigned to them.",
            "Show me the names of ships that are not currently part of any missions.",
            "What are the names of the ships that aren't assigned to any missions?"
        ],
        "ref_sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
        "MQL": "db.ship.find(\n  {\n    $or: [\n      { mission: { $exists: false } },\n      { mission: { $size: 0 } }\n    ]\n  },\n  {\n    _id: 0,\n    Name: 1\n  }\n);\n"
    },
    {
        "record_id": 3759,
        "db_id": "department_store",
        "nl_queries": [
            "For each payment method, return how many customers use it.",
            "How many customers use each payment method?",
            "Provide the number of customers that utilize each type of payment method.",
            "List the count of customers for each available payment method.",
            "How many customers are associated with each payment option?"
        ],
        "ref_sql": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$payment_method_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      payment_method_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3467,
        "db_id": "party_people",
        "nl_queries": [
            "Show the minister who took office after 1961 or before 1959.",
            "Who are the ministers who took office after 1961 or before 1959?",
            "List the names of ministers who assumed office either after 1961 or prior to 1959.",
            "Identify ministers who took office after the year 1961 or before 1959.",
            "Provide the names of those ministers who took office in the years following 1961 or preceding 1959."
        ],
        "ref_sql": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"party.Took_office\": { $gt: \"1961\" } },\n        { \"party.Took_office\": { $lt: \"1959\" } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Minister: \"$party.Minister\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2366,
        "db_id": "tvshow",
        "nl_queries": [
            "Find the number of cartoons directed by each of the listed directors.",
            "How many cartoons did each director create?",
            "List the total number of cartoons directed by each director.",
            "How many cartoon episodes has each director directed?",
            "Count the cartoons assigned to each director."
        ],
        "ref_sql": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $group: {\n      _id: \"$Cartoon.Directed_by\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Directed_by: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1838,
        "db_id": "party_people",
        "nl_queries": [
            "Show party names and the number of events for each party.",
            "How many events are there for each party?",
            "List the names of parties together with the count of events held by each one.",
            "What is the total number of events organized for each political party?",
            "Provide the names of parties along with the total events associated with each party."
        ],
        "ref_sql": "SELECT T2.party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $unwind: \"$party.party_events\"\n  },\n  {\n    $group: {\n      _id: \"$party.Party_name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Party_name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2269,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
            "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
            "List the names of colleges located in Louisiana with enrollment exceeding 15,000 or those situated in Arizona with fewer than 13,000 students.",
            "What are the names of colleges in LA that enroll more than 15,000 students or in AZ that enroll less than 13,000?",
            "Identify the college names from LA with student populations greater than 15,000 and from AZ with populations below 13,000."
        ],
        "ref_sql": "SELECT cName FROM College WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\"",
        "MQL": "db.College.find({\n  $or: [\n    {\n      $and: [\n        { state: \"LA\" },\n        { enr: { $gt: 15000 } }\n      ]\n    },\n    {\n      $and: [\n        { state: \"AZ\" },\n        { enr: { $lt: 13000 } }\n      ]\n    }\n  ]\n}, {\n  cName: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2294,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the name of the product that has the smallest capacity.",
            "Which catalog content has the smallest capacity? Return the catalog entry name.",
            "Retrieve the name of the product with the lowest capacity.",
            "What is the catalog entry name for the item that has the least capacity?",
            "Identify the catalog content that features the smallest capacity and provide its entry name."
        ],
        "ref_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $addFields: {\n      capacity_numeric: {\n        $toDouble: \"$Catalog_Structure.Catalog_Contents.capacity\"\n      }\n    }\n  },\n  {\n    $sort: {\n      capacity_numeric: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      catalog_entry_name: \"$Catalog_Structure.Catalog_Contents.catalog_entry_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 678,
        "db_id": "orchestra",
        "nl_queries": [
            "List names of conductors in descending order of years of work.",
            "What are the names of conductors, sorted descending by the number of years they have worked?",
            "Provide a list of conductor names arranged in order of their years of experience from highest to lowest.",
            "Show the names of conductors, sorted in descending order by the length of their careers.",
            "Retrieve the names of conductors, sorted from most to least years worked."
        ],
        "ref_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "MQL": "db.conductor.aggregate([\n  {\n    $sort: {\n      Year_of_Work: -1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2039,
        "db_id": "activity_1",
        "nl_queries": [
            "What activities do we have?",
            "List all the activities we have.",
            "Can you provide me with the names of the activities available?",
            "Show me all the activities that are listed.",
            "What are the names of the activities we currently offer?"
        ],
        "ref_sql": "SELECT activity_name FROM Activity",
        "MQL": "db.Activity.find({}, { activity_name: 1, _id: 0 });\n"
    },
    {
        "record_id": 3960,
        "db_id": "sports_competition",
        "nl_queries": [
            "Show total points of all players.",
            "What is the total number of points for all players?",
            "Provide the overall points scored by all players.",
            "What is the combined point total of every player?",
            "Give me the total points achieved by all the players."
        ],
        "ref_sql": "SELECT sum(Points) FROM player",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Points: {\n        $sum: \"$player.Points\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Points: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1622,
        "db_id": "chinook_1",
        "nl_queries": [
            "Which artist does the album \"Balls to the Wall\" belong to?",
            "Find the name of the artist who made the album \"Balls to the Wall\".",
            "Who is the artist that created the album titled \"Balls to the Wall\"?",
            "Name the artist associated with the album \"Balls to the Wall\".",
            "Which musician is responsible for the album named \"Balls to the Wall\"?"
        ],
        "ref_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\"",
        "MQL": "db.Artist.find(\n  { \"Album.Title\": \"Balls to the Wall\" },\n  { \"Name\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1133,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
            "Tell me the booking status code for the apartment with number \"Suite 634\".",
            "Could you provide the booking status code for the apartment listed as \"Suite 634\"?",
            "What is the current booking status for the apartment that has the number \"Suite 634\"?",
            "Can you tell me the booking status code associated with the apartment number \"Suite 634\"?"
        ],
        "ref_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $match: {\n      \"Apartments.apt_number\": \"Suite 634\"\n    }\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $project: {\n      booking_status_code: \"$Apartments.Apartment_Bookings.booking_status_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2567,
        "db_id": "insurance_policies",
        "nl_queries": [
            "How many settlements are there in total?",
            "Count the total number of settlements made.",
            "What is the total number of settlements recorded?",
            "How many settlements have been processed overall?",
            "Determine the overall count of settlements that have occurred."
        ],
        "ref_sql": "SELECT count(*) FROM Settlements",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1261,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "What are the ids and details of events that have more than one participants?",
            "Can you provide the IDs and descriptions of events that include multiple participants?",
            "What are the event IDs and details for events with more than one participant?",
            "List the event IDs and their details for all events that have at least two participants.",
            "Show me the identifiers and information of events that feature more than one participant."
        ],
        "ref_sql": "SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count(*) > 1",
        "MQL": "db.Services.aggregate([\n  { $unwind: \"$Events\" },\n  { $unwind: \"$Events.Participants_in_Events\" },\n  {\n    $group: {\n      _id: {\n        Event_ID: \"$Events.Event_ID\",\n        Event_Details: \"$Events.Event_Details\"\n      },\n      participantCount: { $sum: 1 }\n    }\n  },\n  { $match: { participantCount: { $gt: 1 } } },\n  {\n    $project: {\n      _id: 0,\n      Event_ID: \"$_id.Event_ID\",\n      Event_Details: \"$_id.Event_Details\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1359,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the name and checking balance of the account with the lowest savings balance.",
            "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
            "Retrieve the customer name and checking account balance for the individual who has the smallest savings balance.",
            "Show the name and checking balance of the customer with the least amount in their savings account.",
            "What is the name and checking account balance for the customer holding the lowest savings balance?"
        ],
        "ref_sql": "SELECT T1.name , T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $sort: {\n      \"SAVINGS.balance\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $project: {\n      name: 1,\n      balance: \"$CHECKING.balance\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2131,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the average latitude and longitude of the starting points of all trips?",
            "What is the average latitude and longitude of all starting stations for the trips?",
            "What are the average coordinates (latitude and longitude) of the departure points for all bike trips?",
            "Can you provide the average latitude and longitude for all starting stations used in bike trips?",
            "Determine the average latitude and longitude for every starting location of the trips."
        ],
        "ref_sql": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id",
        "MQL": "db.trip.aggregate([\n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"start_station_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_lat: { $avg: \"$Docs1.lat\" },\n      avg_long: { $avg: \"$Docs1.long\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_lat: 1,\n      avg_long: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1676,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the account name, id and the number of transactions for each account.",
            "Return the names and ids of each account, as well as the number of transactions.",
            "Provide the account IDs and names along with the total number of transactions for every account.",
            "List each account's name and ID, including the count of transactions associated with them.",
            "For each account, retrieve the account name, ID, and the corresponding transaction count."
        ],
        "ref_sql": "SELECT T2.account_name , T1.account_id , count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $unwind: \"$Accounts.Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: {\n        account_id: \"$Accounts.account_id\",\n        account_name: \"$Accounts.account_name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      account_id: \"$_id.account_id\",\n      account_name: \"$_id.account_name\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4020,
        "db_id": "manufactory_1",
        "nl_queries": [
            "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
            "Return the total revenue of companies with headquarters in Tokyo or Taiwan.",
            "What is the overall revenue generated by all manufacturers whose main office is located in either Tokyo or Taiwan?",
            "Calculate the total revenue for companies based in Tokyo or Taiwan.",
            "Provide the combined revenue of all firms with headquarters in Tokyo or Taiwan."
        ],
        "ref_sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      $or: [\n        { Headquarter: \"Tokyo\" },\n        { Headquarter: \"Taiwan\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_revenue: { $sum: \"$Revenue\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_revenue: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3259,
        "db_id": "game_1",
        "nl_queries": [
            "Show all game ids and the number of hours played.",
            "What are ids and total number of hours played for each game?",
            "Display the game identifiers along with the total hours that have been played for each game.",
            "List the IDs of the games and their corresponding total hours of playtime.",
            "Provide the IDs of all games along with the aggregated hours played for each one."
        ],
        "ref_sql": "SELECT gameid , sum(hours_played) FROM Plays_games GROUP BY gameid",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $unwind: \"$Plays_Games\"\n  },\n  {\n    $group: {\n      _id: \"$GameID\",\n      sum_hours_played: { $sum: \"$Plays_Games.Hours_Played\" }\n    }\n  },\n  {\n    $project: {\n      GameID: \"$_id\",\n      sum_hours_played: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2724,
        "db_id": "party_host",
        "nl_queries": [
            "How many parties are there?",
            "Count the number of parties.",
            "What is the total number of parties?",
            "How many total parties are registered?",
            "Please tell me the count of all parties."
        ],
        "ref_sql": "SELECT count(*) FROM party",
        "MQL": "db.party.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2399,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number and average age of students living in each city.",
            "How many students live in each city and what are their average ages?",
            "What is the student population and average age for each city?",
            "List the number of students and their average age per city.",
            "Provide the count of students and their average ages sorted by city."
        ],
        "ref_sql": "SELECT count(*) , avg(age) , city_code FROM student GROUP BY city_code",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$city_code\",\n      count: { $sum: 1 },\n      avg_age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      city_code: \"$_id\",\n      count: 1,\n      avg_age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 776,
        "db_id": "program_share",
        "nl_queries": [
            "What is the owner of the channel that has the highest rating ratio?",
            "Show me the owner of the channel with the highest rating.",
            "Who owns the channel with the highest rating percentage?",
            "Identify the owner of the channel that has the best rating.",
            "Can you tell me who the owner is of the channel with the top rating?"
        ],
        "ref_sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
        "MQL": "db.channel.aggregate([\n  {\n    $sort: {\n      Rating_in_percent: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Owner: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4060,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
            "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
            "List the names of customers who have engaged with the \"Close a policy\" or \"Upgrade a policy\" services.",
            "Which customers have accessed services called \"Close a policy\" or \"Upgrade a policy\"? Provide their names.",
            "Show the customer names of those who have utilized either the service \"Close a policy\" or the service \"Upgrade a policy\"."
        ],
        "ref_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss\"\n  },\n  {\n    $lookup: {\n      from: \"Services\",\n      localField: \"Customers_Policies.First_Notification_of_Loss.Service_ID\",\n      foreignField: \"Service_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Service_name\": { $in: [\"Close a policy\", \"Upgrade a policy\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Customer_ID\",\n      Customer_name: { $first: \"$Customer_name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Customer_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 432,
        "db_id": "club_1",
        "nl_queries": [
            "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".",
            "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.",
            "List all clubs that include members residing in the city identified by the code \"BAL\".",
            "What are the names of clubs that have members from the city with the code \"BAL\"?",
            "Identify which clubs have at least one member coming from the city represented by the code \"BAL\" and provide their names."
        ],
        "ref_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"BAL\"",
        "MQL": "db.Club.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.city_code\": \"BAL\"\n    }\n  },\n  {\n    $project: {\n      ClubName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 7,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "List all information about the assessment notes sorted by date in ascending order.",
            "Retrieve all details regarding the assessment notes, organized by date from earliest to latest.",
            "Display all information about the assessment notes, arranged in ascending order based on their date.",
            "Show all data related to the assessment notes, sorted chronologically from the oldest to the newest.",
            "Gather complete information on assessment notes sorted by date in increasing order."
        ],
        "ref_sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Students\" },\n  { $unwind: \"$Students.Assessment_Notes\" },\n  { $sort: { \"Students.Assessment_Notes.date_of_notes\": 1 } },\n  {\n    $project: {\n      _id: 0,\n      notes_id: \"$Students.Assessment_Notes.notes_id\",\n      student_id: \"$Students.Assessment_Notes.student_id\",\n      teacher_id: \"$Students.Assessment_Notes.teacher_id\",\n      date_of_notes: \"$Students.Assessment_Notes.date_of_notes\",\n      text_of_notes: \"$Students.Assessment_Notes.text_of_notes\",\n      other_details: \"$Students.Assessment_Notes.other_details\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 504,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "What are the names of festivals held in year 2007?",
            "Which festivals occurred in 2007, and what are their names?",
            "List the names of festivals that took place in the year 2007.",
            "Can you provide the names of festivals from 2007?",
            "What were the names of the festivals organized in 2007?"
        ],
        "ref_sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007",
        "MQL": "db.festival_detail.find({ \"Year\": 2007 }, { \"Festival_Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2920,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "How many different source system code for the cmi cross references are there?",
            "What is the total number of unique source system codes for the CMI cross references?",
            "How many distinct source system codes exist within the customer cross-reference records?",
            "Can you provide the count of different source system codes for the CMI cross references?",
            "What is the count of unique source system codes recorded for the cross references in the Customer Master Index?"
        ],
        "ref_sql": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "MQL": "db.Customer_Master_Index.aggregate([\n  {\n    $unwind: \"$CMI_Cross_References\"\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_source_system_code: { $addToSet: \"$CMI_Cross_References.source_system_code\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_source_system_code: { $size: \"$count_DISTINCT_source_system_code\" }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 867,
        "db_id": "world_1",
        "nl_queries": [
            "Which region is the city Kabul located in?",
            "What region is Kabul in?",
            "In which region can we find the city of Kabul?",
            "Could you tell me the region where Kabul is situated?",
            "What region encompasses the city of Kabul?"
        ],
        "ref_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
        "MQL": "db.country.find(\n  { \"city.Name\": \"Kabul\" },\n  { \"Region\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1530,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the name and id of the good with the highest average rank.",
            "Retrieve the item title and ID that boasts the highest average review rank.",
            "Identify the item with the best average rank and provide its name along with its identifier.",
            "Which item has the highest average rank? Provide both its name and ID.",
            "Show the title and identifier of the item that has received the highest average rating from reviews."
        ],
        "ref_sql": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "MQL": "db.item.aggregate([\n  {\n    $unwind: \"$review\"\n  },\n  {\n    $group: {\n      _id: \"$i_id\",\n      title: { $first: \"$title\" },\n      avg_rank: { $avg: \"$review.rank\" }\n    }\n  },\n  {\n    $sort: { avg_rank: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1,\n      i_id: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1477,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which skill is used in fixing the most number of faults? List the skill id and description.",
            "What is the skill that is most commonly used to resolve faults? Include both its skill ID and description.",
            "Identify the skill that addresses the highest number of faults. Provide the skill ID along with its description.",
            "Which skill has the highest usage in fixing faults? Please provide the skill ID and its descriptive details.",
            "Could you tell me the skill employed in the most fault repairs? I need the skill ID and its description as well."
        ],
        "ref_sql": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Skills.aggregate([\n  \n  { $unwind: \"$Skills_Required_To_Fix\" },\n  \n  \n  { \n    $group: {\n      _id: \"$Skills_Required_To_Fix.skill_id\",\n      count: { $sum: 1 }\n    }\n  },\n  \n  \n  { $sort: { count: -1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  {\n    $lookup: {\n      from: \"Skills\",\n      localField: \"_id\",\n      foreignField: \"skill_id\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      skill_id: \"$_id\",\n      skill_description: \"$Docs1.skill_description\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3648,
        "db_id": "candidate_poll",
        "nl_queries": [
            "find the names of people who are taller than 200 or lower than 190.",
            "What are the names of people who have a height greater than 200 or less than 190?",
            "Retrieve the names of individuals who are either over 200 cm tall or under 190 cm.",
            "List the names of people whose height exceeds 200 cm or falls below 190 cm.",
            "Provide the names of those who have a height greater than 200 or less than 190 centimeters."
        ],
        "ref_sql": "SELECT name FROM people WHERE height > 200 OR height < 190",
        "MQL": "db.people.find(\n  { $or: [ { Height: { $gt: 200 } }, { Height: { $lt: 190 } } ] },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 4142,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "List the state names and the number of customers living in each state.",
            "Provide a list of states along with the number of customers in each state.",
            "Show the state names and the total count of customers residing in those states.",
            "Enumerate the states and the respective customer counts for each state.",
            "Compile a list detailing how many customers live in each state, grouped by state name."
        ],
        "ref_sql": "SELECT t2.state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
        "MQL": "db.Customers.aggregate([\n  \n  { $unwind: \"$Customer_Addresses\" },\n  \n  \n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $group: {\n      _id: \"$Docs1.state_province_county\",\n      count: { $sum: 1 }\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      state_province_county: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2663,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "Find the number of customers in total.",
            "How many customers are there?",
            "Count the number of customers.",
            "Return the total number of distinct customers.",
            "What is the total count of customers in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM customers",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1753,
        "db_id": "student_assessment",
        "nl_queries": [
            "what are the first name and last name of all candidates?",
            "What are the first and last names of all the candidates?",
            "Can you provide the first and last names of every candidate?",
            "What are the given names and surnames of all individuals categorized as candidates?",
            "Please list the first names along with the last names of all candidates present."
        ],
        "ref_sql": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "MQL": "db.People.aggregate([\n  {\n    $match: {\n      Candidates: { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      first_name: 1,\n      last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1319,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
            "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
            "What type of interaction occurs between the enzyme 'ALA synthase' and the drug 'Aripiprazole'?",
            "Can you tell me the interaction type for the enzyme named 'ALA synthase' with regard to the medicine 'Aripiprazole'?",
            "What is the interaction classification for the enzyme 'ALA synthase' in relation to the medicine 'Aripiprazole'?"
        ],
        "ref_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
        "MQL": "db.medicine.aggregate([\n  {\n    $match: {\n      name: \"Aripiprazole\"\n    }\n  },\n  {\n    $unwind: \"$medicine_enzyme_interaction\"\n  },\n  {\n    $lookup: {\n      from: \"enzyme\",\n      localField: \"medicine_enzyme_interaction.enzyme_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"ALA synthase\"\n    }\n  },\n  {\n    $project: {\n      interaction_type: \"$medicine_enzyme_interaction.interaction_type\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1382,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the name of accounts whose checking balance is below the average checking balance.",
            "What are the names of customers with checking balances lower than the average checking balance?",
            "List the names of all accounts that have a checking balance lower than the average.",
            "What are the names of the customers whose checking account balances fall below the average amount?",
            "Identify the accounts with checking balances that are beneath the average checking balance."
        ],
        "ref_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT avg(balance) FROM checking)",
        "MQL": "db.ACCOUNTS.aggregate([\n  \n  { $unwind: \"$CHECKING\" },\n  \n  \n  {\n    $group: {\n      _id: null,\n      avg_balance: { $avg: \"$CHECKING.balance\" }\n    }\n  },\n  \n  \n  {\n    $lookup: {\n      from: \"ACCOUNTS\",\n      pipeline: [\n        { $unwind: \"$CHECKING\" },\n        {\n          $project: {\n            name: 1,\n            checkingBalance: \"$CHECKING.balance\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $match: {\n      $expr: {\n        $lt: [\"$Docs1.checkingBalance\", \"$avg_balance\"]\n      }\n    }\n  },\n  \n  \n  {\n    $project: {\n      name: \"$Docs1.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3145,
        "db_id": "document_management",
        "nl_queries": [
            "What document types do have more than 10000 total access number.",
            "Return the codes of the document types that do not have a total access count of over 10000.",
            "List all document types that have accumulated more than 10,000 accesses.",
            "Which document types exceed a total access count of 10,000?",
            "Provide the codes for document types with total access exceeding 10,000."
        ],
        "ref_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count) > 10000",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.document_type_code\",\n      sum_access_count: { $sum: \"$Documents.access_count\" }\n    }\n  },\n  {\n    $match: {\n      sum_access_count: { $gt: 10000 }\n    }\n  },\n  {\n    $project: {\n      document_type_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2343,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the 3 most common cloud cover rates in the region of zip code 94107?",
            "What are the 3 most common cloud covers in the zip code of 94107?",
            "Can you provide the top 3 most frequent cloud cover values for the area with zip code 94107?",
            "What are the three cloud cover levels that occur most often in the 94107 zip code region?",
            "List the three predominant cloud cover rates recorded for the zip code 94107."
        ],
        "ref_sql": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "MQL": "db.weather.aggregate([\n  {\n    $match: {\n      zip_code: 94107\n    }\n  },\n  {\n    $group: {\n      _id: \"$cloud_cover\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      cloud_cover: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 240,
        "db_id": "college_1",
        "nl_queries": [
            "What are the first names and date of birth of professors teaching course ACCT-211?",
            "What are the first names and birthdates of the professors in charge of ACCT-211?",
            "Please provide the first names and birth dates of the professors who teach the ACCT-211 class.",
            "Can you list the first names and dates of birth of the instructors for course ACCT-211?",
            "What are the first names and the birth dates of faculty members assigned to teach ACCT-211?"
        ],
        "ref_sql": "SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $match: {\n      \"CLASS.CRS_CODE\": \"ACCT-211\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"EMPLOYEE\",\n      localField: \"CLASS.PROF_NUM\",\n      foreignField: \"EMP_NUM\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      EMP_FNAME: \"$Docs1.EMP_FNAME\",\n      EMP_DOB: \"$Docs1.EMP_DOB\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1983,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
            "List the types of institutions that were established after 1990 and have an enrollment of at least 1000 students.",
            "Provide the institution types for those founded after 1990 that also have a minimum enrollment of 1000.",
            "What are the types of institutions that have been founded since 1990 and enroll at least 1000 students?",
            "Display the types of institutions which were founded after the year 1990 and meet the criteria of having at least 1000 enrollments."
        ],
        "ref_sql": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000",
        "MQL": "db.building.aggregate([\n  { $unwind: \"$Institution\" },\n  { $match: {\n      \"Institution.Founded\": { $gt: 1990 },\n      \"Institution.Enrollment\": { $gte: 1000 }\n    }\n  },\n  { $project: { \"Type\": \"$Institution.Type\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3302,
        "db_id": "tvshow",
        "nl_queries": [
            "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "List the IDs of TV channels that do not showcase cartoons directed by Ben Jones.",
            "Which TV channel IDs do not include any cartoons directed by Ben Jones?",
            "Provide the IDs of TV channels that are absent of any cartoons authored by Ben Jones."
        ],
        "ref_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $match: {\n      \"Cartoon.Directed_by\": { $ne: \"Ben Jones\" }\n    }\n  },\n  {\n    $project: {\n      id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 759,
        "db_id": "party_host",
        "nl_queries": [
            "Show the nations that have both hosts older than 45 and hosts younger than 35.",
            "Which nations have both hosts of age above 45 and hosts of age below 35?",
            "Identify the countries that have hosts aged over 45 along with hosts who are under 35.",
            "List the nationalities that include both older hosts (over 45) and younger hosts (under 35).",
            "Find the nations with hosts who are both above 45 years old and below 35 years old."
        ],
        "ref_sql": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
        "MQL": "db.host.aggregate([\n  {\n    $project: {\n      Host_ID: 1,\n      Name: 1,\n      Nationality: 1,\n      Age: { $toInt: \"$Age\" }  \n    }\n  },\n  {\n    $group: {\n      _id: \"$Nationality\",\n      hostsAbove45: {\n        $sum: {\n          $cond: [{ $gt: [\"$Age\", 45] }, 1, 0]\n        }\n      },\n      hostsBelow35: {\n        $sum: {\n          $cond: [{ $lt: [\"$Age\", 35] }, 1, 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      hostsAbove45: { $gt: 0 },\n      hostsBelow35: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      Nationality: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1959,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
            "What are the SSN and names of scientists working on the project with the most hours?",
            "Identify the SSN and names of scientists involved in the project that has recorded the highest hours.",
            "What are the social security numbers and names of scientists assigned to the project with the maximum hours logged?",
            "List the SSN and names of the scientists participating in the project with the greatest total hours."
        ],
        "ref_sql": "SELECT T3.ssn , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)",
        "MQL": "db.Projects.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Hours: { $max: \"$Hours\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Scientists\",\n      localField: \"max_Hours\",\n      foreignField: \"AssignedTo.Project\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      SSN: \"$Docs1.SSN\",\n      Name: \"$Docs1.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1264,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
            "Identify the fault log with the highest number of defective parts and provide its ID, description, and timestamp.",
            "Which fault log has recorded the largest quantity of faulty parts? Please include the fault log ID, a description, and the time of the logged issue.",
            "Find the fault log with the greatest count of malfunctioning parts. Please share its log ID, description, and the date and time it was recorded.",
            "What is the fault log that details the most faulty parts? Include the log ID, the fault description, and the timestamp of the record."
        ],
        "ref_sql": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { $unwind: \"$Maintenance_Contracts\" },\n  { $unwind: \"$Maintenance_Contracts.Assets\" },\n  { $unwind: \"$Maintenance_Contracts.Assets.Fault_Log\" },\n  { $unwind: \"$Maintenance_Contracts.Assets.Fault_Log.Fault_Log_Parts\" },\n  {\n    $group: {\n      _id: \"$Maintenance_Contracts.Assets.Fault_Log.fault_log_entry_id\",\n      fault_description: { $first: \"$Maintenance_Contracts.Assets.Fault_Log.fault_description\" },\n      fault_log_entry_datetime: { $first: \"$Maintenance_Contracts.Assets.Fault_Log.fault_log_entry_datetime\" },\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      fault_log_entry_id: \"$_id\",\n      fault_description: 1,\n      fault_log_entry_datetime: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4059,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
            "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
            "Identify the customers who have accessed both the \"Close a policy\" service and the \"New policy application\" service.",
            "List the names of customers that have utilized the services \"Close a policy\" and \"Upgrade a policy.\"",
            "Who are the customers that have engaged with both \"Close a policy\" and \"New policy application\" services? Please provide their names."
        ],
        "ref_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss\"\n  },\n  {\n    $lookup: {\n      from: \"Services\",\n      localField: \"Customers_Policies.First_Notification_of_Loss.Service_ID\",\n      foreignField: \"Service_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Service_name\": { $in: [\"Close a policy\", \"New policy application\", \"Upgrade a policy\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Customer_ID\",\n      Customer_name: { $first: \"$Customer_name\" },\n      services: { $addToSet: \"$Docs1.Service_name\" }\n    }\n  },\n  {\n    $match: {\n      services: { $all: [\"Close a policy\", \"Upgrade a policy\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Customer_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 780,
        "db_id": "farm",
        "nl_queries": [
            "List the official name and status of the city with the largest population.",
            "What is the official name and status of the city with the most residents?",
            "Provide the official name and status of the city that has the highest population.",
            "What is the name and status of the city with the largest number of inhabitants?",
            "Tell me the official name and the status of the city that boasts the most residents."
        ],
        "ref_sql": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $sort: {\n      Population: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Official_Name: 1,\n      Status: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3241,
        "db_id": "company_1",
        "nl_queries": [
            "Return the first names and last names of employees who earn more than 30000 in salary.",
            "List the first and last names of employees whose salaries are over 30,000.",
            "Provide the first and last names of all employees earning more than 30,000 in salary.",
            "Show me the first and last names of employees with salaries greater than 30,000.",
            "Retrieve the first and last names of those employees who make above 30,000 in salary."
        ],
        "ref_sql": "SELECT fname , lname FROM employee WHERE salary > 30000",
        "MQL": "db.employee.find({ \"Salary\": { $gt: 30000 } }, { \"Fname\": 1, \"Lname\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 205,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the ids of all employees who have destroyed a document.",
            "What are the ids of all the employees who have destroyed documents?",
            "List the IDs of employees who have participated in the destruction of documents.",
            "Provide the employee IDs for all individuals who have destroyed any documents.",
            "Retrieve the IDs of all employees involved in the destruction of documents."
        ],
        "ref_sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $unwind: \"$All_Documents.Documents_to_be_Destroyed\"\n  },\n  {\n    $project: {\n      Destroyed_by_Employee_ID: \"$All_Documents.Documents_to_be_Destroyed.Destroyed_by_Employee_ID\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Destroyed_by_Employee_ID\"\n    }\n  },\n  {\n    $project: {\n      Destroyed_by_Employee_ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3497,
        "db_id": "concert_singer",
        "nl_queries": [
            "What is the name and capacity for the stadium with highest average attendance?",
            "What is the name and capacity for the stadium with the highest average attendance?",
            "Can you tell me the name and capacity of the stadium with the greatest average attendance?",
            "Which stadium has the highest average attendance, and what are its name and capacity?",
            "Please provide the name and seating capacity of the stadium that records the highest average attendance."
        ],
        "ref_sql": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "MQL": "db.stadium.aggregate([\n  {\n    $project: {\n      Name: 1,\n      Capacity: 1,\n      Average: 1\n    }\n  },\n  {\n    $sort: {\n      Average: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      Capacity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3320,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the invoice number and the number of transactions for each invoice.",
            "How many transactions correspond to each invoice number?",
            "List each invoice number along with the total number of transactions linked to it.",
            "What is the count of transactions for each invoice?",
            "Provide the invoice number and the transaction total for each invoice."
        ],
        "ref_sql": "SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Orders\" },\n  { $unwind: \"$Orders.Invoices\" },\n  { $unwind: \"$Orders.Invoices.Financial_Transactions\" },\n  {\n    $group: {\n      _id: \"$Orders.Invoices.invoice_number\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      invoice_number: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2011,
        "db_id": "farm",
        "nl_queries": [
            "List the total number of horses on farms in ascending order.",
            "What is the total horses record for each farm, sorted ascending?",
            "Provide a list of farms organized by their total number of horses, from lowest to highest.",
            "Show the total count of horses for each farm, sorted in ascending order.",
            "Arrange the farms by their total horses in a growing order and display the results."
        ],
        "ref_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "MQL": "db.farm.aggregate([\n  {\n    $project: {\n      _id: 0,\n      Total_Horses: 1\n    }\n  },\n  {\n    $sort: {\n      Total_Horses: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 457,
        "db_id": "news_report",
        "nl_queries": [
            "Show the dates, places, and names of events in descending order of the attendance.",
            "List the event names, venues, and dates, ordered by attendance from highest to lowest.",
            "Provide the dates, venues, and titles of events sorted in decreasing order according to attendance.",
            "Display the names, venues, and dates of events ranked by the number of attendees in descending order.",
            "Retrieve the event dates, locations, and names, arranged by attendance in a descending format."
        ],
        "ref_sql": "SELECT Date , Name , venue FROM event ORDER BY Event_Attendance DESC",
        "MQL": "db.event.find({}, { \"Date\": 1, \"Name\": 1, \"Venue\": 1, \"_id\": 0 }).sort({ \"Event_Attendance\": -1 });\n"
    },
    {
        "record_id": 2628,
        "db_id": "candidate_poll",
        "nl_queries": [
            "How many candidates are there?",
            "Count the number of candidates.",
            "What is the total number of candidates?",
            "Please provide the count of all candidates.",
            "How many distinct candidates exist in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM candidate",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $group: {\n      _id: \"$candidate.Candidate_ID\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 186,
        "db_id": "world_1",
        "nl_queries": [
            "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "Which countries have the highest percentage of Spanish speakers, and what are their codes?",
            "List the country codes for those nations where Spanish is the most widely spoken language.",
            "Identify the codes for countries in which Spanish is spoken by the largest proportion of the population."
        ],
        "ref_sql": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $match: {\n      \"countrylanguage.Language\": \"Spanish\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.CountryCode\",\n      max_Percentage: { $max: \"$countrylanguage.Percentage\" }\n    }\n  },\n  {\n    $project: {\n      CountryCode: \"$_id\",\n      max_Percentage: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 343,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show all the distinct institution types.",
            "List all unique types of institutions available.",
            "Provide the distinct types of institutions present in the dataset.",
            "What are the different institution types recorded in the database?",
            "Retrieve all the unique institution categories from the collection."
        ],
        "ref_sql": "SELECT DISTINCT TYPE FROM institution",
        "MQL": "db.building.aggregate([\n  { $unwind: \"$Institution\" },\n  { $group: { _id: \"$Institution.Type\" } },\n  { $project: { _id: 0, Type: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 2402,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the number of students who participate in the tryout for each college ordered by descending count.",
            "How many students participated in tryouts for each college by descennding count?",
            "Retrieve the count of students who took part in tryouts for each college, sorted by the number of participants in descending order.",
            "What is the student participation count in tryouts for each college, presented from highest to lowest?",
            "List the number of students that participated in tryouts for every college, arranged in descending order based on the count."
        ],
        "ref_sql": "SELECT count(*) , cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "MQL": "db.College.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $group: {\n      _id: \"$cName\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      cName: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1850,
        "db_id": "department_store",
        "nl_queries": [
            "Give me the product type, name and price for all the products supplied by supplier id 3.",
            "Return the product type, name, and price for products supplied by supplier 3.",
            "What are the type, name, and price of the products that have supplier ID 3?",
            "Please provide the product type, title, and price for all items supplied by the supplier with ID 3.",
            "List the product category, name, and cost for products associated with supplier ID 3."
        ],
        "ref_sql": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3",
        "MQL": "db.Products.aggregate([\n  {\n    $match: {\n      \"Product_Suppliers.supplier_id\": 3\n    }\n  },\n  {\n    $project: {\n      product_type_code: 1,\n      product_name: 1,\n      product_price: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2226,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "What is the average number of rooms of apartments with type code \"Studio\"?",
            "Find the average room count of the apartments that have the \"Studio\" type code.",
            "What is the mean number of rooms in apartments classified under the \"Studio\" type?",
            "Calculate the average room quantity for apartments that are designated with the type code \"Studio.\"",
            "Determine the average room count for apartments of the \"Studio\" type."
        ],
        "ref_sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code = \"Studio\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $match: {\n      \"Apartments.apt_type_code\": \"Studio\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_room_count: {\n        $avg: {\n          $convert: {\n            input: \"$Apartments.room_count\",\n            to: \"int\"\n          }\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_room_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 593,
        "db_id": "railway",
        "nl_queries": [
            "Show the locations that have more than one railways.",
            "List the locations that feature more than one railway.",
            "Identify the locations where there are multiple railways.",
            "What locations have a count of railways exceeding one?",
            "Find the locations that host more than one railway line."
        ],
        "ref_sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*) > 1",
        "MQL": "db.railway.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3258,
        "db_id": "music_1",
        "nl_queries": [
            "List the names of all genres in alphabetical oder, together with its ratings.",
            "What are the names of all genres in alphabetical order, combined with its ratings?",
            "Retrieve an alphabetical list of all music genres along with their respective ratings.",
            "Show all genre names sorted in alphabetical order together with their ratings.",
            "Present the names of all genres along with their ratings, organized alphabetically."
        ],
        "ref_sql": "SELECT g_name , rating FROM genre ORDER BY g_name",
        "MQL": "db.genre.aggregate([\n  {\n    $project: {\n      g_name: 1,\n      rating: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      g_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3464,
        "db_id": "party_people",
        "nl_queries": [
            "Show the ministers and the time they took and left office, listed by the time they left office.",
            "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
            "List the ministers along with their respective start and end dates in office, sorted by the date they left office.",
            "Can you provide the names of ministers, along with their dates of taking and leaving office, arranged by when they left?",
            "Who are the ministers, and what were the dates they assumed and exited office, sorted by the date of their exit?"
        ],
        "ref_sql": "SELECT minister , took_office , left_office FROM party ORDER BY left_office",
        "MQL": "db.region.aggregate([\n  { $unwind: \"$party\" },\n  {\n    $project: {\n      Minister: \"$party.Minister\",\n      Took_office: \"$party.Took_office\",\n      Left_office: \"$party.Left_office\",\n      _id: 0\n    }\n  },\n  { $sort: { Left_office: 1 } }\n]);\n"
    },
    {
        "record_id": 3450,
        "db_id": "wedding",
        "nl_queries": [
            "Show the minimum, maximum, and average age for all people.",
            "Provide the minimum, maximum, and average ages of people in the dataset.",
            "What are the lowest, highest, and average ages for all individuals?",
            "Display the oldest, youngest, and average age of all persons recorded.",
            "Give me the minimum, maximum, and average age among all people in the collection."
        ],
        "ref_sql": "SELECT min(age) , max(age) , avg(age) FROM people",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_age: { $min: \"$Age\" },\n      max_age: { $max: \"$Age\" },\n      avg_age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_age: 1,\n      max_age: 1,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1718,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Find the dates of orders which belong to the customer named \"Jeramie\".",
            "What are the dates of the orders made by the customer named \"Jeramie\"?",
            "List the order dates for the customer identified as \"Jeramie\".",
            "What are the order placement dates for the customer called \"Jeramie\"?",
            "Retrieve the dates of the orders placed by the customer known as \"Jeramie\"."
        ],
        "ref_sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_name: \"Jeramie\"\n    }\n  },\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $project: {\n      date_order_placed: \"$Orders.date_order_placed\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 299,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of students who took any class in the years of 2009 and 2010.",
            "What are the names of the students who took classes in 2009 or 2010?",
            "List the names of students enrolled in any courses during 2009 or 2010.",
            "Which students took courses in either the year 2009 or in 2010?",
            "Retrieve the names of students who were registered for classes in the years 2009 and 2010."
        ],
        "ref_sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $unwind: \"$student.takes\"\n  },\n  {\n    $match: {\n      \"student.takes.year\": { $in: [2009, 2010] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$student.ID\",\n      name: { $first: \"$student.name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 547,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the transportation method most people choose to get to tourist attractions.",
            "Which transportation method is used the most often to get to tourist attractions?",
            "What is the most popular way for visitors to travel to tourist attractions?",
            "Identify the most frequently used transportation option for reaching tourist attractions.",
            "Which method of transportation do tourists prefer when visiting attractions?"
        ],
        "ref_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $group: {\n      _id: \"$Tourist_Attractions.How_to_Get_There\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      How_to_Get_There: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2754,
        "db_id": "college_1",
        "nl_queries": [
            "How many professors who has a either Ph.D. or MA degree?",
            "How many professors attained either Ph.D. or Masters degrees?",
            "What is the total number of professors who possess either a Ph.D. or a Master's degree?",
            "Count the professors who have received either a Ph.D. or a master's degree.",
            "How many faculty members hold either a Ph.D. or a Master's degree?"
        ],
        "ref_sql": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$PROFESSOR\"\n  },\n  {\n    $match: {\n      \"PROFESSOR.PROF_HIGH_DEGREE\": { $in: [\"Ph.D.\", \"MA\"] }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4122,
        "db_id": "store_product",
        "nl_queries": [
            "Find all the stores in the district with the most population.",
            "What are the names of all the stores in the largest district by population?",
            "List all stores that are situated in the district with the highest population count.",
            "What stores can be found in the most populated district?",
            "Identify all store names that exist in the district that has the largest population."
        ],
        "ref_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "MQL": "db.store.aggregate([\n  {\n    $lookup: {\n      from: \"district\",\n      localField: \"store_district.District_ID\",\n      foreignField: \"District_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $sort: { \"Docs1.City_Population\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $match: { \"store_district.District_ID\": \"$Docs1.District_ID\" }\n  },\n  {\n    $project: { Store_Name: 1, _id: 0 }\n  }\n]);\n"
    },
    {
        "record_id": 4117,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "List all the product names with the color description \"white\".",
            "What are the names of products with 'white' as their color description?",
            "Retrieve the names of all products that have a color description of \"white\".",
            "Show me the product names classified as \"white\" in terms of color.",
            "Can you provide a list of all product names that are described as having the color \"white\"?"
        ],
        "ref_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $match: {\n      color_description: \"white\"\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2834,
        "db_id": "game_injury",
        "nl_queries": [
            "How many different kinds of information sources are there for injury accidents?",
            "What is the count of unique information sources regarding injury incidents?",
            "How many distinct information sources have been documented for injury accidents in games?",
            "Can you provide the number of different sources of information for injury accidents?",
            "How many unique sources are there for reporting injury accidents?"
        ],
        "ref_sql": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $unwind: \"$game.injury_accident\" },\n  { $group: { _id: \"$game.injury_accident.Source\" } },\n  { $group: { _id: null, count_DISTINCT_SOURCE: { $sum: 1 } } },\n  { $project: { _id: 0 } }\n]);\n"
    },
    {
        "record_id": 1060,
        "db_id": "poker_player",
        "nl_queries": [
            "List the names of poker players ordered by the final tables made in ascending order.",
            "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "Provide a list of poker players' names sorted by their number of final tables made, in increasing order.",
            "Show the names of poker players arranged in ascending order by the total of final tables they have reached.",
            "Retrieve the names of poker players ordered from lowest to highest based on their number of appearances at final tables."
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $sort: {\n      \"poker_player.Final_Table_Made\": 1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3980,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the total savings balance of all accounts except the account with name ‘Brown’.",
            "What is the total balance of savings accounts not belonging to someone with the name Brown?",
            "Calculate the combined savings balance for all account holders, excluding anyone named 'Brown'.",
            "What is the total amount held in savings for accounts that do not include a customer named Brown?",
            "Determine the overall savings balance from accounts, omitting those associated with the name 'Brown'."
        ],
        "ref_sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name != 'Brown'",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $match: {\n      name: { $ne: 'Brown' }\n    }\n  },\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_balance: { $sum: \"$SAVINGS.balance\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_balance: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3743,
        "db_id": "soccer_2",
        "nl_queries": [
            "Which position is most popular among players in the tryout?",
            "What was the most popular position at tryouts?",
            "What is the most common position among players participating in the tryouts?",
            "Which player position had the highest number of attendees at the tryouts?",
            "Identify the position that players favored the most during tryout sessions."
        ],
        "ref_sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $group: {\n      _id: \"$Tryout.pPos\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      pPos: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1408,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
            "What are the names of students who have taken the prerequisite for the course International Finance?",
            "List the names of students enrolled in the prerequisite course for International Finance.",
            "Who are the students that have completed the prerequisite for the course titled International Finance?",
            "Retrieve the names of students who have taken the course that is a prerequisite for International Finance."
        ],
        "ref_sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.prereq\"\n  },\n  {\n    $lookup: {\n      from: \"student\",\n      localField: \"student.ID\",\n      foreignField: \"takes.ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"course.title\": \"International Finance\"\n    }\n  },\n  {\n    $project: {\n      name: \"$Docs1.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3793,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "What is the oldest log id and its corresponding problem id?",
            "Find the oldest log id and its corresponding problem id.",
            "Identify the earliest log ID and the associated problem ID.",
            "Retrieve the earliest log entry ID along with its corresponding problem ID.",
            "What is the log ID of the oldest entry and the related problem ID?"
        ],
        "ref_sql": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "MQL": "db.Problem_Status_Codes.aggregate([\n  {\n    $unwind: \"$Problem_Log\"\n  },\n  {\n    $sort: {\n      \"Problem_Log.log_entry_date\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      problem_log_id: \"$Problem_Log.problem_log_id\",\n      problem_id: \"$Problem_Log.problem_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2264,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
            "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
            "List the names and enrollment figures of colleges in Louisiana that have more than 10,000 students.",
            "What are the names and enrollment counts for colleges with over 10,000 enrollees situated in the state of Louisiana?",
            "Identify the college names and their enrollment numbers for institutions located in LA that exceed an enrollment of 10,000."
        ],
        "ref_sql": "SELECT cName , enr FROM College WHERE enr > 10000 AND state = \"LA\"",
        "MQL": "db.College.find({\n  enr: { $gt: 10000 },\n  state: \"LA\"\n}, {\n  cName: 1,\n  enr: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3417,
        "db_id": "flight_company",
        "nl_queries": [
            "What is maximum group equity shareholding of the companies?",
            "What is the highest group equity shareholding recorded for the companies?",
            "Could you tell me the maximum group equity shareholding of all the companies?",
            "What is the peak value of group equity shareholding among the companies?",
            "Find the largest group equity shareholding for the companies in the dataset."
        ],
        "ref_sql": "SELECT max(group_equity_shareholding) FROM operate_company",
        "MQL": "db.operate_company.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_group_equity_shareholding: { $max: \"$Group_Equity_Shareholding\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_group_equity_shareholding: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 459,
        "db_id": "workshop_paper",
        "nl_queries": [
            "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
            "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
            "Provide the date and location of each workshop, ordered alphabetically by venue name.",
            "List the date and venue for all workshops, ensuring the venues are sorted in ascending alphabetical order.",
            "Retrieve the date and venue details for each workshop, sorted by venue name in ascending order."
        ],
        "ref_sql": "SELECT Date , Venue FROM workshop ORDER BY Venue",
        "MQL": "db.workshop.find({}, { Date: 1, Venue: 1, _id: 0 }).sort({ Venue: 1 });\n"
    },
    {
        "record_id": 1063,
        "db_id": "farm",
        "nl_queries": [
            "Show the official names of the cities that have hosted more than one competition.",
            "What are the official names of cities that have hosted more than one competition?",
            "List the official names of cities that have organized more than one competition.",
            "Provide the names of cities that have hosted multiple competitions.",
            "Identify the official names of cities with a history of hosting more than one competition."
        ],
        "ref_sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$farm_competition\"\n  },\n  {\n    $group: {\n      _id: \"$City_ID\",\n      Official_Name: { $first: \"$Official_Name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Official_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3796,
        "db_id": "store_product",
        "nl_queries": [
            "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
            "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
            "Retrieve products that support A4 as the maximum page size and have a color printing speed of fewer than 5 pages per minute.",
            "List the products with a max page size set to A4 and a color printing rate of under 5 pages per minute.",
            "Identify products that feature a maximum page size of A4 and a color pages per minute rate less than 5."
        ],
        "ref_sql": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5",
        "MQL": "db.product.find({\n  max_page_size: \"A4\",\n  pages_per_minute_color: { $lt: 5 }\n}, {\n  product: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 255,
        "db_id": "singer",
        "nl_queries": [
            "Show distinct names of singers that have songs with sales more than 300000.",
            "what are the different names of the singers that have sales more than 300000?",
            "List the unique names of singers whose songs have sold more than 300,000 copies.",
            "Can you provide the different names of singers with songs that achieved sales exceeding 300,000?",
            "Identify the distinct names of artists that have recorded songs with sales over 300,000."
        ],
        "ref_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
        "MQL": "db.singer.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $match: {\n      \"song.Sales\": { $gt: 300000 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Name\"\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2004,
        "db_id": "tvshow",
        "nl_queries": [
            "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "Provide the titles of all cartoons that were directed by either Ben Jones or Brandon Vietti.",
            "Can you list all cartoon titles directed by Ben Jones or Brandon Vietti?",
            "What are the titles of cartoons directed by either Ben Jones or Brandon Vietti?"
        ],
        "ref_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Cartoon.Directed_by\": \"Ben Jones\" },\n        { \"Cartoon.Directed_by\": \"Brandon Vietti\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      Title: \"$Cartoon.Title\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 132,
        "db_id": "phone_market",
        "nl_queries": [
            "Show the most frequently used carrier of the phones.",
            "Which phone carrier has the highest usage among the devices?",
            "Identify the carrier that appears most often in the mobile phones.",
            "What is the most common carrier used for phones?",
            "Display the carrier utilized by the highest number of phone models."
        ],
        "ref_sql": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.phone.aggregate([\n  { $group: { _id: \"$Carrier\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { \"Carrier\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3568,
        "db_id": "network_2",
        "nl_queries": [
            "Find the names of all person sorted in the descending order using age.",
            "What are the names of everybody sorted by age in descending order?",
            "List the names of all individuals sorted by age from oldest to youngest.",
            "Retrieve the names of everyone, ordering them by age in a descending manner.",
            "Provide the names of all persons, arranged in descending order based on their age."
        ],
        "ref_sql": "SELECT name FROM Person ORDER BY age DESC",
        "MQL": "db.Person.find({}, { name: 1, _id: 0 }).sort({ age: -1 })\n"
    },
    {
        "record_id": 1480,
        "db_id": "department_store",
        "nl_queries": [
            "What are the staff ids and genders of all staffs whose job title is Department Manager?",
            "Return the staff ids and genders for any staff with the title Department Manager.",
            "List the staff IDs along with their genders for all employees whose job title is Department Manager.",
            "Show the staff IDs and genders for any employees that hold the title of Department Manager.",
            "Provide the IDs and genders of staff members employed as Department Managers."
        ],
        "ref_sql": "SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Department Manager\"",
        "MQL": "db.Staff.aggregate([\n  {\n    $match: {\n      \"Staff_Department_Assignments.job_title_code\": \"Department Manager\"\n    }\n  },\n  {\n    $project: {\n      staff_id: 1,\n      staff_gender: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 677,
        "db_id": "orchestra",
        "nl_queries": [
            "List the names of conductors in ascending order of age.",
            "What are the names of conductors, ordered by age?",
            "Retrieve the names of conductors sorted by their age in ascending order.",
            "Provide a list of conductors' names arranged from youngest to oldest.",
            "Show the names of conductors, sorted by age in increasing order."
        ],
        "ref_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "MQL": "db.conductor.find({}, { Name: 1, _id: 0 }).sort({ Age: 1 });\n"
    },
    {
        "record_id": 2165,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What is the average age of all the dogs?",
            "Compute the average age of all the dogs.",
            "What is the mean age of all the dogs in the kennel?",
            "Find the average age of all dogs.",
            "Can you calculate the average age of the dogs present?"
        ],
        "ref_sql": "SELECT avg(age) FROM Dogs",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: { $avg: { $toDouble: \"$Dogs.age\" } }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2886,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of dorms that have some amenity.",
            "How many dorms have amenities?",
            "How many dormitories are equipped with amenities?",
            "Determine the total number of dorms that offer any amenities.",
            "What is the count of dorms that come with amenities?"
        ],
        "ref_sql": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "MQL": "db.Dorm.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"dormid\",\n      foreignField: \"Has_amenity.dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: {\n        $ne: []\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$dormid\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $count: \"count_DISTINCT_dormid\"\n  }\n]);\n"
    },
    {
        "record_id": 591,
        "db_id": "performance_attendance",
        "nl_queries": [
            "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
            "List the locations that have hosted performances attracting more than 2000 attendees as well as those with less than 1000 attendees.",
            "Identify the venues that feature performances with both high attendance (over 2000) and low attendance (under 1000).",
            "Provide the names of locations that have performances with attendance exceeding 2000 and also those with attendance dropping below 1000.",
            "Retrieve the locations where at least one performance has more than 2000 attendees while another has fewer than 1000 attendees."
        ],
        "ref_sql": "SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000",
        "MQL": "db.performance.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      sum_Attendance: { $sum: \"$Attendance\" }\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { sum_Attendance: { $gt: 2000 } },\n        { sum_Attendance: { $lt: 1000 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 507,
        "db_id": "chinook_1",
        "nl_queries": [
            "What are the first names and last names of the employees who live in Calgary city.",
            "Find the full names of employees living in the city of Calgary.",
            "List the first and last names of employees residing in Calgary.",
            "Retrieve the names of employees who live in Calgary city.",
            "Show the complete names of employees based in the city of Calgary."
        ],
        "ref_sql": "SELECT FirstName , LastName FROM EMPLOYEE WHERE City = \"Calgary\"",
        "MQL": "db.Employee.find(\n  { City: \"Calgary\" },\n  { FirstName: 1, LastName: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1003,
        "db_id": "pets_1",
        "nl_queries": [
            "What are the students' first names who have both cats and dogs as pets?",
            "Which students own both a cat and a dog? Please provide their first names.",
            "Can you list the first names of students who have both dogs and cats as their pets?",
            "Identify the first names of students who are pet owners of both dogs and cats.",
            "What are the first names of those students who have both a dog and a cat as pets?"
        ],
        "ref_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.PetType\": {\n        $all: [\"cat\", \"dog\"]\n      }\n    }\n  },\n  {\n    $project: {\n      \"Fname\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2646,
        "db_id": "sports_competition",
        "nl_queries": [
            "How many clubs have total medals less than 10?",
            "What is the total number of clubs that have less than 10 medals in total?",
            "What is the number of clubs that have fewer than 10 total medals?",
            "How many clubs are there with a combined total of medals under 10?",
            "Count the clubs that hold a total of less than 10 medals."
        ],
        "ref_sql": "SELECT count(*) FROM club_rank WHERE Total < 10",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$club_rank\"\n  },\n  {\n    $project: {\n      Club_ID: 1,\n      total_medals: {\n        $add: [\"$club_rank.Gold\", \"$club_rank.Silver\", \"$club_rank.Bronze\"]\n      }\n    }\n  },\n  {\n    $match: {\n      total_medals: { $lt: 10 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4132,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Which customer is associated with the latest policy?",
            "Find the customer who started a policy most recently.",
            "Who is the customer tied to the most recent insurance policy?",
            "Identify the customer whose policy was started last.",
            "Which customer has the newest policy in the system?"
        ],
        "ref_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT max(start_date) FROM policies)",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $sort: {\n      \"Policies.Start_Date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Customer_Details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3997,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the total and maximum duration of trips with bike id 636?",
            "What is the total and maximum duration for all trips with the bike id 636?",
            "Can you provide the total and highest duration for trips taken with bike ID 636?",
            "What are the total and maximum trip durations associated with bike ID 636?",
            "Find the sum and maximum duration of all trips that utilized bike ID 636."
        ],
        "ref_sql": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
        "MQL": "db.trip.aggregate([\n  {\n    $match: {\n      bike_id: 636\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_duration: {\n        $sum: \"$duration\"\n      },\n      max_duration: {\n        $max: \"$duration\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_duration: 1,\n      max_duration: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2995,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show ids, first names, last names, and phones for all customers.",
            "What are the ids, full names, and phones of each customer?",
            "List the customer IDs, first names, last names, and phone numbers for all customers.",
            "Provide the customer IDs, names, and telephone numbers for every customer.",
            "Retrieve the IDs and contact information, including first names, last names, and phones, of each customer."
        ],
        "ref_sql": "SELECT customer_id , customer_first_name , customer_last_name , customer_phone FROM Customers",
        "MQL": "db.Customers.find({}, {\n  customer_id: 1,\n  customer_first_name: 1,\n  customer_last_name: 1,\n  customer_phone: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3685,
        "db_id": "train_station",
        "nl_queries": [
            "Show station names without any trains.",
            "List the names of stations that do not have any trains.",
            "Provide the names of stations without any train services.",
            "Identify stations that have no trains associated with them.",
            "Retrieve the station names where no trains are available."
        ],
        "ref_sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
        "MQL": "db.station.aggregate([\n  {\n    $lookup: {\n      from: \"train\",\n      localField: \"Station_ID\",\n      foreignField: \"train_station.Station_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1\": { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3647,
        "db_id": "candidate_poll",
        "nl_queries": [
            "find the name of people whose height is lower than the average.",
            "What are the names of people who are shorter than average?",
            "List the names of individuals whose height falls below the average height.",
            "Provide the names of people that are shorter than the average height.",
            "Retrieve the names of those whose heights are less than the mean height."
        ],
        "ref_sql": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Height: { $avg: \"$Height\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"people\",\n      let: { avg_Height: \"$avg_Height\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $lt: [\"$Height\", \"$$avg_Height\"] }\n          }\n        },\n        {\n          $project: {\n            Name: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4172,
        "db_id": "manufacturer",
        "nl_queries": [
            "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
            "Identify the name of the manufacturer that offers furniture items with fewer than 6 components and those with more than 10 components.",
            "What is the name of the company that makes both furniture with less than six components and furniture with over ten components?",
            "Can you provide the name of the manufacturer that produces both types of furniture: one type with under 6 components and another with over 10?",
            "Find the name of the company that manufactures furniture having components in two ranges: less than six and more than ten."
        ],
        "ref_sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10",
        "MQL": "db.manufacturer.aggregate([\n  {\n    $lookup: {\n      from: \"furniture\",\n      localField: \"Manufacturer_ID\",\n      foreignField: \"furniture_manufacte.Manufacturer_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { \"Docs1.Num_of_Component\": { $lt: 6 } },\n        { \"Docs1.Num_of_Component\": { $gt: 10 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4156,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Which city has the most customers living in?",
            "Find the city where the most customers live.",
            "Identify the city that has the largest number of residents among customers.",
            "Which city boasts the highest population of customers?",
            "Determine the city where the greatest number of customers are located."
        ],
        "ref_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1833,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "What is the order id and order details for the order more than two invoices.",
            "Return the order ids and details for orderes with two or more invoices.",
            "Provide the order IDs and order details for orders that have more than two associated invoices.",
            "What are the order IDs and details for those orders that feature two or more invoices?",
            "List the order identification numbers along with their details for orders with over two invoices."
        ],
        "ref_sql": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 2",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Invoices\"\n  },\n  {\n    $group: {\n      _id: \"$Orders.order_id\",\n      order_details: { $first: \"$Orders.order_details\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      order_id: \"$_id\",\n      order_details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2824,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "How many different store locations are there?",
            "Count the number of distinct store locations.",
            "What is the total number of unique shop locations?",
            "How many unique locations do the stores occupy?",
            "Determine the count of distinct shop locations available."
        ],
        "ref_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "MQL": "db.shop.aggregate([\n  {\n    $group: {\n      _id: \"$Location\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_LOCATION\"\n  }\n]);\n"
    },
    {
        "record_id": 984,
        "db_id": "election",
        "nl_queries": [
            "Show the names of counties that have at least two delegates.",
            "Which counties have two or more delegates? Give me the county names.",
            "List the counties that possess a minimum of two delegates.",
            "Provide the names of counties with two or more delegates.",
            "Identify the counties that have at least a pair of delegates."
        ],
        "ref_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2",
        "MQL": "db.county.aggregate([\n  {\n    $project: {\n      County_name: 1,\n      delegate_count: {\n        $size: {\n          $filter: {\n            input: \"$election\",\n            as: \"election\",\n            cond: {\n              $gte: [\"$$election.Delegate\", 2]\n            }\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      delegate_count: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      County_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1938,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
            "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
            "Which drivers were involved in the Australian Grand Prix but did not race in the Chinese Grand Prix? Please provide their first and last names.",
            "Can you list the first names and surnames of drivers who took part in the Australian Grand Prix while avoiding participation in the Chinese Grand Prix?",
            "What are the names of drivers who participated in the Australian Grand Prix without racing in the Chinese Grand Prix? Include both their first and last names."
        ],
        "ref_sql": "SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "MQL": "db.drivers.aggregate([\n  {\n    $lookup: {\n      from: \"circuits\",\n      localField: \"results.raceId\",\n      foreignField: \"races.raceId\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.races\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Docs1.races.name\": \"Australian Grand Prix\" },\n        { \"Docs1.races.name\": \"Chinese Grand Prix\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$driverId\",\n      forename: { $first: \"$forename\" },\n      surname: { $first: \"$surname\" },\n      races: { $addToSet: \"$Docs1.races.name\" }\n    }\n  },\n  {\n    $match: {\n      races: { $all: [\"Australian Grand Prix\"], $nin: [\"Chinese Grand Prix\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      forename: 1,\n      surname: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4088,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "find the name of employee who was awarded the most times in the evaluation.",
            "Which employee received the most awards in evaluations? Give me the employee name.",
            "Which employee has garnered the highest number of awards in evaluations? Please provide their name.",
            "Identify the employee who has received the most awards during the evaluation process.",
            "Who is the employee with the most evaluation awards? I would like to know their name."
        ],
        "ref_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.employee.aggregate([\n  {\n    $unwind: \"$evaluation\"\n  },\n  {\n    $group: {\n      _id: \"$Employee_ID\",\n      awardCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { awardCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"employee\",\n      localField: \"_id\",\n      foreignField: \"Employee_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 90,
        "db_id": "railway",
        "nl_queries": [
            "List the builders of railways in ascending alphabetical order.",
            "Provide a list of railway builders sorted alphabetically from A to Z.",
            "Retrieve the names of builders for railways in alphabetical order.",
            "Show all builders associated with railways, arranged in ascending order by name.",
            "Generate a list of builders of railways ordered alphabetically."
        ],
        "ref_sql": "SELECT Builder FROM railway ORDER BY Builder ASC",
        "MQL": "db.railway.find({}, { \"Builder\": 1, \"_id\": 0 }).sort({ \"Builder\": 1 });\n"
    },
    {
        "record_id": 1470,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What is the semester which most student registered in? Show both the name and the id.",
            "For each semester, what is the name and id of the one with the most students registered?",
            "Which semester has the highest number of student registrations? Please provide its name and ID.",
            "Identify the semester with the most enrollments and show its corresponding name and identifier.",
            "What is the semester that recorded the largest student enrolment? Include both the name and the semester ID in your answer."
        ],
        "ref_sql": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Semesters.aggregate([\n  {\n    $unwind: \"$Student_Enrolment\"\n  },\n  {\n    $group: {\n      _id: {\n        semester_id: \"$semester_id\",\n        semester_name: \"$semester_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      semester_id: \"$_id.semester_id\",\n      semester_name: \"$_id.semester_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3300,
        "db_id": "browser_web",
        "nl_queries": [
            "List the ids, names and market shares of all browsers.",
            "Provide a list of all browser IDs, their names, and respective market shares.",
            "Show me the ids, names, and market share statistics for every browser available.",
            "Retrieve the list containing IDs, names, and market share figures of all browsers.",
            "Can you display the identifiers, names, and market shares of every browser?"
        ],
        "ref_sql": "SELECT id , name , market_share FROM browser",
        "MQL": "db.browser.find({}, { \"id\": 1, \"name\": 1, \"market_share\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4164,
        "db_id": "store_product",
        "nl_queries": [
            "Find the number of stores in each city.",
            "How many stores are headquarted in each city?",
            "What is the total number of stores located in each city?",
            "Count the stores that are based in every city.",
            "How many retail outlets are situated in each headquarter city?"
        ],
        "ref_sql": "SELECT t3.headquartered_city , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city",
        "MQL": "db.district.aggregate([\n  {\n    $lookup: {\n      from: \"store\",\n      localField: \"District_ID\",\n      foreignField: \"store_district.District_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Headquartered_City\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Headquartered_City: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2778,
        "db_id": "swimming",
        "nl_queries": [
            "How many stadiums are there?",
            "What is the total number of stadiums?",
            "How many stadiums exist in the database?",
            "Can you tell me the count of stadiums?",
            "What is the number of stadiums available?"
        ],
        "ref_sql": "SELECT count(*) FROM stadium",
        "MQL": "db.stadium.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 838,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the name of the most expensive product?",
            "Tell me the name of the most pricy product.",
            "Can you tell me the name of the product with the highest price?",
            "What product holds the title for being the most expensive?",
            "Name the product that costs the most among all products available."
        ],
        "ref_sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "MQL": "db.Products.aggregate([\n  {\n    $sort: { Product_Price: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Product_Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2569,
        "db_id": "driving_school",
        "nl_queries": [
            "How many staff in total?",
            "How many employees are there?",
            "What is the total count of staff members?",
            "How many staff members are there in total?",
            "Can you tell me the overall number of employees registered?"
        ],
        "ref_sql": "SELECT count(*) FROM Staff;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $project: {\n      count_Staff: {\n        $size: \"$Staff\"\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_count_Staff: {\n        $sum: \"$count_Staff\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: \"$sum_count_Staff\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 416,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "List the names of all the distinct product names in alphabetical order?",
            "Sort all the distinct product names in alphabetical order.",
            "Provide a list of all unique product names, arranged in alphabetical order.",
            "Retrieve and sort all unique product names in alphabetical sequence.",
            "Show all distinct product names sorted in alphabetical order."
        ],
        "ref_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name",
        "MQL": "db.Product.aggregate([\n  {\n    $group: {\n      _id: \"$product_name\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      product_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4183,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show template ids, version numbers, and template type codes for all templates.",
            "What are the ids, version numbers, and type codes for each template?",
            "Retrieve the identifiers, version details, and type codes associated with all templates.",
            "Provide the template IDs, their corresponding version numbers, and type codes for every template.",
            "List the template identification numbers, their version statuses, and type codes for all available templates."
        ],
        "ref_sql": "SELECT template_id , version_number , template_type_code FROM Templates",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $project: {\n      Template_ID: \"$Templates.Template_ID\",\n      Version_Number: \"$Templates.Version_Number\",\n      Template_Type_Code: \"$Templates.Template_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 392,
        "db_id": "student_1",
        "nl_queries": [
            "Find the grade studying in room 105.",
            "Which grade is studying in room 105?",
            "What grade is represented in classroom 105?",
            "Identify the grade level for students in room 105.",
            "Which grade are the students from classroom 105 enrolled in?"
        ],
        "ref_sql": "SELECT DISTINCT grade FROM list WHERE classroom = 105",
        "MQL": "db.list.aggregate([\n  {\n    $match: {\n      Classroom: 105\n    }\n  },\n  {\n    $project: {\n      Grade: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2135,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the average rating stars and title for the oldest movie?",
            "For the oldest movie listed, what is its average rating and title?",
            "What is the title and average star rating for the earliest released movie?",
            "Can you provide the average rating stars along with the title for the oldest film?",
            "For the film that was released first, what are its title and average star rating?"
        ],
        "ref_sql": "SELECT avg(T1.stars) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT min(YEAR) FROM Movie)",
        "MQL": "db.Movie.aggregate([\n  {\n    $sort: { year: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: \"$mID\",\n      title: { $first: \"$title\" },\n      avg_stars: { $avg: \"$Rating.stars\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1,\n      avg_stars: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3404,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the maximum amount of transaction.",
            "What is the highest amount recorded in the transactions?",
            "Retrieve the maximum transaction amount.",
            "Can you provide the largest amount of all transactions?",
            "Find out the peak amount for any transaction."
        ],
        "ref_sql": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $group: { _id: null, max_amount_of_transaction: { $max: \"$Transactions.amount_of_transaction\" } } },\n  { $project: { _id: 0, max_amount_of_transaction: 1 } }\n]);\n"
    },
    {
        "record_id": 1096,
        "db_id": "book_2",
        "nl_queries": [
            "Show the titles of books in descending order of publication price.",
            "List the titles of books ordered by publication price from highest to lowest.",
            "Retrieve the titles of books, arranged in descending order based on their publication prices.",
            "Display the book titles sorted by their publication price in descending order.",
            "Provide a list of book titles sorted by their publication cost, with the most expensive first."
        ],
        "ref_sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC",
        "MQL": "db.book.aggregate([\n  { $unwind: \"$publication\" },\n  { $sort: { \"publication.Price\": -1 } },\n  { $project: { \"Title\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 541,
        "db_id": "gymnast",
        "nl_queries": [
            "Show the hometowns shared by people older than 23 and younger than 20.",
            "From which hometowns did both people older than 23 and younger than 20 come from?",
            "List the hometowns that are common to individuals above 23 years old and below 20 years old.",
            "Identify the hometowns where both people aged over 23 and those under 20 reside.",
            "Which hometowns are shared by athletes who are older than 23 and those younger than 20?"
        ],
        "ref_sql": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      $or: [\n        { Age: { $gt: 23 } },\n        { Age: { $lt: 20 } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Hometown\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Hometown: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1138,
        "db_id": "csu_1",
        "nl_queries": [
            "report the total number of degrees granted between 1998 and 2002.",
            "how many degrees were conferred between 1998 and 2002?",
            "What is the total count of degrees awarded during the years 1998 to 2002?",
            "Provide the total number of degrees issued between the years 1998 and 2002.",
            "How many degrees were awarded in total for the years spanning from 1998 to 2002?"
        ],
        "ref_sql": "SELECT T1.campus , sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$degrees\"\n  },\n  {\n    $match: {\n      \"degrees.Year\": { $gte: 1998, $lte: 2002 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Campus\",\n      sum_Degrees: { $sum: \"$degrees.Degrees\" }\n    }\n  },\n  {\n    $project: {\n      Campus: \"$_id\",\n      \"sum_Degrees\": 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 944,
        "db_id": "aircraft",
        "nl_queries": [
            "List the names of aircrafts and that won matches at least twice.",
            "What are the names of all aircrafts that have won a match at least twice?",
            "Identify all aircraft that have won two or more matches.",
            "Which aircraft have achieved victory in matches at least twice?",
            "Provide a list of aircraft that have secured wins in matches on two or more occasions."
        ],
        "ref_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*) >= 2",
        "MQL": "db.aircraft.aggregate([\n  {\n    $unwind: \"$match\"\n  },\n  {\n    $group: {\n      _id: \"$Aircraft\",\n      matches_won: {\n        $sum: {\n          $cond: [\n            { $ne: [\"$match.Winning_Pilot\", \"\"] },\n            1,\n            0\n          ]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      matches_won: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Aircraft: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2622,
        "db_id": "protein_institute",
        "nl_queries": [
            "How many buildings are there?",
            "What is the total number of buildings in the database?",
            "Can you tell me how many buildings exist?",
            "How many total buildings are recorded in the collection?",
            "What is the count of all the buildings available?"
        ],
        "ref_sql": "SELECT count(*) FROM building",
        "MQL": "db.building.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3429,
        "db_id": "candidate_poll",
        "nl_queries": [
            "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
            "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
            "What are the highest support rate, lowest consider rate, and lowest oppose rate for all candidates?",
            "Provide the maximum support percentage as well as the minimum rates for consideration and opposition among all candidates.",
            "Retrieve the highest percentage of support, alongside the lowest rates for consideration and opposition from all candidates."
        ],
        "ref_sql": "SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_support_rate: { $max: \"$candidate.Support_rate\" },\n      min_consider_rate: { $min: \"$candidate.Consider_rate\" },\n      min_oppose_rate: { $min: \"$candidate.Oppose_rate\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_support_rate: 1,\n      min_consider_rate: 1,\n      min_oppose_rate: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3611,
        "db_id": "sports_competition",
        "nl_queries": [
            "List all club names in ascending order of start year.",
            "What are the names of all the clubs starting with the oldest?",
            "Provide the names of all clubs sorted by their start year from the earliest to the latest.",
            "Retrieve a list of club names in the order of their founding years, beginning with the oldest.",
            "Compile the names of all clubs, arranged by the year they were established, starting from the oldest to the newest."
        ],
        "ref_sql": "SELECT name FROM club ORDER BY Start_year ASC",
        "MQL": "db.club.find({}, { name: 1, _id: 0 }).sort({ Start_year: 1 }).limit(1);\n"
    },
    {
        "record_id": 4050,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "Find the names and phone numbers of customers living in California state.",
            "Retrieve the names and contact numbers of customers residing in the state of California.",
            "List the customer names along with their phone numbers for those located in California.",
            "What are the names and phone contacts of customers that live in California?",
            "Show the names and telephone numbers of customers from the state of California."
        ],
        "ref_sql": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "MQL": "db.Customers.aggregate([\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.state_province_county\": \"California\"\n    }\n  },\n  {\n    $project: {\n      \"customer_name\": 1,\n      \"customer_phone\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3742,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name of players whose card is yes in the descending order of training hours.",
            "What are the name of the players who received a card in descending order of the hours of training?",
            "List the names of players who have a yellow card, sorted by their training hours from highest to lowest.",
            "What are the names of players that received a yellow card, ordered by their high school training hours in descending order?",
            "Provide the names of players with a yellow card, arranged in descending order based on their training hours."
        ],
        "ref_sql": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC",
        "MQL": "db.Player.aggregate([\n  {\n    $match: {\n      yCard: \"yes\"\n    }\n  },\n  {\n    $sort: {\n      HS: -1\n    }\n  },\n  {\n    $project: {\n      pName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3861,
        "db_id": "storm_record",
        "nl_queries": [
            "Show names for all regions except for Denmark.",
            "Return the names of all regions other than Denmark.",
            "List the names of all regions, excluding Denmark.",
            "Provide the names of every region apart from Denmark.",
            "Display the names of regions that are not Denmark."
        ],
        "ref_sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "MQL": "db.region.find(\n  { \"Region_name\": { $ne: \"Denmark\" } },\n  { \"Region_name\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 3283,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Where is the headquarter of the company founded by James?",
            "What is the headquarter of the company whose founder is James?",
            "What is the location of the headquarters for the business started by James?",
            "Can you tell me where the head office is for the company that James founded?",
            "Where can I find the headquarters of the enterprise founded by James?"
        ],
        "ref_sql": "SELECT headquarter FROM manufacturers WHERE founder = 'James'",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      Founder: \"James\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Headquarter: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1563,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
            "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
            "List the birthdates of entrepreneurs who are backed by either Simon Woodroffe or Peter Jones.",
            "What are the birth dates of those entrepreneurs with investors, specifically Simon Woodroffe or Peter Jones?",
            "Provide the dates of birth for entrepreneurs associated with investors named Simon Woodroffe or Peter Jones."
        ],
        "ref_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"",
        "MQL": "db.people.find({\n  entrepreneur: {\n    $elemMatch: {\n      Investor: {\n        $in: [\"Simon Woodroffe\", \"Peter Jones\"]\n      }\n    }\n  }\n}, {\n  _id: 0,\n  Date_of_Birth: 1\n});\n"
    },
    {
        "record_id": 3419,
        "db_id": "game_injury",
        "nl_queries": [
            "What are the maximum, minimum and average home games each stadium held?",
            "Can you provide the highest, lowest, and average number of home games played by each stadium?",
            "What is the range and average of home games that stadiums have hosted?",
            "What are the highest, lowest, and average home game figures for the stadiums?",
            "Please list the maximum, minimum, and mean home games held by each individual stadium."
        ],
        "ref_sql": "SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_home_games: { $max: \"$Home_Games\" },\n      min_home_games: { $min: \"$Home_Games\" },\n      avg_home_games: { $avg: \"$Home_Games\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_home_games: 1,\n      min_home_games: 1,\n      avg_home_games: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2943,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show all countries and the number of singers in each country.",
            "How many singers are from each country?",
            "List all countries along with the total number of singers residing in each.",
            "Provide a count of singers for each country.",
            "For every country, how many singers are represented?"
        ],
        "ref_sql": "SELECT country , count(*) FROM singer GROUP BY country",
        "MQL": "db.singer.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 763,
        "db_id": "poker_player",
        "nl_queries": [
            "What are the nationalities that are shared by at least two people?",
            "Return the nationalities for which there are two or more people.",
            "Which nationalities are represented by two or more individuals?",
            "List the nationalities that have at least a pair of people associated with them.",
            "Identify the nationalities that are held by at least two people."
        ],
        "ref_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Nationality: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2665,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "How many policies are listed for the customer named \"Dayana Robel\"?",
            "Count the total number of policies used by the customer named \"Dayana Robel\".",
            "What is the total number of insurance policies held by the customer \"Dayana Robel\"?",
            "How many insurance policies does \"Dayana Robel\" have registered under her name?",
            "Please provide the count of policies associated with the customer named \"Dayana Robel\"."
        ],
        "ref_sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      Customer_name: \"Dayana Robel\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Customers_Policies\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1587,
        "db_id": "city_record",
        "nl_queries": [
            "Give me the temperature of Shanghai in January.",
            "What is the temperature of \"Shanghai\" city in January?",
            "What is the January temperature for the city of Shanghai?",
            "Provide the temperature recorded in Shanghai during the month of January.",
            "Can you tell me the temperature in January for Shanghai?"
        ],
        "ref_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "MQL": "db.city.aggregate([\n  {\n    $match: {\n      City: \"Shanghai\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Jan: {\n        $arrayElemAt: [\"$temperature.Jan\", 0]\n      }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1609,
        "db_id": "wrestler",
        "nl_queries": [
            "What are the names of wrestlers and the elimination moves?",
            "Give the names of wrestlers and their elimination moves.",
            "List the names of wrestlers along with the moves they used for elimination.",
            "Provide a list of wrestlers and the elimination techniques they employed.",
            "Show the names of wrestlers together with the elimination moves they executed."
        ],
        "ref_sql": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
        "MQL": "db.wrestler.aggregate([\n  {\n    $unwind: \"$Elimination\"\n  },\n  {\n    $project: {\n      Name: 1,\n      Elimination_Move: \"$Elimination.Elimination_Move\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3432,
        "db_id": "phone_1",
        "nl_queries": [
            "List the maximum, minimum and average number of used kb in screen mode.",
            "Provide the maximum, minimum, and average values of used kilobytes in screen mode.",
            "What are the largest, smallest, and average used kilobytes recorded in screen mode?",
            "Show me the maximum, minimum, and average amount of kilobytes used in screen mode.",
            "Tell me the highest, lowest, and mean used kilobytes in the screen mode category."
        ],
        "ref_sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",
        "MQL": "db.screen_mode.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_used_kb: { $max: \"$used_kb\" },\n      min_used_kb: { $min: \"$used_kb\" },\n      avg_used_kb: { $avg: \"$used_kb\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_used_kb: 1,\n      min_used_kb: 1,\n      avg_used_kb: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 460,
        "db_id": "election_representative",
        "nl_queries": [
            "List the dates and vote percents of elections.",
            "Show the dates along with the voting percentages for each election.",
            "Provide a list of election dates and their corresponding vote percentages.",
            "Enumerate the dates of elections along with the percentage of votes received.",
            "Display the election dates alongside their respective vote percentages."
        ],
        "ref_sql": "SELECT Date , Vote_Percent FROM election",
        "MQL": "db.representative.aggregate([\n  { $unwind: \"$election\" },\n  { $project: { \"Date\": \"$election.Date\", \"Vote_Percent\": \"$election.Vote_Percent\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3934,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show each state and the number of addresses in each state.",
            "List all states along with the total number of addresses in each one.",
            "Provide the count of addresses for each state.",
            "Display the number of addresses associated with each state.",
            "Show the total addresses found in every state or province."
        ],
        "ref_sql": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "MQL": "db.Addresses.aggregate([\n  {\n    $group: {\n      _id: \"$state_province_county\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      state_province_county: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1863,
        "db_id": "school_finance",
        "nl_queries": [
            "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
            "List the schools that have a total budget exceeding 100 or an endowment total greater than 10.",
            "Identify the names of schools whose total budget is above 100 or whose endowment is over 10.",
            "Provide the names of schools with budgeted amounts greater than 100 or endowment amounts that exceed 10.",
            "Retrieve the schools with either a total budget greater than 100 or total endowment exceeding 10."
        ],
        "ref_sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted) > 100 OR sum(T3.amount) > 10",
        "MQL": "db.School.aggregate([\n  \n  { $unwind: \"$budget\" },\n  \n  { $unwind: \"$endowment\" },\n  \n  {\n    $group: {\n      _id: \"$School_id\",\n      School_name: { $first: \"$School_name\" },\n      sum_Budgeted: { $sum: \"$budget.Budgeted\" },\n      sum_amount: { $sum: \"$endowment.amount\" }\n    }\n  },\n  \n  {\n    $match: {\n      $or: [\n        { sum_Budgeted: { $gt: 100 } },\n        { sum_amount: { $gt: 10 } }\n      ]\n    }\n  },\n  \n  {\n    $project: {\n      _id: 0,\n      School_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3103,
        "db_id": "store_product",
        "nl_queries": [
            "Find the name all districts with city area greater than 10 or population larger than 100000",
            "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
            "List all district names where the city area exceeds 10 or the population is above 100000.",
            "Retrieve the names of districts that have a city area greater than 10 or a population greater than 100,000.",
            "What districts can be found with a city area of more than 10 or a population over 100,000?"
        ],
        "ref_sql": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
        "MQL": "db.district.find({\n  $or: [\n    { City_Area: { $gt: 10 } },\n    { City_Population: { $gt: 100000 } }\n  ]\n}, {\n  District_name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3631,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of instructors who didn't teach any courses?",
            "What are the names of instructors who didn't teach?",
            "List the names of instructors who have not taught any classes.",
            "Provide the names of instructors with no teaching assignments.",
            "Show the names of instructors who did not conduct any courses."
        ],
        "ref_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      localField: \"instructor.ID\",\n      foreignField: \"instructor.teaches.ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      name: \"$instructor.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2233,
        "db_id": "club_1",
        "nl_queries": [
            "Retrieve the average age of members of the club \"Tennis Club\".",
            "Compute the average age of the members in the club \"Tennis Club\".",
            "What is the average age of students who belong to the Tennis Club?",
            "Find the mean age of members in the Tennis Club.",
            "Determine the average age for students affiliated with the Tennis Club."
        ],
        "ref_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Club\",\n      localField: \"Member_of_club.ClubID\",\n      foreignField: \"ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.ClubName\": \"Tennis Club\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Age: {\n        $avg: \"$Age\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1832,
        "db_id": "wedding",
        "nl_queries": [
            "Show the names for all females from Canada having a wedding in year 2016.",
            "List the names of all Canadian women who got married in 2016.",
            "Retrieve the names of females from Canada with weddings that took place in the year 2016.",
            "Provide the names of all women living in Canada who had a wedding in 2016.",
            "What are the names of Canadian females who were married in the year 2016?"
        ],
        "ref_sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"Country\": \"Canada\",\n      \"wedding.Year\": 2016,\n      \"Is_Male\": \"false\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"church\",\n      localField: \"wedding.Church_ID\",\n      foreignField: \"Church_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3897,
        "db_id": "school_finance",
        "nl_queries": [
            "List the names of the schools without any endowment.",
            "Provide the names of schools that do not have any endowment funds.",
            "Can you list the school names that lack endowments?",
            "Show me the names of schools with no funds from endowments.",
            "Identify the schools without any endowment support and list their names."
        ],
        "ref_sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)",
        "MQL": "db.School.find({\n  \"endowment\": { $size: 0 }\n}, { \"School_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1251,
        "db_id": "college_1",
        "nl_queries": [
            "What is the first names of the professors from the history department who do not teach a class.",
            "What are the first names of all history professors who do not teach?",
            "List the first names of the professors in the History department who are not assigned to teach any courses.",
            "Provide the first names of history professors who currently have no classes to teach.",
            "Identify the first names of professors from the History department with no teaching duties."
        ],
        "ref_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: {\n      path: \"$DEPARTMENT\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"History\"\n    }\n  },\n  {\n    $unwind: {\n      path: \"$DEPARTMENT.PROFESSOR\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $lookup: {\n      from: \"EMPLOYEE\",\n      localField: \"DEPARTMENT.PROFESSOR.EMP_NUM\",\n      foreignField: \"EMP_NUM\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: {\n      path: \"$Docs1\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $unwind: {\n      path: \"$DEPARTMENT.COURSE\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $unwind: {\n      path: \"$DEPARTMENT.COURSE.CLASS\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.PROFESSOR.EMP_NUM\",\n      EMP_FNAME: { $first: \"$Docs1.EMP_FNAME\" },\n      hasClass: { $sum: { $cond: [{ $ifNull: [\"$DEPARTMENT.COURSE.CLASS.CLASS_CODE\", false] }, 1, 0] } }\n    }\n  },\n  {\n    $match: {\n      hasClass: 0\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      EMP_FNAME: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2245,
        "db_id": "bike_1",
        "nl_queries": [
            "Which bike traveled the most often in zip code 94002?",
            "What is the id of the bike that traveled the most in 94002?",
            "Which bicycle has been used the most in the 94002 area?",
            "What bike id corresponds to the most frequently used bike in the zip code 94002?",
            "Identify the bike that has the highest frequency of trips in the 94002 region."
        ],
        "ref_sql": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.trip.aggregate([\n  {\n    $match: {\n      zip_code: 94002\n    }\n  },\n  {\n    $group: {\n      _id: \"$bike_id\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      bike_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2009,
        "db_id": "film_rank",
        "nl_queries": [
            "List the title of films that do not have any market estimation.",
            "What are the titles of films that do not have a film market estimation?",
            "Retrieve the titles of films that lack market estimation information.",
            "What titles are there for films without any market estimation records?",
            "Show me the titles of movies that do not possess any film market estimation."
        ],
        "ref_sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
        "MQL": "db.film.aggregate([\n  {\n    $match: {\n      $or: [\n        { film_market_estimation: { $exists: false } },\n        { film_market_estimation: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3967,
        "db_id": "program_share",
        "nl_queries": [
            "find the total percentage share of all channels owned by CCTV.",
            "What is the total share (in percent) of all the channels owned by CCTV?",
            "What is the combined percentage share for all channels that are owned by CCTV?",
            "Calculate the total share percentage of channels under the ownership of CCTV.",
            "Determine the overall share (in percentage) of every channel that CCTV owns."
        ],
        "ref_sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'",
        "MQL": "db.channel.aggregate([\n  {\n    $match: {\n      Owner: \"CCTV\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Share_in_percent: {\n        $sum: \"$Share_in_percent\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Share_in_percent: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 773,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "Show the number of audience in year 2008 or 2010.",
            "Retrieve the audience count for the years 2008 and 2010.",
            "What is the number of attendees for festivals in 2008 or 2010?",
            "List the number of audience members from festival events in either 2008 or 2010.",
            "Provide the audience figures for the years 2008 and 2010."
        ],
        "ref_sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
        "MQL": "db.festival_detail.find({\n  \"Year\": { $in: [2008, 2010] }\n}, { \"Num_of_Audience\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 265,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Find the details of all the distinct customers who have orders with status \"On Road\".",
            "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
            "List the details for each unique customer who has at least one order marked as \"On Road\".",
            "Show me the customer details of all distinct customers with orders that are currently \"On Road\".",
            "Retrieve the details of distinct customers who have orders in the status of \"On Road\"."
        ],
        "ref_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $match: {\n      \"Orders.order_status\": \"On Road\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      customer_details: {\n        $first: \"$customer_details\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_details: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2483,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the number of all customers without an account.",
            "How many customers do not have an account?",
            "How many customers don't have an account?",
            "Count the number of customers who do not have an account.",
            "Determine how many customers lack an account."
        ],
        "ref_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "MQL": "db.Customers.aggregate([\n  {\n    $lookup: {\n      from: \"Accounts\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 279,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the first name and age of students who have a pet.",
            "What are the different first names and ages of the students who do have pets?",
            "List the first names and ages of students that own pets.",
            "Provide the first names and ages of students who possess pets.",
            "What are the first names and ages of students that have pets?"
        ],
        "ref_sql": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      Age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1405,
        "db_id": "bike_1",
        "nl_queries": [
            "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
            "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
            "List the names of all stations that offer an average of over 10 bikes and are outside San Jose.",
            "What stations are available that have more than 10 bikes on average and are not situated in San Jose?",
            "Provide the names of stations with an average bike count greater than 10 that are located elsewhere than San Jose."
        ],
        "ref_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      city: { $ne: \"San Jose\" }\n    }\n  },\n  {\n    $unwind: \"$status\"\n  },\n  {\n    $group: {\n      _id: \"$id\",\n      name: { $first: \"$name\" },\n      avg_bikes_available: { $avg: \"$status.bikes_available\" }\n    }\n  },\n  {\n    $match: {\n      avg_bikes_available: { $gt: 10 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 681,
        "db_id": "world_1",
        "nl_queries": [
            "What are the names of the nations with the 3 lowest populations?",
            "Return the names of the 3 countries with the fewest people.",
            "List the names of the three countries with the smallest populations.",
            "What are the names of the three nations that have the least number of inhabitants?",
            "Provide the names of the three countries that rank lowest in terms of population."
        ],
        "ref_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "MQL": "db.country.aggregate([\n  {\n    $sort: { Population: 1 }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2980,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of customer who has the lowest credit score.",
            "What is the name of the customer with the worst credit score?",
            "Who is the customer with the lowest credit rating?",
            "Identify the name of the customer that has the least favorable credit score.",
            "Can you provide the name of the customer who holds the lowest credit score?"
        ],
        "ref_sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $sort: {\n      \"customer.credit_score\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1461,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
            "What is the count of services requested by each resident? Provide the resident ID, their details, and sort the results by count in descending order.",
            "List the number of services each resident has requested, along with their ID and details, sorted from highest to lowest count.",
            "How many services have each resident requested? Show the resident ID, other details, and arrange the counts in descending order.",
            "Generate a list of residents with the number of services they have requested, including their ID and details, ordered by count in decreasing order."
        ],
        "ref_sql": "SELECT T1.resident_id , T1.other_details , count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
        "MQL": "db.Properties.aggregate([\n  { $unwind: \"$Residents\" },\n  { $unwind: \"$Residents.Residents_Services\" },\n  {\n    $group: {\n      _id: \"$Residents.resident_id\",\n      other_details: { $first: \"$Residents.other_details\" },\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  {\n    $project: {\n      resident_id: \"$_id\",\n      other_details: 1,\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 788,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "List the order dates of all the bookings.",
            "What is the order date of each booking?",
            "Can you provide a list of order dates for every booking?",
            "What are the order dates associated with each booking?",
            "Show me the order dates for all the bookings made."
        ],
        "ref_sql": "SELECT Order_Date FROM BOOKINGS",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Clients\"\n  },\n  {\n    $unwind: \"$Clients.Bookings\"\n  },\n  {\n    $project: {\n      Order_Date: \"$Clients.Bookings.Order_Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1107,
        "db_id": "activity_1",
        "nl_queries": [
            "What is the name of the activity with the most students?",
            "Find the name of the activity that has the largest number of student participants.",
            "Which activity has the highest number of student participants?",
            "What is the title of the activity that attracts the most students?",
            "Identify the activity with the greatest student involvement."
        ],
        "ref_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Activity.aggregate([\n  {\n    $unwind: \"$Participates_in\"\n  },\n  {\n    $group: {\n      _id: \"$Participates_in.actid\",\n      activity_name: { $first: \"$activity_name\" },\n      count_student: { $addToSet: \"$Participates_in.stuid\" }\n    }\n  },\n  {\n    $project: {\n      activity_name: 1,\n      count_student: { $size: \"$count_student\" }\n    }\n  },\n  {\n    $sort: {\n      count_student: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      activity_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 620,
        "db_id": "orchestra",
        "nl_queries": [
            "Please show the record formats of orchestras in ascending order of count.",
            "What are the major record formats of orchestras, sorted by their frequency?",
            "List the record formats used by orchestras, ordered by the number of occurrences in ascending order.",
            "What major record formats are associated with orchestras, sorted by their occurrence count from lowest to highest?",
            "Can you provide the orchestral record formats arranged in increasing order of their frequency?"
        ],
        "ref_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $group: {\n      _id: \"$orchestra.Major_Record_Format\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: 1\n    }\n  },\n  {\n    $project: {\n      Major_Record_Format: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3857,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the receipt date of the document with id 3?",
            "Can you provide the receipt date for the document that has an ID of 3?",
            "What is the date of receipt for the document with an identifier of 3?",
            "Please tell me the receipt date associated with the document whose ID is 3.",
            "What date was the document with id 3 received?"
        ],
        "ref_sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.document_id\": 3\n    }\n  },\n  {\n    $project: {\n      receipt_date: \"$Documents.receipt_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 424,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "Which distinct source system code includes the substring 'en'?",
            "What are the unique source system codes that contain the substring 'en'?",
            "Identify all distinct source system codes that have 'en' in them.",
            "Which unique source system codes feature the substring 'en'?",
            "List the distinct source system codes that include 'en' as part of their value."
        ],
        "ref_sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "MQL": "db.Customer_Master_Index.aggregate([\n  { \n    $unwind: \"$CMI_Cross_References\" \n  },\n  { \n    $match: { \n      \"CMI_Cross_References.source_system_code\": { \n        $regex: \"en\", \n        $options: \"i\" \n      } \n    } \n  },\n  { \n    $group: { \n      _id: \"$CMI_Cross_References.source_system_code\" \n    } \n  },\n  { \n    $project: { \n      _id: 0, \n      source_system_code: \"$_id\" \n    } \n  }\n]);\n"
    },
    {
        "record_id": 644,
        "db_id": "body_builder",
        "nl_queries": [
            "List the names and origins of people who are not body builders.",
            "Provide the names and birthplaces of individuals who are not associated with body building.",
            "Identify the names and places of origin for people who aren’t body builders.",
            "Show the names and birth locations of those individuals who do not engage in body building.",
            "List the individuals' names and their birth origins who are not part of the body building community."
        ],
        "ref_sql": "SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id",
        "MQL": "db.people.find({\n  $or: [\n    { \"body_builder\": { $exists: false } },\n    { \"body_builder\": { $size: 0 } }\n  ]\n}, { \"Name\": 1, \"Birth_Place\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2753,
        "db_id": "college_1",
        "nl_queries": [
            "How many professors do have a Ph.D. degree?",
            "What is the total number of professors with a Ph.D. ?",
            "What is the number of professors that possess a Ph.D.?",
            "How many faculty members have earned a Ph.D. degree?",
            "Can you tell me the total count of professors who have a Ph.D.?"
        ],
        "ref_sql": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$PROFESSOR\"\n  },\n  {\n    $match: {\n      \"PROFESSOR.PROF_HIGH_DEGREE\": \"Ph.D.\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3425,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "What are the maximum and minimum settlement amount on record?",
            "Find the maximum and minimum settlement amount.",
            "What are the highest and lowest recorded settlement amounts?",
            "Retrieve the maximum and minimum amounts of settlements.",
            "Show the largest and smallest settlement amounts that have been documented."
        ],
        "ref_sql": "SELECT max(settlement_amount) , min(settlement_amount) FROM settlements",
        "MQL": "db.Available_Policies.aggregate([\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss.Claims\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_settlement_amount: { $max: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements.Settlement_Amount\" },\n      min_settlement_amount: { $min: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements.Settlement_Amount\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_settlement_amount: 1,\n      min_settlement_amount: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2062,
        "db_id": "school_finance",
        "nl_queries": [
            "List the amount and donor name for the largest amount of donation.",
            "Provide the donation amount and the name of the donor for the highest donation.",
            "Retrieve the largest donation along with the respective donor's name.",
            "What is the amount of the largest donation and who is the donor?",
            "Show the name of the donor and the total amount for the largest endowment received."
        ],
        "ref_sql": "SELECT amount , donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "MQL": "db.School.aggregate([\n  { $unwind: \"$endowment\" },\n  { $sort: { \"endowment.amount\": -1 } },\n  { $limit: 1 },\n  { $project: { \n      _id: 0, \n      amount: \"$endowment.amount\", \n      donator_name: \"$endowment.donator_name\" \n  }}\n]);\n"
    },
    {
        "record_id": 3739,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
            "Provide the outcome code for each mailshot and the total number of mailshots corresponding to each outcome code.",
            "List the outcome codes of mailshots along with their respective counts of occurrences.",
            "Display each mailshot's outcome code together with how many mailshots fall under each code.",
            "Show the count of mailshots for every unique outcome code in the mailshot campaigns."
        ],
        "ref_sql": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
        "MQL": "db.Mailshot_Campaigns.aggregate([\n  { $unwind: \"$Mailshot_Customers\" },\n  { $group: {\n      _id: \"$Mailshot_Customers.outcome_code\",\n      count: { $sum: 1 }\n    }\n  },\n  { $project: {\n      outcome_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2929,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the number of papers published by the institution \"University of Pennsylvania\".",
            "How many papers are written by authors from the institution \"University of Pennsylvania\"?",
            "How many distinct titles of papers are associated with the \"University of Pennsylvania\"?",
            "Count the total number of papers affiliated with authors from the institution \"University of Pennsylvania\".",
            "What is the total number of published papers by the \"University of Pennsylvania\"?"
        ],
        "ref_sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"Authorship.instID\",\n      foreignField: \"instID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"University of Pennsylvania\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$title\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_papers_title: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_papers_title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1531,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the name and id of the item with the highest average rating.",
            "Identify the item with the highest average rating and provide its name and ID.",
            "Retrieve the title and identifier of the item that boasts the highest average review rating.",
            "What is the name and ID of the item that has the best average rating from reviews?",
            "Find out which item has the highest average rating, along with its title and identification number."
        ],
        "ref_sql": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
        "MQL": "db.item.aggregate([\n  {\n    $unwind: \"$review\"\n  },\n  {\n    $group: {\n      _id: \"$i_id\",\n      title: { $first: \"$title\" },\n      acg_rating: { $avg: \"$review.rating\" }\n    }\n  },\n  {\n    $sort: { acg_rating: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1,\n      i_id: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3751,
        "db_id": "party_people",
        "nl_queries": [
            "Show names of parties that does not have any members.",
            "What are the names of parties that have no members?",
            "List the names of political parties that currently lack any members.",
            "Get the names of parties that do not have any members associated with them.",
            "What are the names of parties that don’t have any members at all?"
        ],
        "ref_sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $project: {\n      Party_name: \"$party.Party_name\",\n      count_member: {\n        $size: \"$party.member\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_member: 0\n    }\n  },\n  {\n    $project: {\n      Party_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 627,
        "db_id": "car_1",
        "nl_queries": [
            "Which model has the most version(make) of cars?",
            "What model has the most different versions?",
            "Which car model features the greatest number of variants available?",
            "Identify the model that has the highest variety of car makes.",
            "What car model is associated with the most different versions produced?"
        ],
        "ref_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $group: {\n      _id: \"$countries.car_makers.model_list.Model\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Model: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 806,
        "db_id": "debate",
        "nl_queries": [
            "What is the party of the youngest people?",
            "Which political party does the youngest individual belong to?",
            "Can you tell me the party of the youngest person in the dataset?",
            "What political party is associated with the person who is the youngest?",
            "Identify the party of the individual who is the youngest in age."
        ],
        "ref_sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "MQL": "db.people.aggregate([\n  { $sort: { \"Age\": 1 } },\n  { $limit: 1 },\n  { $project: { \"Party\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3539,
        "db_id": "browser_web",
        "nl_queries": [
            "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
            "Retrieve the names of accelerators and their corresponding operating systems that do not support the 'Opera' browser.",
            "List the accelerator names along with their operating systems that aren't compatible with the browser named 'Opera'.",
            "Provide a list of accelerator names and their associated operating systems that exclude compatibility with 'Opera'.",
            "Display the names of accelerators and the operating systems they support, filtering out those that are compatible with the 'Opera' browser."
        ],
        "ref_sql": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'",
        "MQL": "db.Web_client_accelerator.aggregate([\n  {\n    $lookup: {\n      from: \"browser\",\n      localField: \"accelerator_compatible_browser.browser_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": { $ne: \"Opera\" }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      Operating_system: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1164,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List the cost of each treatment and the corresponding treatment type description.",
            "What are the cost and treatment type description of each treatment?",
            "Provide a list of treatment costs along with their respective treatment type descriptions.",
            "Can you give the cost associated with each treatment and a description of the treatment type?",
            "Show me the cost for each treatment and the corresponding descriptions of the treatment types."
        ],
        "ref_sql": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "MQL": "db.Professionals.aggregate([\n  {\n    $unwind: \"$Treatments\"\n  },\n  {\n    $lookup: {\n      from: \"Treatment_Types\",\n      localField: \"Treatments.treatment_type_code\",\n      foreignField: \"treatment_type_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      cost_of_treatment: \"$Treatments.cost_of_treatment\",\n      treatment_type_description: \"$Docs1.treatment_type_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1751,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the first names and last names of students with address in Wisconsin state?",
            "Can you provide the first and last names of students residing in the state of Wisconsin?",
            "What are the names (first and last) of students who live at addresses in Wisconsin?",
            "List the first and last names of students whose addresses are located in Wisconsin.",
            "What are the first names and surnames of students with residences in the state of Wisconsin?"
        ],
        "ref_sql": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: {\n      \"state_province_county\": \"Wisconsin\"\n    }\n  },\n  {\n    $project: {\n      \"Students.first_name\": 1,\n      \"Students.last_name\": 1,\n      \"_id\": 0\n    }\n  },\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $project: {\n      \"first_name\": \"$Students.first_name\",\n      \"last_name\": \"$Students.last_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 916,
        "db_id": "game_1",
        "nl_queries": [
            "Show ids of students who play video game and play sports.",
            "What are the ids of all students who played video games and sports?",
            "List the student ids of those who are engaged in both video gaming and sports activities.",
            "Provide the ids of students who participate in both video games and sports.",
            "What are the ids of students who play sports as well as video games?"
        ],
        "ref_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Video_Games\",\n      localField: \"Plays_Games.GameID\",\n      foreignField: \"GameID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $ne: [] },\n      SportsInfo: { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      StuID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1134,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What is the name of the breed with the most dogs?",
            "Which breed do the most dogs have? Give me the breed name.",
            "What breed has the highest count of dogs?",
            "Identify the breed with the most dogs associated with it.",
            "Which dog breed is the most populous in terms of the number of dogs?"
        ],
        "ref_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Breeds.aggregate([\n  {\n    $group: {\n      _id: {\n        breed_code: \"$breed_code\",\n        breed_name: \"$breed_name\"\n      },\n      count: {\n        $sum: {\n          $size: \"$Dogs\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      breed_name: \"$_id.breed_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4232,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the transaction types and the total amount of transactions.",
            "What are total transaction amounts for each transaction type?",
            "Provide a list of transaction types along with their corresponding total transaction amounts.",
            "Can you give me the total amounts categorized by each type of transaction?",
            "What is the total transaction amount for every type of transaction recorded?"
        ],
        "ref_sql": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Invoices\"\n  },\n  {\n    $unwind: \"$Orders.Invoices.Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$Orders.Invoices.Financial_Transactions.transaction_type\",\n      sum_transaction_amount: {\n        $sum: \"$Orders.Invoices.Financial_Transactions.transaction_amount\"\n      }\n    }\n  },\n  {\n    $project: {\n      transaction_type: \"$_id\",\n      sum_transaction_amount: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 911,
        "db_id": "company_office",
        "nl_queries": [
            "Find the stories of the building with the largest height.",
            "What is the stories of highest building?",
            "What is the number of stories in the tallest building?",
            "Retrieve the number of floors in the building with the maximum height.",
            "How many stories does the highest building have?"
        ],
        "ref_sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "MQL": "db.buildings.aggregate([\n  {\n    $sort: {\n      Height: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Stories: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1617,
        "db_id": "performance_attendance",
        "nl_queries": [
            "Show the names of members and the location of the performances they attended.",
            "List the names of the members alongside the locations of the performances they attended.",
            "Provide the names of members and the venues of the performances they participated in.",
            "Display the names of members and the locations where their performances took place.",
            "Identify member names and the locations of the performances they were involved in."
        ],
        "ref_sql": "SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID",
        "MQL": "db.member.aggregate([\n  {\n    $lookup: {\n      from: \"performance\",\n      localField: \"member_attendance.Performance_ID\",\n      foreignField: \"Performance_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Location\": \"$Docs1.Location\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 363,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name of different colleges involved in the tryout in alphabetical order.",
            "What are the different names of the colleges involved in the tryout in alphabetical order?",
            "List the names of all colleges participating in the tryout, sorted alphabetically.",
            "Please provide the various college names associated with the tryout in alphabetical order.",
            "Can you give me the different names of colleges involved in the tryout, arranged in alphabetical sequence?"
        ],
        "ref_sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "MQL": "db.College.aggregate([\n  {\n    $project: {\n      _id: 0,\n      cName: 1\n    }\n  },\n  {\n    $sort: {\n      cName: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 896,
        "db_id": "roller_coaster",
        "nl_queries": [
            "What are the speeds of the longest roller coaster?",
            "What speed does the longest roller coaster achieve?",
            "How fast is the longest roller coaster?",
            "Can you tell me the speed of the roller coaster with the greatest length?",
            "What is the maximum speed of the longest roller coaster?"
        ],
        "ref_sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $sort: { \"roller_coaster.Length\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Speed\": \"$roller_coaster.Speed\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2848,
        "db_id": "mountain_photos",
        "nl_queries": [
            "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
            "What is the total number of unique camera lenses employed for photographing mountains in Ethiopia?",
            "How many different types of camera lenses are utilized to capture images of mountains located in Ethiopia?",
            "Can you tell me how many distinct camera lens models are used for mountain photography in the country of Ethiopia?",
            "What is the count of various camera lenses used to take photos of mountains across Ethiopia?"
        ],
        "ref_sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'",
        "MQL": "db.mountain.aggregate([\n  {\n    $match: { \"Country\": \"Ethiopia\" }\n  },\n  {\n    $unwind: \"$photos\"\n  },\n  {\n    $group: {\n      _id: \"$photos.camera_lens_id\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_photos_camera_lens_id\"\n  }\n]);\n"
    },
    {
        "record_id": 1786,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.",
            "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?",
            "Identify the project that takes the least time to complete along with the names of the scientists involved.",
            "What is the title of the project that requires the minimum hours, and who are the scientists assigned to it?",
            "Show the project with the shortest duration for completion and list the names of the scientists who worked on it."
        ],
        "ref_sql": "SELECT T2.name , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT min(hours) FROM projects)",
        "MQL": "db.Projects.aggregate([\n  {\n    $sort: { Hours: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $unwind: \"$AssignedTo\"\n  },\n  {\n    $lookup: {\n      from: \"Scientists\",\n      localField: \"AssignedTo.Scientist\",\n      foreignField: \"SSN\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      ScientistNames: { $push: \"$Docs1.Name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      ProjectName: \"$_id\",\n      ScientistNames: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 606,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the life spans of representatives from New York state or Indiana state?",
            "What are the ages of representatives hailing from either New York or Indiana?",
            "Can you provide the life spans of representatives from the states of New York and Indiana?",
            "List the life expectancies of representatives from New York or Indiana.",
            "What is the lifespan information for representatives representing New York and Indiana?"
        ],
        "ref_sql": "SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\"",
        "MQL": "db.representative.find({\n  $or: [\n    { \"State\": \"New York\" },\n    { \"State\": \"Indiana\" }\n  ]\n}, { \"Lifespan\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3598,
        "db_id": "mountain_photos",
        "nl_queries": [
            "List the camera lens names containing substring \"Digital\".",
            "Retrieve the names of camera lenses that feature the substring \"Digital\".",
            "Find all camera lens names that include \"Digital\" in them.",
            "Show me the names of any camera lenses containing the term \"Digital\".",
            "Provide a list of camera lenses where the name has \"Digital\" as part of it."
        ],
        "ref_sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "MQL": "db.camera_lens.find({\n  \"name\": { $regex: \"Digital\", $options: \"i\" }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3358,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the mail date of the document with id 7?",
            "Can you provide the mailing date for the document with ID 7?",
            "What is the date on which the document identified by 7 was mailed?",
            "When was the document with the ID 7 sent out?",
            "Please tell me the mail date of the document having an ID of 7."
        ],
        "ref_sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  {\n    $match: {\n      \"Documents.document_id\": 7\n    }\n  },\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.document_id\": 7\n    }\n  },\n  {\n    $unwind: \"$Documents.Documents_Mailed\"\n  },\n  {\n    $project: {\n      mailing_date: \"$Documents.Documents_Mailed.mailing_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3716,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Find the id of the order which is shipped most recently.",
            "Which order has the most recent shipment? Give me the order id.",
            "Retrieve the order ID associated with the most recent shipment.",
            "What is the order ID of the order that was shipped last?",
            "Please provide me the ID of the order that has the latest shipping date."
        ],
        "ref_sql": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Orders\" },\n  { $unwind: \"$Orders.Shipments\" },\n  { $sort: { \"Orders.Shipments.shipment_date\": -1 } },\n  {\n    $group: {\n      _id: \"$_id\",\n      order_id: { $first: \"$Orders.order_id\" },\n      shipment_date: { $first: \"$Orders.Shipments.shipment_date\" }\n    }\n  },\n  { $sort: { shipment_date: -1 } },\n  { $project: { _id: 0, order_id: 1 } },\n  { $limit: 1 }\n]);\n"
    },
    {
        "record_id": 3269,
        "db_id": "network_1",
        "nl_queries": [
            "Show the number of high schoolers for each grade.",
            "How many high schoolers are in each grade?",
            "Display the count of high school students for each grade level.",
            "What is the total number of high schoolers grouped by their grade?",
            "Provide the headcount of high school students across different grades."
        ],
        "ref_sql": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $group: {\n      _id: \"$grade\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      grade: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 85,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the birth places that are shared by at least two people?",
            "Which birth places are common to at least two individuals?",
            "List the birth places that have a minimum of two residents.",
            "Identify the birth locations that are associated with two or more people.",
            "What birth places are shared by a pair or more of individuals?"
        ],
        "ref_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2",
        "MQL": "db.people.aggregate([\n  { $group: { _id: \"$Birth_Place\", count: { $sum: 1 } } },\n  { $match: { count: { $gte: 2 } } },\n  { $project: { \"Birth_Place\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2185,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the average enrollment number?",
            "How many students, on average, does each college have enrolled?",
            "What is the mean number of enrollments across all colleges?",
            "On average, how many students are enrolled in each college?",
            "What is the average student enrollment for colleges?"
        ],
        "ref_sql": "SELECT avg(enr) FROM College",
        "MQL": "db.College.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_enr: { $avg: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_enr: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 592,
        "db_id": "perpetrator",
        "nl_queries": [
            "What is the location of the perpetrator with the largest kills.",
            "Where is the location of the perpetrator who has caused the most fatalities?",
            "Can you tell me the location of the individual with the highest number of killings?",
            "What location corresponds to the perpetrator with the largest number of kills?",
            "Identify the location associated with the perpetrator who recorded the most killings."
        ],
        "ref_sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $sort: { \"perpetrator.Killed\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Location\": \"$perpetrator.Location\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 341,
        "db_id": "department_store",
        "nl_queries": [
            "Find the names of products that were bought by at least two distinct customers.",
            "What are the distinct names of products purchased by at least two different customers?",
            "List the names of products that have been purchased by a minimum of two unique customers.",
            "Identify the product names that at least two distinct customers have bought.",
            "What are the names of products that two or more different customers have purchased?"
        ],
        "ref_sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id) >= 2",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Orders.Order_Items.product_id\",\n      distinct_customers: { $addToSet: \"$customer_id\" }\n    }\n  },\n  {\n    $project: {\n      product_id: \"$_id\",\n      distinct_customer_count: { $size: \"$distinct_customers\" }\n    }\n  },\n  {\n    $match: {\n      distinct_customer_count: { $gte: 2 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      product_name: \"$Docs1.product_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1647,
        "db_id": "party_host",
        "nl_queries": [
            "Show the host names for parties with number of hosts greater than 20.",
            "Which parties have more than 20 hosts? Give me the host names for these parties.",
            "List the names of hosts for parties where the number of hosts exceeds 20.",
            "Identify the parties that have over 20 hosts and provide the corresponding host names.",
            "Retrieve the host names associated with parties having a host count greater than 20."
        ],
        "ref_sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20",
        "MQL": "db.party.aggregate([\n  {\n    $match: {\n      Number_of_hosts: { $gt: 20 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"host\",\n      localField: \"Party_ID\",\n      foreignField: \"party_host.Party_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: \"$hosts.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2982,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of customers whose credit score is below the average credit scores of all customers.",
            "What are the names of customers with credit score less than the average credit score across customers?",
            "List the names of customers whose credit scores fall below the average credit score of all customers.",
            "Who are the customers with credit scores that are under the average credit score of the entire customer base?",
            "Identify customers whose credit scores do not reach the average credit score compared to all customers."
        ],
        "ref_sql": "SELECT cust_name FROM customer WHERE credit_score < (SELECT avg(credit_score) FROM customer)",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_credit_score: { $avg: \"$customer.credit_score\" }\n    }\n  },\n  {\n    $addFields: {\n      avg_credit_score: \"$avg_credit_score\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"bank\",\n      let: { avg_credit_score: \"$avg_credit_score\" },\n      pipeline: [\n        { $unwind: \"$customer\" },\n        {\n          $match: {\n            $expr: {\n              $lt: [\"$customer.credit_score\", \"$$avg_credit_score\"]\n            }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            cust_name: \"$customer.cust_name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: {\n      newRoot: \"$Docs1\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 523,
        "db_id": "riding_club",
        "nl_queries": [
            "What are the gender and occupation of players?",
            "Can you provide the gender and occupation details of the players?",
            "What information do we have regarding the players' gender and their occupations?",
            "Please list the genders and occupations of all the players.",
            "What are the occupations and genders of the players in the club?"
        ],
        "ref_sql": "SELECT Gender , Occupation FROM player",
        "MQL": "db.player.find({}, { \"Gender\": 1, \"Occupation\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3811,
        "db_id": "department_store",
        "nl_queries": [
            "What is the id of the product that was ordered the most often?",
            "Give the product id for the product that was ordered most frequently.",
            "What is the product ID for the item that customers have ordered the most?",
            "Identify the product ID of the most commonly ordered item.",
            "Please provide the ID of the product that has been ordered the greatest number of times."
        ],
        "ref_sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Orders.Order_Items.product_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      product_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1748,
        "db_id": "csu_1",
        "nl_queries": [
            "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
            "How many faculty members did the university that conferred the most degrees in 2002 have?",
            "What is the total number of faculty members at the university that granted the highest number of degrees in the year 2002?",
            "How many faculty positions were available at the campus with the most degrees awarded in 2002?",
            "Can you tell me the count of faculty lines in the university that awarded the most degrees during 2002?"
        ],
        "ref_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$degrees\"\n  },\n  {\n    $match: {\n      \"degrees.Year\": 2002\n    }\n  },\n  {\n    $group: {\n      _id: \"$Id\",\n      count_degrees: { $sum: \"$degrees.Degrees\" }\n    }\n  },\n  {\n    $sort: {\n      count_degrees: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Campuses\",\n      localField: \"_id\",\n      foreignField: \"Id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.faculty\"\n  },\n  {\n    $match: {\n      \"Docs1.faculty.Year\": 2002\n    }\n  },\n  {\n    $project: {\n      Faculty: \"$Docs1.faculty.Faculty\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 650,
        "db_id": "chinook_1",
        "nl_queries": [
            "List the names of all music genres.",
            "What are the names of different music genres?",
            "Provide the names of all available music genres.",
            "Can you list the various names of music genres?",
            "Show me all the different music genre names."
        ],
        "ref_sql": "SELECT Name FROM GENRE",
        "MQL": "db.Genre.find({}, { Name: 1, _id: 0 });\n"
    },
    {
        "record_id": 1738,
        "db_id": "college_1",
        "nl_queries": [
            "Find the first name and office of history professor who did not get a Ph.D. degree.",
            "What are the first names and offices of history professors who don't have Ph.D.s?",
            "What are the first names and office locations of history professors who have not earned a Ph.D.?",
            "List the first names and offices of professors in the History department that do not hold a Ph.D. degree.",
            "Retrieve the names and office information of history faculty members without a Ph.D. qualification."
        ],
        "ref_sql": "SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"History\"\n    }\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.PROFESSOR.PROF_HIGH_DEGREE\": { $ne: \"Ph.D.\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"EMPLOYEE\",\n      localField: \"DEPARTMENT.PROFESSOR.EMP_NUM\",\n      foreignField: \"EMP_NUM\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      EMP_FNAME: \"$Docs1.EMP_FNAME\",\n      PROF_OFFICE: \"$DEPARTMENT.PROFESSOR.PROF_OFFICE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 428,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the states where have some college students in tryout.",
            "What are the different states that have students trying out?",
            "List the states where colleges are hosting student tryouts.",
            "Identify the various states that have college players participating in tryouts.",
            "Which states have colleges with students undergoing tryouts?"
        ],
        "ref_sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      Tryout: {\n        $exists: true,\n        $not: {\n          $size: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$state\"\n    }\n  },\n  {\n    $project: {\n      state: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2074,
        "db_id": "music_1",
        "nl_queries": [
            "What are the names of artists who are Male and are from UK?",
            "What are the names of all male British artists?",
            "Can you provide a list of names of male artists from the United Kingdom?",
            "Who are the male artists that hail from the UK?",
            "Please list the names of all British male artists."
        ],
        "ref_sql": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\"",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $match: {\n      \"artist.gender\": \"Male\",\n      \"artist.country\": \"UK\"\n    }\n  },\n  {\n    $project: {\n      artist_name: \"$artist.artist_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 390,
        "db_id": "e_government",
        "nl_queries": [
            "List all the types of forms.",
            "What are the different types of forms?",
            "Can you provide a complete list of form types?",
            "What different forms do we have available?",
            "Show me all unique types of forms."
        ],
        "ref_sql": "SELECT DISTINCT form_type_code FROM forms",
        "MQL": "db.Services.aggregate([\n  {\n    $unwind: \"$Forms\"\n  },\n  {\n    $project: {\n      form_type_code: \"$Forms.form_type_code\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$form_type_code\"\n    }\n  },\n  {\n    $project: {\n      form_type_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3560,
        "db_id": "sports_competition",
        "nl_queries": [
            "List the names of clubs that do not have any players.",
            "What are the names of all clubs that do not have any players?",
            "Provide the names of all clubs that have no associated players.",
            "Identify clubs that lack any players and list their names.",
            "Which clubs do not have any players registered? Please list their names."
        ],
        "ref_sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "MQL": "db.club.aggregate([\n  {\n    $match: {\n      $or: [\n        { player: { $exists: false } },\n        { player: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1540,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the names of goods that receive a rating of 10.",
            "List the titles of items that are rated 10.",
            "Which products have received a rating of 10?",
            "Retrieve the names of items with a perfect rating of 10.",
            "Show all goods that are rated at the maximum score of 10."
        ],
        "ref_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10",
        "MQL": "db.item.find({ \"review.rating\": 10 }, { \"title\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4201,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all movie titles, years, and directors, ordered by budget.",
            "What are the titles, years, and directors of all movies, ordered by budget in millions?",
            "Retrieve a list of all movie titles, their release years, and directors, sorted by budget in ascending order.",
            "Provide the titles, release years, and directors of every movie, arranged by budget amount.",
            "Display all movie titles along with their years and directors, organized by the budget in millions."
        ],
        "ref_sql": "SELECT title , YEAR , director FROM movie ORDER BY budget_million",
        "MQL": "db.movie.find({}, { Title: 1, Year: 1, Director: 1, _id: 0 }).sort({ Budget_million: 1 });\n"
    },
    {
        "record_id": 2035,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the account id and the number of transactions for each account",
            "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
            "List each account ID along with the total number of financial transactions associated with it.",
            "Provide the count of transactions for every account alongside their respective account IDs.",
            "What is the number of financial transactions per account ID, and can you display the account IDs and counts?"
        ],
        "ref_sql": "SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id",
        "MQL": "db.Accounts.aggregate([\n  {\n    $unwind: \"$Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$account_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      account_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 578,
        "db_id": "train_station",
        "nl_queries": [
            "Show all locations and the total number of platforms and passengers for all train stations in each location.",
            "Provide a list of locations along with the cumulative number of platforms and passengers for every train station in those areas.",
            "Display the various locations and their corresponding totals of platforms and passengers at the train stations found in each location.",
            "Present all locations with the summed totals of platforms and total passengers from each train station located there.",
            "Give me all locations along with their total platforms and total passenger counts for train stations in those locations."
        ],
        "ref_sql": "SELECT LOCATION , sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      totalPlatforms: { $sum: \"$Number_of_Platforms\" },\n      totalPassengers: { $sum: \"$Total_Passengers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\",\n      sum_number_of_platforms: \"$totalPlatforms\",\n      sum_total_passengers: \"$totalPassengers\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 269,
        "db_id": "department_store",
        "nl_queries": [
            "List the names of all the distinct customers who bought a keyboard.",
            "What are the distinct names of customers who have purchased a keyboard?",
            "Provide a list of unique customers who have bought a keyboard.",
            "Show the distinct names of customers who have made keyboard purchases.",
            "Identify all unique customers that purchased a keyboard."
        ],
        "ref_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = \"keyboard\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"Customer_Orders.Order_Items.product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.product_name\": \"keyboard\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 798,
        "db_id": "roller_coaster",
        "nl_queries": [
            "Show the park of the roller coaster with the highest speed.",
            "Which park is home to the roller coaster with the highest velocity?",
            "Please provide the name of the park where the fastest roller coaster is located.",
            "Identify the park associated with the roller coaster that has the maximum speed.",
            "What is the park that features the roller coaster with the greatest speed?"
        ],
        "ref_sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $sort: { \"roller_coaster.Speed\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Park\": \"$roller_coaster.Park\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2573,
        "db_id": "restaurant_1",
        "nl_queries": [
            "Advisor 1121 has how many students?",
            "How many students are assigned to advisor 1121?",
            "What is the total number of students for advisor 1121?",
            "Can you tell me the number of students under advisor 1121?",
            "How many students does advisor 1121 supervise?"
        ],
        "ref_sql": "SELECT count(*) FROM Student WHERE Advisor = 1121;",
        "MQL": "db.Student.aggregate([\n  {\n    $match: { \"Advisor\": 1121 }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2817,
        "db_id": "world_1",
        "nl_queries": [
            "How many type of governments are in Africa?",
            "How many different forms of governments are there in Africa?",
            "What is the total number of different government types found in Africa?",
            "How many unique forms of governance exist in African countries?",
            "Identify the count of distinct government structures in Africa."
        ],
        "ref_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: \"Africa\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$GovernmentForm\",\n      count_DISTINCT_GovernmentForm: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_GovernmentForm: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_GovernmentForm: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1056,
        "db_id": "perpetrator",
        "nl_queries": [
            "What are the names of perpetrators in country \"China\" or \"Japan\"?",
            "Who are the perpetrators from either China or Japan?",
            "List the names of individuals involved in perpetrations in China or Japan.",
            "Can you provide the names of perpetrators located in either China or Japan?",
            "Give me the names of the perpetrators associated with China or Japan."
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\"",
        "MQL": "db.people.find({\n  $or: [\n    { \"perpetrator.Country\": \"China\" },\n    { \"perpetrator.Country\": \"Japan\" }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1779,
        "db_id": "race_track",
        "nl_queries": [
            "Show the name and location of track with 1 race.",
            "What are the names and locations of tracks that have had exactly 1 race?",
            "List the names and locations of tracks that are associated with a single race.",
            "Retrieve the names and locations of any tracks that have only hosted one race.",
            "What are the names and locations of those tracks that have had just one race held on them?"
        ],
        "ref_sql": "SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count(*) = 1",
        "MQL": "db.track.aggregate([\n  {\n    $project: {\n      Name: 1,\n      Location: 1,\n      raceCount: {\n        $size: \"$race\"\n      }\n    }\n  },\n  {\n    $match: {\n      raceCount: 1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      Location: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4242,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the unit of measuerment of the product category code \"Herbs\"?",
            "Return the unit of measure for 'Herb' products.",
            "What is the measuring unit for the product category identified as \"Herbs\"?",
            "Provide the unit of measurement corresponding to 'Herb' category products.",
            "Can you tell me the unit of measure associated with the \"Herbs\" product category?"
        ],
        "ref_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $match: {\n      product_category_code: \"Herbs\"\n    }\n  },\n  {\n    $project: {\n      unit_of_measure: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2181,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the average credit score of the customers who do not have any loan.",
            "What is the average credit score for customers who have never taken a loan?",
            "Calculate the average credit score of customers without any loans.",
            "What is the mean credit score for customers who have not taken out a loan?",
            "Determine the average credit rating of those customers who do not currently have a loan."
        ],
        "ref_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $project: {\n      credit_score: \"$customer.credit_score\",\n      has_loan: {\n        $cond: {\n          if: {\n            $eq: [\n              {\n                $size: \"$customer.loan\"\n              },\n              0\n            ]\n          },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      has_loan: 1\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_credit_score: {\n        $avg: \"$credit_score\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_credit_score: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1005,
        "db_id": "car_1",
        "nl_queries": [
            "Which makers designed more than 3 car models? List full name and the id.",
            "What are the names and ids of all makers with more than 3 models?",
            "Who are the manufacturers that have created over three different car models? Please provide their full names and IDs.",
            "Can you list the names and IDs of car makers that offer more than three models?",
            "Identify the car manufacturers with a model range exceeding three. Include their full names and identifiers."
        ],
        "ref_sql": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $project: {\n      FullName: \"$countries.car_makers.FullName\",\n      Id: \"$countries.car_makers.Id\",\n      count_model_list: {\n        $size: \"$countries.car_makers.model_list\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_model_list: {\n        $gt: 3\n      }\n    }\n  },\n  {\n    $project: {\n      FullName: 1,\n      Id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2010,
        "db_id": "body_builder",
        "nl_queries": [
            "List the total scores of body builders in ascending order.",
            "Provide a sorted list of body builders' total scores, starting from the lowest.",
            "Show the total scores of body builders arranged in ascending order.",
            "Display the total results of body builders in an ascending sequence.",
            "Retrieve the total scores of body builders ordered from the smallest to the largest."
        ],
        "ref_sql": "SELECT Total FROM body_builder ORDER BY Total ASC",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$body_builder\" },\n  { $sort: { \"body_builder.Total\": 1 } },\n  { $project: { \"Total\": \"$body_builder.Total\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2249,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the start dates and end dates of all the apartment bookings.",
            "What are the start date and end date of each apartment booking?",
            "Provide the start and end dates for all bookings of apartments.",
            "List the beginning and concluding dates of each apartment rental booking.",
            "What are the check-in and check-out dates associated with the apartment bookings?"
        ],
        "ref_sql": "SELECT booking_start_date , booking_end_date FROM Apartment_Bookings",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $project: {\n      booking_start_date: \"$Apartments.Apartment_Bookings.booking_start_date\",\n      booking_end_date: \"$Apartments.Apartment_Bookings.booking_end_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2197,
        "db_id": "battle_death",
        "nl_queries": [
            "What is the average number of injuries caused each time?",
            "What is the average count of injuries reported in battles?",
            "Can you provide the average number of injuries occurring in each battle?",
            "How many injuries, on average, are recorded for each battle situation?",
            "What is the mean number of injured individuals documented per battle?"
        ],
        "ref_sql": "SELECT avg(injured) FROM death",
        "MQL": "db.battle.aggregate([\n  {\n    $unwind: \"$ship\"\n  },\n  {\n    $unwind: \"$ship.death\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_injured: { $avg: \"$ship.death.injured\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_injured: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1658,
        "db_id": "school_finance",
        "nl_queries": [
            "Find the names of schools that have more than one donator with donation amount above 8.5.",
            "List the names of schools that receive multiple donations Greater than 8.5 from different donators.",
            "Identify schools that have more than one donor whose contributions exceed 8.5.",
            "Retrieve the names of educational institutions with multiple funders donating amounts above 8.5.",
            "Find schools with at least two different donors who have contributed more than 8.5."
        ],
        "ref_sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING count(*) > 1",
        "MQL": "db.School.aggregate([\n  {\n    $unwind: \"$endowment\"\n  },\n  {\n    $match: {\n      \"endowment.amount\": { $gt: 8.5 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$School_name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      School_name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1404,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
            "What are the names of the races held after 2017 in Spain?",
            "List the names of races that took place in Spain after the year 2017.",
            "Can you provide the names of the races conducted in Spain following 2017?",
            "What are the titles of races held in Spain post-2017?"
        ],
        "ref_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "MQL": "db.circuits.aggregate([\n  {\n    $match: {\n      country: \"Spain\"\n    }\n  },\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      \"races.year\": { $gt: 2017 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$races.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 268,
        "db_id": "department_store",
        "nl_queries": [
            "Find the names of customers who have bought by at least three distinct products.",
            "What are the distinct names of customers who have purchased at least three different products?",
            "List the names of customers who have purchased at least three different products.",
            "Identify customers who have bought three or more distinct items and provide their names.",
            "Who are the customers that have made purchases of three or more unique products?"
        ],
        "ref_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id) >= 3",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      customer_name: { $first: \"$customer_name\" },\n      distinct_products: { $addToSet: \"$Customer_Orders.Order_Items.product_id\" }\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      count_distinct_products: { $size: \"$distinct_products\" }\n    }\n  },\n  {\n    $match: {\n      count_distinct_products: { $gte: 3 }\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2375,
        "db_id": "movie_1",
        "nl_queries": [
            "How many movie reviews does each director get?",
            "For each director, how many reviews have they received?",
            "What is the total number of reviews for each film director?",
            "Can you provide the review count for every director?",
            "How many reviews does each filmmaker have?"
        ],
        "ref_sql": "SELECT count(*) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
        "MQL": "db.Movie.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: \"$director\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      director: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1648,
        "db_id": "phone_market",
        "nl_queries": [
            "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
            "List the names of mobile phones that have more than 2000 units in total stock, ordered by stock quantity from highest to lowest.",
            "Display the names of phones with a combined stock exceeding 2000, arranged in descending order based on their total stock.",
            "Provide the names of phones where the total stock is greater than 2000, sorted in decreasing order of stock count.",
            "Retrieve the names of phones that possess a total stock of over 2000, listed in order from the highest stock level to the lowest."
        ],
        "ref_sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock) >= 2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "MQL": "db.phone.aggregate([\n  \n  { $unwind: \"$phone_market\" },\n  \n  \n  {\n    $group: {\n      _id: { Phone_ID: \"$Phone_ID\", Name: \"$Name\" },\n      total_stock: { $sum: \"$phone_market.Num_of_stock\" }\n    }\n  },\n  \n  \n  { $match: { total_stock: { $gt: 2000 } } },\n  \n  \n  { $sort: { total_stock: -1 } },\n  \n  \n  { $project: { _id: 0, Name: \"$_id.Name\" } }\n]);\n"
    },
    {
        "record_id": 2701,
        "db_id": "icfp_1",
        "nl_queries": [
            "How many institutions are there?",
            "Count the number of institutions.",
            "What is the total number of institutions in the database?",
            "Can you provide the count of all institutions?",
            "How many different institutions are recorded?"
        ],
        "ref_sql": "SELECT count(*) FROM inst",
        "MQL": "db.Inst.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2071,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
            "What are the top three apartment types in terms of the average room count? Give me the",
            "List the three apartment type codes with the highest average room count, sorted from most to least.",
            "What are the three apartment types that have the greatest average number of rooms? Please provide the details.",
            "Can you show me the top three apartment types based on average room count, listed in descending order?"
        ],
        "ref_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $group: {\n      _id: \"$Apartments.apt_type_code\",\n      average_room_count: {\n        $avg: {\n          $convert: {\n            input: \"$Apartments.room_count\",\n            to: \"int\"\n          }\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      average_room_count: -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      _id: 0,\n      apt_type_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3678,
        "db_id": "swimming",
        "nl_queries": [
            "Find the name of the stadium that has the maximum capacity.",
            "What is the name of the stadium that offers the largest seating capacity?",
            "Identify the stadium with the highest capacity and provide its name.",
            "Which stadium has the greatest capacity, and what is its name?",
            "Can you tell me the name of the stadium that accommodates the most people?"
        ],
        "ref_sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
        "MQL": "db.stadium.aggregate([\n  {\n    $project: {\n      name: 1,\n      Capacity: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: { Capacity: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 89,
        "db_id": "railway",
        "nl_queries": [
            "Show the most common builder of railways.",
            "Identify the builder that has constructed the highest number of railways.",
            "Who is the most frequent builder of the railway systems?",
            "What builder contributes the most to railway constructions?",
            "Find the builder responsible for the largest number of railways built."
        ],
        "ref_sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.railway.aggregate([\n  { $group: { _id: \"$Builder\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, Builder: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 373,
        "db_id": "theme_gallery",
        "nl_queries": [
            "What are all distinct country for artists?",
            "Return the different countries for artists.",
            "List all unique countries represented by the artists.",
            "Provide a collection of distinct countries where the artists are from.",
            "What are the various countries associated with the artists?"
        ],
        "ref_sql": "SELECT DISTINCT country FROM artist",
        "MQL": "db.artist.aggregate([\n  {\n    $group: {\n      _id: \"$Country\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3305,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
            "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
            "List the station IDs for stations situated at a latitude greater than 37.4 that have always had 7 or more bikes available.",
            "Retrieve the IDs of all bike stations where the latitude exceeds 37.4 and that have not recorded bike availability below 7 at any time.",
            "Identify the station IDs of locations with a latitude above 37.4 that have consistently maintained an availability of at least 7 bikes."
        ],
        "ref_sql": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      lat: { $gt: 37.4 }\n    }\n  },\n  {\n    $project: {\n      id: 1,\n      has_low_bikes: {\n        $gte: [\n          { $size: { $filter: { input: \"$status\", as: \"status\", cond: { $lt: [\"$$status.bikes_available\", 7] } } } },\n          1\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      has_low_bikes: false\n    }\n  },\n  {\n    $project: {\n      id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2891,
        "db_id": "game_1",
        "nl_queries": [
            "How many video game types exist?",
            "What is the count of different game types?",
            "What is the total number of distinct types of video games?",
            "How many different categories of video games are there?",
            "Can you tell me the number of unique game types available?"
        ],
        "ref_sql": "SELECT count(DISTINCT gtype) FROM Video_games",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $group: {\n      _id: \"$GType\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_gtype\"\n  }\n]);\n"
    },
    {
        "record_id": 3756,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Which payment method is used by most customers?",
            "Find the payment method that is used most frequently.",
            "What is the most popular payment method among customers?",
            "Identify the payment method that the majority of customers prefer.",
            "Which payment option do most customers utilize?"
        ],
        "ref_sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$payment_method\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      payment_method: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 586,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "What is the location of the festival with the largest number of audience?",
            "Where is the festival that attracted the most audience?",
            "What is the venue of the festival with the highest attendance?",
            "Can you tell me the location of the festival that had the greatest number of attendees?",
            "Which site hosted the festival with the largest audience turnout?"
        ],
        "ref_sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "MQL": "db.festival_detail.aggregate([\n  { $sort: { \"Num_of_Audience\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Location\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 381,
        "db_id": "school_finance",
        "nl_queries": [
            "Show all donor names.",
            "Retrieve the names of all donors.",
            "List every donor's name.",
            "Provide the names of all individuals who have donated.",
            "Show the names of every person who donated money to the school."
        ],
        "ref_sql": "SELECT DISTINCT donator_name FROM endowment",
        "MQL": "db.School.aggregate([\n  { $unwind: \"$endowment\" },\n  { $project: { \"_id\": 0, \"donator_name\": \"$endowment.donator_name\" } }\n]);\n"
    },
    {
        "record_id": 1952,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
            "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
            "Identify the scientists who have participated in both projects titled 'Matter of Time' and 'A Puzzling Parallax'.",
            "Who are the scientists that worked on the projects named 'Matter of Time' and 'A Puzzling Parallax'?",
            "List the names of scientists involved in both 'Matter of Time' and 'A Puzzling Parallax' projects."
        ],
        "ref_sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
        "MQL": "db.Scientists.aggregate([\n  {\n    $lookup: {\n      from: \"Projects\",\n      localField: \"AssignedTo.Project\",\n      foreignField: \"Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Name\": {\n        $all: [\"Matter of Time\", \"A Puzzling Parallax\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3492,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "Retrieve the names, ages, and weights of all dogs that have been marked as abandoned.",
            "Can you provide the names, ages, and weights of the dogs that were abandoned? (Remember, 1 indicates abandonment.)",
            "What are the names, ages, and weights of the dogs flagged as abandoned (where 1 signifies yes)?"
        ],
        "ref_sql": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $match: {\n      \"Dogs.abandoned_yn\": \"1\"\n    }\n  },\n  {\n    $project: {\n      name: \"$Dogs.name\",\n      age: \"$Dogs.age\",\n      weight: \"$Dogs.weight\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2904,
        "db_id": "e_government",
        "nl_queries": [
            "How many distinct payment methods are used by parties?",
            "Count the number of different payment method codes used by parties.",
            "What is the total number of unique payment methods employed by parties?",
            "How many different types of payment methods are registered for parties?",
            "Determine the count of various payment method codes that parties have used."
        ],
        "ref_sql": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "MQL": "db.Parties.aggregate([\n  {\n    $group: {\n      _id: \"$payment_method_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_payment_method_code: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_payment_method_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3413,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "When is the last day any resident moved in?",
            "What is the most recent move-in date for any resident?",
            "On what date did the last resident move into a property?",
            "What is the last recorded date when a resident moved in?",
            "Can you tell me the latest date any resident has moved in?"
        ],
        "ref_sql": "SELECT max(date_moved_in) FROM Residents",
        "MQL": "db.Properties.aggregate([\n  { $unwind: \"$Residents\" },\n  { $group: {\n      _id: null,\n      max_date_moved_in: { $max: \"$Residents.date_moved_in\" }\n    }\n  },\n  { $project: { _id: 0, max_date_moved_in: 1 } }\n]);\n"
    },
    {
        "record_id": 2367,
        "db_id": "world_1",
        "nl_queries": [
            "Find the number of cities in each district whose population is greater than the average population of cities?",
            "How many cities in each district have a population that is above the average population across all cities?",
            "How many cities are there in each district with populations surpassing the average city population?",
            "Count the cities in every district that have a population exceeding the average population of all cities.",
            "What is the number of cities per district whose populations are above the average population of cities?"
        ],
        "ref_sql": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
        "MQL": "db.country.aggregate([\n  \n  { $unwind: \"$city\" },\n  \n  \n  {\n    $group: {\n      _id: null,\n      avg_Population: { $avg: \"$city.Population\" }\n    }\n  },\n  \n  \n  {\n    $addFields: {\n      avg_Population: \"$avg_Population\"\n    }\n  },\n  \n  \n  {\n    $lookup: {\n      from: \"country\",\n      let: { avg_Population: \"$avg_Population\" },\n      pipeline: [\n        { $unwind: \"$city\" },\n        {\n          $match: {\n            $expr: { $gt: [\"$city.Population\", \"$$avg_Population\"] }\n          }\n        },\n        {\n          $group: {\n            _id: \"$city.District\",\n            count: { $sum: 1 }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      District: \"$Docs1._id\",\n      count: \"$Docs1.count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 904,
        "db_id": "farm",
        "nl_queries": [
            "List the most common type of Status across cities.",
            "What is the most common status across all cities?",
            "Identify the status that appears most frequently among cities.",
            "Which status is the most prevalent across all the cities?",
            "What is the predominant status in the cities?"
        ],
        "ref_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $group: {\n      _id: \"$Status\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Status: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3090,
        "db_id": "movie_1",
        "nl_queries": [
            "What are the names of the directors who made exactly one movie?",
            "What are the names of all directors who made one movie?",
            "List the names of directors who have only directed a single film.",
            "Provide the names of all directors with precisely one movie to their credit.",
            "Who are the directors that produced exactly one movie?"
        ],
        "ref_sql": "SELECT director FROM Movie GROUP BY director HAVING count(*) = 1",
        "MQL": "db.Movie.aggregate([\n  {\n    $group: {\n      _id: \"$director\",\n      movieCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      movieCount: 1\n    }\n  },\n  {\n    $project: {\n      director: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1564,
        "db_id": "election",
        "nl_queries": [
            "Show the delegates and the names of county they belong to.",
            "What are the delegate and name of the county they belong to, for each county?",
            "List the names of counties along with their corresponding delegates.",
            "For each county, provide the delegate's name together with the county's name.",
            "Display the delegates along with the names of the counties they are affiliated with."
        ],
        "ref_sql": "SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District",
        "MQL": "db.county.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $project: {\n      Delegate: \"$election.Delegate\",\n      County_name: \"$County_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1084,
        "db_id": "farm",
        "nl_queries": [
            "Show the status of the city that has hosted the greatest number of competitions.",
            "What is the status of the city that has hosted the most competitions?",
            "What is the status of the city that hosted the largest number of competitions?",
            "Identify the status of the city with the highest number of hosted competitions.",
            "Provide the status for the city known for hosting the most competitions."
        ],
        "ref_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$farm_competition\"\n  },\n  {\n    $group: {\n      _id: \"$City_ID\",\n      count: { $sum: 1 },\n      status: { $first: \"$Status\" }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Status: \"$status\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3345,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "List all location codes and location names.",
            "What are all the location codes and location names?",
            "Provide a complete list of location codes along with their names.",
            "Show me all the location codes and their corresponding location names.",
            "Display every location code together with its associated location name."
        ],
        "ref_sql": "SELECT location_code , location_name FROM Ref_locations",
        "MQL": "db.Ref_Locations.find({}, { Location_Code: 1, Location_Name: 1, _id: 0 })\n"
    },
    {
        "record_id": 812,
        "db_id": "insurance_policies",
        "nl_queries": [
            "List the method, date and amount of all the payments, in ascending order of date.",
            "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
            "Provide a list of all payments, including the method, date, and amount, sorted by date in ascending order.",
            "What payment methods, dates, and amounts are there? Please arrange this information in ascending order of the payment date.",
            "Display the payment method, date, and amount for each transaction, organized by date from earliest to latest."
        ],
        "ref_sql": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements.Payments\"\n  },\n  {\n    $project: {\n      Payment_Method_Code: \"$Customer_Policies.Claims.Settlements.Payments.Payment_Method_Code\",\n      Date_Payment_Made: \"$Customer_Policies.Claims.Settlements.Payments.Date_Payment_Made\",\n      Amount_Payment: \"$Customer_Policies.Claims.Settlements.Payments.Amount_Payment\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Date_Payment_Made: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3034,
        "db_id": "bike_1",
        "nl_queries": [
            "In zip code 94107, on which day neither Fog nor Rain was not observed?",
            "On which day has it neither been foggy nor rained in the zip code of 94107?",
            "What dates in zip code 94107 did not experience any fog or rain?",
            "Which days in the 94107 area had neither foggy conditions nor rain?",
            "List the dates in zip code 94107 when fog and rain were both absent."
        ],
        "ref_sql": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "MQL": "db.weather.aggregate([\n  {\n    $match: {\n      zip_code: 94107,\n      $and: [\n        { events: { $nin: [\"Fog\", \"Rain\"] } }\n      ]\n    }\n  },\n  {\n    $project: {\n      date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2828,
        "db_id": "program_share",
        "nl_queries": [
            "what is the number of different channel owners?",
            "Count the number of distinct channel owners.",
            "How many unique owners are there for the channels?",
            "What is the total count of distinct owners of the channels?",
            "Determine the number of unique channel owners."
        ],
        "ref_sql": "SELECT count(DISTINCT OWNER) FROM channel",
        "MQL": "db.channel.aggregate([\n  {\n    $group: {\n      _id: \"$Owner\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_OWNER\"\n  }\n]);\n"
    },
    {
        "record_id": 2680,
        "db_id": "college_1",
        "nl_queries": [
            "Find the total number of employees.",
            "How many employees are there all together?",
            "How many employees are there?",
            "Count the number of employees",
            "What is the overall employee headcount?"
        ],
        "ref_sql": "SELECT count(*) FROM employee",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1568,
        "db_id": "tvshow",
        "nl_queries": [
            "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\".",
            "What is the episode for the TV series named \"Sky Radio\"?",
            "Can you provide the list of episodes for the TV series called \"Sky Radio\"?",
            "Retrieve the episodes associated with the series titled \"Sky Radio\".",
            "What episodes are available for the TV show named \"Sky Radio\"?"
        ],
        "ref_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $match: {\n      series_name: \"Sky Radio\"\n    }\n  },\n  {\n    $unwind: \"$TV_series\"\n  },\n  {\n    $project: {\n      Episode: \"$TV_series.Episode\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 861,
        "db_id": "orchestra",
        "nl_queries": [
            "List the record company shared by the most number of orchestras.",
            "What is the record company used by the greatest number of orchestras?",
            "Identify the record label that has the highest number of orchestras associated with it.",
            "Which record company is linked to the largest number of orchestras?",
            "Name the record organization that supports the most orchestras."
        ],
        "ref_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $group: {\n      _id: \"$orchestra.Record_Company\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Record_Company: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2816,
        "db_id": "activity_1",
        "nl_queries": [
            "How many faculty members participate in an activity?",
            "Give me the number of faculty members who participate in an activity",
            "What is the total number of faculty involved in activities?",
            "Can you tell me how many different faculty members take part in an activity?",
            "How many unique faculty participants are there in the activities?"
        ],
        "ref_sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "MQL": "db.Activity.aggregate([\n  {\n    $unwind: \"$Faculty_Participates_in\"\n  },\n  {\n    $group: {\n      _id: null,\n      distinctFacIDs: { $addToSet: \"$Faculty_Participates_in.FacID\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_FacID: { $size: \"$distinctFacIDs\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1770,
        "db_id": "game_1",
        "nl_queries": [
            "Find the last and first name of students who are playing Football or Lacrosse.",
            "What is the first and last name of all students who play Football or Lacrosse?",
            "List the first and last names of students who are involved in Football or Lacrosse.",
            "Provide the first and last names of all students who participate in Football or Lacrosse.",
            "Retrieve the names (first and last) of students engaged in either Football or Lacrosse."
        ],
        "ref_sql": "SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = \"Football\" OR T1.SportName = \"Lacrosse\"",
        "MQL": "db.Student.find(\n  {\n    SportsInfo: {\n      $elemMatch: {\n        SportName: { $in: [\"Football\", \"Lacrosse\"] }\n      }\n    }\n  },\n  {\n    LName: 1,\n    Fname: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2123,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the average price of each manufacturer's products, showing the manufacturer's name.",
            "What are the average prices of products, grouped by manufacturer name?",
            "What is the average price of products for each manufacturer along with their names?",
            "Retrieve the average product prices, categorized by the names of the manufacturers.",
            "Show the average price for products from each manufacturer, including the corresponding manufacturer names."
        ],
        "ref_sql": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      avg_Price: { $avg: \"$Products.Price\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\",\n      avg_Price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2275,
        "db_id": "csu_1",
        "nl_queries": [
            "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
            "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
            "List the campuses situated in either Northridge, Los Angeles or San Francisco, San Francisco.",
            "Which campuses can be found in Northridge, Los Angeles or in San Francisco, San Francisco?",
            "Identify the names of campuses located in either Northridge, Los Angeles or San Francisco, San Francisco."
        ],
        "ref_sql": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
        "MQL": "db.Campuses.find(\n  {\n    $or: [\n      { $and: [{ Location: \"Northridge\" }, { County: \"Los Angeles\" }] },\n      { $and: [{ Location: \"San Francisco\" }, { County: \"San Francisco\" }] }\n    ]\n  },\n  {\n    _id: 0,\n    Campus: 1\n  }\n);\n"
    },
    {
        "record_id": 215,
        "db_id": "race_track",
        "nl_queries": [
            "What are distinct locations where tracks are located?",
            "Give the different locations of tracks.",
            "List all unique locations where race tracks are situated.",
            "Show the various locations of the race tracks.",
            "Identify the distinct places in which tracks are found."
        ],
        "ref_sql": "SELECT DISTINCT LOCATION FROM track",
        "MQL": "db.track.aggregate([\n  {\n    $group: {\n      _id: \"$Location\"\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2420,
        "db_id": "music_1",
        "nl_queries": [
            "What is the number of artists for each gender?",
            "How many artists are male and how many are female?",
            "How many artists are there for each gender?",
            "Can you provide the total number of male artists and female artists?",
            "What is the count of artists grouped by their gender classification?"
        ],
        "ref_sql": "SELECT count(*) , gender FROM artist GROUP BY gender",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $group: {\n      _id: \"$artist.gender\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      gender: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1108,
        "db_id": "department_store",
        "nl_queries": [
            "Return the address of customer 10.",
            "What is the address for the customer with id 10?",
            "What is the address of the customer with the ID of 10?",
            "Can you provide the address details for customer number 10?",
            "Please return the address information for the customer whose ID is 10."
        ],
        "ref_sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_id: 10\n    }\n  },\n  {\n    $unwind: \"$Customer_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      address_details: \"$Docs1.address_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 952,
        "db_id": "flight_2",
        "nl_queries": [
            "What are airlines that have some flight departing from airport 'AHD'?",
            "Which airlines have a flight with source airport AHD?",
            "Which airlines operate flights that depart from the airport identified as 'AHD'?",
            "List the airlines that provide service for flights leaving from airport AHD.",
            "What airlines offer flights originating from the AHD airport?"
        ],
        "ref_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
        "MQL": "db.airports.find(\n  {\n    flights: {\n      $elemMatch: {\n        SourceAirport: \"AHD\"\n      }\n    }\n  },\n  {\n    \"flights.Airline\": 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 1670,
        "db_id": "singer",
        "nl_queries": [
            "Show titles of songs and names of singers.",
            "What are the song titles and singer names?",
            "List the names of singers along with their song titles.",
            "Can you provide the song titles together with the names of the singers?",
            "Display the titles of the songs and the corresponding singers' names."
        ],
        "ref_sql": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "MQL": "db.singer.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $project: {\n      Title: \"$song.Title\",\n      Name: \"$Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1877,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
            "For each director, what is the title and score of their most poorly rated movie?",
            "Retrieve the titles and ratings of the least-rated movies for each director.",
            "What are the titles and scores of the films with the lowest ratings directed by each filmmaker?",
            "List the title and rating of the lowest-rated movie for each director in the dataset."
        ],
        "ref_sql": "SELECT T2.title , T1.stars , T2.director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director",
        "MQL": "db.Movie.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: {\n        director: \"$director\",\n        mID: \"$mID\",\n        title: \"$title\"\n      },\n      minStars: { $min: \"$Rating.stars\" }\n    }\n  },\n  {\n    $sort: {\n      \"_id.director\": 1,\n      minStars: 1\n    }\n  },\n  {\n    $group: {\n      _id: \"$_id.director\",\n      title: { $first: \"$_id.title\" },\n      stars: { $first: \"$minStars\" },\n      director: { $first: \"$_id.director\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1,\n      stars: 1,\n      director: 1,\n      \"min_Rating_stars\": \"$stars\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2898,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the number of distinct projects.",
            "How many different projects are there?",
            "How many unique projects are represented in the database?",
            "What is the total count of distinct projects?",
            "Can you tell me the number of different projects available?"
        ],
        "ref_sql": "SELECT count(DISTINCT name) FROM projects",
        "MQL": "db.Projects.aggregate([\n  {\n    $group: {\n      _id: \"$Code\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_name\"\n  }\n]);\n"
    },
    {
        "record_id": 658,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the names of representatives whose party is not \"Republican\"?",
            "List the names of representatives who are not affiliated with the Republican Party.",
            "Can you provide the names of representatives that belong to parties other than \"Republican\"?",
            "What names do representatives hold if their party is anything but \"Republican\"?",
            "Show me the names of representatives from parties that are not \"Republican\"."
        ],
        "ref_sql": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
        "MQL": "db.representative.find({\n  \"Party\": { $ne: \"Republican\" }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 824,
        "db_id": "riding_club",
        "nl_queries": [
            "List the names of players in ascending order of votes.",
            "Provide a list of player names sorted by their votes in increasing order.",
            "Show the names of players arranged in ascending order according to their total votes.",
            "Retrieve the names of the players and display them sorted by the number of votes they have received, starting from the lowest.",
            "Generate a list of player names ordered from the lowest to the highest number of votes."
        ],
        "ref_sql": "SELECT Player_name FROM player ORDER BY Votes ASC",
        "MQL": "db.player.find({}, { \"Player_name\": 1, \"_id\": 0 }).sort({ \"Votes\": 1 });\n"
    },
    {
        "record_id": 4068,
        "db_id": "city_record",
        "nl_queries": [
            "What are the GDP and population of the city that already served as a host more than once?",
            "Which cities have served as host cities more than once? Return me their GDP and population.",
            "Which cities have hosted events on multiple occasions? Please provide their GDP and regional population figures.",
            "Can you tell me the GDP and population of cities that have acted as host venues more than once?",
            "What are the GDP and regional population statistics for cities that have hosted matches more than once?"
        ],
        "ref_sql": "SELECT t1.gdp , t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.Host_City HAVING count(*) > 1",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$hosting_city\"\n  },\n  {\n    $group: {\n      _id: \"$City_ID\",\n      City: { $first: \"$City\" },\n      GDP: { $first: \"$GDP\" },\n      Regional_Population: { $first: \"$Regional_Population\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      GDP: 1,\n      Regional_Population: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1505,
        "db_id": "student_assessment",
        "nl_queries": [
            "What are the ids of all students for courses and what are the names of those courses?",
            "Can you provide the IDs of all students along with the names of the courses they are registered in?",
            "What student IDs and corresponding course names can you list for all courses?",
            "Please list the student IDs associated with each course and the names of those courses.",
            "What are the student IDs for each course, and what are the names of those courses?"
        ],
        "ref_sql": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Student_Course_Registrations\"\n  },\n  {\n    $lookup: {\n      from: \"People\",\n      localField: \"Student_Course_Registrations.student_id\",\n      foreignField: \"Students.student_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      \"student_id\": \"$Student_Course_Registrations.student_id\",\n      \"course_name\": \"$course_name\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4276,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "Which dogs have incurred treatment costs of $1000 or less for their owner? Provide their names.",
            "List the names of dogs whose treatment expenses have remained under $1000 for their owners.",
            "Identify the dogs that have not required more than $1000 in treatment costs. What are their names?"
        ],
        "ref_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $unwind: {\n      path: \"$Dogs.Treatments\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: {\n        dog_id: \"$Dogs.dog_id\",\n        name: \"$Dogs.name\"\n      },\n      total_cost: {\n        $sum: {\n          $ifNull: [\"$Dogs.Treatments.cost_of_treatment\", 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      total_cost: { $lte: 1000 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4192,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Which template type code has most number of templates?",
            "Return the type code of the template type that the most templates belong to.",
            "What is the template type code that is associated with the highest number of templates?",
            "Identify the template type code that has the greatest number of templates linked to it.",
            "Which template type code corresponds to the largest quantity of templates?"
        ],
        "ref_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $group: {\n      _id: \"$Template_Type_Code\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Template_Type_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 564,
        "db_id": "world_1",
        "nl_queries": [
            "What is the language spoken by the largest percentage of people in each country?",
            "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "Which language has the highest percentage of speakers in each country?",
            "For each country, identify the language spoken by the most people and provide its country code.",
            "Can you list the country codes along with the languages that have the maximum percentage of speakers for all countries?"
        ],
        "ref_sql": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $sort: {\n      \"countrylanguage.CountryCode\": 1,\n      \"countrylanguage.Percentage\": -1\n    }\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.CountryCode\",\n      max_Percentage: { $first: \"$countrylanguage.Percentage\" },\n      language: { $first: \"$countrylanguage.Language\" }\n    }\n  },\n  {\n    $project: {\n      CountryCode: \"$_id\",\n      Language: \"$language\",\n      max_Percentage: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3942,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the capacity and gender type of the dorm whose name has substring ‘Donor’.",
            "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
            "Retrieve the gender type and capacity of the dorm that includes \"Donor\" in its name.",
            "Show the student capacity and the gender classification for the dorm with \"Donor\" in its name.",
            "What are the gender type and capacity for the dorm that has \"Donor\" as part of its name?"
        ],
        "ref_sql": "SELECT student_capacity , gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      dorm_name: {\n        $regex: \"Donor\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $project: {\n      student_capacity: 1,\n      gender: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 659,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the names of the tourist attractions that can be accessed by bus?",
            "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
            "Can you list the names of tourist attractions reachable by bus?",
            "What are the tourist attractions that can be accessed using a bus?",
            "Please provide the names of attractions that you can get to by bus."
        ],
        "ref_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\"",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $match: {\n      \"Tourist_Attractions.How_to_Get_There\": {\n        $regex: \"bus\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $project: {\n      Name: \"$Tourist_Attractions.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 284,
        "db_id": "battle_death",
        "nl_queries": [
            "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "Can you list the ids and names of battles where any 'Brig' type ships were lost?",
            "What are the ids and names of the battles in which 'Brig' ships sustained losses?",
            "Show me the different ids and names of battles that involved losses of ship type 'Brig'.",
            "What ids and names correspond to battles that had any losses of 'Brig' ships?"
        ],
        "ref_sql": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
        "MQL": "db.battle.find({\n  \"ship\": {\n    \"$elemMatch\": {\n      \"ship_type\": \"Brig\",\n      \"lost_in_battle\": { \"$gt\": 0 }\n    }\n  }\n}, { \"id\": 1, \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3515,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the name and email of the user followed by the least number of people.",
            "Retrieve the name and email of the user with the smallest number of followers.",
            "What are the name and email of the individual who is followed by the fewest accounts?",
            "Show the name and email of the user who has the least following.",
            "Provide the name and email of the user that has the minimal follower count."
        ],
        "ref_sql": "SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1",
        "MQL": "db.user_profiles.aggregate([\n  {\n    $project: {\n      name: 1,\n      email: 1,\n      followers: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: { followers: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: 1,\n      email: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 777,
        "db_id": "railway",
        "nl_queries": [
            "List the object number of railways that do not have any trains.",
            "Retrieve the object numbers for railways that currently have no trains associated with them.",
            "Show the object numbers of railways lacking any trains in their records.",
            "Find the object numbers of railways that do not possess any trains.",
            "Display the object numbers corresponding to railways that do not have any trains registered."
        ],
        "ref_sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "MQL": "db.railway.find({\n  $or: [\n    { \"train\": { $exists: false } },\n    { \"train\": { $size: 0 } }\n  ]\n}, { \"ObjectNumber\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3237,
        "db_id": "company_1",
        "nl_queries": [
            "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
            "Provide the first and last names along with addresses of all employees, sorted by their birth dates from oldest to youngest.",
            "Fetch the first names, last names, and addresses of every employee in order of their birth dates, starting with the earliest.",
            "List all employees' first and last names and addresses, arranged in ascending order based on their birth dates.",
            "Display the first names, last names, and addresses of employees, sorted in increasing order by their birth date."
        ],
        "ref_sql": "SELECT fname , lname , address FROM employee ORDER BY Bdate",
        "MQL": "db.employee.find({}, { \"Fname\": 1, \"Lname\": 1, \"Address\": 1, \"_id\": 0 }).sort({ \"Bdate\": 1 });\n"
    },
    {
        "record_id": 277,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List the first name of all the professionals along with the description of the treatment they have done.",
            "What are each professional's first name and description of the treatment they have performed?",
            "Provide the first names of all professionals alongside the treatments they've administered.",
            "Can you list each professional's first name along with the descriptions of the treatments they have completed?",
            "Show the first names of professionals and the respective treatment descriptions they have performed."
        ],
        "ref_sql": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "MQL": "db.Professionals.aggregate([\n  {\n    $unwind: \"$Treatments\"\n  },\n  {\n    $lookup: {\n      from: \"Treatment_Types\",\n      localField: \"Treatments.treatment_type_code\",\n      foreignField: \"treatment_type_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      first_name: 1,\n      treatment_type_description: \"$Docs1.treatment_type_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2918,
        "db_id": "tvshow",
        "nl_queries": [
            "List the number of different series names and contents in the TV Channel table.",
            "How many different series and contents are listed in the TV Channel table?",
            "What is the total count of unique series names and content types available in the TV Channel database?",
            "How many unique titles and different content categories exist in the TV Channel dataset?",
            "Provide the number of distinct series and content entries present in the TV Channel records."
        ],
        "ref_sql": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_series_name: { $addToSet: \"$series_name\" },\n      count_DISTINCT_content: { $addToSet: \"$Content\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_series_name: { $size: \"$count_DISTINCT_series_name\" },\n      count_DISTINCT_content: { $size: \"$count_DISTINCT_content\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2542,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many players have more than 1000 hours of training?",
            "How many different players trained for more than 1000 hours?",
            "What is the total number of players with training hours exceeding 1000?",
            "Count the players who have logged more than 1000 hours of training.",
            "How many players qualified with over 1000 hours of training experience?"
        ],
        "ref_sql": "SELECT count(*) FROM Player WHERE HS > 1000",
        "MQL": "db.Player.aggregate([\n  {\n    $match: {\n      HS: { $gt: 1000 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2418,
        "db_id": "music_1",
        "nl_queries": [
            "For each file format, return the number of artists who released songs in that format.",
            "How many songs were released for each format?",
            "List the number of distinct artists who have released songs in each file format.",
            "What is the total number of songs available for each file format?",
            "Show how many artists created songs for each specific format of music file."
        ],
        "ref_sql": "SELECT count(*) , formats FROM files GROUP BY formats",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $group: {\n      _id: \"$artist.files.formats\",\n      artist_count: {\n        $addToSet: \"$artist.artist_name\"\n      },\n      song_count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$artist_count\"\n      },\n      formats: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3329,
        "db_id": "music_1",
        "nl_queries": [
            "What is the language used most often in the songs?",
            "What are the languages that are used most often in songs?",
            "Which language is represented the most in the song collection?",
            "Identify the language that appears most frequently in the songs.",
            "What is the most common language found in the songs?"
        ],
        "ref_sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $group: {\n      _id: \"$song.languages\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      languages: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3636,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
            "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?",
            "List the names of manufacturers that have a revenue lower than any company based in Austin.",
            "Which companies have revenues that fall below the minimum revenue of manufacturers located in Austin?",
            "Identify the names of companies whose revenue is less than the lowest revenue among Austin manufacturers."
        ],
        "ref_sql": "SELECT name FROM manufacturers WHERE revenue < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      Headquarter: \"Austin\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      min_Revenue: { $min: \"$Revenue\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Manufacturers\",\n      let: { min_Revenue: \"$min_Revenue\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $lt: [\"$Revenue\", \"$$min_Revenue\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            Name: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: \"$Docs1.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1830,
        "db_id": "train_station",
        "nl_queries": [
            "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
            "Which stations provide services for both the \"Ananthapuri Express\" and the \"Guruvayur Express\" trains?",
            "Can you list the names of stations that accommodate both the \"Ananthapuri Express\" and \"Guruvayur Express\"?",
            "Identify the stations that serve the \"Ananthapuri Express\" in addition to the \"Guruvayur Express\".",
            "What are the names of the stations that operate both the \"Ananthapuri Express\" and the \"Guruvayur Express\" trains?"
        ],
        "ref_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Guruvayur Express\"",
        "MQL": "db.station.find({\n  \"train_station.Train_ID\": { $all: [1, 2] }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1183,
        "db_id": "loan_1",
        "nl_queries": [
            "List the name of all different customers who have some loan sorted by their total loan amount.",
            "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
            "Provide the names of distinct customers who have loans, arranged by their total loan amounts in descending order.",
            "Show the names of all unique borrowers with loans, sorted by the total value of their loans.",
            "List all different customers that have taken out loans, organized by the total amount they owe on those loans."
        ],
        "ref_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $unwind: \"$customer.loan\"\n  },\n  {\n    $group: {\n      _id: \"$customer.cust_name\",\n      total_loan_amount: {\n        $sum: \"$customer.loan.amount\"\n      }\n    }\n  },\n  {\n    $sort: {\n      total_loan_amount: -1\n    }\n  },\n  {\n    $project: {\n      cust_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 624,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the description of the marketing region China?",
            "Find the marketing region description of China?",
            "Can you provide the description for the marketing region called China?",
            "What is the description pertaining to the marketing region of China?",
            "Tell me the details about the marketing region named China."
        ],
        "ref_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = \"China\"",
        "MQL": "db.Marketing_Regions.aggregate([\n  {\n    $match: {\n      Marketing_Region_Name: \"China\"\n    }\n  },\n  {\n    $project: {\n      Marketing_Region_Descriptrion: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 147,
        "db_id": "flight_2",
        "nl_queries": [
            "Which city and country is the Alton airport at?",
            "Give the city and country for the Alton airport.",
            "What city and country is the Alton airport located in?",
            "Can you provide the city and country for the airport named Alton?",
            "Identify the city and country associated with the Alton airport."
        ],
        "ref_sql": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
        "MQL": "db.airports.find(\n  { AirportName: \"Alton\" },\n  { City: 1, Country: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 4034,
        "db_id": "shop_membership",
        "nl_queries": [
            "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
            "How many total pounds were purchased in the year 2018 at all London branches?",
            "What is the total amount in pounds spent on purchases at all London branches during the year 2018?",
            "How much was spent in total on purchases in London branches for the year 2018?",
            "Can you provide the total pounds of purchases made in 2018 across all branches located in London?"
        ],
        "ref_sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018",
        "MQL": "db.branch.aggregate([\n  {\n    $match: {\n      City: \"London\"\n    }\n  },\n  {\n    $unwind: \"$purchase\"\n  },\n  {\n    $match: {\n      \"purchase.Year\": \"2018\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_total_pounds: {\n        $sum: \"$purchase.Total_pounds\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_total_pounds: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4053,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the name of customers who are living in Colorado?",
            "What are the names of customers who live in Colorado state?",
            "List the names of customers who reside in the state of Colorado.",
            "Retrieve the customer names for those living in Colorado.",
            "What are the names of customers that have an address in Colorado?"
        ],
        "ref_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.state_province_county\": \"Colorado\"\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3112,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "Which document has the most draft copies? List its document id and number of draft copies.",
            "Which document has the highest number of draft copies? Please provide its document ID along with the count of draft copies.",
            "Identify the document that contains the most draft copies, including both its document ID and the number of copies.",
            "What document has the largest quantity of draft copies? List its document ID and the total count of draft copies.",
            "Find the document with the most copies of drafts. I would like to know its document ID and how many draft copies it has."
        ],
        "ref_sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: \"$Documents.Document_Drafts\"\n  },\n  {\n    $group: {\n      _id: \"$Documents.document_id\",\n      count_copy_number: { $sum: { $size: \"$Documents.Document_Drafts.Draft_Copies\" } }\n    },\n  },\n  {\n    $sort: { count_copy_number: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      document_id: \"$_id\",\n      count_copy_number: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2744,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "How many products have the characteristic named \"hot\"?",
            "Count the number of products with the 'hot' charactersitic.",
            "What is the total number of products that possess the characteristic known as \"hot\"?",
            "How many items feature the characteristic named \"hot\"?",
            "Determine the count of products that have the 'hot' characteristic."
        ],
        "ref_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\"",
        "MQL": "db.Ref_Characteristic_Types.aggregate([\n  {\n    $unwind: \"$Characteristics\"\n  },\n  {\n    $match: {\n      \"Characteristics.characteristic_name\": \"hot\"\n    }\n  },\n  {\n    $unwind: \"$Characteristics.Product_Characteristics\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2839,
        "db_id": "game_1",
        "nl_queries": [
            "How many students play sports?",
            "How many different students are involved in sports?",
            "What is the total number of students participating in sports?",
            "How many unique students are taking part in sports activities?",
            "Can you tell me how many distinct students are engaged in playing sports?"
        ],
        "ref_sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: \"$StuID\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_StuID: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_StuID: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 99,
        "db_id": "college_2",
        "nl_queries": [
            "Find the total number of instructors who teach a course in the Spring 2010 semester.",
            "How many instructors teach a course in the Spring of 2010?",
            "How many unique instructors taught courses in the Spring semester of 2010?",
            "What is the total count of instructors who were involved in teaching during Spring 2010?",
            "Count the number of distinct instructors that offered courses in the Spring semester of 2010."
        ],
        "ref_sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $match: {\n      \"course.section.semester\": \"Spring\",\n      \"course.section.year\": 2010\n    }\n  },\n  {\n    $unwind: \"$course.section.teaches\"\n  },\n  {\n    $group: {\n      _id: \"$course.section.teaches.ID\"\n    },\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT__DISTINCT_ID\": \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2397,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Find the number of members living in each address.",
            "How many members reside at each address?",
            "Count the number of members for every unique address.",
            "What is the member count per address across all locations?",
            "Determine the number of members living at each distinct address."
        ],
        "ref_sql": "SELECT count(*) , address FROM member GROUP BY address",
        "MQL": "db.member.aggregate([\n  {\n    $group: {\n      _id: \"$Address\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1,\n      Address: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2212,
        "db_id": "driving_school",
        "nl_queries": [
            "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
            "What is the average price for a lesson taught by Janessa Sawayn?",
            "What is the average cost of lessons conducted by Janessa Sawayn?",
            "How much does a lesson typically cost when taught by staff member Janessa Sawayn?",
            "Can you tell me the average lesson price provided by Janessa Sawayn?"
        ],
        "ref_sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $unwind: \"$Staff.Lessons\"\n  },\n  {\n    $group: {\n      _id: {\n        first_name: \"$Staff.first_name\",\n        last_name: \"$Staff.last_name\"\n      },\n      avg_price: {\n        $avg: \"$Staff.Lessons.price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1154,
        "db_id": "riding_club",
        "nl_queries": [
            "How many coaches does each club has? List the club id, name and the number of coaches.",
            "What is the total number of coaches for each club? Please provide the club ID, name, and coach count.",
            "For every club, how many coaches are there? Include the club ID, club name, and the number of coaches in your response.",
            "Can you list the number of coaches per club, along with their IDs and names?",
            "How many coaches are affiliated with each club? Show the club ID, its name, and the total count of coaches."
        ],
        "ref_sql": "SELECT T1.club_id , T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$coach\"\n  },\n  {\n    $group: {\n      _id: {\n        Club_ID: \"$Club_ID\",\n        Club_name: \"$Club_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Club_ID: \"$_id.Club_ID\",\n      Club_name: \"$_id.Club_name\",\n      count: 1\n    }\n  }\n])\n"
    },
    {
        "record_id": 4099,
        "db_id": "swimming",
        "nl_queries": [
            "Find the name of the swimmer who has at least 2 records.",
            "List the names of swimmers who have recorded at least two events.",
            "Identify swimmers with a minimum of two records and provide their names.",
            "Retrieve names of swimmers who possess two or more records in competitions.",
            "Show the names of swimmers that have participated in at least two swimming records."
        ],
        "ref_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*) >= 2",
        "MQL": "db.swimmer.aggregate([\n  {\n    $match: {\n      $expr: {\n        $gte: [{ $size: \"$record\" }, 2]\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1771,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the location name and code with the least documents.",
            "What are the name and code of the location with the smallest number of documents?",
            "Identify the location that has the fewest documents along with its name and code.",
            "Which location is associated with the least number of documents? Provide the name and code.",
            "Find the location name and code corresponding to the smallest document count."
        ],
        "ref_sql": "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Ref_Locations.aggregate([\n  {\n    $unwind: \"$Document_Locations\"\n  },\n  {\n    $group: {\n      _id: {\n        Location_Code: \"$Location_Code\",\n        Location_Name: \"$Location_Name\"\n      },\n      documentCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { documentCount: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Location_Code: \"$_id.Location_Code\",\n      Location_Name: \"$_id.Location_Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2730,
        "db_id": "perpetrator",
        "nl_queries": [
            "How many perpetrators are there?",
            "What is the total number of unique perpetrators?",
            "Can you tell me how many distinct perpetrators are there?",
            "How many individuals are classified as perpetrators?",
            "What’s the count of unique individuals identified as perpetrators?"
        ],
        "ref_sql": "SELECT count(*) FROM perpetrator",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $group: { _id: \"$perpetrator.Perpetrator_ID\" } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 3819,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What are the names and buying prices of all the products?",
            "Return the names and typical buying prices for all products.",
            "Can you list the product names along with their typical buying prices?",
            "Show me the names of all products and their respective buying prices.",
            "Provide the names and average buying prices for all available products."
        ],
        "ref_sql": "SELECT product_name , typical_buying_price FROM products",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      typical_buying_price: \"$Products.typical_buying_price\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2176,
        "db_id": "csu_1",
        "nl_queries": [
            "Find the average fee on a CSU campus in 1996",
            "What is the average fee for a CSU campus in the year of 1996?",
            "What is the average campus fee for CSU in 1996?",
            "Calculate the average fee charged on CSU campuses during the year 1996.",
            "Determine the mean campus fee for CSU in the year 1996."
        ],
        "ref_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$csu_fees\"\n  },\n  {\n    $match: {\n      \"csu_fees.Year\": 1996\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_campusfee: { $avg: \"$csu_fees.CampusFee\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_campusfee: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1240,
        "db_id": "formula_1",
        "nl_queries": [
            "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
            "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?",
            "Can you provide the id, first name, and last name of drivers who have secured the first position for lap times at least two times?",
            "Who are the drivers that achieved first place in lap times multiple times, along with their id, forename, and surname?",
            "List the driver IDs, forenames, and surnames of those who were ranked first in lap times on at least two occasions."
        ],
        "ref_sql": "SELECT T1.driverid , T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING count(*) >= 2",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: \"$lapTimes\"\n  },\n  {\n    $match: {\n      \"lapTimes.position\": 1\n    }\n  },\n  {\n    $group: {\n      _id: \"$driverId\",\n      forename: { $first: \"$forename\" },\n      surname: { $first: \"$surname\" },\n      lapTimeCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      lapTimeCount: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      driverId: \"$_id\",\n      forename: 1,\n      surname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3046,
        "db_id": "driving_school",
        "nl_queries": [
            "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
            "What is the date of birth for the staff member named Janessa Sawayn?",
            "Can you tell me the birth date of the staff member named Janessa Sawayn?",
            "What is Janessa Sawayn's date of birth?",
            "Please provide the birthday for the staff individual whose name is Janessa Sawayn."
        ],
        "ref_sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $project: {\n      date_of_birth: \"$Staff.date_of_birth\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1472,
        "db_id": "tvshow",
        "nl_queries": [
            "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "What are the names of the series and their respective countries for channels airing cartoons by both Ben Jones and Michael Chang?",
            "List the series names and countries of TV channels that feature cartoons directed by both Ben Jones and Michael Chang.",
            "Retrieve the series names and countries of all TV channels that broadcast cartoons from directors Ben Jones and Michael Chang."
        ],
        "ref_sql": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $match: {\n      \"Cartoon\": {\n        $all: [\n          { $elemMatch: { \"Directed_by\": \"Ben Jones\" } },\n          { $elemMatch: { \"Directed_by\": \"Michael Chang\" } }\n        ]\n      }\n    }\n  },\n  {\n    $project: {\n      series_name: 1,\n      Country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4246,
        "db_id": "driving_school",
        "nl_queries": [
            "List all vehicle id",
            "What are the ids of all vehicles?",
            "Retrieve all vehicle identifiers from the database.",
            "Show me the IDs for every vehicle available.",
            "What vehicle IDs do we have in the collection?"
        ],
        "ref_sql": "SELECT vehicle_id FROM Vehicles;",
        "MQL": "db.Vehicles.find({}, { vehicle_id: 1, _id: 0 });\n"
    },
    {
        "record_id": 333,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Find the semester when both Master students and Bachelor students got enrolled in.",
            "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "Identify the semester during which enrollment occurred for both Master's and Bachelor's degree students.",
            "What is the semester ID associated with the enrollment of students in both the Master's and Bachelor's programs?",
            "Can you provide the semester when students enrolled for both Master’s and Bachelor’s degrees?"
        ],
        "ref_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "MQL": "db.Semesters.aggregate([\n  {\n    $lookup: {\n      from: \"Departments\",\n      localField: \"semester_id\",\n      foreignField: \"Degree_Programs.Student_Enrolment.semester_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Degree_Programs.degree_summary_name\": {\n        $all: [\"Master\", \"Bachelor\"]\n      }\n    }\n  },\n  {\n    $project: {\n      semester_id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3445,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is minimum hours of the students playing in different position?",
            "For each position, what is the minimum time students spent practicing?",
            "What are the minimum hours recorded for players in various positions?",
            "For each player position, what is the least amount of time spent on practice?",
            "Can you provide the lowest hours dedicated by players to practice for each position?"
        ],
        "ref_sql": "SELECT min(T2.HS) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $group: {\n      _id: \"$Tryout.pPos\",\n      min_HS: { $min: \"$HS\" }\n    }\n  },\n  {\n    $project: {\n      min_HS: 1,\n      pPos: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 552,
        "db_id": "company_office",
        "nl_queries": [
            "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
            "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?",
            "Identify industries that have companies headquartered in both the USA and China.",
            "List the industries that are common to companies with headquarters in the USA and those with headquarters in China.",
            "Which industries are represented by companies that are based in both the USA and China?"
        ],
        "ref_sql": "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\"",
        "MQL": "db.Companies.aggregate([\n  {\n    $match: {\n      $or: [\n        { Headquarters: \"USA\" },\n        { Headquarters: \"China\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Industry\",\n      headquarters: {\n        $addToSet: \"$Headquarters\"\n      }\n    }\n  },\n  {\n    $match: {\n      headquarters: {\n        $all: [\"USA\", \"China\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Industry: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4256,
        "db_id": "bike_1",
        "nl_queries": [
            "Find the zip code in which the average mean visibility is lower than 10.",
            "For each zip code, select all those that have an average mean visiblity below 10.",
            "Identify the zip codes where the average mean visibility falls below 10 miles.",
            "List all zip codes that have an average mean visibility under 10.",
            "Which zip codes report an average visibility of less than 10 miles?"
        ],
        "ref_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
        "MQL": "db.weather.aggregate([\n  {\n    $group: {\n      _id: \"$zip_code\",\n      avg_mean_visibility_miles: {\n        $avg: \"$mean_visibility_miles\"\n      }\n    }\n  },\n  {\n    $match: {\n      avg_mean_visibility_miles: {\n        $lt: 10\n      }\n    }\n  },\n  {\n    $project: {\n      zip_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4226,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "find the number of medicines offered by each trade.",
            "How many medicines are offered by each trade name?",
            "What is the count of medicines available for each trade name?",
            "Please provide the total number of medicines associated with every trade name.",
            "Count how many medicines are present for each distinct trade within the dataset."
        ],
        "ref_sql": "SELECT trade_name , count(*) FROM medicine GROUP BY trade_name",
        "MQL": "db.medicine.aggregate([\n  {\n    $group: {\n      _id: \"$Trade_Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Trade_Name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4230,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show all transaction ids with transaction code 'PUR'.",
            "List all transaction IDs that have the type code 'PUR'.",
            "Retrieve the transaction IDs associated with transactions marked as 'PUR'.",
            "Provide a list of transaction IDs where the transaction type is 'PUR'.",
            "Show me all transaction IDs corresponding to purchase transactions (code 'PUR')."
        ],
        "ref_sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $match: { \"Transactions.transaction_type_code\": \"PUR\" } },\n  { $project: { \"transaction_id\": \"$Transactions.transaction_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1139,
        "db_id": "csu_1",
        "nl_queries": [
            "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
            "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?",
            "List the campuses with a higher faculty count in 2002 compared to any campus in Orange County.",
            "Which campuses in 2002 have more faculty members than the highest number found in Orange County?",
            "Identify the campuses that have a greater number of faculty in 2002 than the maximum faculty count of any campus located in Orange County."
        ],
        "ref_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")",
        "MQL": "db.Campuses.aggregate([\n  \n  {\n    $match: {\n      County: \"Orange\",\n      \"faculty.Year\": 2002\n    }\n  },\n  {\n    $unwind: \"$faculty\"\n  },\n  {\n    $match: {\n      \"faculty.Year\": 2002\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_Faculty: { $max: \"$faculty.Faculty\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Faculty: 1\n    }\n  },\n  \n  {\n    $lookup: {\n      from: \"Campuses\",\n      pipeline: [\n        {\n          $unwind: \"$faculty\"\n        },\n        {\n          $match: {\n            \"faculty.Year\": 2002\n          }\n        },\n        {\n          $project: {\n            Campus: 1,\n            \"faculty.Faculty\": 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      $expr: {\n        $gt: [\"$Docs1.faculty.Faculty\", \"$max_Faculty\"]\n      }\n    }\n  },\n  {\n    $project: {\n      Campus: \"$Docs1.Campus\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3250,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the first name of students living in city PHL whose age is between 20 and 25.",
            "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
            "Retrieve the first names of students aged 20 to 25 who reside in the city of PHL.",
            "List the first names of students living in PHL within the age range of 20 to 25.",
            "What are the first names of students between the ages of 20 and 25 living in the city coded as PHL?"
        ],
        "ref_sql": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      city_code: \"PHL\",\n      Age: { $gte: 20, $lte: 25 }\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3081,
        "db_id": "college_1",
        "nl_queries": [
            "list names of all departments ordered by their names.",
            "What are the names of all departments in alphabetical order?",
            "Provide a list of all departments sorted by their names in alphabetical order.",
            "Can you give me the names of every department, arranged alphabetically?",
            "Show the names of all departments, listed in order from A to Z."
        ],
        "ref_sql": "SELECT dept_name FROM department ORDER BY dept_name",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $sort: {\n      \"DEPARTMENT.DEPT_NAME\": 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      DEPT_NAME: \"$DEPARTMENT.DEPT_NAME\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3567,
        "db_id": "network_1",
        "nl_queries": [
            "Show the names of all high schoolers in grade 10.",
            "What are the names of all high schoolers in grade 10?",
            "List the names of all students in 10th grade.",
            "Provide the names of high schoolers who are in grade 10.",
            "Can you give me the names of all high school students that are in 10th grade?"
        ],
        "ref_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $match: {\n      grade: 10\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3995,
        "db_id": "college_2",
        "nl_queries": [
            "Find the total credits of courses provided by different department.",
            "How many total credits are offered by each department?",
            "What is the total number of course credits available from each department?",
            "List the sum of credits for courses offered by various departments.",
            "Calculate the overall credits for courses provided by different academic departments."
        ],
        "ref_sql": "SELECT sum(credits) , dept_name FROM course GROUP BY dept_name",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $group: {\n      _id: \"$dept_name\",\n      sum_credits: {\n        $sum: \"$course.credits\"\n      }\n    }\n  },\n  {\n    $project: {\n      dept_name: \"$_id\",\n      sum_credits: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 485,
        "db_id": "poker_player",
        "nl_queries": [
            "List the earnings of poker players in descending order.",
            "What are the earnings of poker players, ordered descending by value?",
            "Show the poker players' earnings sorted from highest to lowest.",
            "Provide a list of poker player earnings arranged in descending order.",
            "Display the earnings of poker players, ranked in decreasing order of amount."
        ],
        "ref_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Earnings: \"$poker_player.Earnings\"\n    }\n  },\n  {\n    $sort: {\n      Earnings: -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 371,
        "db_id": "student_1",
        "nl_queries": [
            "Which classrooms are used by grade 4?",
            "Find the classrooms in which grade 4 is studying.",
            "What are the classrooms assigned to fourth-grade students?",
            "List the classrooms that have students in the fourth grade.",
            "Identify the classrooms occupied by students from grade 4."
        ],
        "ref_sql": "SELECT DISTINCT classroom FROM list WHERE grade = 4",
        "MQL": "db.list.aggregate([\n  {\n    $match: {\n      Grade: 4\n    }\n  },\n  {\n    $group: {\n      _id: \"$Classroom\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Classroom: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2966,
        "db_id": "college_2",
        "nl_queries": [
            "Find courses that ran in Fall 2009 and in Spring 2010.",
            "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
            "List the course IDs for classes held during the Fall 2009 and Spring 2010 semesters.",
            "What courses were available in both the Fall semester of 2009 and the Spring semester of 2010?",
            "Identify the courses that were offered in both Fall 2009 and Spring 2010."
        ],
        "ref_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"course.section.semester\": \"Fall\",\n          \"course.section.year\": 2009\n        },\n        {\n          \"course.section.semester\": \"Spring\",\n          \"course.section.year\": 2010\n        }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$course.course_id\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: 2\n    }\n  },\n  {\n    $project: {\n      course_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2160,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the average and oldest age for students with different sex.",
            "What is the average and oldest age for each gender of student?",
            "What are the average and maximum ages of students grouped by gender?",
            "Calculate the average age and the highest age for each sex among the students.",
            "Determine the average and oldest ages for students of different genders."
        ],
        "ref_sql": "SELECT avg(age) , max(age) , sex FROM student GROUP BY sex",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Sex\",\n      avg_age: { $avg: \"$Age\" },\n      max_age: { $max: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Sex: \"$_id\",\n      avg_age: 1,\n      max_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2158,
        "db_id": "network_2",
        "nl_queries": [
            "What is average age for different job title?",
            "How old is the average person for each job?",
            "What is the average age of individuals based on their job titles?",
            "Can you tell me the average age for people in each job category?",
            "What is the mean age for individuals grouped by their job role?"
        ],
        "ref_sql": "SELECT avg(age) , job FROM Person GROUP BY job",
        "MQL": "db.Person.aggregate([\n  {\n    $group: {\n      _id: \"$job\",\n      avg_age: { $avg: \"$age\" }\n    }\n  },\n  {\n    $project: {\n      job: \"$_id\",\n      avg_age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2540,
        "db_id": "network_2",
        "nl_queries": [
            "How many people whose age is greater 30 and job is engineer?",
            "HOw many engineers are older than 30?",
            "What is the number of engineers who are over 30 years old?",
            "Count the number of people aged above 30 who work as engineers.",
            "How many individuals are engineers and have an age greater than 30?"
        ],
        "ref_sql": "SELECT count(*) FROM Person WHERE age > 30 AND job = 'engineer'",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      age: { $gt: 30 },\n      job: \"engineer\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3592,
        "db_id": "protein_institute",
        "nl_queries": [
            "What is the name of the tallest building?",
            "Which building holds the record for being the tallest?",
            "Can you tell me the name of the building that is the highest?",
            "What is the name of the building with the greatest height?",
            "Identify the building that stands as the tallest among all."
        ],
        "ref_sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "MQL": "db.building.aggregate([\n  {\n    $sort: { \"Height_feet\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { \"Name\": 1, \"_id\": 0 }\n  }\n]);\n"
    },
    {
        "record_id": 3377,
        "db_id": "company_employee",
        "nl_queries": [
            "What is the maximum and minimum market value of companies?",
            "What are the highest and lowest market values for companies?",
            "Can you provide the maximum and minimum market values held by companies?",
            "What is the range of market values for companies, specifically the maximum and minimum?",
            "Please tell me the highest and lowest market values of businesses."
        ],
        "ref_sql": "SELECT max(Market_Value_in_Billion) , min(Market_Value_in_Billion) FROM company",
        "MQL": "db.company.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Market_Value_in_Billion: { $max: \"$Market_Value_in_Billion\" },\n      min_Market_Value_in_Billion: { $min: \"$Market_Value_in_Billion\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Market_Value_in_Billion: 1,\n      min_Market_Value_in_Billion: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3262,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What is the gender of the teacher with last name \"Medhurst\"?",
            "Can you tell me the gender of the teacher whose last name is \"Medhurst\"?",
            "What is the gender for the teacher named \"Medhurst\"?",
            "I’d like to know the gender of the teacher with the surname \"Medhurst\".",
            "What gender does the teacher with the last name \"Medhurst\" identify as?"
        ],
        "ref_sql": "SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Teachers\"\n  },\n  {\n    $match: {\n      \"Teachers.last_name\": \"Medhurst\"\n    }\n  },\n  {\n    $project: {\n      gender: \"$Teachers.gender\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2890,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of distinct gender for dorms.",
            "How many different genders are there in the dorms?",
            "What is the total count of unique genders present in the dormitories?",
            "How many distinct gender identities are represented in the dorms?",
            "Count the number of different genders available among the dorm residents."
        ],
        "ref_sql": "SELECT count(DISTINCT gender) FROM dorm",
        "MQL": "db.Dorm.aggregate([\n  {\n    $group: {\n      _id: \"$gender\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_gender: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_gender: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3936,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "Find the states which do not have any employee in their record.",
            "List the states that do not have any recorded employees.",
            "Identify states lacking employee records in their profiles.",
            "Which states currently show no associated employees?",
            "Retrieve the names of states that have zero employees documented."
        ],
        "ref_sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "MQL": "db.Addresses.aggregate([\n  {\n    $group: {\n      _id: \"$state_province_county\",\n      employee_count: { $sum: { $cond: { if: { $isArray: \"$Employees\" }, then: { $size: \"$Employees\" }, else: 0 } } }\n    }\n  },\n  {\n    $match: {\n      employee_count: 0\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      state_province_county: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1279,
        "db_id": "student_1",
        "nl_queries": [
            "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
            "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
            "List the names of all students who are instructed by OTHA MOYER. Please include their first and last names.",
            "Identify the students enrolled under the tutelage of OTHA MOYER. I would like to see their first and last names.",
            "Who are the students learning from OTHA MOYER? Provide me with their first and last names."
        ],
        "ref_sql": "SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\"",
        "MQL": "db.People.find(\n  {\n    \"Students\": {\n      $elemMatch: {\n        \"student_details\": \"OTHA MOYER\"\n      }\n    }\n  },\n  {\n    \"Students.$\": 1,\n    \"first_name\": 1,\n    \"last_name\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 864,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the document status description of the document with id 1?",
            "Can you provide the status description for the document identified by ID 1?",
            "What is the description of the document status for the document with an ID of 1?",
            "Retrieve the document status description associated with document ID 1.",
            "What does the document status description say for the document having an ID of 1?"
        ],
        "ref_sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  \n  { $unwind: \"$Documents\" },\n  \n  { $match: { \"Documents.document_id\": 1 } },\n  \n  {\n    $lookup: {\n      from: \"Ref_Document_Status\",\n      localField: \"Documents.document_status_code\",\n      foreignField: \"document_status_code\",\n      as: \"Docs1\"\n    }\n  },\n  \n  { $unwind: \"$Docs1\" },\n  \n  {\n    $project: {\n      _id: 0,\n      document_status_description: \"$Docs1.document_status_description\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3003,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
            "Provide the names, phone numbers, and email addresses of all customers, ordered by the dates they registered as customers.",
            "Can you show me the list of customer names, their phone numbers, and emails, sorted by the date they became customers?",
            "Retrieve the names, contact numbers, and email IDs of all customers, sorted in ascending order by their registration dates.",
            "Display the names, phone contact details, and email addresses of every customer, organized by their date of becoming a customer."
        ],
        "ref_sql": "SELECT customer_name , customer_phone , customer_email FROM Customers ORDER BY date_became_customer",
        "MQL": "db.Customers.find({}, { \"customer_name\": 1, \"customer_phone\": 1, \"customer_email\": 1, \"_id\": 0 }).sort({ \"date_became_customer\": 1 });\n"
    },
    {
        "record_id": 2539,
        "db_id": "network_2",
        "nl_queries": [
            "Find the number of people whose age is greater than all engineers.",
            "How many people are older than every engineer?",
            "How many individuals have an age greater than the oldest engineer?",
            "Count the number of people who are older than any engineer.",
            "What is the total number of individuals whose age surpasses that of all engineers?"
        ],
        "ref_sql": "SELECT count(*) FROM Person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      job: \"engineer\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_age: {\n        $max: \"$age\"\n      }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Person\",\n      let: {\n        max_age: \"$max_age\"\n      },\n      pipeline: [\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$age\", \"$$max_age\"]\n            }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Docs1\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1963,
        "db_id": "college_2",
        "nl_queries": [
            "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?",
            "Give the title and credits for the course that is taught in the classroom with the greatest capacity.",
            "What are the title and credit hours for the course offered in the largest classroom by capacity?",
            "Can you provide the title and the number of credits for the course scheduled in the classroom with the highest seating capacity?",
            "Identify the title and credits of the course that takes place in the classroom that accommodates the most students."
        ],
        "ref_sql": "SELECT T3.title , T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT max(capacity) FROM classroom)",
        "MQL": "db.classroom.aggregate([\n  {\n    $unwind: \"$section\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_capacity: { $max: \"$capacity\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"classroom\",\n      let: { max_capacity: \"$max_capacity\" },\n      pipeline: [\n        { $unwind: \"$section\" },\n        { $match: { $expr: { $eq: [\"$capacity\", \"$$max_capacity\"] } } },\n        {\n          $project: {\n            course_id: \"$section.course_id\",\n            sec_id: \"$section.sec_id\",\n            semester: \"$section.semester\",\n            year: \"$section.year\",\n            building: \"$building\",\n            room_number: \"$room_number\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { course_id: \"$Docs1.course_id\" },\n      pipeline: [\n        { $unwind: \"$course\" },\n        { $match: { $expr: { $eq: [\"$course.course_id\", \"$$course_id\"] } } },\n        {\n          $project: {\n            title: \"$course.title\",\n            credits: \"$course.credits\"\n          }\n        }\n      ],\n      as: \"Docs2\"\n    }\n  },\n  { $unwind: \"$Docs2\" },\n  {\n    $project: {\n      _id: 0,\n      title: \"$Docs2.title\",\n      credits: \"$Docs2.credits\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 512,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the first name, last name, and phone number for all female faculty members.",
            "What are the first name, last name, and phone number of all the female faculty members?",
            "Provide the first names, last names, and phone numbers of all female faculty.",
            "List the first name, last name, and telephone number for every female faculty member.",
            "Can you show me the first names, last names, and contact numbers of all the female faculty members?"
        ],
        "ref_sql": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
        "MQL": "db.Faculty.find(\n  { \"Sex\": \"F\" },\n  { \"Fname\": 1, \"Lname\": 1, \"Phone\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1935,
        "db_id": "student_assessment",
        "nl_queries": [
            "How many registed students do each course have? List course name and the number of their registered students?",
            "For each course id, how many students are registered and what are the course names?",
            "What is the number of students registered for each course? Please provide the course name along with the corresponding student count.",
            "Can you list the number of students enrolled in each course along with the names of the courses?",
            "For every course, how many students are signed up? Include both the course names and their student registration counts."
        ],
        "ref_sql": "SELECT T3.course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Student_Course_Registrations\"\n  },\n  {\n    $group: {\n      _id: \"$course_id\",\n      course_name: { $first: \"$course_name\" },\n      count: { $addToSet: \"$Student_Course_Registrations.student_id\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      course_name: 1,\n      count: { $size: \"$count\" }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3755,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "Find the payment method that is used most frequently.",
            "What is the most commonly used payment method among customers?",
            "Identify which payment method customers prefer the most.",
            "Which payment method sees the highest frequency of use by customers?",
            "Determine the payment method that customers utilize the most often."
        ],
        "ref_sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$payment_method\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      payment_method: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4162,
        "db_id": "club_1",
        "nl_queries": [
            "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
            "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
            "Who holds the position of \"CTO\" in the club named \"Hopkins Student Enterprises\"? Please provide their first and last name.",
            "Can you tell me the first name and last name of the \"CTO\" in the \"Hopkins Student Enterprises\" club?",
            "Identify the \"CTO\" for the club \"Hopkins Student Enterprises\" and share their first and last names."
        ],
        "ref_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Hopkins Student Enterprises\"\n    }\n  },\n  {\n    $unwind: \"$Member_of_club\"\n  },\n  {\n    $match: {\n      \"Member_of_club.Position\": \"CTO\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"Member_of_club.StuID\",\n      foreignField: \"StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Fname: \"$Docs1.Fname\",\n      LName: \"$Docs1.LName\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2885,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How many dogs went through any treatments?",
            "Count the number of dogs that went through a treatment.",
            "What is the total number of dogs that have received any treatment?",
            "How many distinct dogs have undergone treatment procedures?",
            "Provide the count of dogs that have been treated at the kennel."
        ],
        "ref_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $unwind: \"$Dogs.Treatments\"\n  },\n  {\n    $group: {\n      _id: \"$Dogs.dog_id\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_dog_id: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_dog_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1236,
        "db_id": "school_finance",
        "nl_queries": [
            "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"",
            "List the names of donors who have made contributions to both the \"Glenn\" and \"Triton\" schools.",
            "Provide the donor names that supported the endowments for both \"Glenn\" and \"Triton.\"",
            "Identify the donors who have given to the endowment funds for both the schools \"Glenn\" and \"Triton.\"",
            "Retrieve the names of individuals who donated to the endowments of both \"Glenn\" and \"Triton\" schools."
        ],
        "ref_sql": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'",
        "MQL": "db.School.find({\n  \"endowment\": {\n    $elemMatch: {\n      \"School_id\": { $in: [\"Glenn\", \"Triton\"] }\n    }\n  }\n}, { \"endowment.donator_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2634,
        "db_id": "college_2",
        "nl_queries": [
            "How many rooms does the Lamberton building have?",
            "Count the number of classrooms in Lamberton.",
            "What is the total number of classrooms available in the Lamberton building?",
            "How many classroom spaces exist in the Lamberton building?",
            "Tell me the count of rooms located in the Lamberton building."
        ],
        "ref_sql": "SELECT count(*) FROM classroom WHERE building = 'Lamberton'",
        "MQL": "db.classroom.aggregate([\n  {\n    $match: {\n      building: \"Lamberton\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3316,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
            "List the number of \"SALE\" type transactions for each investor, but only if the count is greater than zero.",
            "Provide a count of transactions categorized as \"SALE\" for different investors, ensuring only those with a positive count are included.",
            "Display the total number of sale transactions for each investor, but include only those investors who have made at least one sale.",
            "Count the transactions marked as \"SALE\" for each investor and show results only for those investors with a count above zero."
        ],
        "ref_sql": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $match: {\n      \"Transactions.transaction_type_code\": \"SALE\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$investor_id\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      COUNT: { $gt: 0 }\n    },\n  },\n  {\n    $project: {\n      investor_id: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3639,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Give me the names of members whose address is in Harford or Waterbury.",
            "List the names of members who have an address in either Harford or Waterbury.",
            "Retrieve the names of members residing in Harford or Waterbury.",
            "Show me the names of members located in Harford or Waterbury.",
            "Can you provide the names of members with addresses in Harford and Waterbury?"
        ],
        "ref_sql": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'",
        "MQL": "db.member.find({\n  $or: [\n    { \"Address\": \"Harford\" },\n    { \"Address\": \"Waterbury\" }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2820,
        "db_id": "company_office",
        "nl_queries": [
            "How many different industries are the companies in?",
            "Count the number of distinct company industries.",
            "What is the total number of unique industries represented by the companies?",
            "How many unique industries do the companies operate in?",
            "Determine the count of distinct industries available within the company dataset."
        ],
        "ref_sql": "SELECT count(DISTINCT Industry) FROM Companies",
        "MQL": "db.Companies.aggregate([\n  {\n    $group: {\n      _id: \"$Industry\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Industry: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Industry: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 609,
        "db_id": "film_rank",
        "nl_queries": [
            "What are the low and high estimates of film markets?",
            "Return the low and high estimates for all film markets.",
            "Provide the low and high estimates for the film market sector.",
            "What are the estimated low and high figures for all film markets?",
            "List the low and high estimates pertaining to film market evaluations."
        ],
        "ref_sql": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
        "MQL": "db.market.aggregate([\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $project: {\n      Low_Estimate: \"$film_market_estimation.Low_Estimate\",\n      High_Estimate: \"$film_market_estimation.High_Estimate\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4163,
        "db_id": "club_1",
        "nl_queries": [
            "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
            "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?",
            "List the first and last names of all male individuals in the club named \"Hopkins Student Enterprises\".",
            "Can you provide the first and last names of each male member of the \"Hopkins Student Enterprises\" club?",
            "Who are the male members of the \"Hopkins Student Enterprises\" club? Please include their first and last names."
        ],
        "ref_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Hopkins Student Enterprises\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Sex\": \"M\"\n    }\n  },\n  {\n    $project: {\n      Fname: \"$Docs1.Fname\",\n      LName: \"$Docs1.LName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3974,
        "db_id": "school_finance",
        "nl_queries": [
            "What is the total budget amount for school \"Glenn\" in all years?",
            "How much has been budgeted for the school \"Glenn\" across all academic years?",
            "What is the cumulative budget allocation for the school named \"Glenn\" over the years?",
            "Can you provide the total budgeted funds for \"Glenn\" school throughout its operating years?",
            "What is the overall budget amount for the school identified as \"Glenn\" for all past years?"
        ],
        "ref_sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'",
        "MQL": "db.School.aggregate([\n  { $match: { \"School_name\": \"Glenn\" } },\n  { $unwind: \"$budget\" },\n  { $group: { _id: null, sum_Budgeted: { $sum: \"$budget.Budgeted\" } } },\n  { $project: { _id: 0, sum_Budgeted: 1 } }\n]);\n"
    },
    {
        "record_id": 1383,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
            "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?",
            "List the names of accounts where the checking balance exceeds the average amount, while the savings balance falls below it.",
            "Provide the names of accounts having checking balances higher than the average checking balance and savings balances that are lower than the average savings balance.",
            "Identify accounts with checking balances above the average, but with savings balances that are below the average."
        ],
        "ref_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT avg(balance) FROM savings)",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $group: {\n      _id: null,\n      avgCheckingBalance: { $avg: \"$CHECKING.balance\" },\n      avgSavingsBalance: { $avg: \"$SAVINGS.balance\" }\n    }\n  },\n  {\n    $addFields: {\n      avgCheckingBalance: \"$avgCheckingBalance\",\n      avgSavingsBalance: \"$avgSavingsBalance\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"ACCOUNTS\",\n      let: {\n        avgCheckingBalance: \"$avgCheckingBalance\",\n        avgSavingsBalance: \"$avgSavingsBalance\"\n      },\n      pipeline: [\n        { $unwind: \"$CHECKING\" },\n        { $unwind: \"$SAVINGS\" },\n        {\n          $match: {\n            $expr: {\n              $and: [\n                { $gt: [\"$CHECKING.balance\", \"$$avgCheckingBalance\"] },\n                { $lt: [\"$SAVINGS.balance\", \"$$avgSavingsBalance\"] }\n              ]\n            }\n          }\n        },\n        { $project: { name: 1, _id: 0 } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n  _id: 0,\n    name: \"$Docs1.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3622,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What are the names of enzymes who does not produce 'Heme'?",
            "What are the names of enzymes whose product is not 'Heme'?",
            "List the names of enzymes that do not have \"Heme\" as their product.",
            "Identify enzymes whose products are different from \"Heme\".",
            "What are the names of enzymes that do not yield \"Heme\"?"
        ],
        "ref_sql": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "MQL": "db.enzyme.aggregate([\n  {\n    $match: {\n      Product: { $ne: \"Heme\" }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2025,
        "db_id": "culture_company",
        "nl_queries": [
            "Show the years, book titles, and publishers for all books, in descending order by year.",
            "What are the years, titles, and publishers for all books, ordered by year descending?",
            "List the years, titles, and publishers for all available books, sorted by year from latest to earliest.",
            "Provide the years, book titles, and publishers for every book, arranged in descending order of year.",
            "Can you show the years, book titles, and publishers for all titles, sorted by year in descending order?"
        ],
        "ref_sql": "SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC",
        "MQL": "db.book_club.find({}, { Year: 1, Book_Title: 1, Publisher: 1, _id: 0 }).sort({ Year: -1 });\n"
    },
    {
        "record_id": 2099,
        "db_id": "perpetrator",
        "nl_queries": [
            "What is the average number of people injured by all perpetrators?",
            "What is the mean count of individuals harmed by all perpetrators?",
            "How many people, on average, have been injured by each perpetrator?",
            "Determine the average number of injuries caused by all perpetrators.",
            "Can you tell me the average injuries reported due to actions by perpetrators?"
        ],
        "ref_sql": "SELECT avg(Injured) FROM perpetrator",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $group: {\n      _id: null,\n      avg_Injured: { $avg: \"$perpetrator.Injured\" }\n    }\n  },\n  { $project: {\n      _id: 0,\n      avg_Injured: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2993,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show all customer ids and the number of cards owned by each customer.",
            "What are the different customer ids, and how many cards does each one hold?",
            "List all customer IDs along with the total number of cards each one has.",
            "What are the customer IDs and how many cards is each customer associated with?",
            "Provide a list of customer IDs and count how many cards each customer owns."
        ],
        "ref_sql": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: \"$customer_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      customer_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1574,
        "db_id": "game_1",
        "nl_queries": [
            "What is the first name and last name of the student who have most number of sports?",
            "What is the first and last name of the student who played the most sports?",
            "Who is the student with the highest number of sports played, and what are their first and last names?",
            "Can you provide the first and last names of the student who plays the most sports?",
            "Identify the student that has been involved in the greatest number of sports, including their first and last names."
        ],
        "ref_sql": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: \"$StuID\",\n      Fname: { $first: \"$Fname\" },\n      LName: { $first: \"$LName\" },\n      sportsCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { sportsCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Fname: 1,\n      LName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2935,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the number of transaction types.",
            "How many different types of transactions are there?",
            "Retrieve the total number of unique transaction types recorded.",
            "What is the count of different transaction types in the system?",
            "How many distinct transaction types do we have?"
        ],
        "ref_sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "MQL": "db.Customers_Cards.aggregate([\n  { $unwind: \"$Financial_Transactions\" },\n  { $group: { _id: \"$Financial_Transactions.transaction_type\" } },\n  { $group: { _id: null, count_DISTINCT_transaction_type: { $sum: 1 } } },\n  { $project: { _id: 0 } }\n]);\n"
    },
    {
        "record_id": 2974,
        "db_id": "college_1",
        "nl_queries": [
            "Find the description and credit for the course QM-261?",
            "What is the course description and number of credits for QM-261?",
            "What are the credits and description for the course identified as QM-261?",
            "Can you provide the credit hours and course description for QM-261?",
            "Retrieve the course details, specifically the number of credits and description for QM-261."
        ],
        "ref_sql": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.COURSE.CRS_CODE\": \"QM-261\"\n    }\n  },\n  {\n    $project: {\n      CRS_CREDIT: \"$DEPARTMENT.COURSE.CRS_CREDIT\",\n      CRS_DESCRIPTION: \"$DEPARTMENT.COURSE.CRS_DESCRIPTION\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3365,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Find the manager name and district of the shop whose number of products is the largest.",
            "What are the manager name and district of the shop that sells the largest number of products?",
            "What is the name of the manager and the district for the shop with the highest product count?",
            "Show me the manager's name and district of the shop that has the most products.",
            "Identify the district and manager's name of the shop offering the largest selection of products."
        ],
        "ref_sql": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
        "MQL": "db.shop.aggregate([\n  {\n    $sort: { Number_products: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Manager_name: 1,\n      District: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3043,
        "db_id": "driving_school",
        "nl_queries": [
            "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
            "When did the staff member Janessa Sawayn leave the company?",
            "What was the date when Janessa Sawayn left the organization?",
            "Can you tell me when Janessa Sawayn departed from the company?",
            "What is the departure date for the staff member named Janessa Sawayn?"
        ],
        "ref_sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      date_left_staff: \"$Staff.date_left_staff\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4223,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the titles of the papers that contain the word \"ML\".",
            "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.",
            "List the titles of papers featuring the term \"ML\".",
            "Retrieve the titles of papers that include \"ML\" within their names.",
            "Show me the titles of all papers that have \"ML\" anywhere in their titles."
        ],
        "ref_sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "MQL": "db.Papers.find(\n  {\n    title: { $regex: \"ML\", $options: \"i\" }\n  },\n  {\n    title: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2318,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "List all cities of addresses in alphabetical order.",
            "Retrieve a list of all the cities from the addresses, sorted alphabetically.",
            "Show me the names of all cities in the address database arranged in alphabetical order.",
            "Provide an alphabetical listing of all cities associated with the addresses.",
            "Display all cities found in the addresses, sorted from A to Z."
        ],
        "ref_sql": "SELECT city FROM Addresses ORDER BY city",
        "MQL": "db.Addresses.find({}, { \"city\": 1, \"_id\": 0 }).sort({ \"city\": 1 });\n"
    },
    {
        "record_id": 2846,
        "db_id": "world_1",
        "nl_queries": [
            "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "For the countries founded before 1930, what is the total number of distinct official languages?",
            "How many unique official languages are spoken in countries that were established before 1930?",
            "What is the count of different official languages used in nations founded prior to 1930?",
            "Can you tell me the total number of distinct official languages for countries that gained independence before 1930?"
        ],
        "ref_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      IndepYear: { $lt: 1930 }\n    }\n  },\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $match: {\n      \"countrylanguage.IsOfficial\": \"T\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.Language\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_countrylanguage_Language\"\n  }\n]);\n"
    },
    {
        "record_id": 2972,
        "db_id": "department_management",
        "nl_queries": [
            "In which year were most departments established?",
            "Which year saw the highest number of department establishments?",
            "In what year were the most departments founded?",
            "What is the year with the greatest count of established departments?",
            "During which year did the highest number of departments come into existence?"
        ],
        "ref_sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $group: {\n      _id: { $substr: [\"$Creation\", 0, 4] },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, Creation: \"$_id\" }\n  }\n]);\n"
    },
    {
        "record_id": 2649,
        "db_id": "concert_singer",
        "nl_queries": [
            "How many concerts are there in year 2014 or 2015?",
            "How many concerts occurred in 2014 or 2015?",
            "What is the total number of concerts held in 2014 or 2015?",
            "Can you tell me how many concerts took place in 2014 and 2015?",
            "How many concerts were organized in the years 2014 and 2015?"
        ],
        "ref_sql": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
        "MQL": "db.stadium.aggregate([\n  {\n    $unwind: \"$concert\"\n  },\n  {\n    $match: {\n      \"concert.Year\": {\n        $in: [\"2014\", \"2015\"]\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1460,
        "db_id": "storm_record",
        "nl_queries": [
            "Show the region name with at least two storms.",
            "What are the names of regions with two or more storms?",
            "List the names of regions that have experienced two or more storms.",
            "Identify the regions with at least two storm occurrences.",
            "Find region names associated with a minimum of two storms."
        ],
        "ref_sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2",
        "MQL": "db.region.aggregate([\n  {\n    $lookup: {\n      from: \"storm\",\n      localField: \"Region_id\",\n      foreignField: \"affected_region.Region_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      Region_name: 1,\n      count_Docs1: {\n        $size: \"$Docs1\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Docs1: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      Region_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2641,
        "db_id": "club_1",
        "nl_queries": [
            "Find the number of members of club \"Pen and Paper Gaming\".",
            "How many people have membership in the club \"Pen and Paper Gaming\"?",
            "How many members are in the \"Pen and Paper Gaming\" club?",
            "What is the total number of individuals part of the \"Pen and Paper Gaming\" club?",
            "Get the count of members associated with the \"Pen and Paper Gaming\" club."
        ],
        "ref_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Pen and Paper Gaming\"\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Member_of_club\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2293,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the name and capacity of products with price greater than 700 (in USD).",
            "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
            "List the catalog entry names and their respective capacities for products priced above 700 dollars.",
            "Retrieve the names and capacities of items in the catalog that have a price exceeding 700 USD.",
            "What are the names and capacities of products that cost more than 700 dollars?"
        ],
        "ref_sql": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $match: {\n      \"Catalog_Structure.Catalog_Contents.price_in_dollars\": {\n        $gt: 700\n      }\n    }\n  },\n  {\n    $project: {\n      catalog_entry_name: \"$Catalog_Structure.Catalog_Contents.catalog_entry_name\",\n      capacity: \"$Catalog_Structure.Catalog_Contents.capacity\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3142,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the document type code for document type \"Paper\"?",
            "Find the code of the document type \"Paper\".",
            "What is the code for the document type named \"Paper\"?",
            "Retrieve the document type code associated with \"Paper\".",
            "Can you provide the document type code for \"Paper\"?"
        ],
        "ref_sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = \"Paper\"",
        "MQL": "db.Ref_Document_Types.aggregate([\n  {\n    $match: {\n      Document_Type_Name: \"Paper\"\n    }\n  },\n  {\n    $project: {\n      Document_Type_Code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1402,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the physicians who are trained in a procedure that costs more than 5000.",
            "Which physicians are trained in procedures that are more expensive than 5000?",
            "Identify physicians who have received training in procedures with a cost higher than 5000.",
            "List the physicians trained in treatments that cost over 5000.",
            "Which physicians have expertise in procedures that are priced above 5000?"
        ],
        "ref_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000",
        "MQL": "db.Physician.aggregate([\n  {\n    $lookup: {\n      from: \"Procedures\",\n      localField: \"Trained_In.Treatment\",\n      foreignField: \"Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Cost\": { $gt: 5000 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1272,
        "db_id": "driving_school",
        "nl_queries": [
            "List first name and last name of customers lived in city Lockmanfurt.",
            "What are the first and last names of all customers who lived in Lockmanfurt?",
            "Retrieve the first and last names of customers residing in Lockmanfurt.",
            "Can you provide the first and last names of all customers who live in the city of Lockmanfurt?",
            "Show me the first name and last name of customers who are based in Lockmanfurt."
        ],
        "ref_sql": "SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: {\n      city: \"Lockmanfurt\"\n    }\n  },\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $project: {\n      first_name: \"$Customers.first_name\",\n      last_name: \"$Customers.last_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2681,
        "db_id": "college_1",
        "nl_queries": [
            "How many classes are professor whose last name is Graztevski has?",
            "How many classes does the professor whose last name is Graztevski teach?",
            "What is the total number of classes taught by the professor with the surname Graztevski?",
            "How many courses does Graztevski, the professor, instruct?",
            "Can you tell me the number of classes that the professor named Graztevski teaches?"
        ],
        "ref_sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $match: {\n      EMP_LNAME: \"Graztevski\"\n    }\n  },\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $group: {\n      _id: \"$EMP_NUM\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 252,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the distinct leader names of colleges associated with members from country \"Canada\".",
            "List the unique names of college leaders linked to members hailing from Canada.",
            "Retrieve the distinct names of leaders from colleges that have members representing Canada.",
            "Identify the unique leader names of colleges with members who come from Canada.",
            "Find all distinct college leaders for institutions associated with members from the country of Canada."
        ],
        "ref_sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = \"Canada\"",
        "MQL": "db.college.aggregate([\n  \n  { $unwind: \"$member\" },\n  \n  \n  { $match: { \"member.Country\": \"Canada\" } },\n  \n  \n  { $group: { _id: \"$Leader_Name\" } },\n  \n  \n  { $project: { _id: 0, Leader_Name: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 4157,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "What is the name of the customer who has made the largest amount of claim in a single claim?",
            "Which customer made the largest amount of claim in a single claim? Return the customer details.",
            "Who is the customer that filed the highest single claim? Please provide their details.",
            "Can you identify the customer with the maximum amount claimed in one instance? I need their customer information.",
            "What are the details of the customer who has the largest claim recorded for a single action?"
        ],
        "ref_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $unwind: \"$Policies.Claim_Headers\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_ID\",\n      maxAmountClaimed: {\n        $max: \"$Policies.Claim_Headers.Amount_Claimed\"\n      }\n    }\n  },\n  {\n    $sort: {\n      maxAmountClaimed: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"_id\",\n      foreignField: \"Customer_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Customer_Details: \"$Docs1.Customer_Details\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3098,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the names of all the catalog entries.",
            "What are all the catalog entry names?",
            "List all the names of the entries in the catalog.",
            "What are the names of every catalog entry available?",
            "Provide the names of all catalog entries present in the database."
        ],
        "ref_sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $project: {\n      catalog_entry_name: \"$Catalog_Structure.Catalog_Contents.catalog_entry_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 189,
        "db_id": "match_season",
        "nl_queries": [
            "Show the country names and the corresponding number of players.",
            "How many players are from each country?",
            "List the names of countries along with the total number of players representing each one.",
            "Provide the count of players according to their respective countries.",
            "What are the country names and how many players are associated with each?"
        ],
        "ref_sql": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.Country\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"country\",\n      localField: \"_id\",\n      foreignField: \"Country_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Country_name: \"$Docs1.Country_name\",\n      COUNT: \"$COUNT\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      COUNT: -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3436,
        "db_id": "store_product",
        "nl_queries": [
            "Find the most prominent max page size among all the products.",
            "What is the most common maximum page size?",
            "What is the maximum page size that appears most often in the product catalog?",
            "Identify the most frequent maximum page size among all available products.",
            "What is the max page size that is found in the largest number of products?"
        ],
        "ref_sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.product.aggregate([\n  {\n    $group: {\n      _id: \"$max_page_size\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      max_page_size: \"$_id\",\n      _id: 0\n    }\n  }\n])\n"
    },
    {
        "record_id": 2003,
        "db_id": "tvshow",
        "nl_queries": [
            "List the title of all cartoons in alphabetical order.",
            "What are the titles of the cartoons sorted alphabetically?",
            "Provide an alphabetical list of all cartoon titles.",
            "Show the titles of the cartoons arranged in alphabetical order.",
            "Retrieve all cartoon titles sorted from A to Z."
        ],
        "ref_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Title: \"$Cartoon.Title\"\n    }\n  },\n  {\n    $sort: {\n      Title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1594,
        "db_id": "game_1",
        "nl_queries": [
            "Show last names for all student who are on scholarship.",
            "What are the last names for all scholarship students?",
            "List the last names of all students who have received a scholarship.",
            "Provide the last names of students that are on a scholarship program.",
            "Retrieve the last names of students who are currently on a scholarship."
        ],
        "ref_sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'",
        "MQL": "db.Student.find(\n  {\n    \"SportsInfo\": {\n      $elemMatch: {\n        \"OnScholarship\": \"Y\"\n      }\n    }\n  },\n  {\n    \"LName\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 2608,
        "db_id": "theme_gallery",
        "nl_queries": [
            "How many artists are above age 46 and joined after 1990?",
            "Count the number of artists who are older than 46 and joined after 1990.",
            "What is the total number of artists who are over 46 years old and have joined since 1991?",
            "How many artists exceed the age of 46 and started their membership after 1990?",
            "Determine the count of artists older than 46 who became members after 1990."
        ],
        "ref_sql": "SELECT count(*) FROM artist WHERE age > 46 AND year_join > 1990",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      Age: { $gt: 46 },\n      Year_Join: { $gt: 1990 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 679,
        "db_id": "orchestra",
        "nl_queries": [
            "List the name of the conductor with the most years of work.",
            "What is the name of the conductor who has worked the greatest number of years?",
            "Identify the conductor with the longest tenure in the field.",
            "Who is the conductor that has accumulated the highest number of years in their career?",
            "Name the conductor who has the most extensive experience measured in years."
        ],
        "ref_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "MQL": "db.conductor.aggregate([\n  {\n    $group: {\n      _id: \"$Name\",\n      max_Year_of_Work: { $max: \"$Year_of_Work\" }\n    }\n  },\n  {\n    $sort: {\n      max_Year_of_Work: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2258,
        "db_id": "activity_1",
        "nl_queries": [
            "Which building has most faculty members?",
            "Find the building that has the largest number of faculty members.",
            "Which building accommodates the highest number of faculty?",
            "Identify the building that has the greatest number of faculty staff.",
            "What is the building with the most faculty employed?"
        ],
        "ref_sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Faculty.aggregate([\n  {\n    $group: {\n      _id: \"$Building\",\n      faculty_count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      faculty_count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Building: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3481,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "List the names and the locations that the enzymes can make an effect.",
            "What are the names and locations of all enzymes listed?",
            "Provide a list of enzyme names along with their corresponding locations.",
            "Can you show me the names and locations of all the enzymes documented?",
            "What are the enzyme names and their locations that are recorded in the database?"
        ],
        "ref_sql": "SELECT name , LOCATION FROM enzyme",
        "MQL": "db.enzyme.find({}, { _id: 0, name: 1, Location: 1 })\n"
    },
    {
        "record_id": 637,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
            "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
            "Can you provide the names and operating hours of the attractions that are reachable by bus or by walking?",
            "What are the names and opening times of tourist attractions that can be accessed using either a bus or on foot?",
            "List the names and opening hours of tourist spots that you can get to by bus or by walking."
        ],
        "ref_sql": "SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\"",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Tourist_Attractions.How_to_Get_There\": { $regex: \"bus\", $options: \"i\" } },\n        { \"Tourist_Attractions.How_to_Get_There\": { $regex: \"walk\", $options: \"i\" } }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Tourist_Attractions.Name\",\n      Opening_Hours: \"$Tourist_Attractions.Opening_Hours\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1299,
        "db_id": "browser_web",
        "nl_queries": [
            "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
            "List the IDs and names of web accelerators that can work with two or more different browsers.",
            "What are the IDs and names of the web client accelerators compatible with at least two browsers?",
            "Can you provide the IDs and names of web accelerators that support two or more browser types?",
            "Show me the identifiers and names of web client accelerators that are compatible with two or more browsers."
        ],
        "ref_sql": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
        "MQL": "db.Web_client_accelerator.aggregate([\n  { $unwind: \"$accelerator_compatible_browser\" },\n  { \n    $group: {\n      _id: \"$id\",\n      name: { $first: \"$name\" },\n      browserCount: { $addToSet: \"$accelerator_compatible_browser.browser_id\" }\n    }\n  },\n  { \n    $project: {\n      id: \"$_id\",\n      name: 1,\n      browserCount: { $size: \"$browserCount\" }\n    }\n  },\n  { $match: { browserCount: { $gte: 2 } } },\n  { \n    $project: {\n      id: 1,\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4029,
        "db_id": "csu_1",
        "nl_queries": [
            "How many undergraduates are there in \"San Jose State University\" in year 2004?",
            "How many undergraduates are there at San Jose State",
            "What is the total number of undergraduate students enrolled at San Jose State University in 2004?",
            "Can you tell me the undergraduate enrollment number for \"San Jose State University\" during the year 2004?",
            "How many undergraduate students were reported at San Jose State University for the academic year 2004?"
        ],
        "ref_sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\"",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Jose State University\"\n    }\n  },\n  {\n    $unwind: \"$discipline_enrollments\"\n  },\n  {\n    $match: {\n      \"discipline_enrollments.Year\": 2004\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Undergraduate: {\n        $sum: \"$discipline_enrollments.Undergraduate\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Undergraduate: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3149,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the name and description for document type code RV?",
            "Give me the name and description of the document type code RV.",
            "Can you tell me the name and description of the document type with code RV?",
            "What is the document type name and its description for the code RV?",
            "Please provide the name and description associated with the document type code RV."
        ],
        "ref_sql": "SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = \"RV\"",
        "MQL": "db.Ref_Document_Types.aggregate([\n  {\n    $match: {\n      Document_Type_Code: \"RV\"\n    }\n  },\n  {\n    $project: {\n      Document_Type_Name: 1,\n      Document_Type_Description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4120,
        "db_id": "candidate_poll",
        "nl_queries": [
            "which gender got the highest average uncertain ratio.",
            "What is the sex of the candidate who had the highest unsure rate?",
            "Which gender has the largest rate of uncertainty among the candidates?",
            "Who is the candidate with the highest unsure rate, and what is their gender?",
            "Identify the sex of the candidate that shows the greatest level of uncertainty."
        ],
        "ref_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  \n  { $unwind: \"$candidate\" },\n  \n  \n  { $sort: { \"candidate.Unsure_rate\": -1 } },\n  { $limit: 1 },\n  \n  \n  { $project: { Sex: 1, _id: 0 } }\n]);\n"
    },
    {
        "record_id": 66,
        "db_id": "flight_2",
        "nl_queries": [
            "List the airport code and name in the city of Anthony.",
            "Give the airport code and airport name corresonding to the city Anthony.",
            "Retrieve the airport code and name for airports located in Anthony city.",
            "What are the airport code and name for the city of Anthony?",
            "Show me the airport code and name corresponding to airports in the city named Anthony."
        ],
        "ref_sql": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      City: \"Anthony\"\n    }\n  },\n  {\n    $project: {\n      AirportCode: 1,\n      AirportName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2371,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the number of rooms for different block code?",
            "How many rooms are located for each block code?",
            "Count the total number of rooms for each block code.",
            "What is the total number of rooms assigned to various block codes?",
            "How many rooms do we have for each distinct block code?"
        ],
        "ref_sql": "SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode",
        "MQL": "db.Block.aggregate([\n  {\n    $unwind: \"$Room\"\n  },\n  {\n    $group: {\n      _id: \"$BlockCode\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      BlockCode: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 836,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the different product names? What is the average product price for each of them?",
            "For each distinct product name, show its average product price.",
            "Could you list the unique product names along with the average price of each?",
            "What are the distinct names of the products and their corresponding average prices?",
            "For every unique product name, please provide its average product price."
        ],
        "ref_sql": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$Product_Name\",\n      avg_Product_Price: { $avg: \"$Product_Price\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Product_Name: \"$_id\",\n      avg_Product_Price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2690,
        "db_id": "film_rank",
        "nl_queries": [
            "How many film are there?",
            "Count the number of films.",
            "What is the total number of films available?",
            "Please provide the count of all films in the database.",
            "How many films are listed in the collection?"
        ],
        "ref_sql": "SELECT count(*) FROM film",
        "MQL": "db.film.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3872,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the description of role code ED?",
            "Can you provide the description for the role with code ED?",
            "What is the role description associated with the code ED?",
            "Give me the description of the role identified by the code ED.",
            "What does the role code ED represent in terms of its description?"
        ],
        "ref_sql": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "MQL": "db.Roles.find({ \"role_code\": \"ED\" }, { \"role_description\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1884,
        "db_id": "movie_1",
        "nl_queries": [
            "What are the titles of all movies that have rating star is between 3 and 5?",
            "What are the titles of all movies that have between 3 and 5 stars?",
            "Can you list the titles of all movies with star ratings between 3 and 5?",
            "Show me the titles of movies rated between 3 stars and 5 stars.",
            "What titles are available for movies that have ratings ranging from 3 to 5 stars?"
        ],
        "ref_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "MQL": "db.Movie.aggregate([\n  {\n    $match: {\n      \"Rating.stars\": {\n        $gte: 3,\n        $lte: 5\n      }\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1866,
        "db_id": "music_1",
        "nl_queries": [
            "Return the names of songs for which format is mp3 and resolution is below 1000.",
            "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
            "List all song titles that have an mp3 format and a resolution below 1000.",
            "Provide the names of songs available in mp3 format with resolutions less than 1000.",
            "What are the titles of songs that are formatted as mp3 and have a resolution under 1000?"
        ],
        "ref_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $unwind: \"$artist.files.song\"\n  },\n  {\n    $match: {\n      \"artist.files.formats\": \"mp3\",\n      \"artist.files.song.resolution\": { $lt: 1000 }\n    }\n  },\n  {\n    $project: {\n      song_name: \"$artist.files.song.song_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2139,
        "db_id": "sports_competition",
        "nl_queries": [
            "What is the average points of players from club with name \"AIB\".",
            "What is the average number of points for players from the \"AIB\" club?",
            "What is the average number of points scored by players in the \"AIB\" club?",
            "How many points, on average, do players from the club called \"AIB\" earn?",
            "Can you tell me the average points scored by the players associated with the \"AIB\" team?"
        ],
        "ref_sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = \"AIB\"",
        "MQL": "db.club.aggregate([\n  {\n    $match: {\n      name: \"AIB\"\n    }\n  },\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Points: { $avg: \"$player.Points\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Points: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3902,
        "db_id": "college_2",
        "nl_queries": [
            "Find the year and semester when offers the largest number of courses.",
            "What is the year and semester with the most courses?",
            "Identify the semester and year in which the most courses are available.",
            "What semester and year have the highest number of course offerings?",
            "Determine which year and semester features the greatest count of courses provided."
        ],
        "ref_sql": "SELECT semester , YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $group: {\n      _id: {\n        semester: \"$course.section.semester\",\n        year: \"$course.section.year\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      semester: \"$_id.semester\",\n      year: \"$_id.year\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1158,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
            "Identify the third-party companies that either have a minimum of two maintenance engineers or at least two active maintenance contracts, and provide their company id and name.",
            "What third-party companies possess two or more maintenance engineers or two or more maintenance contracts? Please include the company id and name in the results.",
            "List the company ids and names of third-party companies that have either no fewer than two maintenance engineers or a minimum of two maintenance contracts.",
            "Which third-party companies employ at least two maintenance engineers or hold two or more maintenance contracts? Indicate their company id and name."
        ],
        "ref_sql": "SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count(*) >= 2 UNION SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*) >= 2",
        "MQL": "db.Third_Party_Companies.find({\n  $or: [\n    { $expr: { $gte: [{ $size: \"$Maintenance_Engineers\" }, 2] } },\n    { $expr: { $gte: [{ $size: \"$Maintenance_Contracts\" }, 2] } }\n  ]\n}, { \"company_id\": 1, \"company_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1755,
        "db_id": "student_1",
        "nl_queries": [
            "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
            "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name of the teachers.",
            "List the first and last names of the teachers who instruct EVELINA BROMLEY.",
            "Who are the teachers teaching the student EVELINA BROMLEY? Please provide their first and last names.",
            "Can you give me the first and last names of the instructors associated with EVELINA BROMLEY?"
        ],
        "ref_sql": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"EVELINA\" AND T1.lastname = \"BROMLEY\"",
        "MQL": "db.Teachers.aggregate([\n  {\n    $lookup: {\n      from: \"Students\",\n      localField: \"teacher_id\",\n      foreignField: \"teacher_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.first_name\": \"EVELINA\",\n      \"Docs1.last_name\": \"BROMLEY\"\n    }\n  },\n  {\n    $project: {\n      FirstName: 1,\n      LastName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2363,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "List the council tax ids and their related cmi cross references of all the parking fines.",
            "Provide a list of council tax IDs along with their corresponding CMI cross-reference IDs for all parking fines.",
            "Retrieve the council tax IDs and related CMI cross-reference IDs associated with each parking fine.",
            "Show all council tax IDs and their related CMI cross-references for the parking fines issued.",
            "Compile a list of parking fines that includes both the council tax IDs and their respective CMI cross-reference IDs."
        ],
        "ref_sql": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
        "MQL": "db.Customer_Master_Index.aggregate([\n  { $unwind: \"$CMI_Cross_References\" },\n  { $unwind: \"$CMI_Cross_References.Parking_Fines\" },\n  {\n    $project: {\n      _id: 0,\n      council_tax_id: \"$CMI_Cross_References.Parking_Fines.council_tax_id\",\n      cmi_cross_ref_id: \"$CMI_Cross_References.Parking_Fines.cmi_cross_ref_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 478,
        "db_id": "aircraft",
        "nl_queries": [
            "List the description of all aircrafts.",
            "What are the descriptions for the aircrafts?",
            "Provide a list of aircraft descriptions.",
            "Can you show me the descriptions for all aircraft?",
            "What descriptions do the various aircraft have?"
        ],
        "ref_sql": "SELECT Description FROM aircraft",
        "MQL": "db.aircraft.find({}, { Description: 1, _id: 0 });\n"
    },
    {
        "record_id": 2884,
        "db_id": "college_1",
        "nl_queries": [
            "How many departments does the college has?",
            "How many different departments are there?",
            "What is the total number of departments in the college?",
            "Can you tell me how many unique departments the college has?",
            "How many distinct departments are present at the college?"
        ],
        "ref_sql": "SELECT count(DISTINCT dept_name) FROM department",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_NAME\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_dept_name\"\n  }\n]);\n"
    },
    {
        "record_id": 1934,
        "db_id": "student_assessment",
        "nl_queries": [
            "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
            "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
            "Retrieve the mobile numbers of candidates who got a \"Fail\" on their assessment.",
            "List the cell phone numbers for candidates with an assessment outcome marked as \"Fail\".",
            "What cell mobile numbers belong to candidates whose assessment result was \"Fail\"?"
        ],
        "ref_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Candidates\"\n  },\n  {\n    $unwind: \"$Candidates.Candidate_Assessments\"\n  },\n  {\n    $match: {\n      \"Candidates.Candidate_Assessments.asessment_outcome_code\": \"Fail\"\n    }\n  },\n  {\n    $project: {\n      cell_mobile_number: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1825,
        "db_id": "mountain_photos",
        "nl_queries": [
            "What are the names of the cameras that have taken picture of the most mountains?",
            "Which camera lenses have captured images of the largest number of mountains?",
            "Name the cameras that have taken photos of the most different mountains.",
            "What are the brands of cameras that have photographed the greatest number of mountain subjects?",
            "Can you list the camera names that have the most mountain photography?"
        ],
        "ref_sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.mountain.aggregate([\n  { $unwind: \"$photos\" },\n  { $group: {\n      _id: \"$photos.camera_lens_id\",\n      uniqueMountains: { $addToSet: \"$id\" }\n    }\n  },\n  { $project: {\n      camera_lens_id: \"$_id\",\n      mountainCount: { $size: \"$uniqueMountains\" }\n    }\n  },\n  { $sort: { mountainCount: -1 } },\n  { $limit: 1 },\n  { $lookup: {\n      from: \"camera_lens\",\n      localField: \"camera_lens_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  { $project: {\n      _id: 0,\n      name: \"$Docs1.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3733,
        "db_id": "station_weather",
        "nl_queries": [
            "Find the origins from which more than 1 train starts.",
            "List the stations that have more than one train departing from them.",
            "Identify the origins where at least two trains start their journey.",
            "Which departure stations have multiple trains operating from them?",
            "Find all the stations that serve as origins for more than one train."
        ],
        "ref_sql": "SELECT origin FROM train GROUP BY origin HAVING count(*) > 1",
        "MQL": "db.train.aggregate([\n  { $group: { _id: \"$origin\", count: { $sum: 1 } } },\n  { $match: { count: { $gt: 1 } } },\n  { $project: { _id: 0, origin: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 762,
        "db_id": "news_report",
        "nl_queries": [
            "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
            "Identify the countries that have both experienced journalists with over 10 years and novice journalists with under 3 years of experience.",
            "List the nationalities which feature journalists that have worked for more than a decade alongside those who have only started their careers within the last 3 years.",
            "What nations have journalists who possess both significant experience (more than 10 years) and very little experience (under 3 years)?",
            "Provide the names of countries that consist of both veteran journalists (10+ years) and new journalists (less than 3 years)."
        ],
        "ref_sql": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
        "MQL": "db.journalist.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      journalists: {\n        $push: {\n          journalist_ID: \"$journalist_ID\",\n          Years_working: \"$Years_working\"\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      journalists: {\n        $elemMatch: {\n          Years_working: { $gt: 10 }\n        }\n      },\n      journalists: {\n        $elemMatch: {\n          Years_working: { $lt: 3 }\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1420,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "Find the organisation type description of the organisation detailed as 'quo'.",
            "What is the type description of the organization whose detail is listed as 'quo'?",
            "What is the description of the organisation type for the organisation that has the details marked as 'quo'?",
            "Retrieve the type description associated with the organisation whose details are defined as 'quo'.",
            "Can you provide the organisation type description for the organisation categorized under 'quo'?"
        ],
        "ref_sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $match: {\n      \"Organisations.organisation_details\": \"quo\"\n    }\n  },\n  {\n    $project: {\n      organisation_type_description: \"$organisation_type_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1546,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What is the description of the treatment type that costs the least money in total?",
            "Give me the description of the treatment type whose total cost is the lowest.",
            "What is the name of the treatment type with the smallest total cost?",
            "Please provide the description of the treatment type that has the lowest cumulative expense.",
            "What is the title of the treatment type that incurs the least total cost?"
        ],
        "ref_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $unwind: \"$Dogs.Treatments\"\n  },\n  {\n    $group: {\n      _id: \"$Dogs.Treatments.treatment_type_code\",\n      sum_cost_of_treatment: { $sum: \"$Dogs.Treatments.cost_of_treatment\" }\n    }\n  },\n  {\n    $sort: { sum_cost_of_treatment: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Treatment_Types\",\n      localField: \"_id\",\n      foreignField: \"treatment_type_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      treatment_type_description: \"$Docs1.treatment_type_description\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1706,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "What is the first name, last name, and phone of the customer with account name 162?",
            "Give the full name and phone of the customer who has the account name 162.",
            "Can you provide the customer's first name, last name, and phone number for the account titled 162?",
            "What are the first name and last name along with the phone number of the customer associated with the account named 162?",
            "Please tell me the first and last names and the phone number of the customer linked to account name 162."
        ],
        "ref_sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\"",
        "MQL": "db.Accounts.aggregate([\n  {\n    $match: {\n      account_name: \"162\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"customer_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      customer_first_name: \"$Docs1.customer_first_name\",\n      customer_last_name: \"$Docs1.customer_last_name\",\n      customer_phone: \"$Docs1.customer_phone\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3947,
        "db_id": "student_assessment",
        "nl_queries": [
            "What are the id of students who registered course 301?",
            "What are the ids of the students who registered for course 301?",
            "Can you provide the student IDs for those enrolled in course 301?",
            "What are the student IDs of individuals who have registered for course 301?",
            "List the IDs of students that signed up for course 301."
        ],
        "ref_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$Students.Student_Course_Registrations\"\n  },\n  {\n    $match: {\n      \"Students.Student_Course_Registrations.course_id\": 301\n    }\n  },\n  {\n    $project: {\n      student_id: \"$Students.student_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3594,
        "db_id": "protein_institute",
        "nl_queries": [
            "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
            "Provide a list of building names that are at least 200 feet tall and have a minimum of 20 floors.",
            "Retrieve the names of all buildings that reach a height of 200 feet or more and consist of no fewer than 20 floors.",
            "Show me the names of any buildings that stand at least 200 feet in height and have at least 20 stories.",
            "Can you list the names of buildings that are 200 feet tall or taller and have 20 or more floors?"
        ],
        "ref_sql": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20",
        "MQL": "db.building.find({\n  \"Height_feet\": { $gte: 200 },\n  \"Floors\": { $gte: 20 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2702,
        "db_id": "protein_institute",
        "nl_queries": [
            "How many proteins are associated with an institution in a building with at least 20 floors?",
            "What is the total count of proteins linked to institutions situated in buildings with 20 or more floors?",
            "How many proteins are linked to institutions that are found in buildings having at least 20 floors?",
            "Can you tell me the number of proteins associated with institutions in buildings that have a minimum of 20 floors?",
            "How many protein associations are there with institutions located within buildings that feature at least 20 floors?"
        ],
        "ref_sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20",
        "MQL": "db.building.aggregate([\n  \n  { $match: { \"Floors\": { $gte: 20 } } },\n  \n  \n  { $unwind: \"$Institution\" },\n  \n  \n  { $unwind: \"$Institution.protein\" },\n  \n  \n  { $group: { \n      _id: null, \n      count: { $sum: 1 } \n  } },\n  \n  \n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 2374,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "How many assets does each third party company supply? List the count and the company id.",
            "What is the total number of assets provided by each third-party company? Please include the company ID in your response.",
            "Can you list the number of assets supplied by every third-party company along with their respective company IDs?",
            "How many assets are there for each third-party company? Show the count along with the corresponding company ID.",
            "Provide a count of assets associated with each third-party company, including their company IDs in the results."
        ],
        "ref_sql": "SELECT count(*) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id",
        "MQL": "db.Third_Party_Companies.aggregate([\n  \n  { $unwind: \"$Assets\" },\n  \n  \n  {\n    $group: {\n      _id: \"$company_id\",\n      count: { $sum: 1 }\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      company_id: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2614,
        "db_id": "battle_death",
        "nl_queries": [
            "How many battles did not lose any ship with tonnage '225'?",
            "What is the total number of battles that did not incur losses of any ships weighing '225' tons?",
            "How many battles were fought without losing any ships that had a tonnage of '225'?",
            "Count the battles where no ships with a tonnage of '225' were lost during the fight.",
            "Determine the number of battles that did not result in the loss of any ships having a tonnage of '225'."
        ],
        "ref_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
        "MQL": "db.battle.aggregate([\n  {\n    $match: {\n      \"ship\": {\n        $not: {\n          $elemMatch: {\n            \"tonnage\": \"225\",\n            \"lost_in_battle\": { $gt: 0 }\n          }\n        }\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 302,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
            "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
            "In which states do colleges have students who were accepted during the tryouts, and what is their enrollment?",
            "What are the states of colleges that accepted players during tryouts, and how many students are enrolled at those institutions?",
            "Can you provide the enrollment figures and states for colleges where students were successful in the tryouts?"
        ],
        "ref_sql": "SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $project: {\n      state: 1,\n      enr: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3511,
        "db_id": "storm_record",
        "nl_queries": [
            "List name, dates active, and number of deaths for all storms with at least 1 death.",
            "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
            "Provide the names, active dates, and death tolls for all storms with one or more fatalities.",
            "Show the names, duration of activity, and number of fatalities for storms that reported at least one death.",
            "What are the names, active periods, and associated death counts for storms that had one or more casualties?"
        ],
        "ref_sql": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
        "MQL": "db.storm.aggregate([\n  {\n    $match: {\n      Number_Deaths: { $gte: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      Dates_active: 1,\n      Number_Deaths: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3294,
        "db_id": "college_2",
        "nl_queries": [
            "What is the id of the instructor who advises of all students from History department?",
            "Give id of the instructor who advises students in the History department.",
            "What is the identifier of the instructor who supervises all students in the History department?",
            "Can you provide the ID of the instructor advising students enrolled in the History department?",
            "Identify the instructor ID for the faculty member who guides students from the History department."
        ],
        "ref_sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $match: {\n      \"student.dept_name\": \"History\"\n    }\n  },\n  {\n    $unwind: \"$student.advisor\"\n  },\n  {\n    $group: {\n      _id: \"$student.advisor.i_ID\"\n    }\n  },\n  {\n    $project: {\n      i_ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1611,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the names of members and names of colleges they go to.",
            "List the names of college members along with the colleges they belong to.",
            "Provide the names of the college students and the colleges they attend.",
            "Display the names of members from each college along with their college names.",
            "Retrieve the names of members alongside the names of the colleges they represent."
        ],
        "ref_sql": "SELECT T2.Name , T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $project: { \"Name\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 734,
        "db_id": "ship_mission",
        "nl_queries": [
            "List the name of ships whose nationality is not \"United States\".",
            "What are the names of the ships that are not from the United States?",
            "Retrieve the names of ships that do not have the United States nationality.",
            "Identify ships that are registered under any nationality except for the United States and list their names.",
            "What are the names of the vessels that are not affiliated with the United States?"
        ],
        "ref_sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
        "MQL": "db.ship.find({\n  Nationality: { $ne: \"United States\" }\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1960,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
            "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.",
            "Can you provide the first and last names of staff members who reported issues related to the product \"rem\" while excluding those linked to \"aut\"?",
            "List the first and last names of staff who have logged problems concerning the product \"rem,\" ensuring that those associated with \"aut\" are not included.",
            "Identify the staff members who reported problems for the product \"rem\" but did not report for \"aut,\" and give me their first and last names."
        ],
        "ref_sql": "SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "MQL": "db.Staff.aggregate([\n  {\n    $unwind: \"$Problems\"\n  },\n  {\n    $match: {\n      \"Problems.product_id\": \"rem\",\n      \"Problems.product_id\": {\n        $not: {\n          $eq: \"aut\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      staff_first_name: 1,\n      staff_last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2976,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name, account type, and account balance of the customer who has the highest credit score.",
            "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
            "Retrieve the account type, account balance, and name of the customer who holds the highest credit score.",
            "Who is the customer with the best credit score, and what are their account type and account balance?",
            "Show me the name, account type, and balance for the customer that has the highest credit rating."
        ],
        "ref_sql": "SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $sort: {\n      \"customer.credit_score\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      acc_type: \"$customer.acc_type\",\n      acc_bal: \"$customer.acc_bal\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2821,
        "db_id": "world_1",
        "nl_queries": [
            "How many unique languages are spoken in the world?",
            "What is the number of distinct languages used around the world?",
            "What is the total number of unique languages spoken worldwide?",
            "How many different languages are used across the globe?",
            "Can you tell me the count of distinct languages spoken around the planet?"
        ],
        "ref_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.Language\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_LANGUAGE\"\n  }\n]);\n"
    },
    {
        "record_id": 1524,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the template type code of the template used by document with the name \"Data base\"?",
            "Return the template type code of the template that is used by a document named Data base.",
            "What is the code for the template type related to the document titled \"Data base\"?",
            "Retrieve the template type code for the document named \"Data base\".",
            "Find the template type code associated with the document called \"Data base\"."
        ],
        "ref_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $match: {\n      \"Templates.Documents.Document_Name\": \"Data base\"\n    }\n  },\n  {\n    $project: {\n      Template_Type_Code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 157,
        "db_id": "entrepreneur",
        "nl_queries": [
            "List the companies and the investors of entrepreneurs.",
            "What are the companies and investors that correspond to each entrepreneur?",
            "Provide the names of companies along with their respective investors from the entrepreneurs.",
            "Can you show me the companies and their associated investors for all entrepreneurs?",
            "Compile a list of entrepreneurs detailing each company and its corresponding investor."
        ],
        "ref_sql": "SELECT Company , Investor FROM entrepreneur",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $project: {\n      Company: \"$entrepreneur.Company\",\n      Investor: \"$entrepreneur.Investor\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2942,
        "db_id": "wedding",
        "nl_queries": [
            "Show all countries and the number of people from each country.",
            "List all countries along with the total number of people from each nation.",
            "Provide a count of individuals for each country represented in the dataset.",
            "Display a summary of countries with the corresponding number of individuals from each one.",
            "Retrieve all countries and the respective headcount of people associated with each country."
        ],
        "ref_sql": "SELECT country , count(*) FROM people GROUP BY country",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4187,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all template type codes and number of templates for each.",
            "What are the different template type codes, and how many templates correspond to each?",
            "List every template type code along with the number of templates associated with each.",
            "Can you provide the various template type codes and the associated count of templates for each?",
            "Compile the template type codes and indicate how many templates are linked to each one."
        ],
        "ref_sql": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $group: {\n      _id: \"$Template_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Template_Type_Code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1302,
        "db_id": "architecture",
        "nl_queries": [
            "What is the id, name and nationality of the architect who built most mills?",
            "Who is the architect with the highest number of mills built, and what are their ID, name, and nationality?",
            "Please provide the ID, name, and nationality of the architect that constructed the most mills.",
            "Can you tell me the ID, name, and nationality of the architect known for building the greatest number of mills?",
            "Identify the architect who has built the most mills and list their ID, name, and nationality."
        ],
        "ref_sql": "SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.architect.aggregate([\n  {\n    $project: {\n      id: 1,\n      name: 1,\n      nationality: 1,\n      num_of_mills: { $size: \"$mill\" }\n    }\n  },\n  {\n    $sort: { num_of_mills: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      id: 1,\n      name: 1,\n      nationality: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 938,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
            "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
            "Show the support, consideration, and opposition rates for every candidate, sorted by unsure rate in ascending order.",
            "Can you provide the support, consider, and oppose rates for each candidate, listed from the lowest to highest unsure rate?",
            "Give me the support, consider, and oppose rates of all candidates, arranged in ascending order according to their unsure rate."
        ],
        "ref_sql": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $sort: {\n      \"candidate.Unsure_rate\": 1\n    }\n  },\n  {\n    $project: {\n      Support_rate: \"$candidate.Support_rate\",\n      Consider_rate: \"$candidate.Consider_rate\",\n      Oppose_rate: \"$candidate.Oppose_rate\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3711,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show order ids and the number of products in each order.",
            "How many different products correspond to each order id?",
            "List the order IDs along with the total number of unique products associated with each order.",
            "For each order ID, how many unique products are included?",
            "Provide the order IDs and the count of distinct products for every order placed."
        ],
        "ref_sql": "SELECT order_id , count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Orders\" },  \n  { $unwind: \"$Orders.Order_Items\" },  \n  {\n    $group: {\n      _id: \"$Orders.order_id\",\n      count_DISTINCT_product_id: { $addToSet: \"$Orders.Order_Items.product_id\" }\n    }\n  },\n  {\n    $project: {\n      order_id: \"$_id\",\n      count_DISTINCT_product_id: { $size: \"$count_DISTINCT_product_id\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3025,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What are the daily hire costs for the products with substring 'Book' in its name?",
            "What are the daily rental prices for items that contain 'Book' in their product name?",
            "Can you list the daily hire fees for products that include the word 'Book' anywhere in their name?",
            "Show me the daily costs for renting products with 'Book' found in their name.",
            "Retrieve the daily hire charges for any products that feature 'Book' in their title."
        ],
        "ref_sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
        "MQL": "db.Products_for_Hire.find({\n  \"product_name\": { $regex: \"Book\", $options: \"i\" }\n}, { \"daily_hire_cost\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4239,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "When is the first transcript released? List the date and details.",
            "What is the earliest date of a transcript release, and what details can you tell me?",
            "What date was the first transcript issued, and what additional information is available?",
            "Can you provide the date and details of the earliest released transcript?",
            "Please tell me when the first transcript was made available and share any corresponding details."
        ],
        "ref_sql": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "MQL": "db.Transcripts.aggregate([\n  {\n    $sort: {\n      transcript_date: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      transcript_date: 1,\n      other_details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3412,
        "db_id": "department_store",
        "nl_queries": [
            "What is the largest and smallest customer codes?",
            "Return the maximum and minimum customer codes.",
            "What are the highest and lowest customer codes recorded?",
            "Can you provide the maximum and minimum values for customer codes?",
            "Show me the smallest and largest customer codes available."
        ],
        "ref_sql": "SELECT max(customer_code) , min(customer_code) FROM Customers",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_customer_code: { $max: \"$customer_code\" },\n      min_customer_code: { $min: \"$customer_code\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_customer_code: 1,\n      min_customer_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 465,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
            "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
            "Which claims exceed the average amount claimed? Show me the dates when these claims were made and settled.",
            "List the claim date and settlement date for every claim with an amount claimed that surpasses the average.",
            "For claims that have a claimed amount higher than the average, provide the dates of claim submission and resolution."
        ],
        "ref_sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Amount_Claimed: { $avg: \"$Customer_Policies.Claims.Amount_Claimed\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      let: { avg_Amount_Claimed: \"$avg_Amount_Claimed\" },\n      pipeline: [\n        {\n          $unwind: \"$Customer_Policies\"\n        },\n        {\n          $unwind: \"$Customer_Policies.Claims\"\n        },\n        {\n          $match: {\n            $expr: { $gt: [\"$Customer_Policies.Claims.Amount_Claimed\", \"$$avg_Amount_Claimed\"] }\n          }\n        },\n        {\n          $project: {\n            Date_Claim_Made: \"$Customer_Policies.Claims.Date_Claim_Made\",\n            Date_Claim_Settled: \"$Customer_Policies.Claims.Date_Claim_Settled\",\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 4238,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the description of transaction type with code \"PUR\".",
            "What is the description for the transaction type with the code \"PUR\"?",
            "Retrieve the description associated with the transaction type code \"PUR\".",
            "Find the transaction type description that corresponds to the code \"PUR\".",
            "Please display the description of the transaction type identified by the code \"PUR\"."
        ],
        "ref_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = \"PUR\"",
        "MQL": "db.Ref_Transaction_Types.find({\n  \"transaction_type_code\": \"PUR\"\n}, { \"transaction_type_description\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 563,
        "db_id": "inn_1",
        "nl_queries": [
            "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",
            "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on Sep 21, 2010.",
            "What is the number of children checked in with DAMIEN TRACHSEL on Sep 21, 2010?",
            "Give me the count of kids for the reservation made by DAMIEN TRACHSEL on Sep 21, 2010.",
            "How many children are staying in the room that DAMIEN TRACHSEL checked into on September 21, 2010?"
        ],
        "ref_sql": "SELECT Kids FROM Reservations WHERE CheckIn = \"2010-09-21\" AND FirstName = \"DAMIEN\" AND LastName = \"TRACHSEL\";",
        "MQL": "db.Rooms.aggregate([\n  {\n    $match: {\n      \"Reservations.CheckIn\": \"Sep 21, 2010\",\n      \"Reservations.LastName\": \"DAMIEN TRACHSEL\"\n    }\n  },\n  {\n    $project: {\n      Kids: \"$Reservations.Kids\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1982,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the institution type with the largest number of institutions.",
            "Identify the type of institution that has the largest number of affiliated institutions.",
            "What type of institution accounts for the highest number of organizations?",
            "Determine which institution type has the greatest number of institutions associated with it.",
            "Find the institution category that includes the most institutions."
        ],
        "ref_sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.building.aggregate([\n  {\n    $unwind: \"$Institution\"\n  },\n  {\n    $group: {\n      _id: \"$Institution.Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 93,
        "db_id": "race_track",
        "nl_queries": [
            "List the race class with at least two races.",
            "What are the classes of races that have two or more corresponding races?",
            "Provide the list of race classes that feature at least two races.",
            "Identify the race classes associated with two or more races.",
            "What are the names of race classes that have a minimum of two races?"
        ],
        "ref_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*) >= 2",
        "MQL": "db.track.aggregate([\n  { $unwind: \"$race\" },\n  {\n    $group: {\n      _id: \"$race.Class\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Class: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2758,
        "db_id": "railway",
        "nl_queries": [
            "How many railways are there?",
            "What is the total number of railways available?",
            "Can you tell me how many railways exist?",
            "How many railway systems are there in the database?",
            "What is the count of all existing railways?"
        ],
        "ref_sql": "SELECT count(*) FROM railway",
        "MQL": "db.railway.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1516,
        "db_id": "department_store",
        "nl_queries": [
            "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
            "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
            "Retrieve the names and contact numbers of all suppliers arranged alphabetically by their addresses.",
            "Provide a list of all suppliers with their names and phone numbers, sorted according to the alphabetical order of their address details.",
            "Display the supplier names and telephone numbers for every supplier, organized in alphabetical order based on their addresses."
        ],
        "ref_sql": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details",
        "MQL": "db.Suppliers.aggregate([\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"supplier_id\",\n      foreignField: \"Supplier_Addresses.supplier_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $sort: {\n      \"Docs1.address_details\": 1\n    }\n  },\n  {\n    $project: {\n      supplier_name: 1,\n      supplier_phone: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 199,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the phone number of the performer Ashley?",
            "Find the phone number of performer \"Ashley\".",
            "Could you provide me with the phone number for performer Ashley?",
            "What is the contact number of the performer named Ashley?",
            "Can I get the phone contact for the performer Ashley?"
        ],
        "ref_sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = \"Ashley\"",
        "MQL": "db.Addresses.aggregate(\n  [\n    { $unwind: '$Performers' },\n    {\n      $match: {\n        'Performers.Customer_Name': 'Ashley'\n      }\n    },\n    {\n      $project: {\n        Customer_Phone: '$Performers.Customer_Phone'\n      }\n    }\n  ]\n);"
    },
    {
        "record_id": 1225,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Find the kind of program which most number of students are enrolled in?",
            "What is the degree summary name that has the most number of students enrolled?",
            "Which degree program has the highest student enrollment?",
            "Identify the degree summary that attracts the most students.",
            "What is the name of the program with the largest number of enrolled students?"
        ],
        "ref_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Departments.aggregate([\n  {\n    $unwind: \"$Degree_Programs\"\n  },\n  {\n    $group: {\n      _id: \"$Degree_Programs.degree_summary_name\",\n      count: {\n        $sum: {\n          $size: \"$Degree_Programs.Student_Enrolment\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      degree_summary_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 849,
        "db_id": "book_2",
        "nl_queries": [
            "What are the dates of publications in descending order of price?",
            "List the publication dates sorted from the highest to the lowest price.",
            "What publication dates are available, ordered by price in descending order?",
            "Provide the dates of publication arranged in decreasing order of their price.",
            "Can you show the publication dates, sorted by price from highest to lowest?"
        ],
        "ref_sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
        "MQL": "db.book.aggregate([\n  { $unwind: \"$publication\" },\n  { $sort: { \"publication.Price\": -1 } },\n  { $project: { \"Publication_Date\": \"$publication.Publication_Date\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1157,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "what are the details of the cmi masters that have the cross reference code 'Tax'?",
            "Can you provide me with the details of the CMI masters linked to the 'Tax' cross reference code?",
            "What details are available for the CMI masters that correspond to the source system code 'Tax'?",
            "Please show the details of CMI masters that have the cross reference code categorized as 'Tax'.",
            "I would like to know the details of the CMI masters associated with the 'Tax' reference code."
        ],
        "ref_sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'",
        "MQL": "db.Customer_Master_Index.find({\n  \"CMI_Cross_References.source_system_code\": \"Tax\"\n}, { \"cmi_details\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3468,
        "db_id": "phone_1",
        "nl_queries": [
            "Find the names of the chip models that are not used by any phone with full accreditation type.",
            "List the chip model names that are absent from any phone classified under full accreditation type.",
            "Identify the names of chip models that do not belong to any phone with full accreditation.",
            "Provide the names of chip models that aren’t associated with phones featuring a full accreditation type.",
            "Retrieve the chip model names that are not used in any phones that hold full accreditation status."
        ],
        "ref_sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'",
        "MQL": "db.chip_model.find({\n  \"phone\": {\n    $not: {\n      $elemMatch: {\n        \"Accreditation_type\": \"Full\"\n      }\n    }\n  }\n}, { \"Model_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2265,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the name of school that has the smallest enrollment in each state?",
            "What is the name of the school with smallest enrollment size per state?",
            "Which school has the lowest enrollment in every state?",
            "Identify the college with the fewest enrolled students for each state.",
            "What are the names of the schools that register the smallest number of enrollees in each state?"
        ],
        "ref_sql": "SELECT cName , state , min(enr) FROM college GROUP BY state",
        "MQL": "db.College.aggregate([\n  {\n    $group: {\n      _id: \"$state\",\n      min_enr: { $min: \"$enr\" },\n      cName: { $first: \"$cName\" }\n    }\n  },\n  {\n    $project: {\n      cName: 1,\n      state: \"$_id\",\n      min_enr: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1210,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
            "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.",
            "List the names of customers with orders that have statuses of both \"On Road\" and \"Shipped\".",
            "Which customers have both \"On Road\" and \"Shipped\" listed as their order statuses? Please provide their names.",
            "Identify the customers who have orders marked with the statuses \"On Road\" and \"Shipped\" simultaneously."
        ],
        "ref_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      order_statuses: {\n        $addToSet: \"$Orders.order_status\"\n      }\n    }\n  },\n  {\n    $match: {\n      order_statuses: {\n        $all: [\"On Road\", \"Shipped\"]\n      }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      localField: \"_id\",\n      foreignField: \"customer_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      customer_name: {\n        $arrayElemAt: [\"$Docs1.customer_name\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2687,
        "db_id": "theme_gallery",
        "nl_queries": [
            "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
            "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
            "What is the total number of exhibitions with an attendance exceeding 100 or a ticket price lower than 10?",
            "Find out how many exhibitions had more than 100 attendees or cost less than 10 for a ticket.",
            "Count the exhibitions that either drew over 100 visitors or charged a ticket price of under 10."
        ],
        "ref_sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $unwind: \"$exhibition.exhibition_record\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"exhibition.exhibition_record.Attendance\": { $gt: 100 } },\n        { \"exhibition.Ticket_Price\": { $lt: 10 } }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 216,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show all distinct location names.",
            "What are the distinct location names?",
            "Retrieve all unique names of locations.",
            "List the distinct names of all locations available.",
            "Provide a collection of unique location names."
        ],
        "ref_sql": "SELECT DISTINCT Location_Name FROM LOCATIONS",
        "MQL": "db.Locations.aggregate([\n  {\n    $group: {\n      _id: \"$Location_Name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location_Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 161,
        "db_id": "sports_competition",
        "nl_queries": [
            "List the types of competition and the number of competitions of each type.",
            "What are the types of competition and number of competitions for that type?",
            "Provide a list of competition types along with their corresponding number of occurrences.",
            "Can you show the various types of competitions and the total count for each type?",
            "What are the different types of competitions and how many competitions fall under each type?"
        ],
        "ref_sql": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type",
        "MQL": "db.competition.aggregate([\n  {\n    $group: {\n      _id: \"$Competition_type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Competition_type: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 546,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
            "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
            "Provide a list of all ways to reach attractions and indicate how many attractions correspond to each method of access.",
            "Enumerate the different access routes to tourist attractions, along with the count of attractions available via those routes.",
            "Identify all available methods for accessing attractions, including the number of attractions reachable by each method."
        ],
        "ref_sql": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $group: {\n      _id: \"$Tourist_Attractions.How_to_Get_There\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      How_to_Get_There: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1156,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
            "Can you provide the cmi cross reference ID linked to at least one council tax record along with its source system code?",
            "What cmi cross reference IDs correspond to any council tax entries? Please include the source system codes in the list.",
            "List the cmi cross reference ID and associated source system code for any entries that have at least one council tax record.",
            "Identify the cmi cross reference IDs that are tied to council tax entries, and present their corresponding source system codes as well."
        ],
        "ref_sql": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*) >= 1",
        "MQL": "db.Customer_Master_Index.aggregate([\n  {\n    $unwind: \"$CMI_Cross_References\"\n  },\n  {\n    $match: {\n      \"CMI_Cross_References.Council_Tax\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      cmi_cross_ref_id: \"$CMI_Cross_References.cmi_cross_ref_id\",\n      source_system_code: \"$CMI_Cross_References.source_system_code\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2723,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "How many participants belong to the type 'Organizer'?",
            "What is the total number of participants who are classified as 'Organizers'?",
            "How many individuals are categorized as 'Organizer' participants?",
            "Count the number of participants with the role of 'Organizer'.",
            "How many participants fall under the type 'Organizer'?"
        ],
        "ref_sql": "SELECT count(*) FROM participants WHERE participant_type_code = 'Organizer'",
        "MQL": "db.Participants.aggregate([\n  {\n    $match: {\n      \"Participant_Type_Code\": \"Organizer\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3314,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What is the most common interaction type between enzymes and medicine? And how many are there?",
            "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
            "What is the interaction type that occurs most frequently between enzymes and medications, along with its total count?",
            "Identify the most prevalent types of interactions between enzymes and medicines, and specify how many types exist.",
            "Which interaction type between enzymes and drugs is the most common, and what is the number of such interactions?"
        ],
        "ref_sql": "SELECT interaction_type , count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.medicine.aggregate([\n  { $unwind: \"$medicine_enzyme_interaction\" },\n  {\n    $group: {\n      _id: \"$medicine_enzyme_interaction.interaction_type\",\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      interaction_type: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3019,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "What are the customer phone numbers under the policy \"Life Insurance\"?",
            "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
            "Can you provide the phone numbers for customers with \"Life Insurance\" policies?",
            "What customer phone numbers are associated with the \"Life Insurance\" policy type?",
            "Show me the contact numbers of customers who hold a policy classified as \"Life Insurance\"."
        ],
        "ref_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\"",
        "MQL": "db.Available_Policies.aggregate([\n  {\n    $match: {\n      policy_type_code: \"Life Insurance\"\n    }\n  },\n  {\n    $project: {\n      Customer_Phone: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1428,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the name of all students who were in the tryout sorted in alphabetic order.",
            "What are the names of all students who tried out in alphabetical order?",
            "List the names of all players who participated in the tryouts, arranged in alphabetical order.",
            "Show the names of every student involved in the tryouts, sorted alphabetically.",
            "Provide a list of all student names from the tryouts, in ascending alphabetical order."
        ],
        "ref_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $project: {\n      pName: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      pName: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4005,
        "db_id": "game_1",
        "nl_queries": [
            "How many games are played for all football games by students on scholarship?",
            "What is the total number of all football games played by scholarship students?",
            "What is the total count of football games played by students who have scholarships?",
            "How many football games have students on scholarships participated in?",
            "Find out the overall number of football games played by scholarship-receiving students."
        ],
        "ref_sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname = \"Football\" AND onscholarship = 'Y'",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $match: {\n      \"SportsInfo.SportName\": \"Football\",\n      \"SportsInfo.OnScholarship\": \"Y\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_gamesplayed: {\n        $sum: \"$SportsInfo.GamesPlayed\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_gamesplayed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1714,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
            "List the names of customers who have received two or more mailshots resulting in an 'Order' outcome.",
            "Provide the names of customers with at least two mailshot campaigns that ended with an 'Order' outcome code.",
            "Retrieve the names of customers who have a minimum of two mailshots marked as 'Order'.",
            "Identify customers who have at least two mailshot records with an outcome code of 'Order' and display their names."
        ],
        "ref_sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING count(*) >= 2",
        "MQL": "db.Customers.aggregate([\n  \n  { $unwind: \"$Mailshot_Customers\" },\n  \n  \n  { $match: { \"Mailshot_Customers.outcome_code\": \"Order\" } },\n  \n  \n  { \n    $group: {\n      _id: \"$customer_id\",\n      count: { $sum: 1 },\n      customer_name: { $first: \"$customer_name\" }\n    }\n  },\n  \n  \n  { $match: { count: { $gte: 2 } } },\n  \n  \n  { $project: { _id: 0, customer_name: 1 } }\n]);\n"
    },
    {
        "record_id": 1205,
        "db_id": "tracking_orders",
        "nl_queries": [
            "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
            "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?",
            "Identify the customers who have previously canceled their order for the product \"food\" when the item status was marked as \"Cancel.\"",
            "Who are the customers that have ever canceled an order for the item \"food\" with the status \"Cancel\"?",
            "Provide a list of customers that have canceled their purchase of the product \"food\" (indicated by an item status of \"Cancel\")."
        ],
        "ref_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Order_Items\"\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"Orders.Order_Items.product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.product_name\": \"food\",\n      \"Orders.Order_Items.order_item_status\": \"Cancel\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      customer_name: { $first: \"$customer_name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1795,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show all artist names and the number of exhibitions for each artist.",
            "How many exhibitions has each artist had?",
            "List the names of all artists along with the total number of exhibitions they have participated in.",
            "What is the exhibition count for each artist?",
            "Can you provide the artist names together with how many exhibitions each has held?"
        ],
        "ref_sql": "SELECT T2.name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2290,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show all card type codes and the number of customers holding cards in each type.",
            "What are the different card type codes, and how many different customers hold each type?",
            "List the various card type codes along with the total number of unique customers that possess cards for each type.",
            "Provide the distinct card type codes and the count of unique customers holding each type of card.",
            "Display all card types and indicate how many unique customers have cards of each type."
        ],
        "ref_sql": "SELECT card_type_code , count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: \"$card_type_code\",\n      count_DISTINCT_customer_id: {\n        $addToSet: \"$customer_id\"\n      }\n    }\n  },\n  {\n    $project: {\n      card_type_code: \"$_id\",\n      count_DISTINCT_customer_id: {\n        $size: \"$count_DISTINCT_customer_id\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4275,
        "db_id": "world_1",
        "nl_queries": [
            "Return the names of cities that have a population between 160000 and 900000 .",
            "List the names of cities with populations ranging from 160,000 to 900,000.",
            "Provide the names of cities whose population lies between 160,000 and 900,000.",
            "Identify cities with a population between 160,000 and 900,000 and return their names.",
            "What are the names of cities that have a population of at least 160,000 and at most 900,000?"
        ],
        "ref_sql": "select name from city where population between 160000 and 900000",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$city\"\n  },\n  {\n    $match: {\n      \"city.Population\": { $gte: 160000, $lte: 900000 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$city.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1016,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the details and opening hours of the museums?",
            "Give me the detail and opening hour for each museum.",
            "Can you provide the details and operational hours for the museums?",
            "What information and hours of operation are available for the museums?",
            "Please list the details and opening times of all the museums."
        ],
        "ref_sql": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Museums\"\n  },\n  {\n    $project: {\n      Museum_Details: \"$Tourist_Attractions.Museums.Museum_Details\",\n      Opening_Hours: \"$Tourist_Attractions.Opening_Hours\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3063,
        "db_id": "csu_1",
        "nl_queries": [
            "What are the degrees conferred in \"San Francisco State University\" in 2001.",
            "What degrees were conferred in San Francisco State University in the year 2001?",
            "What degrees were awarded by San Francisco State University in the year 2001?",
            "Can you list the degrees granted in 2001 at San Francisco State University?",
            "Please provide the degrees conferred at San Francisco State University during 2001."
        ],
        "ref_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Francisco State University\"\n    }\n  },\n  {\n    $unwind: \"$degrees\"\n  },\n  {\n    $match: {\n      \"degrees.Year\": 2001\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Degrees: \"$degrees.Degrees\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 263,
        "db_id": "department_management",
        "nl_queries": [
            "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
            "What unique years did the departments, overseen by heads from Alabama, get established?",
            "Can you list the creation years of departments managed by individuals born in Alabama?",
            "Retrieve the distinct years that departments were founded under the management of a head from Alabama.",
            "Identify the various creation years for departments led by a secretary originally from Alabama."
        ],
        "ref_sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'",
        "MQL": "db.department.aggregate([\n  {\n    $lookup: {\n      from: \"head\",\n      localField: \"management.head_ID\",\n      foreignField: \"head_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.born_state\": \"Alabama\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Creation\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"Creation\": \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3849,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the rank, first name, and last name for all the faculty.",
            "What are the rank, first name, and last name of the faculty members?",
            "Provide the rank, first name, and last name for every faculty member.",
            "List the rank, first name, and last name of all faculty staff.",
            "Display the ranking, first names, and last names of each faculty member."
        ],
        "ref_sql": "SELECT rank , Fname , Lname FROM Faculty",
        "MQL": "db.Faculty.find({}, { Rank: 1, Fname: 1, Lname: 1, _id: 0 });\n"
    },
    {
        "record_id": 1265,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
            "Can you provide the skill descriptions needed to fix the various faults associated with different parts? Please include the names of each fault alongside their skill descriptions.",
            "What are the descriptions of the skills required to address the faults in different parts? I would like to see both the fault names and their corresponding skill descriptions.",
            "For each fault in various parts, what skills are needed to resolve them? List both the fault names and the descriptions of the skills required.",
            "Please list the names of the faults and the skill descriptions necessary to fix the faults occurring in different parts."
        ],
        "ref_sql": "SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
        "MQL": "db.Parts.aggregate([\n  \n  { $unwind: \"$Part_Faults\" },\n  \n  \n  { $unwind: \"$Part_Faults.Skills_Required_To_Fix\" },\n  \n  \n  {\n    $lookup: {\n      from: \"Skills\",\n      localField: \"Part_Faults.Skills_Required_To_Fix.skill_id\",\n      foreignField: \"skill_id\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      fault_short_name: \"$Part_Faults.fault_short_name\",\n      skill_description: \"$Docs1.skill_description\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1345,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the names and heights of buildings with at least two institutions founded after 1880.",
            "Retrieve the names and heights of buildings housing at least two institutions established after 1880.",
            "List the building names along with their heights that contain no fewer than two institutions founded post-1880.",
            "Provide the names and heights of buildings that have a minimum of two institutions that were founded after 1880.",
            "Display the heights and names of buildings with at least two institutions that were established after the year 1880."
        ],
        "ref_sql": "SELECT T1.name , T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING count(*) >= 2",
        "MQL": "db.building.aggregate([\n  {\n    $addFields: {\n      institutions_founded_after_1880: {\n        $filter: {\n          input: \"$Institution\",\n          as: \"institution\",\n          cond: { $gt: [\"$$institution.Founded\", 1880] }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      $expr: { $gte: [{ $size: \"$institutions_founded_after_1880\" }, 2] }\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Height_feet\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 600,
        "db_id": "train_station",
        "nl_queries": [
            "Show the location with most number of train stations.",
            "Identify the area that contains the highest number of train stations.",
            "What is the location with the greatest number of train stations?",
            "Find the region that has the most train stations.",
            "Which location lists the largest count of train stations?"
        ],
        "ref_sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3885,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the name of rooms whose base price is between 120 and 150.",
            "Which rooms cost between 120 and 150? Give me the room names.",
            "What are the names of rooms priced between 120 and 150?",
            "List the room names that have a base price within the range of 120 to 150.",
            "Identify the rooms with names that cost between 120 and 150 units."
        ],
        "ref_sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "MQL": "db.Rooms.find({\n  basePrice: {\n    $gte: 120,\n    $lte: 150\n  }\n}, {\n  roomName: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 4179,
        "db_id": "icfp_1",
        "nl_queries": [
            "Which papers have \"Stephanie Weirich\" as an author?",
            "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
            "What are the titles of the papers authored by Stephanie Weirich?",
            "List the papers written by the author named Stephanie Weirich.",
            "Can you provide the titles of the works that have Stephanie Weirich as one of the authors?"
        ],
        "ref_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.fname\": \"Stephanie\",\n      \"Docs1.lname\": \"Weirich\"\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1843,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Show the premise type and address type code for all customer addresses.",
            "Retrieve the types of premises and address type codes for every customer address.",
            "Provide the premise type alongside the address type code for all addresses linked to customers.",
            "Display the premise types and the corresponding address type codes for all customer addresses.",
            "List the premise type and address type code for each address associated with customers."
        ],
        "ref_sql": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Premises\",\n      localField: \"Customer_Addresses.premise_id\",\n      foreignField: \"premise_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"premises_type\": \"$Docs1.premises_type\",\n      \"address_type_code\": \"$Customer_Addresses.address_type_code\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 533,
        "db_id": "company_office",
        "nl_queries": [
            "Show the headquarters shared by more than two companies.",
            "Which headquarter locations are used by more than 2 companies?",
            "List the headquarters that are home to over two companies.",
            "Identify the locations of headquarters shared by more than two companies.",
            "What are the headquarters locations that have more than two companies established there?"
        ],
        "ref_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2",
        "MQL": "db.Companies.aggregate([\n  {\n    $group: {\n      _id: \"$Headquarters\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      Headquarters: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3058,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
            "What are the valid from and valid to dates for the card with the number 4560596484842?",
            "Provide the start and end validity dates for the card numbered '4560596484842'.",
            "What are the effective dates for the card with the card number 4560596484842?",
            "Can you tell me the valid from and valid to dates for the card identified by number 4560596484842?"
        ],
        "ref_sql": "SELECT date_valid_from , date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\"",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $match: {\n      card_number: \"4560596484842\"\n    }\n  },\n  {\n    $project: {\n      date_valid_from: 1,\n      date_valid_to: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3862,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show all role codes and the number of employees in each role.",
            "What is the code of each role and the number of employees in each role?",
            "List each role code with the corresponding count of employees assigned to that role.",
            "Provide the role codes along with the total number of employees for each role.",
            "Display the role codes and the number of employees that fall under each role category."
        ],
        "ref_sql": "SELECT role_code , count(*) FROM Employees GROUP BY role_code",
        "MQL": "db.Roles.aggregate([\n  {\n    $group: {\n      _id: \"$Role_Code\",\n      count: { $sum: { $size: \"$Employees\" } }\n    }\n  },\n  {\n    $project: {\n      Role_Code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1239,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
            "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
            "List the dormitories that feature both a TV Lounge and a Study Room as part of their amenities.",
            "Which dorms provide the amenities of a TV Lounge along with a Study Room?",
            "Identify the names of dorms that include both a TV Lounge and a Study Room in their amenity list."
        ],
        "ref_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"Has_amenity.amenid\",\n      foreignField: \"amenid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.amenity_name\": {\n        $all: [\"TV Lounge\", \"Study Room\"]\n      }\n    }\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2534,
        "db_id": "movie_1",
        "nl_queries": [
            "How many movies were made before 2000?",
            "What is the total number of movies released before the year 2000?",
            "Can you tell me how many films were produced prior to 2000?",
            "How many films came out before the year 2000?",
            "Please provide the count of movies that were made before the year 2000."
        ],
        "ref_sql": "SELECT count(*) FROM Movie WHERE YEAR < 2000",
        "MQL": "db.Movie.aggregate([\n  { $match: { \"year\": { $lt: 2000 } } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 955,
        "db_id": "flight_2",
        "nl_queries": [
            "What is the code of airport that has the highest number of flights?",
            "What is the airport code of the airport with the most flights?",
            "Which airport has the highest total number of flights, and what is its code?",
            "Can you tell me the code of the airport that operates the greatest number of flights?",
            "What is the airport code for the airport that has the highest flight count?"
        ],
        "ref_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.airports.aggregate([\n  {\n    $unwind: \"$flights\"\n  },\n  {\n    $group: {\n      _id: \"$AirportCode\",\n      flightCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      flightCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      AirportCode: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2630,
        "db_id": "phone_1",
        "nl_queries": [
            "How many models do not have the wifi function?",
            "Count the number of chip model that do not have wifi.",
            "What is the total number of chip models that lack wifi capability?",
            "How many chip models are there without the wifi feature?",
            "Please provide the count of chip models that do not have wifi support."
        ],
        "ref_sql": "SELECT count(*) FROM chip_model WHERE wifi = 'No'",
        "MQL": "db.chip_model.aggregate([\n  {\n    $match: {\n      WiFi: { $in: [null, \"\", \"None\", \"No\", \"N/A\"] }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 422,
        "db_id": "college_2",
        "nl_queries": [
            "Find the salaries of all distinct instructors that are less than the largest salary.",
            "What are the distinct salaries of all instructors who earned less than the maximum salary?",
            "List all unique instructor salaries that are below the highest salary in the department.",
            "Retrieve the various salaries of instructors who make less than the top salary.",
            "What are the different salaries for instructors who earn less than the maximum pay?"
        ],
        "ref_sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT max(salary) FROM instructor)",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_salary: { $max: \"$instructor.salary\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { max_salary: \"$max_salary\" },\n      pipeline: [\n        { $unwind: \"$instructor\" },\n        { $match: { $expr: { $lt: [\"$instructor.salary\", \"$$max_salary\"] } } },\n        { $group: { _id: \"$instructor.salary\" } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      salary: \"$Docs1._id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1368,
        "db_id": "hospital_1",
        "nl_queries": [
            "How many patients do each physician take care of? List their names and number of patients they take care of.",
            "Return the name of each physician and the number of patients he or she treats.",
            "What is the count of patients for every physician? Please provide their names along with the patient counts.",
            "Provide a list of physicians along with the total number of patients they each attend to.",
            "List each physician's name alongside the number of patients they are responsible for treating."
        ],
        "ref_sql": "SELECT T1.name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Patient\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      patientCount: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      count: \"$patientCount\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 723,
        "db_id": "phone_market",
        "nl_queries": [
            "List the names of phones that are not on any market.",
            "Retrieve the names of phones that do not belong to any market.",
            "Show me the phone names that aren't available in any market.",
            "Find the names of phones that have no listings in any market.",
            "List all phones that are not associated with any market presence."
        ],
        "ref_sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
        "MQL": "db.phone.find({\n  \"phone_market\": { $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2804,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the number of users who did not write any review.",
            "How many users have not submitted any reviews?",
            "Count the number of users who haven't written a review.",
            "What is the total number of users that do not have any reviews?",
            "Determine how many users have never posted a review."
        ],
        "ref_sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "MQL": "db.useracct.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"review\": { $exists: false } },\n        { \"review\": { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3041,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the start and end dates for incidents with incident type code \"NOISE\"?",
            "Can you provide the starting and ending dates for incidents classified under the \"NOISE\" incident type?",
            "What are the beginning and concluding dates for incidents that have an incident type code of \"NOISE\"?",
            "Please list the start and end dates for incidents marked with the incident type code \"NOISE.\"",
            "What are the dates when incidents of the \"NOISE\" type started and ended?"
        ],
        "ref_sql": "SELECT date_incident_start , date_incident_end FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$Students.Behavior_Incident\"\n  },\n  {\n    $match: {\n      \"Students.Behavior_Incident.incident_type_code\": \"NOISE\"\n    }\n  },\n  {\n    $project: {\n      date_incident_start: \"$Students.Behavior_Incident.date_incident_start\",\n      date_incident_end: \"$Students.Behavior_Incident.date_incident_end\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 318,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "Show distinct types of artworks that are nominated in festivals in 2007.",
            "List all unique artwork types nominated in festivals during the year 2007.",
            "Provide a distinct list of artwork categories that received nominations in festivals held in 2007.",
            "What are the different types of artworks that were nominated at festivals in 2007?",
            "Enumerate the unique types of artworks nominated in the festivals of the year 2007."
        ],
        "ref_sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007",
        "MQL": "db.festival_detail.aggregate([\n  {\n    $match: { \"Year\": 2007 }\n  },\n  {\n    $unwind: \"$nomination\"\n  },\n  {\n    $lookup: {\n      from: \"artwork\",\n      localField: \"nomination.Artwork_ID\",\n      foreignField: \"Artwork_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.Type\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Type: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1506,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the id and first name of the student that has the most number of assessment notes?",
            "Who is the student with the highest count of assessment notes, and what is their ID?",
            "Identify the student ID and first name of the individual with the most assessment notes.",
            "Which student has the maximum number of assessment notes, and what are their ID and first name?",
            "Provide the first name and ID of the student that holds the record for the most assessment notes."
        ],
        "ref_sql": "SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $project: {\n      \"student_id\": \"$Students.student_id\",\n      \"first_name\": \"$Students.first_name\",\n      \"assessment_notes_count\": {\n        $size: \"$Students.Assessment_Notes\"\n      }\n    }\n  },\n  {\n    $sort: {\n      \"assessment_notes_count\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"_id\": 0,\n      \"student_id\": 1,\n      \"first_name\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3828,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show the product type and name for the products with price higher than 1000 or lower than 500.",
            "List the type and name of products priced above 1000 or below 500.",
            "Provide the product type and name for all items that have a price exceeding 1000 or falling below 500.",
            "Retrieve the type and name of products that are either more than 1000 in price or less than 500.",
            "Display the product name and type for products priced either over 1000 or under 500."
        ],
        "ref_sql": "SELECT product_type_code , product_name FROM products WHERE product_price > 1000 OR product_price < 500",
        "MQL": "db.Products.find({\n  $or: [\n    { \"product_price\": { $gt: 1000 } },\n    { \"product_price\": { $lt: 500 } }\n  ]\n}, { \"product_type_code\": 1, \"product_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1725,
        "db_id": "college_1",
        "nl_queries": [
            "Find the name and address of the department that has the highest number of students.",
            "What is the name and address of the department with the most students?",
            "Identify the department with the largest student population and provide its name and address.",
            "What are the name and address of the department that accommodates the most students?",
            "Give me the name and address of the department that has the highest enrollment of students."
        ],
        "ref_sql": "SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_CODE\",\n      DEPT_NAME: { $first: \"$DEPARTMENT.DEPT_NAME\" },\n      DEPT_ADDRESS: { $first: \"$DEPARTMENT.DEPT_ADDRESS\" },\n      count_student: { $sum: { $size: \"$DEPARTMENT.STUDENT\" } }\n    }\n  },\n  {\n    $sort: {\n      count_student: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      DEPT_NAME: 1,\n      DEPT_ADDRESS: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1630,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the names of body builders in descending order of total scores?",
            "List the names of body builders sorted by their total scores from highest to lowest.",
            "Provide the names of body builders arranged in descending order based on their total scores.",
            "What names can be found for body builders when ordered by total scores in descending fashion?",
            "Show the names of body builders, ranked by their total scores starting with the highest."
        ],
        "ref_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$body_builder\"\n  },\n  {\n    $sort: { \"body_builder.Total\": -1 }\n  },\n  {\n    $project: { \"Name\": 1, \"_id\": 0 }\n  }\n]);\n"
    },
    {
        "record_id": 2719,
        "db_id": "coffee_shop",
        "nl_queries": [
            "How many members are not living in Hartford?",
            "What is the total number of members that do not live in Hartford?",
            "How many members are there who are not based in Hartford?",
            "Can you tell me the count of members who aren't located in Hartford?",
            "How many members have an address different from Hartford?"
        ],
        "ref_sql": "SELECT count(*) FROM member WHERE address != 'Hartford'",
        "MQL": "db.member.aggregate([\n  {\n    $match: {\n      \"Address\": { $ne: \"Hartford\" }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1673,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What are the weights of entrepreneurs in descending order of money requested?",
            "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
            "List the weights of entrepreneurs sorted by their requested funds in descending order.",
            "Provide the weights of entrepreneurs, arranged from highest to lowest based on the money they have requested.",
            "Show the weights of entrepreneurs, ordered by the amount of money they requested, starting with the largest."
        ],
        "ref_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $sort: {\n      \"entrepreneur.Money_Requested\": -1\n    }\n  },\n  {\n    $project: {\n      Weight: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3870,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What are all role codes?",
            "Can you provide a list of all available role codes?",
            "What role codes are present in the database?",
            "Show me the complete set of role codes.",
            "Please enumerate all the role codes that exist."
        ],
        "ref_sql": "SELECT role_code FROM ROLES;",
        "MQL": "db.Roles.find({}, { \"role_code\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2191,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the average number of followers for the users who do not have any tweet.",
            "What is the average follower count for users who have not posted any tweets?",
            "Calculate the mean number of followers for users with no tweets at all.",
            "Determine the average number of followers for accounts that do not have any tweets.",
            "Find out the average followers of users who haven’t tweeted anything."
        ],
        "ref_sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
        "MQL": "db.user_profiles.aggregate([\n  {\n    $match: {\n      \"tweets\": { $size: 0 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_followers: { $avg: \"$followers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_followers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3979,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the total saving balance for each account name.",
            "What are the names of customers with accounts, and what are the total savings balances for each?",
            "Calculate the total balance in savings for each customer account.",
            "List customer names along with their corresponding total savings balances.",
            "What is the aggregated savings balance per account name for each customer?"
        ],
        "ref_sql": "SELECT sum(T2.balance) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$SAVINGS\"\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      sum_balance: {\n        $sum: \"$SAVINGS.balance\"\n      }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      sum_balance: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3818,
        "db_id": "department_store",
        "nl_queries": [
            "Return the names and ids of all products whose price is between 600 and 700.",
            "What are the names and ids of products costing between 600 and 700?",
            "List the product names and IDs for all products priced from 600 to 700.",
            "Provide the names and identification numbers of products that have a cost ranging between 600 and 700.",
            "Identify all products with their names and IDs that fall within the price range of 600 to 700."
        ],
        "ref_sql": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "MQL": "db.Products.find({\n  product_price: {\n    $gte: 600,\n    $lte: 700\n  }\n}, {\n  product_name: 1,\n  product_id: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1743,
        "db_id": "college_1",
        "nl_queries": [
            "Find the first names of professors who are teaching more than one class.",
            "What are the first names of all professors who teach more than one class?",
            "List the first names of professors who handle more than one class.",
            "Which professors are teaching multiple classes? Provide their first names.",
            "Identify the first names of all professors that teach more than a single class."
        ],
        "ref_sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count(*) > 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $group: {\n      _id: \"$EMP_NUM\",\n      EMP_FNAME: { $first: \"$EMP_FNAME\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      EMP_FNAME: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 715,
        "db_id": "poker_player",
        "nl_queries": [
            "Show names of people whose nationality is not \"Russia\".",
            "What are the names of people who are not from Russia?",
            "List the names of individuals who do not hold Russian nationality.",
            "Provide the names of people who are not citizens of Russia.",
            "Identify the names of persons whose nationality isn’t Russian."
        ],
        "ref_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "MQL": "db.people.find(\n  { Nationality: { $ne: \"Russia\" } },\n  { Name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3586,
        "db_id": "theme_gallery",
        "nl_queries": [
            "What is the name of the artist who joined latest?",
            "Return the name of the artist who has the latest join year.",
            "Who is the most recently joined artist?",
            "Please provide the name of the artist who joined most recently.",
            "Identify the artist that has the most recent year of joining."
        ],
        "ref_sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "MQL": "db.artist.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Year_Join: { $max: \"$Year_Join\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"artist\",\n      let: { max_Year_Join: \"$max_Year_Join\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $eq: [\"$Year_Join\", \"$$max_Year_Join\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            Name: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3893,
        "db_id": "college_1",
        "nl_queries": [
            "What is the code of the school where the accounting department belongs to?",
            "What is the school code of the accounting department?",
            "What is the school identifier associated with the accounting department?",
            "Can you tell me the school code for the Accounting department?",
            "What is the identifier for the school that houses the accounting department?"
        ],
        "ref_sql": "SELECT school_code FROM department WHERE dept_name = \"Accounting\"",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"Accounting\"\n    }\n  },\n  {\n    $project: {\n      SCHOOL_CODE: \"$DEPARTMENT.SCHOOL_CODE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 604,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the leader names and locations of colleges.",
            "List the names of college leaders along with their respective college locations.",
            "Provide the leader names and the locations of each college.",
            "Display the names of the leaders and where the colleges are located.",
            "Retrieve the leader's names and the geographic locations of colleges."
        ],
        "ref_sql": "SELECT Leader_Name , College_Location FROM college",
        "MQL": "db.college.find({}, { \"Leader_Name\": 1, \"College_Location\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 34,
        "db_id": "student_assessment",
        "nl_queries": [
            "What are all info of students who registered courses but not attended courses?",
            "What are all details of the students who registered but did not attend any course?",
            "Can you provide the details of students who signed up for courses but did not show up for any of them?",
            "What information do we have on students who registered for courses yet attended none?",
            "Show me the information regarding students who enrolled in courses but failed to attend any sessions."
        ],
        "ref_sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Student_Course_Registrations\"\n  },\n  {\n    $project: {\n      student_id: \"$Student_Course_Registrations.student_id\",\n      course_id: \"$Student_Course_Registrations.course_id\",\n      registration_date: \"$Student_Course_Registrations.registration_date\",\n      count_Student_Course_Attendance: {\n        $size: \"$Student_Course_Registrations.Student_Course_Attendance\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Student_Course_Attendance: 0\n    }\n  },\n  {\n    $project: {\n      student_id: 1,\n      course_id: 1,\n      registration_date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3643,
        "db_id": "museum_visit",
        "nl_queries": [
            "What is the name of the museum that had no visitor yet?",
            "Which museums have not had any visitors at all?",
            "Can you tell me the names of the museums that haven’t received any visitors yet?",
            "What are the names of museums that currently have no recorded visits?",
            "List the museums that have zero visitors to date."
        ],
        "ref_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "MQL": "db.museum.find({\n  \"visit\": { $exists: true, $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 783,
        "db_id": "farm",
        "nl_queries": [
            "Find the official names of cities with population bigger than 1500 or smaller than 500.",
            "What are the official names of cities that have population over 1500 or less than 500?",
            "List the official names of cities with populations greater than 1500 or less than 500.",
            "What official names correspond to cities that have a population exceeding 1500 or a population below 500?",
            "Identify the official names of cities whose population is either more than 1500 or fewer than 500."
        ],
        "ref_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
        "MQL": "db.city.find({\n  $or: [\n    { Population: { $gt: 1500 } },\n    { Population: { $lt: 500 } }\n  ]\n}, {\n  Official_Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1824,
        "db_id": "shop_membership",
        "nl_queries": [
            "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
            "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
            "List the branches that have members hailing from Louisville, Kentucky, and Hiram, Georgia.",
            "Which branch names are associated with members from both Louisville, Kentucky, and Hiram, Georgia?",
            "Identify the names of branches that include members whose hometowns are Louisville, Kentucky, and Hiram, Georgia."
        ],
        "ref_sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'",
        "MQL": "db.branch.aggregate([\n  {\n    $lookup: {\n      from: \"member\",\n      localField: \"Branch_ID\",\n      foreignField: \"Branch_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      $or: [\n        {\n          \"Docs1.Hometown\": \"Louisville, Kentucky\"\n        },\n        {\n          \"Docs1.Hometown\": \"Hiram, Georgia\"\n        }\n      ]\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3612,
        "db_id": "sports_competition",
        "nl_queries": [
            "List all club names in descending alphabetical order.",
            "What are the names of all the clubs ordered in descending alphabetical order?",
            "Show all the club names sorted in reverse alphabetical order.",
            "Retrieve a list of all clubs' names arranged in descending order alphabetically.",
            "Provide the names of every club organized from Z to A."
        ],
        "ref_sql": "SELECT name FROM club ORDER BY name DESC",
        "MQL": "db.club.find({}, { name: 1, _id: 0 }).sort({ name: -1 });\n"
    },
    {
        "record_id": 2655,
        "db_id": "roller_coaster",
        "nl_queries": [
            "How many countries do not have an roller coaster longer than 3000?",
            "What is the total number of countries without any roller coasters longer than 3000 units?",
            "How many countries lack roller coasters that exceed a length of 3000?",
            "Can you tell me the count of countries that do not have a roller coaster surpassing 3000 in length?",
            "How many nations do not feature roller coasters that are longer than 3000 units?"
        ],
        "ref_sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 )",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: {\n      path: \"$roller_coaster\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$Country_ID\",\n      has_long_coaster: {\n        $max: {\n          $cond: [{ $gt: [\"$roller_coaster.Length\", 3000] }, 1, 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      has_long_coaster: 0\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 549,
        "db_id": "company_office",
        "nl_queries": [
            "Please show each industry and the corresponding number of companies in that industry.",
            "Whah are the name of each industry and the number of companies in that industry?",
            "List all industries along with the total number of companies operating in each.",
            "Can you provide the names of each industry together with how many companies belong to them?",
            "What industries are there, and how many companies are in each of those industries?"
        ],
        "ref_sql": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
        "MQL": "db.Companies.aggregate([\n  {\n    $group: {\n      _id: \"$Industry\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Industry: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 65,
        "db_id": "flight_2",
        "nl_queries": [
            "Which airline has abbreviation 'UAL'?",
            "Give the airline with abbreviation 'UAL'.",
            "What is the name of the airline corresponding to the abbreviation 'UAL'?",
            "Identify the airline associated with the abbreviation 'UAL'.",
            "Which airline is represented by the abbreviation 'UAL'?"
        ],
        "ref_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
        "MQL": "db.airlines.aggregate([\n  {\n    $match: {\n      Abbreviation: \"UAL\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Airline: 1\n    }\n  }\n])\n\n"
    },
    {
        "record_id": 208,
        "db_id": "election",
        "nl_queries": [
            "Show all the distinct districts for elections.",
            "What are the distinct districts for elections?",
            "List all unique electoral districts.",
            "What unique districts can we find for the elections?",
            "Identify all distinct electoral districts associated with the elections."
        ],
        "ref_sql": "SELECT DISTINCT District FROM election",
        "MQL": "db.county.aggregate([\n  {\n    $project: {\n      District: \"$election.District\"\n    }\n  },\n  {\n    $unwind: \"$District\"\n  },\n  {\n    $group: {\n      _id: \"$District\"\n    }\n  },\n  {\n    $project: {\n      District: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4195,
        "db_id": "twitter_1",
        "nl_queries": [
            "List the text of all tweets in the order of date.",
            "Retrieve the content of all tweets sorted by their creation date.",
            "Show all tweet texts arranged in chronological order based on their date of creation.",
            "Provide a list of tweet texts organized by the date they were posted.",
            "Display the texts of all tweets in ascending order of their creation timestamps."
        ],
        "ref_sql": "SELECT text FROM tweets ORDER BY createdate",
        "MQL": "db.user_profiles.aggregate([\n  { $unwind: \"$tweets\" },\n  { $sort: { \"tweets.createdate\": 1 } },\n  { $project: { \"_id\": 0, \"text\": \"$tweets.text\" } }\n]);\n"
    },
    {
        "record_id": 1669,
        "db_id": "farm",
        "nl_queries": [
            "Please show the themes of competitions with host cities having populations larger than 1000.",
            "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
            "Can you provide the themes of competitions located in cities with populations above 1000?",
            "What themes are associated with competitions held in cities that have more than 1000 inhabitants?",
            "Show me the competition themes for host cities that have a population greater than 1000."
        ],
        "ref_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
        "MQL": "db.city.aggregate([\n  {\n    $match: {\n      Population: { $gt: 1000 }\n    }\n  },\n  {\n    $unwind: \"$farm_competition\"\n  },\n  {\n    $project: {\n      Theme: \"$farm_competition.Theme\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1484,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
            "Can you provide the names and IDs of staff members who have logged faults but have not engaged any engineers for visits?",
            "List the staff names and identification numbers of those who have recorded fault logs and do not have any engineer visit records.",
            "What are the names and IDs of the staff who have documented faults but haven’t contacted any visiting engineers?",
            "Identify the staff members who have a fault log entry but no record of contacting an engineer for visits, and provide their names and IDs."
        ],
        "ref_sql": "SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id",
        "MQL": "db.Staff.aggregate([\n  {\n    $match: {\n      \"Fault_Log\": { $exists: true, $ne: [] },\n      \"Engineer_Visits\": { $exists: true, $eq: [] }\n    }\n  },\n  {\n    $project: {\n      \"staff_name\": 1,\n      \"staff_id\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 884,
        "db_id": "restaurant_1",
        "nl_queries": [
            "What is the gender of the student Linda Smith?",
            "Can you provide the gender of the student named Linda Smith?",
            "What is Linda Smith's gender?",
            "How do we identify the sex of the student called Linda Smith?",
            "Please tell me the gender of Linda Smith."
        ],
        "ref_sql": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "MQL": "db.Student.find({ \"Fname\": \"Linda\", \"LName\": \"Smith\" }, { \"Sex\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2526,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Find the number of investors in total.",
            "How many investors are there in total?",
            "What is the total count of investors recorded?",
            "Can you tell me the number of investors registered?",
            "Retrieve the total number of investors in the database."
        ],
        "ref_sql": "SELECT count(*) FROM INVESTORS",
        "MQL": "db.Investors.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 997,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "Show the ids and names of festivals that have at least two nominations for artworks.",
            "List the festival IDs and names for those festivals that have two or more artwork nominations.",
            "Provide the IDs and names of festivals that feature at least two nominations for artworks.",
            "Retrieve the IDs and titles of festivals with a minimum of two nominations related to artworks.",
            "Display the IDs and names of festivals that possess no fewer than two nominations for their artworks."
        ],
        "ref_sql": "SELECT T1.Festival_ID , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*) >= 2",
        "MQL": "db.festival_detail.find({\n  $where: \"this.nomination.length >= 2\"\n}, { \"Festival_ID\": 1, \"Festival_Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 873,
        "db_id": "restaurant_1",
        "nl_queries": [
            "List all restaurant types.",
            "Provide a complete list of all types of restaurants.",
            "What are the different types of restaurants available?",
            "Show me all the categories of restaurants.",
            "Retrieve all the restaurant types from the database."
        ],
        "ref_sql": "SELECT ResTypeName FROM Restaurant_Type;",
        "MQL": "db.Restaurant_Type.find({}, { \"ResTypeName\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 418,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show all product sizes.",
            "What are the different product sizes?",
            "List all the sizes available for the products.",
            "What product sizes can be found in the inventory?",
            "Provide a complete list of distinct product sizes."
        ],
        "ref_sql": "SELECT DISTINCT product_size FROM Products",
        "MQL": "db.Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      product_size: \"$Products.product_size\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$product_size\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_size: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3311,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What is the incident type description for the incident type with code \"VIOLENCE\"?",
            "Can you provide the description of the incident type that has the code \"VIOLENCE\"?",
            "What is the description for the incident type identified by the code \"VIOLENCE\"?",
            "Tell me the incident type description associated with the code \"VIOLENCE\".",
            "What does the incident type code \"VIOLENCE\" refer to in terms of its description?"
        ],
        "ref_sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\"",
        "MQL": "db.Ref_Incident_Type.find({\n  \"incident_type_code\": \"VIOLENCE\"\n}, { \"incident_type_description\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 367,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show all distinct cities in the address record.",
            "Retrieve the list of all cities.",
            "List all the distinct cities",
            "Can you provide a list of unique cities found in the address records?",
            "What are all the different cities recorded in the addresses?"
        ],
        "ref_sql": "SELECT DISTINCT city FROM addresses",
        "MQL": "db.Addresses.aggregate([\n  {\n    $group: {\n      _id: \"$city\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      city: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3150,
        "db_id": "school_finance",
        "nl_queries": [
            "List each donator name and the amount of endowment in descending order of the amount of endowment.",
            "Provide a list of donors and the total endowment amounts they contributed, sorted from highest to lowest.",
            "Show the names of each donor along with the sum of their endowments, arranged in descending order based on the contribution amount.",
            "Generate a list displaying each donor's name and the total amount of endowment they have provided, sorted in descending order of donations.",
            "Create a ranked list of donor names alongside their total endowment amounts, with the highest contributions listed first."
        ],
        "ref_sql": "SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "MQL": "db.School.aggregate([\n  { $unwind: \"$endowment\" },\n  { \n    $group: {\n      _id: \"$endowment.donator_name\",\n      sum_amount: { $sum: \"$endowment.amount\" }\n    }\n  },\n  { $sort: { sum_amount: -1 } },\n  { $project: { _id: 0, donator_name: \"$_id\", sum_amount: 1 } }\n]);\n"
    },
    {
        "record_id": 2765,
        "db_id": "roller_coaster",
        "nl_queries": [
            "How many roller coasters are there?",
            "What is the total number of roller coasters available?",
            "Can you tell me how many roller coasters exist?",
            "How many roller coasters are present in the database?",
            "What is the count of roller coasters in total?"
        ],
        "ref_sql": "SELECT count(*) FROM roller_coaster",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 448,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all distinct template type codes for all templates.",
            "What are the different template type codes?",
            "List all unique template type codes for the templates.",
            "Can you provide the various template type codes available?",
            "What unique template type codes exist for all the templates?"
        ],
        "ref_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $project: {\n      Template_Type_Code: \"$Templates.Template_Type_Code\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Template_Type_Code\"\n    }\n  },\n  {\n    $project: {\n      Template_Type_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3166,
        "db_id": "driving_school",
        "nl_queries": [
            "List email address and birthday of customer whose first name as Carole.",
            "What are the email addresses and date of births for all customers who have a first name of Carole?",
            "Provide the email and birth date of the customer named Carole.",
            "Can you show me the email addresses and birth dates for customers with the first name Carole?",
            "What are the email and date of birth details for the customer who goes by the name Carole?"
        ],
        "ref_sql": "SELECT email_address , date_of_birth FROM Customers WHERE first_name = \"Carole\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.first_name\": \"Carole\"\n    }\n  },\n  {\n    $project: {\n      email_address: \"$Customers.email_address\",\n      date_of_birth: \"$Customers.date_of_birth\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2557,
        "db_id": "inn_1",
        "nl_queries": [
            "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
            "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
            "How often did the total number of guests, including adults and children, match the room's maximum occupancy?",
            "Count how many times the sum of adults and kids per room reached the maximum allowed occupancy.",
            "What is the frequency at which each room was filled to its maximum capacity with both adults and kids?"
        ],
        "ref_sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $unwind: \"$Reservations\"\n  },\n  {\n    $project: {\n      maxOccupancy: 1,\n      totalPeople: {\n        $add: [\"$Reservations.Adults\", \"$Reservations.Kids\"]\n      }\n    }\n  },\n  {\n    $match: {\n      $expr: {\n        $eq: [\"$totalPeople\", \"$maxOccupancy\"]\n      }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 467,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Of all the claims, what was the earliest date when any claim was made?",
            "Tell me the the date when the first claim was made.",
            "What is the earliest recorded date for any claim that has been filed?",
            "When was the first claim made among all claims?",
            "Can you provide the date on which the first claim was submitted?"
        ],
        "ref_sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $sort: {\n      \"Customer_Policies.Claims.Date_Claim_Made\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Date_Claim_Made: \"$Customer_Policies.Claims.Date_Claim_Made\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3638,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the name of companies whose revenue is between 100 and 150.",
            "What are the names of companies with revenue between 100 and 150?",
            "List the names of companies with revenues ranging from 100 to 150.",
            "Can you provide the names of all companies whose revenue falls between 100 and 150?",
            "Identify the company names that report revenues in the range of 100 to 150."
        ],
        "ref_sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      Revenue: { $gte: 100, $lte: 150 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2851,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the number of users who posted some tweets.",
            "Count how many users have shared at least one tweet.",
            "Determine the total number of users who have posted tweets.",
            "How many distinct users have made tweets on the platform?",
            "Retrieve the count of users who have tweeted at least once."
        ],
        "ref_sql": "SELECT count(DISTINCT UID) FROM tweets",
        "MQL": "db.user_profiles.aggregate([\n  {\n    $match: {\n      \"tweets.0\": { $exists: true }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_UID: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_UID: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2741,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
            "How many products have their color described as 'white' or have a characteristic with the name 'hot'?",
            "How many products are characterized as \"white\" in color or have the feature named \"hot\"?",
            "Determine the count of products that either are labeled \"white\" or possess a characteristic titled \"hot\".",
            "Find out the total number of products which have \"white\" as their color description or include a characteristic called \"hot\"."
        ],
        "ref_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $lookup: {\n      from: \"Ref_Characteristic_Types\",\n      localField: \"Products.product_id\",\n      foreignField: \"Product_Characteristics.product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { color_description: \"white\" },\n        { \"Docs1.characteristic_name\": \"hot\" }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3715,
        "db_id": "tracking_orders",
        "nl_queries": [
            "What is the id of the most recent order?",
            "Find the id of the order made most recently.",
            "What is the order ID of the latest placed order?",
            "Retrieve the ID for the most recently placed order.",
            "Get the ID of the order that was placed most recently."
        ],
        "ref_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Orders\" },\n  { $sort: { \"Orders.date_order_placed\": -1 } },\n  { $limit: 1 },\n  { $project: { order_id: \"$Orders.order_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 1761,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
            "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.",
            "List the first and last names of guests who have bookings marked as \"Confirmed\".",
            "Retrieve the first and last names of guests with confirmed apartment bookings.",
            "Identify the guests that have a booking status of \"Confirmed\" and provide their first and last names."
        ],
        "ref_sql": "SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\"",
        "MQL": "db.Guests.aggregate([\n  {\n    $unwind: \"$Apartment_Bookings\"\n  },\n  {\n    $match: {\n      \"Apartment_Bookings.booking_status_code\": \"Confirmed\"\n    }\n  },\n  {\n    $project: {\n      guest_first_name: 1,\n      guest_last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1281,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "What is the first name of every student who has a dog but does not have a cat?",
            "List the first names and ages of students who own a dog and do not have a cat as a pet.",
            "Provide the first names of all students who have a dog while having no cats.",
            "Retrieve the ages and first names of students that have a dog but lack a cat as a pet."
        ],
        "ref_sql": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $addFields: {\n      hasDog: {\n        $in: [\"dog\", \"$Docs1.PetType\"]\n      },\n      hasCat: {\n        $in: [\"cat\", \"$Docs1.PetType\"]\n      }\n    }\n  },\n  {\n    $match: {\n      hasDog: true,\n      hasCat: false\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      Age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 525,
        "db_id": "election",
        "nl_queries": [
            "Show the people that have been governor the most times.",
            "Which people severed as governor most frequently?",
            "Identify the individual who has held the position of governor the greatest number of times.",
            "Who has served as governor the highest number of times?",
            "Find the person with the most frequent tenure as governor."
        ],
        "ref_sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.party.aggregate([\n  {\n    $group: {\n      _id: \"$Governor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Governor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3478,
        "db_id": "race_track",
        "nl_queries": [
            "Show the name, location, open year for all tracks with a seating higher than the average.",
            "What are the names, locations, and years of opening for tracks with seating higher than average?",
            "Provide the names, locations, and opening years of all tracks that feature seating capacities exceeding the average.",
            "List the names, locations, and years of establishment for tracks with seating above the average threshold.",
            "What are the names, locations, and opening dates of tracks that offer more seating than the average?"
        ],
        "ref_sql": "SELECT name , LOCATION , year_opened FROM track WHERE seating > (SELECT avg(seating) FROM track)",
        "MQL": "db.track.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_seating: { $avg: \"$Seating\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"track\",\n      let: { avg_seating: \"$avg_seating\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$Seating\", \"$$avg_seating\"] }\n          }\n        },\n        {\n          $project: {\n            Name: 1,\n            Location: 1,\n            Year_Opened: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: \"$Docs1.Name\",\n      Location: \"$Docs1.Location\",\n      Year_Opened: \"$Docs1.Year_Opened\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1257,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the names of employees with role name Editor.",
            "Find the names of all the employees whose the role name is \"Editor\".",
            "List the names of all employees who have the role of Editor.",
            "Retrieve the names of employees assigned to the Editor role.",
            "Provide the names of individuals holding the Editor position among employees."
        ],
        "ref_sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Editor\"",
        "MQL": "db.Roles.aggregate([\n  {\n    $match: {\n      Role_Name: \"Editor\"\n    }\n  },\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $project: {\n      Employee_Name: \"$Employees.Employee_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 354,
        "db_id": "music_1",
        "nl_queries": [
            "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
            "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
            "List the names of artists originating from Bangladesh who have received song ratings not exceeding 7.",
            "Identify the artists from Bangladesh whose song ratings do not go beyond 7.",
            "What are the names of Bangladeshi artists that haven't received a rating higher than 7 for their songs?"
        ],
        "ref_sql": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $match: {\n      \"artist.country\": \"Bangladesh\",\n      \"artist.song.rating\": {\n        $lte: 7\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$artist.artist_name\"\n    }\n  },\n  {\n    $project: {\n      artist_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 784,
        "db_id": "match_season",
        "nl_queries": [
            "Show all official native languages that contain the word \"English\".",
            "What are the official native languages that contain the string \"English\".",
            "List all native languages that have \"English\" within their names.",
            "What official native languages include the word \"English\"?",
            "Retrieve all official languages that feature the term \"English\" in them."
        ],
        "ref_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "MQL": "db.country.find({\n  Official_native_language: {\n    $regex: \"English\",\n    $options: \"i\"\n  }\n}, {\n  Official_native_language: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1287,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the first name and gender of student who have more than one pet.",
            "What is the first name and gender of the all the students who have more than one pet?",
            "List the first names and genders of students who own more than one pet.",
            "What are the first names and genders of all students that have multiple pets?",
            "Identify the first names and sexes of students with over one pet."
        ],
        "ref_sql": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      Sex: 1,\n      count_Docs1: {\n        $size: \"$Docs1\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Docs1: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      Sex: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3533,
        "db_id": "architecture",
        "nl_queries": [
            "List the name, nationality and id of all male architects ordered by their names lexicographically.",
            "Provide a list of male architects including their names, nationalities, and IDs, sorted alphabetically by name.",
            "Retrieve the name, nationality, and identification number for all male architects, arranged in order of their names.",
            "Show me the names, nationalities, and IDs of male architects, sorted in ascending order by their names.",
            "Please list the names, nationalities, and IDs of all architects who are male, organized lexicographically by their names."
        ],
        "ref_sql": "SELECT name , nationality , id FROM architect WHERE gender = 'male' ORDER BY name",
        "MQL": "db.architect.find(\n  { \"gender\": \"male\" },\n  { \"name\": 1, \"nationality\": 1, \"id\": 1, \"_id\": 0 }\n).sort({ \"name\": 1 });\n"
    },
    {
        "record_id": 4205,
        "db_id": "culture_company",
        "nl_queries": [
            "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
            "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
            "Which movie released in 2000 or earlier had the highest gross worldwide, and who is its director?",
            "Can you provide the title and the director of the movie that achieved the highest worldwide gross and was released on or before the year 2000?",
            "What are the title and director for the movie with the highest global earnings that came out in 2000 or earlier?"
        ],
        "ref_sql": "SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "MQL": "db.movie.aggregate([\n  {\n    $match: {\n      Year: { $lte: 2000 }\n    }\n  },\n  {\n    $sort: {\n      Gross_worldwide: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Title: 1,\n      Director: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4290,
        "db_id": "concert_singer",
        "nl_queries": [
            "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "Which stadium has hosted the most concerts since 2013, and what are its name and capacity?",
            "Can you tell me the name and capacity of the stadium that holds the record for the most concerts after the year 2013?",
            "What stadium, with the greatest number of concerts after 2013, has what name and what is its capacity?",
            "Identify the stadium with the highest concert count since 2013 along with its name and capacity."
        ],
        "ref_sql": "select t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
        "MQL": "db.stadium.aggregate([\n  \n  { $unwind: \"$concert\" },\n  \n  \n  { $match: { \"concert.Year\": { $gt: \"2013\" } } },\n  \n  \n  { $group: {\n    _id: \"$Stadium_ID\",\n    concertCount: { $sum: 1 }\n  }},\n  \n  \n  { $sort: { concertCount: -1 } },\n  \n  \n  { $limit: 1 },\n  \n  \n  { $lookup: {\n    from: \"stadium\",\n    localField: \"_id\",\n    foreignField: \"Stadium_ID\",\n    as: \"Docs1\"\n  }},\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  { $project: {\n    _id: 0,\n    Name: \"$Docs1.Name\",\n    Capacity: \"$Docs1.Capacity\"\n  }}\n]);\n"
    },
    {
        "record_id": 3101,
        "db_id": "store_product",
        "nl_queries": [
            "Which district has the least area?",
            "What is the name of the district with the smallest area?",
            "Which district has the smallest land area?",
            "Can you tell me the name of the district with the least land size?",
            "What district is known for having the smallest area?"
        ],
        "ref_sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "MQL": "db.district.aggregate([\n  {\n    $sort: { City_Area: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      District_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2659,
        "db_id": "student_assessment",
        "nl_queries": [
            "How many students attend course English?",
            "How many students are attending English courses?",
            "What is the number of students enrolled in the English course?",
            "Can you tell me how many students are participating in the English classes?",
            "How many students are registered for the English course?"
        ],
        "ref_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "MQL": "db.Courses.aggregate([\n  {\n    $match: {\n      course_name: \"English\"\n    }\n  },\n  {\n    $unwind: \"$Student_Course_Registrations\"\n  },\n  {\n    $group: {\n      _id: \"$course_id\",\n      count: {\n        $addToSet: \"$Student_Course_Registrations.student_id\"\n      }\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$count\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3633,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
            "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?",
            "List the names of instructors earning more than the highest salary in the Biology department.",
            "Who are the instructors that have a salary exceeding that of instructors in the Biology department?",
            "Provide the names of instructors whose salaries are above the maximum salary of those teaching in the Biology department."
        ],
        "ref_sql": "SELECT name FROM instructor WHERE salary > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $match: {\n      \"instructor.dept_name\": \"Biology\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_salary: { $max: \"$instructor.salary\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { max_salary: \"$max_salary\" },\n      pipeline: [\n        {\n          $unwind: \"$instructor\"\n        },\n        {\n          $match: {\n            $expr: { $gt: [\"$instructor.salary\", \"$$max_salary\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            name: \"$instructor.name\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$Docs1.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2772,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the total number of scientists.",
            "How many scientists are there?",
            "How many total scientists are listed in the database?",
            "What is the total count of scientists?",
            "Can you tell me the number of scientists available?"
        ],
        "ref_sql": "SELECT count(*) FROM scientists",
        "MQL": "db.Scientists.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 101,
        "db_id": "wedding",
        "nl_queries": [
            "How many churches have a wedding in year 2016?",
            "What is the total number of churches that hosted weddings in 2016?",
            "How many distinct churches conducted weddings during the year 2016?",
            "Can you provide the count of churches where weddings took place in 2016?",
            "How many unique churches were involved in weddings that occurred in 2016?"
        ],
        "ref_sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR = 2016",
        "MQL": "db.church.aggregate([\n  {\n    $unwind: \"$wedding\"\n  },\n  {\n    $match: { \"wedding.Year\": 2016 }\n  },\n  {\n    $group: {\n      _id: \"$Church_ID\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT__DISTINCT_church_id\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT__DISTINCT_church_id\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3266,
        "db_id": "game_1",
        "nl_queries": [
            "Show all game names played by at least 1000 hours.",
            "What are the names of all the games that have been played for at least 1000 hours?",
            "Retrieve the names of all video games that have been played for a minimum of 1000 hours.",
            "List all game titles that have accumulated at least 1000 hours of playtime.",
            "What are the titles of the games that players have engaged with for no less than 1000 hours?"
        ],
        "ref_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $unwind: \"$Plays_Games\"\n  },\n  {\n    $group: {\n      _id: \"$GameID\",\n      GName: { $first: \"$GName\" },\n      sum_Hours_Played: { $sum: \"$Plays_Games.Hours_Played\" }\n    }\n  },\n  {\n    $match: {\n      sum_Hours_Played: { $gte: 1000 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      GName: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1226,
        "db_id": "department_management",
        "nl_queries": [
            "Which department has more than 1 head at a time? List the id, name and the number of heads.",
            "Identify the departments with multiple heads at the same time, including their ID, name, and head count.",
            "What are the departments that have more than one head? Provide the department ID, name, and the number of heads.",
            "Please list departments that currently have over one head, along with their ID, name, and the total number of heads.",
            "Show me the departments where there are multiple heads, including each department's ID, name, and head count."
        ],
        "ref_sql": "SELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1",
        "MQL": "db.department.aggregate([\n  { $unwind: \"$management\" },\n  { $group: {\n      _id: \"$management.department_ID\",\n      headCount: { $sum: 1 }\n    }\n  },\n  { $match: { headCount: { $gt: 1 } } },\n  { $lookup: {\n      from: \"department\",\n      localField: \"_id\",\n      foreignField: \"Department_ID\",\n      as: \"Docs1\"\n    }\n  },\n  { $unwind: \"$Docs1\" },\n  { $project: {\n      _id: 0,\n      Department_ID: \"$_id\",\n      Name: \"$Docs1.Name\",\n      count: \"$headCount\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3240,
        "db_id": "icfp_1",
        "nl_queries": [
            "Retrieve all the first and last names of authors in the alphabetical order of last names.",
            "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
            "List all authors' first and last names sorted alphabetically by their last names.",
            "Provide the first and last names of authors in order according to their last names.",
            "Compile the first and last names of all authors, arranged in alphabetical order based on their last names."
        ],
        "ref_sql": "SELECT fname , lname FROM authors ORDER BY lname",
        "MQL": "db.Authors.aggregate([\n  {\n    $project: {\n      fname: 1,\n      lname: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      lname: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2298,
        "db_id": "product_catalog",
        "nl_queries": [
            "Name all the products with next entry ID greater than 8.",
            "What are the catalog entry names of the products with next entry ID above 8?",
            "List the product names for entries that have a next entry ID greater than 8.",
            "Identify the catalog entry names for products whose next entry ID exceeds 8.",
            "What are the names of the products that feature a next entry ID larger than 8?"
        ],
        "ref_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $match: {\n      \"Catalog_Structure.Catalog_Contents.next_entry_id\": {\n        $gt: 8\n      }\n    }\n  },\n  {\n    $project: {\n      catalog_entry_name: \"$Catalog_Structure.Catalog_Contents.catalog_entry_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1185,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the the name of the customers who have a loan with amount more than 3000.",
            "What are the names of customers who have a loan of more than 3000 in amount?",
            "List the names of customers who have loans greater than 3000.",
            "Identify customers with loan amounts exceeding 3000 and provide their names.",
            "Retrieve the names of clients who hold a loan valued at more than 3000."
        ],
        "ref_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      loans: {\n        $filter: {\n          input: \"$customer.loan\",\n          as: \"loan\",\n          cond: {\n            $gt: [\"$$loan.amount\", 3000]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      loans: {\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      cust_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3540,
        "db_id": "browser_web",
        "nl_queries": [
            "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
            "List the names and operating systems of web client accelerators that are incompatible with a 'Broadband' connection.",
            "Provide the names and OS details of web client accelerators that do not support a connection type of 'Broadband'.",
            "What are the names and operating systems for web client accelerators that don't work exclusively with a 'Broadband' connection?",
            "Identify the names and operating systems of web client accelerators that are not designed for 'Broadband' connections."
        ],
        "ref_sql": "SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "MQL": "db.Web_client_accelerator.find(\n  { \"Connection\": { $ne: \"Broadband\" } },\n  { \"name\": 1, \"Operating_system\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 3543,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the name and price of the cheapest product.",
            "What is the name and price of the cheapest product?",
            "What are the name and price of the most affordable product?",
            "Identify the cheapest product and provide its name along with its price.",
            "Can you tell me the name and cost of the least expensive product available?"
        ],
        "ref_sql": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $sort: { \"Products.Price\": 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: \"$Products.Name\",\n      Price: \"$Products.Price\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3004,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show the name, phone, and payment method code for all customers in descending order of customer number.",
            "Retrieve the names, phone numbers, and payment method codes of all customers, sorted by customer number in descending order.",
            "List the customer names, their telephone numbers, and the codes of their payment methods, organized from highest to lowest customer number.",
            "Display all customers' names, phone contacts, and payment method codes, arranged by customer number in a descending sequence.",
            "Provide the customer name, phone, and payment method code for every customer, ordered by customer number in descending order."
        ],
        "ref_sql": "SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC",
        "MQL": "db.Customers.find({}, { \"customer_name\": 1, \"customer_phone\": 1, \"payment_method_code\": 1, \"_id\": 0 }).sort({ \"customer_number\": -1 });\n"
    },
    {
        "record_id": 3469,
        "db_id": "phone_1",
        "nl_queries": [
            "List all the model names sorted by their launch year.",
            "Retrieve all model names arranged in order of their launch year.",
            "Display all the model names sorted according to their year of launch.",
            "Get a list of model names organized by the year they were launched.",
            "Show all model names in ascending order based on launch date."
        ],
        "ref_sql": "SELECT model_name FROM chip_model ORDER BY launch_year",
        "MQL": "db.chip_model.find({}, { \"Model_name\": 1, \"_id\": 0 }).sort({ \"Launch_year\": 1 });\n"
    },
    {
        "record_id": 716,
        "db_id": "company_employee",
        "nl_queries": [
            "List the names of people that are not employed by any company",
            "Provide the names of individuals who are currently unemployed.",
            "Generate a list of people without any employment records.",
            "Show the names of those who are not working for any company.",
            "Retrieve the names of persons that do not have a job at any business."
        ],
        "ref_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)",
        "MQL": "db.people.find({\n  \"employment\": { $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3008,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the name of all customers.",
            "What are the names of all the customers?",
            "List all customer names from the database.",
            "Retrieve the names of every customer.",
            "Show the names of all the customers stored in the records."
        ],
        "ref_sql": "SELECT customer_name FROM customers",
        "MQL": "db.Customers.find({}, { customer_name: 1, _id: 0 });\n"
    },
    {
        "record_id": 3858,
        "db_id": "storm_record",
        "nl_queries": [
            "Show all region code and region name sorted by the codes.",
            "What are the codes and names for all regions, sorted by codes?",
            "List all region names accompanied by their corresponding codes, arranged in order of the codes.",
            "Provide a sorted list of region codes with their names.",
            "Display the names and codes of regions, sorted by region codes."
        ],
        "ref_sql": "SELECT region_code , region_name FROM region ORDER BY region_code",
        "MQL": "db.region.aggregate([\n  {\n    $project: {\n      Region_code: 1,\n      Region_name: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Region_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2742,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the number of characteristics that the product \"flax\" has.",
            "Count the number of characteristics of the 'flax' product.",
            "How many characteristics are associated with the product called \"flax\"?",
            "What is the total number of characteristics for the 'flax' product?",
            "Determine the count of characteristics linked to the product named \"flax\"."
        ],
        "ref_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"flax\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: {\n        $size: \"$Products.Product_Characteristics\"\n      }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3422,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the maximum and minimum monthly rental for all student addresses.",
            "What are the highest and lowest monthly rental prices for student addresses?",
            "Retrieve the maximum and minimum monthly rental amounts for all addresses occupied by students.",
            "Can you provide the highest and lowest monthly rents associated with student housing addresses?",
            "Identify the maximum and minimum monthly rental fees for addresses linked to students."
        ],
        "ref_sql": "SELECT max(monthly_rental) , min(monthly_rental) FROM Student_Addresses",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Student_Addresses\" },\n  {\n    $group: {\n      _id: null,\n      max_monthly_rental: { $max: \"$Student_Addresses.monthly_rental\" },\n      min_monthly_rental: { $min: \"$Student_Addresses.monthly_rental\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_monthly_rental: 1,\n      min_monthly_rental: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3260,
        "db_id": "city_record",
        "nl_queries": [
            "what is the GDP of the city with the largest population.",
            "Find the GDP of the city with the largest regional population.",
            "What is the economic output (GDP) of the city that has the highest population?",
            "Retrieve the GDP value for the city with the greatest regional population.",
            "What is the GDP of the most populous city in terms of regional population?"
        ],
        "ref_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $sort: { \"Regional_Population\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      GDP: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1090,
        "db_id": "wrestler",
        "nl_queries": [
            "Show times of elimination of wrestlers with days held more than 50.",
            "What are the times of elimination for wrestlers with over 50 days held?",
            "List the elimination times for wrestlers who have held their titles for more than 50 days.",
            "Provide the times at which wrestlers with over 50 days of holding were eliminated.",
            "Retrieve the elimination times associated with wrestlers that have more than 50 days of reign."
        ],
        "ref_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50",
        "MQL": "db.wrestler.aggregate([\n  {\n    $match: {\n      Days_held: { $gt: \"50\" }\n    }\n  },\n  {\n    $unwind: \"$Elimination\"\n  },\n  {\n    $project: {\n      Time: \"$Elimination.Time\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 83,
        "db_id": "body_builder",
        "nl_queries": [
            "What are the birthdays of people in ascending order of height?",
            "Can you provide the birthdates of individuals sorted by their height from shortest to tallest?",
            "List the birthdays of people arranged in increasing order of their height.",
            "What are the birth dates of the people, sorted by height in ascending order?",
            "Show me the birthdates of individuals, sorted from the least to the most tall."
        ],
        "ref_sql": "SELECT Birth_Date FROM People ORDER BY Height ASC",
        "MQL": "db.people.find({}, { \"Birth_Date\": 1, \"_id\": 0 }).sort({ \"Height\": 1 });\n"
    },
    {
        "record_id": 1640,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
            "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
            "List the names of entrepreneurs whose investors are different from Rachel Elnaugh.",
            "Provide the names of entrepreneurs that do not list Rachel Elnaugh as their investor.",
            "Identify entrepreneurs whose investor isn't Rachel Elnaugh and return their names."
        ],
        "ref_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $match: {\n      \"entrepreneur.Investor\": { $ne: \"Rachel Elnaugh\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1288,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the first name of students who are living in the Smith Hall.",
            "What are the first names of all students in Smith Hall?",
            "List the first names of students currently living in Smith Hall.",
            "What first names belong to students residing in the dormitory known as Smith Hall?",
            "Identify the first names of all the students who reside in Smith Hall."
        ],
        "ref_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm\",\n      localField: \"Lives_in.dormid\",\n      foreignField: \"dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.dorm_name\": \"Smith Hall\"\n    }\n  },\n  {\n    $project: {\n      Fname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 436,
        "db_id": "icfp_1",
        "nl_queries": [
            "Who belong to the institution \"University of Oxford\"? Show the first names and last names.",
            "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".",
            "List the first and last names of authors linked to the \"University of Oxford\".",
            "Identify the authors affiliated with the \"University of Oxford\" along with their first and last names.",
            "Who are the authors from \"University of Oxford\"? Please provide their first and last names."
        ],
        "ref_sql": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\"",
        "MQL": "db.Authors.aggregate([\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"Authorship.instID\",\n      foreignField: \"instID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.name\": \"University of Oxford\"\n    }\n  },\n  {\n    $project: {\n      fname: 1,\n      lname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3867,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the role code with the largest number of employees?",
            "Find the code of the role that have the most employees.",
            "Which role code represents the highest number of employees?",
            "Identify the role code that has the greatest employee count.",
            "What is the role code for the position with the largest workforce?"
        ],
        "ref_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $group: {\n      _id: \"$Role_Code\",\n      employeeCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      employeeCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Role_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2175,
        "db_id": "culture_company",
        "nl_queries": [
            "What is the average, maximum, and minimum budget for all movies before 2000.",
            "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
            "What are the average, highest, and lowest budgets in millions for films released before the year 2000?",
            "Provide the average, maximum, and minimum budget values for movies produced prior to 2000.",
            "Can you give me the average, maximum, and minimum budgets for any movies that came out before the year 2000?"
        ],
        "ref_sql": "SELECT avg(budget_million) , max(budget_million) , min(budget_million) FROM movie WHERE YEAR < 2000",
        "MQL": "db.movie.aggregate([\n  {\n    $match: {\n      Year: { $lt: 2000 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_budget_million: { $avg: \"$Budget_million\" },\n      max_budget_million: { $max: \"$Budget_million\" },\n      min_budget_million: { $min: \"$Budget_million\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_budget_million: 1,\n      max_budget_million: 1,\n      min_budget_million: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1463,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "How many employees does each role have? List role description, id and number of employees.",
            "What is the employee count for each role? Please include the role description and role ID in the output.",
            "Can you provide a list showing how many employees occupy each role along with their descriptions and role identifiers?",
            "For every role, how many employees are there? Output should consist of the role's code, description, and employee number.",
            "Give me the number of employees associated with each role, including the corresponding role description and role ID in your list."
        ],
        "ref_sql": "SELECT T1.role_description , T2.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $group: {\n      _id: {\n        role_code: \"$role_code\",\n        role_description: \"$role_description\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      role_code: \"$_id.role_code\",\n      role_description: \"$_id.role_description\",\n      count: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2957,
        "db_id": "swimming",
        "nl_queries": [
            "Which countries do not have a stadium that was opened after 2006?",
            "Which countries have stadiums that were all opened in 2006 or earlier?",
            "Identify the countries without stadiums built after the year 2006.",
            "Which nations do not feature any stadium opened following 2006?",
            "List the countries that do not possess a stadium that was inaugurated later than 2006."
        ],
        "ref_sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      max_Opening_year: { $max: \"$Opening_year\" }\n    }\n  },\n  {\n    $match: {\n      max_Opening_year: { $lte: 2006 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3173,
        "db_id": "college_1",
        "nl_queries": [
            "List the first name of all employees with job code PROF ordered by their date of birth.",
            "What are the first names of all employees that are professors ordered by date of birth?",
            "Provide the first names of all professors, sorted by their birth dates.",
            "What are the first names of employees holding the professor position, arranged by their date of birth?",
            "Can you list the first names of professors in order of their date of birth?"
        ],
        "ref_sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $match: {\n      EMP_JOBCODE: \"PROF\"\n    }\n  },\n  {\n    $sort: {\n      EMP_DOB: 1\n    }\n  },\n  {\n    $project: {\n      EMP_FNAME: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2883,
        "db_id": "college_2",
        "nl_queries": [
            "How many departments offer courses?",
            "Count the number of departments which offer courses.",
            "What is the total number of departments that provide course offerings?",
            "How many unique departments are there that offer courses?",
            "Determine the count of departments that have courses available."
        ],
        "ref_sql": "SELECT count(DISTINCT dept_name) FROM course",
        "MQL": "db.department.aggregate([\n  {\n    $group: {\n      _id: \"$dept_name\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_dept_name\"\n  }\n]);\n"
    },
    {
        "record_id": 1052,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the names of members that have a rank in round higher than 3.",
            "List the names of members who have placed higher than third in their round.",
            "Provide the names of members with a ranking exceeding 3 in any round.",
            "Identify the members that achieved a rank above 3 in the decoration rounds.",
            "Retrieve the names of participants whose rank in their respective rounds is more than 3."
        ],
        "ref_sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3",
        "MQL": "db.college.aggregate([\n  { $unwind: \"$member\" },\n  { $unwind: \"$member.round\" },\n  { $match: { \"member.round.Rank_in_Round\": { $gt: 3 } } },\n  { $project: { \"Name\": \"$member.Name\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 718,
        "db_id": "perpetrator",
        "nl_queries": [
            "List the names of people that are not perpetrators.",
            "Retrieve the names of individuals who are not involved as perpetrators.",
            "Show me the names of people who have no association with the perpetrator records.",
            "Identify the names of individuals that do not qualify as perpetrators.",
            "Provide a list of names for those who are not recognized as perpetrators."
        ],
        "ref_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
        "MQL": "db.people.find({\n  $or: [\n    { \"perpetrator\": { $exists: false } },\n    { \"perpetrator\": { $size: 0 } }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3423,
        "db_id": "manufacturer",
        "nl_queries": [
            "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
            "What is the average count of factories and the highest number of shops for manufacturers established before 1990?",
            "Can you provide the average number of factories and the maximum number of shops for manufacturers that were opened prior to 1990?",
            "Give me the average number of factories along with the maximum shop count for manufacturers that started their business before 1990.",
            "Determine the average number of factories and the greatest number of shops for manufacturers founded before 1990."
        ],
        "ref_sql": "SELECT max(num_of_shops) , avg(Num_of_Factories) FROM manufacturer WHERE open_year < 1990",
        "MQL": "db.manufacturer.aggregate([\n  {\n    $match: {\n      \"Open_Year\": { $lt: 1990 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Num_of_Factories: { $avg: \"$Num_of_Factories\" },\n      max_num_of_shops: { $max: \"$Num_of_Shops\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Num_of_Factories: 1,\n      max_num_of_shops: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2788,
        "db_id": "dorm_1",
        "nl_queries": [
            "How many female students (sex is F) whose age is below 25?",
            "How many girl students who are younger than 25?",
            "What is the total count of female students who are under the age of 25?",
            "How many young women students are there who are less than 25 years old?",
            "Determine the number of female learners who are below the age of 25."
        ],
        "ref_sql": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Sex: \"F\",\n      Age: { $lt: 25 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3400,
        "db_id": "aircraft",
        "nl_queries": [
            "What are the maximum and minimum number of transit passengers of all aiports.",
            "What is the maximum and mininum number of transit passengers for all airports?",
            "Can you provide the highest and lowest counts of transit passengers in all airports?",
            "What are the least and most number of transit passengers recorded at any airport?",
            "Show me the maximum and minimum figures for transit passengers across all airports."
        ],
        "ref_sql": "SELECT max(Transit_Passengers) , min(Transit_Passengers) FROM airport",
        "MQL": "db.airport.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_Transit_Passengers: { $max: \"$Transit_Passengers\" },\n      min_Transit_Passengers: { $min: \"$Transit_Passengers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Transit_Passengers: 1,\n      min_Transit_Passengers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 551,
        "db_id": "company_office",
        "nl_queries": [
            "List the industry shared by the most companies.",
            "Which industry has the most companies?",
            "Identify the industry that is represented by the largest number of companies.",
            "What is the industry with the highest count of companies?",
            "Which sector has the greatest number of associated companies?"
        ],
        "ref_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Companies.aggregate([\n  {\n    $group: {\n      _id: \"$Industry\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Industry: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1245,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
            "For each id of a driver who participated in at most 30 races, how many races did they participate in?",
            "List the driver IDs along with their race counts for those drivers who have taken part in a maximum of 30 races.",
            "What is the count of races for each driver ID of those who have competed in 30 races or fewer?",
            "Retrieve the driver identifiers and their corresponding number of race participations for all drivers with up to 30 races."
        ],
        "ref_sql": "SELECT T1.driverid , count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*) <= 30",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: \"$results\"\n  },\n  {\n    $group: {\n      _id: \"$driverId\",\n      raceCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      raceCount: { $lte: 30 }\n    }\n  },\n  {\n    $project: {\n      driverId: \"$_id\",\n      count: \"$raceCount\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1823,
        "db_id": "game_injury",
        "nl_queries": [
            "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
            "Identify the stadium where injuries to both 'Walter Samuel' and 'Thiago Motta' took place.",
            "Provide the name of the stadium where both 'Walter Samuel' and 'Thiago Motta' suffered injuries.",
            "Which stadium has recorded injuries for both 'Walter Samuel' and 'Thiago Motta'?",
            "Show me the name of the stadium in which both players, 'Walter Samuel' and 'Thiago Motta', were injured."
        ],
        "ref_sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
        "MQL": "db.stadium.find({\n  \"game.injury_accident.Player\": { $all: [\"Walter Samuel\", \"Thiago Motta\"] }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 691,
        "db_id": "world_1",
        "nl_queries": [
            "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "Give the names of countries that are in Europe and have a population equal to 80000.",
            "List the names of countries located in Europe with a population of 80,000.",
            "Identify the countries that have a population of 80,000 and are situated in the continent of Europe.",
            "What countries in Europe have exactly 80,000 residents? Please provide their names."
        ],
        "ref_sql": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
        "MQL": "db.country.find({\n  \"Continent\": \"Europe\",\n  \"Population\": 80000\n}, {\n  \"Name\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 3640,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show member names without any registered branch.",
            "What are the names of the members that have never registered at any branch?",
            "List the names of members who have not registered at any branch.",
            "Provide the names of members without any branch registration.",
            "Can you tell me the names of members who do not have a registered branch?"
        ],
        "ref_sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "MQL": "db.member.aggregate([\n  {\n    $project: {\n      Name: 1,\n      count_registered_branch: { $size: \"$membership_register_branch\" }\n    }\n  },\n  {\n    $match: {\n      count_registered_branch: 0\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 831,
        "db_id": "world_1",
        "nl_queries": [
            "What are the region and population of Angola?",
            "What region does Angola belong to and what is its population?",
            "Can you provide details about the population and region of Angola?",
            "What is Angola's population and which region is it located in?",
            "Please tell me the region of Angola and its population size."
        ],
        "ref_sql": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Name: \"Angola\"\n    }\n  },\n  {\n    $project: {\n      Population: 1,\n      Region: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2604,
        "db_id": "architecture",
        "nl_queries": [
            "How many architects are female?",
            "What is the total number of female architects?",
            "How many architects belong to the female gender?",
            "Can you tell me the count of female architects?",
            "What is the number of female architects in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM architect WHERE gender = 'female'",
        "MQL": "db.architect.aggregate([\n  { $match: { \"gender\": \"female\" } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 2551,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "How many documents were shipped by USPS?",
            "What is the total number of documents sent by USPS?",
            "How many shipping documents were handled by USPS?",
            "Can you tell me the count of documents shipped through USPS?",
            "How many documents were dispatched by USPS as the shipping agent?"
        ],
        "ref_sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  {\n    $match: {\n      \"shipping_agent_name\": \"USPS\"\n    }\n  },\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3338,
        "db_id": "icfp_1",
        "nl_queries": [
            "Retrieve all the last names of authors in alphabetical order.",
            "Give me a list of all the last names of authors sorted in alphabetical order",
            "List the last names of all authors sorted alphabetically.",
            "Show me the last names of authors arranged in alphabetical order.",
            "Provide an alphabetical list of all authors' last names."
        ],
        "ref_sql": "SELECT lname FROM authors ORDER BY lname",
        "MQL": "db.Authors.find({}, { \"lname\": 1, \"_id\": 0 }).sort({ \"lname\": 1 });\n"
    },
    {
        "record_id": 2756,
        "db_id": "shop_membership",
        "nl_queries": [
            "What is the total number of purchases for members with level 6?",
            "What are the total purchases for members rated at level 6?",
            "How many purchases have been made by members at level 6?",
            "Can you provide the total count of purchases for members who are classified as level 6?",
            "What is the total number of transactions made by level 6 members?"
        ],
        "ref_sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6",
        "MQL": "db.member.aggregate([\n  {\n    $match: {\n      Level: 6\n    }\n  },\n  {\n    $lookup: {\n      from: \"branch\",\n      localField: \"membership_register_branch.Branch_ID\",\n      foreignField: \"Branch_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$purchase\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3687,
        "db_id": "storm_record",
        "nl_queries": [
            "Show the name of storms which don't have affected region in record.",
            "What are the names of storms that did not affect any regions?",
            "List the names of storms that have no regions impacted.",
            "Provide the names of storms that did not impact any regions.",
            "What are the names of storms with no affected regions noted in the records?"
        ],
        "ref_sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "MQL": "db.storm.aggregate([\n  {\n    $match: {\n      affected_region: { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4145,
        "db_id": "icfp_1",
        "nl_queries": [
            "Retrieve the title of the paper that has the largest number of authors.",
            "Which paper has the most authors? Give me the paper title.",
            "What is the title of the paper with the highest number of co-authors?",
            "Can you tell me the title of the paper that has the most contributing authors?",
            "Identify the title of the paper that boasts the greatest count of authors."
        ],
        "ref_sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT max(authorder) FROM authorship)",
        "MQL": "db.Papers.aggregate([\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $group: {\n      _id: \"$paperID\",\n      title: { $first: \"$title\" },\n      authorCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      authorCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2053,
        "db_id": "network_2",
        "nl_queries": [
            "How old is the doctor named Zach?",
            "What is the age of the doctor named Zach?",
            "What is Zach's age, given that he is a doctor?",
            "Can you tell me how old Zach is, who works as a doctor?",
            "Please provide the age of Zach, the doctor."
        ],
        "ref_sql": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'",
        "MQL": "db.Person.find(\n  {\n    name: \"Zach\",\n    job: \"doctor\"\n  },\n  {\n    age: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2203,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the average number of customers in all banks of Utah state.",
            "What is the average number of customers across banks in the state of Utah?",
            "What is the average count of customers in banks located in the state of Utah?",
            "Calculate the mean number of customers for all banks within Utah.",
            "Determine the average number of clients associated with banks in Utah state."
        ],
        "ref_sql": "SELECT avg(no_of_customers) FROM bank WHERE state = 'Utah'",
        "MQL": "db.bank.aggregate([\n  {\n    $match: {\n      state: \"Utah\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_no_of_customers: {\n        $avg: \"$no_of_customers\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_no_of_customers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2044,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Show the shop addresses ordered by their opening year.",
            "Provide a list of shop addresses sorted by the year they opened.",
            "Retrieve the addresses of the shops in order of their opening dates.",
            "Display the addresses of all shops arranged by their opening year.",
            "List the store addresses organized by the year each one was established."
        ],
        "ref_sql": "SELECT address FROM shop ORDER BY open_year",
        "MQL": "db.shop.find({}, { \"Address\": 1, \"_id\": 0 }).sort({ \"Open_Year\": 1 });\n"
    },
    {
        "record_id": 2528,
        "db_id": "driving_school",
        "nl_queries": [
            "How many lesson does customer with first name Ray took?",
            "How many lessons did the customer with the first name Ray take?",
            "What is the total number of lessons completed by the customer named Ray?",
            "Can you tell me how many lessons the customer with the name Ray has attended?",
            "How many lessons has the customer known as Ray participated in?"
        ],
        "ref_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.first_name\": \"Ray\"\n    }\n  },\n  {\n    $unwind: \"$Customers.Lessons\"\n  },\n  {\n    $group: {\n      _id: \"$Customers.customer_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2975,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name and account balance of the customer whose name includes the letter ‘a’.",
            "What are the names and account balances of customers with the letter a in their names?",
            "List the names and account balances of customers that have the letter 'a' in their names.",
            "Show me the account balances and names of customers with an 'a' in their name.",
            "Retrieve customer names and their corresponding account balances where the name contains the letter 'a'."
        ],
        "ref_sql": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $match: {\n      \"customer.cust_name\": {\n        $regex: \"a\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      acc_bal: \"$customer.acc_bal\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 933,
        "db_id": "film_rank",
        "nl_queries": [
            "List the names of studios that have at least two films.",
            "What are the names of studios that have made two or more films?",
            "Identify the studios that have released two or more films.",
            "Provide the names of studios which have produced at least a couple of films.",
            "Which studios are known to have created two or more films?"
        ],
        "ref_sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2",
        "MQL": "db.film.aggregate([\n  {\n    $group: {\n      _id: \"$Studio\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Studio: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1858,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the names of rooms that have been reserved for more than 60 times.",
            "What are the names of rooms whose reservation frequency exceeds 60 times?",
            "List the names of rooms that have been booked over 60 times.",
            "Which room names have received more than 60 reservations?",
            "Identify the names of rooms with a reservation count that exceeds 60."
        ],
        "ref_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count(*) > 60",
        "MQL": "db.Rooms.aggregate([\n  {\n    $unwind: \"$Reservations\"\n  },\n  {\n    $group: {\n      _id: \"$roomName\",\n      reservationCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      reservationCount: { $gt: 60 }\n    }\n  },\n  {\n    $project: {\n      roomName: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2992,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the customer id and number of accounts with most accounts.",
            "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
            "Retrieve the customer ID along with the total number of accounts for the customer who holds the most accounts.",
            "Identify the customer with the highest number of accounts, and provide their customer ID and account count.",
            "Who is the customer with the greatest number of accounts, and how many accounts do they have?"
        ],
        "ref_sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Accounts.aggregate([\n  {\n    $group: {\n      _id: \"$customer_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      customer_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1780,
        "db_id": "shop_membership",
        "nl_queries": [
            "What is the name and open year for the branch with most number of memberships registered in 2016?",
            "What is the name and opening year for the branch that registered the most members in 2016?",
            "Which branch has the highest number of member registrations in 2016, and what is its opening year?",
            "Can you tell me the name and year of establishment for the branch that registered the greatest number of memberships in 2016?",
            "What branch had the most registrations in 2016, and what year did it open?"
        ],
        "ref_sql": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.branch.aggregate([\n  {\n    $project: {\n      Name: 1,\n      Open_year: 1,\n      member_count: {\n        $size: {\n          $filter: {\n            input: \"$membership_register_branch\",\n            as: \"membership\",\n            cond: {\n              $eq: [\"$$membership.Register_Year\", \"2016\"]\n            }\n          }\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Branch_ID\",\n      Name: { $first: \"$Name\" },\n      Open_year: { $first: \"$Open_year\" },\n      member_count: { $sum: \"$member_count\" }\n    }\n  },\n  {\n    $sort: {\n      member_count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Open_year: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2295,
        "db_id": "product_catalog",
        "nl_queries": [
            "What is the product with the highest height? Give me the catalog entry name.",
            "Which catalog content has the highest height? Give me the catalog entry name.",
            "Which product has the tallest height? Please provide the catalog entry name.",
            "Identify the catalog entry with the maximum height. What is its name?",
            "What is the name of the catalog content that stands the highest in terms of height?"
        ],
        "ref_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $addFields: {\n      height_numeric: {\n        $toDouble: \"$Catalog_Structure.Catalog_Contents.height\"\n      }\n    }\n  },\n  {\n    $sort: {\n      height_numeric: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      catalog_entry_name: \"$Catalog_Structure.Catalog_Contents.catalog_entry_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1973,
        "db_id": "ship_mission",
        "nl_queries": [
            "Show different types of ships and the number of ships of each type.",
            "For each type, how many ships are there?",
            "Provide a list of ship types along with the total number of ships for each category.",
            "What is the count of ships associated with each type?",
            "Display the various ship types and how many ships exist for each type."
        ],
        "ref_sql": "SELECT TYPE , COUNT(*) FROM ship GROUP BY TYPE",
        "MQL": "db.ship.aggregate([\n  {\n    $group: {\n      _id: \"$Type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Type: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2759,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "How many colors are there?",
            "Count the number of colors.",
            "What is the total number of colors available?",
            "How many distinct colors do we have?",
            "Give me the count of different colors in the database."
        ],
        "ref_sql": "SELECT count(*) FROM ref_colors",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1665,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the email addresses of the drama workshop groups with address in Alaska state?",
            "List the email addresses of the drama workshop groups located in Alaska state.",
            "Can you provide the email addresses for the drama workshop groups situated in the state of Alaska?",
            "Please list the email addresses for the workshop groups that focus on drama and are based in Alaska.",
            "What are the email addresses of the drama-related workshop groups located in Alaska?"
        ],
        "ref_sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = \"Alaska\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: {\n      State_County: \"Alaska\"\n    }\n  },\n  {\n    $unwind: \"$Drama_Workshop_Groups\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Store_Email_Address: \"$Drama_Workshop_Groups.Store_Email_Address\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1539,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the titles of items that received any rating below 5.",
            "List the titles of items with ratings that are less than 5.",
            "Retrieve the names of items that have received a rating below 5.",
            "Show me the titles of items rated under 5.",
            "What are the titles of items that were given any rating lower than 5?"
        ],
        "ref_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
        "MQL": "db.item.find({\n  \"review.rating\": { $lt: 5 }\n}, { \"title\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 557,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What is the investor that has invested in the most number of entrepreneurs?",
            "Return the investor who have invested in the greatest number of entrepreneurs.",
            "Identify the investor who has backed the highest number of entrepreneurs.",
            "Who is the investor with the most investments in entrepreneurs?",
            "Name the investor that has provided funds to the largest number of entrepreneurial ventures."
        ],
        "ref_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $group: {\n      _id: \"$entrepreneur.Investor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Investor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3618,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Sort employee names by their age in ascending order.",
            "List the names of employees and sort in ascending order of age.",
            "Retrieve the names of employees sorted by their age in increasing order.",
            "Provide a list of employee names arranged in order of ascending age.",
            "Display employee names sorted from the youngest to the oldest."
        ],
        "ref_sql": "SELECT name FROM employee ORDER BY age",
        "MQL": "db.employee.find(\n  {},\n  {\n    _id: 0,\n    Name: 1\n  }\n).sort(\n  {\n    Age: 1\n  }\n);\n"
    },
    {
        "record_id": 2773,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the number of scientists who are not assigned to any project.",
            "How many scientists do not have any projects assigned to them?",
            "Count the total number of scientists who are currently not involved in any projects.",
            "How many scientists are without any project assignments?",
            "Determine the number of scientists that do not have any projects they are assigned to."
        ],
        "ref_sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
        "MQL": "db.Scientists.aggregate([\n  {\n    $project: {\n      count: {\n        $cond: {\n          if: {\n            $eq: [\n              {\n                $size: \"$AssignedTo\"\n              },\n              0\n            ]\n          },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: \"$count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1754,
        "db_id": "student_1",
        "nl_queries": [
            "Find the name of the teacher who teaches the largest number of students.",
            "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
            "Identify the teacher responsible for the highest student count.",
            "Who is the teacher with the largest number of students? Please provide their first and last names.",
            "Name the educator who teaches the most students in their class."
        ],
        "ref_sql": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname , T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.teachers.aggregate([\n  {\n    $lookup: {\n      from: \"list\",\n      localField: \"Classroom\",\n      foreignField: \"Classroom\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      FirstName: 1,\n      LastName: 1,\n      studentCount: { $size: \"$Docs1\" }\n    }\n  },\n  {\n    $sort: {\n      studentCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      FirstName: 1,\n      LastName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3506,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of all instructors who have taught some course and the course_id.",
            "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
            "List the names of instructors along with the course IDs for all courses they have taught.",
            "Retrieve the names of all instructors who have taught courses and their associated course IDs.",
            "Provide the names of instructors and the IDs of the courses they have instructed."
        ],
        "ref_sql": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
        "MQL": "db.department.aggregate([\n  { $unwind: \"$instructor\" },\n  { $unwind: \"$instructor.teaches\" },\n  {\n    $project: {\n      name: \"$instructor.name\",\n      course_id: \"$instructor.teaches.course_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 655,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What are the names of people in ascending order of weight?",
            "Return the names of people, ordered by weight ascending.",
            "List the names of individuals sorted by their weight from lightest to heaviest.",
            "Provide the names of people, sorted in order of their weight, starting with the smallest.",
            "Show the names of people arranged in increasing order of weight."
        ],
        "ref_sql": "SELECT Name FROM People ORDER BY Weight ASC",
        "MQL": "db.people.find({}, { Name: 1, _id: 0 }).sort({ Weight: 1 });\n"
    },
    {
        "record_id": 3982,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
            "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
            "What is the total count of rooms in the apartments of the building named \"Columbus Square\"?",
            "Can you provide the overall number of rooms across all apartments in the building with the short name \"Columbus Square\"?",
            "How many total rooms are there in the apartments located in the building referred to as \"Columbus Square\"?"
        ],
        "ref_sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $match: {\n      building_short_name: \"Columbus Square\"\n    }\n  },\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Apartments_room_count: {\n        $sum: {\n          $toInt: \"$Apartments.room_count\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Apartments_room_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2138,
        "db_id": "film_rank",
        "nl_queries": [
            "What is the average number of cities of markets with low film market estimate bigger than 10000?",
            "Give the average number of cities within markets that had a low market estimation larger than 10000?",
            "What is the mean number of cities in markets with a low film market estimate greater than 10,000?",
            "Find the average number of cities in markets that have a low market estimate exceeding 10,000.",
            "Determine the average number of cities for markets where the low film market estimation is above 10,000."
        ],
        "ref_sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
        "MQL": "db.market.aggregate([\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $match: {\n      \"film_market_estimation.Low_Estimate\": { $gt: 10000 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Number_cities: { $avg: \"$Number_cities\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Number_cities: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2340,
        "db_id": "student_1",
        "nl_queries": [
            "Report the total number of students for each fourth-grade classroom.",
            "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
            "Provide the count of students in each classroom for the fourth grade.",
            "Show how many students are enrolled in every fourth-grade classroom, along with their classroom designations.",
            "List the number of students per classroom for all fourth-grade classes."
        ],
        "ref_sql": "SELECT classroom , count(*) FROM list WHERE grade = \"4\" GROUP BY classroom",
        "MQL": "db.list.aggregate([\n  {\n    $match: {\n      Grade: 4\n    }\n  },\n  {\n    $group: {\n      _id: \"$Classroom\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      Classroom: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1220,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List the date of each treatment, together with the first name of the professional who operated it.",
            "What are the date and the operating professional's first name of each treatment?",
            "Show me the dates for all treatments along with the first names of the professionals who performed them.",
            "Can you provide the treatment dates and the first names of the professionals involved for each treatment?",
            "Please list the date of treatment alongside the first name of each professional who conducted it."
        ],
        "ref_sql": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $unwind: \"$Dogs.Treatments\"\n  },\n  {\n    $lookup: {\n      from: \"Professionals\",\n      localField: \"Dogs.Treatments.professional_id\",\n      foreignField: \"professional_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      date_of_treatment: \"$Dogs.Treatments.date_of_treatment\",\n      first_name: \"$Docs1.first_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1181,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
            "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
            "List the names and account types of customers who have a cumulative loan amount exceeding 5000.",
            "Identify the names and account types of clients whose total loans are greater than 5000.",
            "Retrieve the names and account types of individuals with total loans amounting to more than 5000."
        ],
        "ref_sql": "SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount) > 5000",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $unwind: \"$customer.loan\"\n  },\n  {\n    $group: {\n      _id: \"$customer.cust_ID\",\n      cust_name: { $first: \"$customer.cust_name\" },\n      acc_type: { $first: \"$customer.acc_type\" },\n      total_loan_amount: { $sum: \"$customer.loan.amount\" }\n    }\n  },\n  {\n    $match: {\n      total_loan_amount: { $gt: 5000 }\n    }\n  },\n  {\n    $project: {\n      cust_name: 1,\n      acc_type: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 461,
        "db_id": "debate",
        "nl_queries": [
            "List the dates of debates with number of audience bigger than 150",
            "Provide the dates on which debates had an audience exceeding 150.",
            "Retrieve the dates for debates with more than 150 attendees.",
            "Show me the dates for the debates that attracted over 150 people.",
            "List the dates of debates that had a larger audience than 150."
        ],
        "ref_sql": "SELECT Date FROM debate WHERE Num_of_Audience > 150",
        "MQL": "db.debate.find({\n  \"Num_of_Audience\": { $gt: 150 }\n}, { \"Date\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2303,
        "db_id": "culture_company",
        "nl_queries": [
            "List categories that have at least two books after year 1989.",
            "What categories have two or more corresponding books that were made after 1989?",
            "Identify categories with a minimum of two books published post-1989.",
            "Which categories have two or more books available that were released after 1989?",
            "Find the categories that contain at least two books published after the year 1989."
        ],
        "ref_sql": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count(*) >= 2",
        "MQL": "db.book_club.aggregate([\n  {\n    $match: {\n      Year: { $gt: 1989 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Category\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Category: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 792,
        "db_id": "sports_competition",
        "nl_queries": [
            "List the position of players and the average number of points of players of each position.",
            "For each position, what is the average number of points for players in that position?",
            "Provide the average points scored by players, categorized by their position on the team.",
            "What are the average points for players based on their respective positions?",
            "Show the positions of players along with the average points achieved by those in each position."
        ],
        "ref_sql": "SELECT POSITION , avg(Points) FROM player GROUP BY POSITION",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$player\"\n  },\n  {\n    $group: {\n      _id: \"$player.Position\",\n      avg_Points: { $avg: \"$player.Points\" }\n    }\n  },\n  {\n    $project: {\n      Position: \"$_id\",\n      avg_Points: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3217,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the first names and last names of teachers in alphabetical order of last name.",
            "List the first and last names of teachers sorted alphabetically by their last name.",
            "Retrieve the names of teachers, displaying their first and last names in order of last name.",
            "Get a list of teachers' first and last names arranged in ascending order of last name.",
            "Provide the first and last names of teachers, sorted by their last names in alphabetical order."
        ],
        "ref_sql": "SELECT first_name , last_name FROM Teachers ORDER BY last_name",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Teachers\" },\n  { $project: { \"first_name\": \"$Teachers.first_name\", \"last_name\": \"$Teachers.last_name\", \"_id\": 0 } },\n  { $sort: { \"last_name\": 1 } }\n]);\n"
    },
    {
        "record_id": 301,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
            "Can you list the unique types of services offered by the organization named 'Denesik and Sons Party'?",
            "What are the different service categories provided by the organization with the details 'Denesik and Sons Party'?",
            "Identify all distinct service types that the 'Denesik and Sons Party' organization provides.",
            "What unique types of services does the organization known as 'Denesik and Sons Party' offer?"
        ],
        "ref_sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'",
        "MQL": "db.Organizations.aggregate([\n  {\n    $match: {\n      \"organization_details\": \"Denesik and Sons Party\"\n    }\n  },\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $group: {\n      _id: \"$Services.service_type_code\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      service_type_code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2932,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "How many types of products have Rodrick Heaney bought in total?",
            "Find the number of distinct products Rodrick Heaney has bought so far.",
            "How many unique products has Rodrick Heaney purchased in total?",
            "What is the count of distinct product types bought by Rodrick Heaney up to now?",
            "Can you tell me the total number of different products that Rodrick Heaney has ordered?"
        ],
        "ref_sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_name: \"Rodrick Heaney\"\n    }\n  },\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Orders.Order_Items.product_id\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_order_items_product_id\"\n  }\n]);\n"
    },
    {
        "record_id": 1117,
        "db_id": "music_1",
        "nl_queries": [
            "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
            "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
            "Can you provide the names of the artists and their home countries for the top three songs with the highest ratings?",
            "Who are the artists behind the three most highly rated songs, and which countries are they from?",
            "List the names and countries of the artists who created the three songs with the best ratings."
        ],
        "ref_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $sort: {\n      \"song.rating\": -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      artist_name: \"$song.artist_name\",\n      country: \"$song.country\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2344,
        "db_id": "club_1",
        "nl_queries": [
            "Find the description of the club \"Pen and Paper Gaming\".",
            "What is the description of the club \"Pen and Paper Gaming\"?",
            "What is the summary of the club known as \"Pen and Paper Gaming\"?",
            "Can you provide the details for the club \"Pen and Paper Gaming\"?",
            "Please tell me the description of the \"Pen and Paper Gaming\" club."
        ],
        "ref_sql": "SELECT clubdesc FROM club WHERE clubname = \"Pen and Paper Gaming\"",
        "MQL": "db.Club.find(\n  { ClubName: \"Pen and Paper Gaming\" },\n  { ClubDesc: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1737,
        "db_id": "college_1",
        "nl_queries": [
            "Find the first names of all instructors who have taught some course and the course code.",
            "What are the first names of all teachers who have taught a course and the corresponding course codes?",
            "List the first names of all teachers who have taught at least one course along with the corresponding course codes.",
            "What are the first names of instructors that have taught a course, and can you provide the course codes as well?",
            "Retrieve the first names of educators who have conducted classes and their associated course codes."
        ],
        "ref_sql": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $match: {\n      \"CLASS.PROF_NUM\": { $exists: true }\n    }\n  },\n  {\n    $project: {\n      EMP_FNAME: 1,\n      CRS_CODE: \"$CLASS.CRS_CODE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 845,
        "db_id": "solvency_ii",
        "nl_queries": [
            "Show the most common type code across products.",
            "Identify the most prevalent product type code in the inventory.",
            "What is the product type code that appears most frequently among all products?",
            "Display the product type code with the highest count across the collection.",
            "Find the product type code that is most commonly represented in the dataset."
        ],
        "ref_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$Product_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Product_Type_Code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2407,
        "db_id": "student_1",
        "nl_queries": [
            "Find the number of students in one classroom.",
            "How many students does one classroom have?",
            "How many students are there in each classroom?",
            "What is the total number of students in a classroom?",
            "Count the students present in one classroom."
        ],
        "ref_sql": "SELECT count(*) , classroom FROM list GROUP BY classroom",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Classroom\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      Classroom: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1115,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
            "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
            "List the apartment numbers for those with unit status indicating both available and unavailable.",
            "Identify which apartment units have availability statuses of both 0 and 1, and provide their numbers.",
            "Retrieve the apartment numbers of units that show both availability options (0 and 1)."
        ],
        "ref_sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.View_Unit_Status\"\n  },\n  {\n    $group: {\n      _id: \"$Apartments.apt_id\",\n      apt_number: {\n        $first: \"$Apartments.apt_number\"\n      },\n      availability_values: {\n        $addToSet: \"$Apartments.View_Unit_Status.available_yn\"\n      }\n    }\n  },\n  {\n    $match: {\n      availability_values: {\n        $all: [0, 1]\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      apt_number: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3724,
        "db_id": "e_government",
        "nl_queries": [
            "Find the name of the youngest organization.",
            "What is the name of the organization that was formed most recently?",
            "What is the name of the organization established most recently?",
            "Retrieve the name of the latest formed organization.",
            "Can you provide the name of the newest organization?"
        ],
        "ref_sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "MQL": "db.Organizations.aggregate([\n  {\n    $sort: { date_formed: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      organization_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2584,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "How many transcripts are released?",
            "How many transcripts are listed?",
            "What is the total number of released transcripts?",
            "Can you provide the count of transcripts available?",
            "How many transcripts are currently recorded in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM Transcripts",
        "MQL": "db.Transcripts.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1416,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
            "What are the ids, types, and details of the organization with the most research staff?",
            "Which organisation employs the largest number of research staff? Please provide the organisation ID, type, and details.",
            "Identify the organisation that has hired the highest number of research personnel along with its ID, type, and details.",
            "Find the organisation with the most research staff members, including its organisation ID, type, and relevant details."
        ],
        "ref_sql": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Research_Staff\"\n  },\n  {\n    $group: {\n      _id: {\n        organisation_id: \"$Organisations.organisation_id\",\n        organisation_type: \"$Organisations.organisation_type\",\n        organisation_details: \"$Organisations.organisation_details\"\n      },\n      research_staff_count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { research_staff_count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      organisation_id: \"$_id.organisation_id\",\n      organisation_type: \"$_id.organisation_type\",\n      organisation_details: \"$_id.organisation_details\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2934,
        "db_id": "department_management",
        "nl_queries": [
            "How many acting statuses are there?",
            "What is the total number of unique acting statuses?",
            "How many different temporary acting statuses exist?",
            "Can you tell me the count of distinct acting roles?",
            "How many variations of acting statuses are recorded?"
        ],
        "ref_sql": "SELECT count(DISTINCT temporary_acting) FROM management",
        "MQL": "db.head.aggregate([\n  { $unwind: \"$management\" },\n  { $group: { _id: \"$management.temporary_acting\" } },\n  { $count: \"count_DISTINCT_temporary_acting\" }\n]);\n"
    },
    {
        "record_id": 2384,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the number of scientists involved for the projects that require more than 300 hours.",
            "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
            "Count how many scientists are assigned to projects that need over 300 hours of work.",
            "List the names of projects requiring more than 300 hours, along with the number of scientists assigned to each project.",
            "How many scientists are involved in each project that has a requirement of over 300 hours, and what are the project names?"
        ],
        "ref_sql": "SELECT count(*) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "MQL": "db.Projects.aggregate([\n  {\n    $match: {\n      Hours: { $gt: 300 }\n    }\n  },\n  {\n    $unwind: \"$AssignedTo\"\n  },\n  {\n    $group: {\n      _id: \"$Code\",\n      Name: { $first: \"$Name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 312,
        "db_id": "car_1",
        "nl_queries": [
            "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "What unique car models are associated with the manufacturer known as General Motors or have a weight greater than 3500?",
            "Can you list the different car models from either General Motors or those that exceed a weight of 3500?",
            "Identify the distinct models produced by General Motors or those whose weight is over 3500 pounds."
        ],
        "ref_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"countries.car_makers.FullName\": \"General Motors\" },\n        { \"countries.car_makers.model_list.car_names.cars_data.Weight\": { $gt: 3500 } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$countries.car_makers.model_list.car_names.Model\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Model: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2750,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "How many products have a price higher than the average?",
            "What is the number of products priced above the average price?",
            "How many products cost more than the average product price?",
            "Can you tell me the count of products that have a price greater than the average?",
            "How many items are there that are priced higher than the average price of all products?"
        ],
        "ref_sql": "SELECT count(*) FROM products WHERE product_price > (SELECT avg(product_price) FROM products)",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_product_price: { $avg: \"$product_price\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      let: { avg_product_price: \"$avg_product_price\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$product_price\", \"$$avg_product_price\"] }\n          }\n        },\n        {\n          $count: \"count\"\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: { $arrayElemAt: [\"$Docs1.count\", 0] }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3455,
        "db_id": "station_weather",
        "nl_queries": [
            "show the lowest low temperature and highest wind speed in miles per hour.",
            "What is the minimum low temperature and the maximum wind speed recorded in miles per hour?",
            "Please provide the lowest recorded low temperature and the highest wind speed in mph.",
            "Display the minimum low temperature alongside the maximum wind speed in miles per hour.",
            "Can you show me the lowest low temperature and peak wind speed in miles per hour?"
        ],
        "ref_sql": "SELECT min(low_temperature) , max(wind_speed_mph) FROM weekly_weather",
        "MQL": "db.station.aggregate([\n  { $unwind: \"$weekly_weather\" },\n  { $group: {\n      _id: null,\n      min_low_temperature: { $min: \"$weekly_weather.low_temperature\" },\n      max_wind_speed_mph: { $max: \"$weekly_weather.wind_speed_mph\" }\n    }\n  },\n  { $project: {\n      _id: 0,\n      min_low_temperature: 1,\n      max_wind_speed_mph: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2503,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "How many employees do we have?",
            "What is the total number of employees in the organization?",
            "Can you tell me how many employees we currently have?",
            "How many employees are there in our company?",
            "What is the headcount of employees at this time?"
        ],
        "ref_sql": "SELECT count(*) FROM Employees;",
        "MQL": "db.Roles.aggregate([\n  { $unwind: \"$Employees\" },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 4133,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
            "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?",
            "List the opening and closing dates for all policies belonging to customers with \"Diana\" in their names.",
            "Show the start and end dates of every policy held by the customer whose name features \"Diana.\"",
            "What are the start and finish dates of the policies associated with any customer whose name includes \"Diana\"?"
        ],
        "ref_sql": "SELECT t2.date_opened , t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      Customer_name: { $regex: \"Diana\", $options: \"i\" }\n    }\n  },\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $project: {\n      Date_Opened: \"$Customers_Policies.Date_Opened\",\n      Date_Closed: \"$Customers_Policies.Date_Closed\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 45,
        "db_id": "phone_1",
        "nl_queries": [
            "Find the number of phones for each accreditation type.",
            "How many phones belongs to each accreditation type?",
            "What is the total number of phones associated with each accreditation type?",
            "Count how many phones fall under every accreditation type.",
            "Provide the number of phones for each type of accreditation."
        ],
        "ref_sql": "SELECT Accreditation_type , count(*) FROM phone GROUP BY Accreditation_type",
        "MQL": "db.chip_model.aggregate([\n  {\n    $unwind: \"$phone\"\n  },\n  {\n    $group: {\n      _id: \"$phone.Accreditation_type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Accreditation_type: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1716,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "What is each customer's move in date, and the corresponding customer id and details?",
            "Can you provide the move-in dates for all customers along with their IDs and related details?",
            "Please list each customer’s move-in date, along with their respective customer ID and details.",
            "What are the move-in dates for customers, including their customer IDs and details?",
            "Show me the move-in date, customer ID, and details for each customer."
        ],
        "ref_sql": "SELECT T2.date_moved_in , T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Customer_Events\" },\n  {\n    $project: {\n      \"date_moved_in\": \"$Customer_Events.date_moved_in\",\n      \"customer_id\": 1,\n      \"customer_details\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1639,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What is the name of the entrepreneur with the greatest weight?",
            "Return the name of the heaviest entrepreneur.",
            "Who is the entrepreneur that weighs the most?",
            "Identify the name of the entrepreneur with the highest weight.",
            "Can you tell me the name of the entrepreneur who has the maximum weight?"
        ],
        "ref_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $sort: {\n      Weight: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2524,
        "db_id": "network_1",
        "nl_queries": [
            "How many high schoolers are there?",
            "Count the number of high schoolers.",
            "What is the total number of students in high school?",
            "Please provide the count of all high school students.",
            "How many students are enrolled in high school?"
        ],
        "ref_sql": "SELECT count(*) FROM Highschooler",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3164,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the emails of the user named \"Mary\".",
            "Retrieve the email address of the user called \"Mary\".",
            "What is the email of the user with the name \"Mary\"?",
            "Can you provide the email for the user named \"Mary\"?",
            "Show me the email associated with the user named \"Mary\"."
        ],
        "ref_sql": "SELECT email FROM user_profiles WHERE name = 'Mary'",
        "MQL": "db.user_profiles.find(\n  { \"name\": \"Mary\" },\n  { \"email\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 846,
        "db_id": "solvency_ii",
        "nl_queries": [
            "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
            "List the product type codes that include products priced over 4500 and others priced under 3000.",
            "Identify the product type codes that have at least some products with a price exceeding 4500 and others with a price below 3000.",
            "Provide the product type codes for which there are products with prices greater than 4500 and also products with prices less than 3000.",
            "What are the product type codes that contain products priced higher than 4500 as well as those priced lower than 3000?"
        ],
        "ref_sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$Product_Type_Code\",\n      count: { $sum: 1 },\n      prices: { $push: \"$Product_Price\" }\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { prices: { $gt: 4500 } },\n        { prices: { $lt: 3000 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Product_Type_Code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 330,
        "db_id": "flight_company",
        "nl_queries": [
            "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
            "Can you list the names of pilots who have flown in either the \"United States\" or \"Billund Airport\"?",
            "What are the unique names of pilots who have operated flights in the country 'United States' or at 'Billund Airport'?",
            "Who are the pilots that have piloted flights in the \"United States\" or at \"Billund Airport\"?",
            "Provide the names of different pilots that have flown in either the airport named 'Billund Airport' or in the country 'United States'."
        ],
        "ref_sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'",
        "MQL": "db.airport.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Country\": \"United States\" },\n        { \"name\": \"Billund Airport\" }\n      ]\n    }\n  },\n  {\n    $lookup: {\n      from: \"operate_company\",\n      localField: \"id\",\n      foreignField: \"flight.airport_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.flight\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.flight.Pilot\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Pilot: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4231,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show the transaction type and the number of transactions.",
            "What are the different transaction types, and how many transactions of each have taken place?",
            "List the types of transactions along with their respective transaction counts.",
            "Provide an overview of transaction types and the number of occurrences for each.",
            "What types of transactions exist, and what is the count for each transaction type?"
        ],
        "ref_sql": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
        "MQL": "db.Accounts.aggregate([\n  {\n    $unwind: \"$Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$Financial_Transactions.transaction_type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      transaction_type: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1826,
        "db_id": "race_track",
        "nl_queries": [
            "Show the name of track with most number of races.",
            "What is the name of the track that has had the greatest number of races?",
            "Identify the track that has hosted the highest number of races.",
            "Which track features the largest count of races held?",
            "Name the track with the highest race count."
        ],
        "ref_sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.track.aggregate([\n  {\n    $group: {\n      _id: \"$Name\",\n      sum_count_race: { $sum: { $size: \"$race\" } }\n    }\n  },\n  {\n    $sort: {\n      sum_count_race: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 112,
        "db_id": "chinook_1",
        "nl_queries": [
            "How many customers have email that contains \"gmail.com\"?",
            "Count the number of customers that have an email containing \"gmail.com\".",
            "What is the total count of customers whose email addresses include \"gmail.com\"?",
            "How many customers have an email that features \"gmail.com\"?",
            "Please provide the number of customers with email addresses containing \"gmail.com\"."
        ],
        "ref_sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $unwind: \"$Customer\"\n  },\n  {\n    $match: {\n      \"Customer.Email\": {\n        $regex: \"gmail.com\",\n        $options: \"i\"\n      }\n    }\n  },\n  {\n    $count: \"COUNT\"\n  }\n]);\n"
    },
    {
        "record_id": 3387,
        "db_id": "tvshow",
        "nl_queries": [
            "What is minimum and maximum share of TV series?",
            "What is the maximum and minimum share for the TV series?",
            "What are the lowest and highest share values for the TV series?",
            "Can you tell me the maximum and minimum share figures for the TV series?",
            "What is the range of share percentages for the TV series, including both the maximum and minimum?"
        ],
        "ref_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "MQL": "db.TV_Channel.aggregate([\n  { $unwind: \"$TV_series\" },\n  {\n    $group: {\n      _id: null,\n      max_Share: { $max: { $toDouble: \"$TV_series.Share\" } },\n      min_Share: { $min: { $toDouble: \"$TV_series.Share\" } }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Share: 1,\n      min_Share: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1347,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
            "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
            "List the names and identifiers of stations that either have an average bike availability exceeding 14 or were installed in the month of December.",
            "Provide the names and ids of all stations with an average of more than 14 bikes available, or those that were installed during December.",
            "What are the identifiers and names of the stations that show an average of over 14 bikes available or had installations in December?"
        ],
        "ref_sql": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\"",
        "MQL": "db.station.aggregate([\n  {\n    $project: {\n      name: 1,\n      id: 1,\n      bikes_available_avg: {\n        $avg: \"$status.bikes_available\"\n      },\n      installation_month: {\n        $month: {\n          $dateFromString: {\n            dateString: \"$installation_date\"\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { bikes_available_avg: { $gt: 14 } },\n        { installation_month: 12 }\n      ]\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4028,
        "db_id": "csu_1",
        "nl_queries": [
            "What is the number of graduates in \"San Francisco State University\" in year 2004?",
            "How many people graduated from San Francisco State University in 2004?",
            "How many graduates were there at San Francisco State University in the year 2004?",
            "Can you tell me the total number of students who graduated from San Francisco State University in 2004?",
            "What was the total count of graduates from San Francisco State University during 2004?"
        ],
        "ref_sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Francisco State University\"\n    }\n  },\n  {\n    $unwind: \"$discipline_enrollments\"\n  },\n  {\n    $match: {\n      \"discipline_enrollments.Year\": 2004\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Graduate: {\n        $sum: \"$discipline_enrollments.Graduate\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Graduate: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3703,
        "db_id": "battle_death",
        "nl_queries": [
            "What are the notes of the death events which has substring 'East'?",
            "Can you provide the death notes that contain the substring 'East'?",
            "What are the records of death events that include 'East' in their notes?",
            "Please list the death event notes mentioning the term 'East'.",
            "Show me the notes from death events where the description contains 'East'."
        ],
        "ref_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "MQL": "db.battle.aggregate([\n  {\n    $unwind: \"$ship\"\n  },\n  {\n    $unwind: \"$ship.death\"\n  },\n  {\n    $match: {\n      \"ship.death.note\": { $regex: \"East\", $options: \"i\" }\n    }\n  },\n  {\n    $project: {\n      note: \"$ship.death.note\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1927,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of amenities Smith Hall dorm have.",
            "What are the names of the amenities that Smith Hall has?",
            "List the amenities offered by the Smith Hall dormitory.",
            "What amenities can be found in Smith Hall?",
            "Provide the names of the amenities available in the Smith Hall dorm."
        ],
        "ref_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      dorm_name: \"Smith Hall\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"Has_amenity.amenid\",\n      foreignField: \"amenid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      amenity_name: \"$Docs1.amenity_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2167,
        "db_id": "network_2",
        "nl_queries": [
            "What is the average age for all person?",
            "What is the average age for all people in the table?",
            "What is the mean age of individuals in the dataset?",
            "Can you provide the average age of all persons listed in the collection?",
            "How old is the average person in this table?"
        ],
        "ref_sql": "SELECT avg(age) FROM Person",
        "MQL": "db.Person.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_age: { $avg: \"$age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2413,
        "db_id": "college_1",
        "nl_queries": [
            "Find the number of classes in each department.",
            "How many classes are held in each department?",
            "How many classes exist per department?",
            "Determine the total number of classes offered by each department.",
            "Count the classes available in each department."
        ],
        "ref_sql": "SELECT count(*) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE.CLASS\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_CODE\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      DEPT_CODE: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4076,
        "db_id": "aircraft",
        "nl_queries": [
            "what is the name and age of the youngest winning pilot?",
            "How old is the youngest winning pilot and what is their name?",
            "Who is the youngest pilot that has won, and what is their age?",
            "Please provide the name and age of the pilot who is the youngest among the winners.",
            "Can you tell me the age and name of the youngest winning pilot?"
        ],
        "ref_sql": "SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $match: {\n      \"match.Winning_Pilot\": { $exists: true, $ne: \"\" }\n    }\n  },\n  {\n    $sort: {\n      \"Age\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Age\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2556,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show the number of locations.",
            "How many locations are listed in the database?",
            "What is the total count of locations available in the database?",
            "Can you provide the number of recorded locations?",
            "How many distinct locations are present in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM Ref_locations",
        "MQL": "db.Ref_Locations.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3911,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What are the shipping agent names?",
            "Could you provide the names of the shipping agents?",
            "List the names of all shipping agents available.",
            "What shipping agent names can you find in the database?",
            "Give me the names of the shipping agents."
        ],
        "ref_sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
        "MQL": "db.Ref_Shipping_Agents.find({}, { \"shipping_agent_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3550,
        "db_id": "race_track",
        "nl_queries": [
            "Show names and seatings, ordered by seating for all tracks opened after 2000.",
            "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
            "List the names and seating capacities of all tracks established post-2000, sorted by seating.",
            "Provide the names and seating arrangements for tracks opened after the year 2000, arranged in ascending order of seating.",
            "What are the names along with the seating details of tracks that began operations after 2000, ordered by their seating capacity?"
        ],
        "ref_sql": "SELECT name , seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "MQL": "db.track.find(\n  { Year_Opened: { $gt: 2000 } },\n  { Name: 1, Seating: 1, _id: 0 }\n).sort({ Seating: 1 });\n"
    },
    {
        "record_id": 151,
        "db_id": "match_season",
        "nl_queries": [
            "Show the name of colleges that have at least two players.",
            "What are the names of all colleges that have two or more players?",
            "Provide a list of colleges that have two or more players enrolled.",
            "Which colleges feature at least two players on their rosters?",
            "Identify the names of colleges that possess a minimum of two players."
        ],
        "ref_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.College\",\n      playerCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      playerCount: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      College: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 651,
        "db_id": "party_host",
        "nl_queries": [
            "List the names of hosts who did not serve as a host of any party in our record.",
            "What are the names of hosts who did not host any party in our record?",
            "Please provide the names of hosts that have not been associated with any party in our records.",
            "Can you list the names of all hosts who have never hosted a party according to our data?",
            "Identify the hosts from our records who did not participate in hosting any parties."
        ],
        "ref_sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "MQL": "db.host.aggregate([\n  {\n    $lookup: {\n      from: \"party\",\n      localField: \"Host_ID\",\n      foreignField: \"party_host.Host_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1159,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which company started the earliest the maintenance contract? Show the company name.",
            "Which company began the earliest maintenance contract? Please provide the company name.",
            "Identify the company with the earliest starting maintenance contract and display its name.",
            "Who is the company that initiated the first maintenance contract? Show me the name of that company.",
            "Which company has the earliest maintenance contract? Share the name of the company."
        ],
        "ref_sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "MQL": "db.Third_Party_Companies.aggregate([\n  {\n    $unwind: \"$Maintenance_Contracts\"\n  },\n  {\n    $sort: {\n      \"Maintenance_Contracts.contract_start_date\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      \"company_name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3442,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "find the minimum and maximum number of products of all stores.",
            "What are the minimum and maximum number of products across all the shops?",
            "What is the range of the number of products available in all the shops, specifically the minimum and maximum?",
            "Show me the least and greatest number of products found in the stores.",
            "Determine the lowest and highest count of products offered by all shops."
        ],
        "ref_sql": "SELECT min(Number_products) , max(Number_products) FROM shop",
        "MQL": "db.shop.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_Number_products: { $min: \"$Number_products\" },\n      max_Number_products: { $max: \"$Number_products\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_Number_products: 1,\n      max_Number_products: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 133,
        "db_id": "phone_market",
        "nl_queries": [
            "What is the carrier of the most expensive phone?",
            "Which carrier is associated with the phone that has the highest price?",
            "Can you tell me the carrier for the most costly phone available?",
            "What carrier does the priciest phone belong to?",
            "Identify the carrier of the phone that is the most expensive in the market."
        ],
        "ref_sql": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "MQL": "db.phone.aggregate([\n  { $sort: { \"Price\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Carrier\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 4197,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show theme and year for all exhibitions in an descending order of ticket price.",
            "What are the themes and years for exhibitions, sorted by ticket price descending?",
            "List the themes and years of all exhibitions, ordered by ticket price from highest to lowest.",
            "Provide the themes and corresponding years of exhibitions sorted in descending order of their ticket prices.",
            "Display the themes along with years for the exhibitions, arranged by ticket price in descending order."
        ],
        "ref_sql": "SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $project: {\n      Theme: \"$exhibition.Theme\",\n      Year: \"$exhibition.Year\",\n      Ticket_Price: \"$exhibition.Ticket_Price\"\n    }\n  },\n  {\n    $sort: {\n      Ticket_Price: -1\n    }\n  },\n  {\n    $project: {\n      Theme: 1,\n      Year: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3552,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
            "List the name, street address, and floor count for all buildings, arranged by the number of floors in ascending order.",
            "Provide the names, street addresses, and total floors for every building, sorted according to the number of floors.",
            "Display the building names, their street addresses, and how many floors each has, sorted from the fewest to the most floors.",
            "Present the name, street address, and floor details for all buildings, ordered by the number of floors they have."
        ],
        "ref_sql": "SELECT name , street_address , floors FROM building ORDER BY floors",
        "MQL": "db.building.find({}, { \"Name\": 1, \"Street_address\": 1, \"Floors\": 1, \"_id\": 0 }).sort({ \"Floors\": 1 });\n"
    },
    {
        "record_id": 3675,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Find the names of stores whose number products is more than the average number of products.",
            "Which shops' number products is above the average? Give me the shop names.",
            "List the names of shops that have more products than the average product count.",
            "Identify the store names that exceed the average number of products.",
            "Which shops have a higher product count than the average? Please provide their names."
        ],
        "ref_sql": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "MQL": "db.shop.aggregate([\n  {\n    $group: {\n      _id: null,\n      acg_Number_products: { $avg: \"$Number_products\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"shop\",\n      let: { acg_Number_products: \"$acg_Number_products\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$Number_products\", \"$$acg_Number_products\"] }\n          }\n        },\n        {\n          $project: {\n            Name: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 522,
        "db_id": "game_1",
        "nl_queries": [
            "Show first name for all students with major 600.",
            "What are the first names for all students who are from the major numbered 600?",
            "List the first names of students enrolled in major 600.",
            "Retrieve the first names of all students who have major 600.",
            "What are the first names of students with a major designation of 600?"
        ],
        "ref_sql": "SELECT Fname FROM Student WHERE Major = 600",
        "MQL": "db.Student.find(\n  { Major: 600 },\n  { Fname: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3092,
        "db_id": "movie_1",
        "nl_queries": [
            "Who is the director of movie Avatar?",
            "Who directed Avatar?",
            "Who is credited as the director for the film Avatar?",
            "Can you tell me the name of the director for the movie Avatar?",
            "What is the name of the person who directed Avatar?"
        ],
        "ref_sql": "SELECT director FROM Movie WHERE title = 'Avatar'",
        "MQL": "db.Movie.find(\n  { title: \"Avatar\" },\n  { director: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 1768,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "What is the invoice number and invoice date for the invoice with most number of transactions?",
            "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
            "Can you provide the invoice number and date for the invoice that has the highest transaction count?",
            "What are the invoice number and date associated with the invoice containing the largest number of financial transactions?",
            "Please give me the invoice number and date for the invoice with the maximum number of transactions recorded."
        ],
        "ref_sql": "SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Invoices\"\n  },\n  {\n    $group: {\n      _id: \"$Orders.Invoices.invoice_number\",\n      invoice_date: { $first: \"$Orders.Invoices.invoice_date\" },\n      sum_count_Financial_Transactions: { $sum: { $size: \"$Orders.Invoices.Financial_Transactions\" } }\n    }\n  },\n  {\n    $sort: {\n      sum_count_Financial_Transactions: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      invoice_number: \"$_id\",\n      invoice_date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 372,
        "db_id": "student_1",
        "nl_queries": [
            "Which classrooms are used by grade 5?",
            "Show me the classrooms grade 5 is using.",
            "What classrooms are allocated for fifth grade students?",
            "List the classrooms attended by students in grade 5.",
            "Identify the classrooms utilized by the fifth grade."
        ],
        "ref_sql": "SELECT DISTINCT classroom FROM list WHERE grade = 5",
        "MQL": "db.list.aggregate([\n  {\n    $match: {\n      Grade: 5\n    }\n  },\n  {\n    $project: {\n      Classroom: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2400,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the average age and number of male students (with sex M) from each city.",
            "What is the average age and how many male students are there in each city?",
            "How many male students are there in each city, and what is their average age?",
            "Report the average age and total number of male students from each city.",
            "Can you provide the average age and headcount of male students across different cities?"
        ],
        "ref_sql": "SELECT count(*) , avg(age) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Sex: \"M\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$city_code\",\n      count: {\n        $sum: 1\n      },\n      avg_age: {\n        $avg: \"$Age\"\n      }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      avg_age: 1,\n      city_code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2675,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of distinct amenities.",
            "How many diffrent dorm amenities are there?",
            "What is the total count of unique dorm amenities?",
            "How many types of amenities are available in the dormitories?",
            "Count the distinct amenities found in the dorm facilities."
        ],
        "ref_sql": "SELECT count(*) FROM dorm_amenity",
        "MQL": "db.Dorm_amenity.aggregate([\n  {\n    $group: {\n      _id: \"$amenid\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3668,
        "db_id": "formula_1",
        "nl_queries": [
            "What is the name of the race held most recently?",
            "What is the name of the race that occurred most recently?",
            "What is the title of the latest race that took place?",
            "Can you tell me the name of the most recent race event?",
            "What is the name of the race that was held last?"
        ],
        "ref_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $sort: {\n      \"races.date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: \"$races.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3682,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show the stadium names without any concert.",
            "What are the names of the stadiums without any concerts?",
            "List the names of stadiums that do not host any concerts.",
            "Identify the stadiums that have no concerts and return their names.",
            "Provide a list of stadium names that are without any concert events."
        ],
        "ref_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "MQL": "db.stadium.aggregate([\n  {\n    $match: {\n      $or: [\n        { concert: { $exists: false } },\n        { concert: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 124,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "How many distinct transaction types are used in the transactions?",
            "What is the number of unique transaction types involved in the transactions?",
            "How many different types of transactions have been recorded?",
            "Can you tell me the total count of distinct transaction types present in the transactions?",
            "How many unique types of transaction codes are there in the transaction records?"
        ],
        "ref_sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $group: { _id: \"$Transactions.transaction_type_code\" } },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, \"COUNT_DISTINCT_transaction_type_code\": \"$count\" } }\n]);\n"
    },
    {
        "record_id": 701,
        "db_id": "news_report",
        "nl_queries": [
            "Show the names of journalists from \"England\" or \"Wales\".",
            "List the names of journalists who are from either England or Wales.",
            "Provide the names of journalists that hail from \"England\" or \"Wales\".",
            "Retrieve the names of all journalists whose nationality is \"England\" or \"Wales\".",
            "Display the names of journalists originating from England or Wales."
        ],
        "ref_sql": "SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\"",
        "MQL": "db.journalist.find({\n  $or: [\n    { \"Nationality\": \"England\" },\n    { \"Nationality\": \"Wales\" }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3483,
        "db_id": "race_track",
        "nl_queries": [
            "Show the name and location for all tracks.",
            "What are the names and locations of all tracks?",
            "List all tracks along with their names and locations.",
            "Retrieve the names and locations for every race track available.",
            "Provide the names and locations of all the tracks in the database."
        ],
        "ref_sql": "SELECT name , LOCATION FROM track",
        "MQL": "db.track.find({}, { Name: 1, Location: 1, _id: 0 })\n"
    },
    {
        "record_id": 2627,
        "db_id": "csu_1",
        "nl_queries": [
            "How many campuses are there in Los Angeles county?",
            "How many campuses exist are in the county of LA?",
            "What is the total number of campuses located in Los Angeles County?",
            "Can you tell me how many campuses are situated in the LA county?",
            "How many educational campuses are found in the county of Los Angeles?"
        ],
        "ref_sql": "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\"",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      County: \"Los Angeles\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3797,
        "db_id": "store_product",
        "nl_queries": [
            "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
            "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
            "Identify products that either have an A4 maximum page size or a color printing speed below 5 pages per minute.",
            "List the products with a max page size of A4 or those that print fewer than 5 pages per minute in color.",
            "What products are available that are either sized for A4 paper or have a color printing rate that is less than 5 pages per minute?"
        ],
        "ref_sql": "SELECT product FROM product WHERE max_page_size = \"A4\" OR pages_per_minute_color < 5",
        "MQL": "db.product.find({\n  $or: [\n    { max_page_size: \"A4\" },\n    { pages_per_minute_color: { $lt: 5 } }\n  ]\n}, { product: 1, _id: 0 });\n"
    },
    {
        "record_id": 786,
        "db_id": "browser_web",
        "nl_queries": [
            "Find the number of web accelerators used for each Operating system.",
            "What is the count of web accelerators available for each operating system?",
            "List the number of web accelerators categorized by operating system.",
            "How many web accelerators are there for each type of operating system?",
            "Provide the total number of web accelerators for each operating system."
        ],
        "ref_sql": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
        "MQL": "db.Web_client_accelerator.aggregate([\n  {\n    $group: {\n      _id: \"$Operating_system\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Operating_system: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2595,
        "db_id": "aircraft",
        "nl_queries": [
            "How many aircrafts are there?",
            "What is the number of aircraft?",
            "What is the total number of aircraft in the inventory?",
            "Can you tell me how many aircraft exist in the database?",
            "How many total aircraft are recorded?"
        ],
        "ref_sql": "SELECT count(*) FROM aircraft",
        "MQL": "db.aircraft.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3215,
        "db_id": "driving_school",
        "nl_queries": [
            "List the first name and last name of all customers.",
            "What are the first and last names for all customers?",
            "Provide the first and last names of all the customers.",
            "Show me the first names and last names of every customer.",
            "Can you list the first and last names for each customer?"
        ],
        "ref_sql": "SELECT first_name , last_name FROM Customers;",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Customers\" }, \n  { \n    $project: {\n      first_name: \"$Customers.first_name\",\n      last_name: \"$Customers.last_name\",\n      _id: 0\n    } \n  }\n]);\n"
    },
    {
        "record_id": 719,
        "db_id": "poker_player",
        "nl_queries": [
            "List the names of people that are not poker players.",
            "What are the names of people who do not play poker?",
            "Provide the names of individuals who are not involved in poker.",
            "Show me the names of those who have not engaged in playing poker.",
            "Can you list the names of people who aren't poker players?"
        ],
        "ref_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "MQL": "db.people.find({\n  $or: [\n    { poker_player: { $exists: false } },\n    { poker_player: { $size: 0 } }\n  ]\n}, {\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 946,
        "db_id": "aircraft",
        "nl_queries": [
            "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
            "What are the names of all the aircrafts associated with London Gatwick airport?",
            "What are the names of the aircraft linked to the airport called \"London Gatwick\"?",
            "Can you list the aircraft names associated with the London Gatwick airport?",
            "Show me the names of all aircraft tied to the airport named \"London Gatwick\"."
        ],
        "ref_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\"",
        "MQL": "db.airport.aggregate([\n  {\n    $match: {\n      Airport_Name: \"London Gatwick\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"aircraft\",\n      localField: \"airport_aircraft.Aircraft_ID\",\n      foreignField: \"Aircraft_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Aircraft: \"$Docs1.Aircraft\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1971,
        "db_id": "wrestler",
        "nl_queries": [
            "Show the times of elimination by \"Punk\" or \"Orton\".",
            "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
            "List the times at which eliminations occurred by either Punk or Orton.",
            "What are the time stamps for eliminations performed by Punk or Orton?",
            "Provide the time of each elimination carried out by either Punk or Orton."
        ],
        "ref_sql": "SELECT TIME FROM elimination WHERE Eliminated_By = \"Punk\" OR Eliminated_By = \"Orton\"",
        "MQL": "db.wrestler.aggregate([\n  {\n    $unwind: \"$Elimination\"\n  },\n  {\n    $match: {\n      \"Elimination.Eliminated_By\": { $in: [\"Punk\", \"Orton\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Time: \"$Elimination.Time\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 0,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the booking status code and the corresponding number of bookings.",
            "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
            "Display the booking status codes along with the total number of bookings for each status.",
            "What is the count of bookings for each booking status? Provide the booking status codes and their respective counts.",
            "List the different booking status codes and the associated number of bookings for each status."
        ],
        "ref_sql": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $group: {\n      _id: \"$Apartments.Apartment_Bookings.booking_status_code\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      booking_status_code: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4016,
        "db_id": "manufacturer",
        "nl_queries": [
            "How many furniture components are there in total?",
            "What is the total number of components in the furniture?",
            "How many components are included across all furniture items?",
            "Can you tell me the overall count of components in the furniture collection?",
            "What is the aggregate number of furniture components available?"
        ],
        "ref_sql": "SELECT sum(num_of_component) FROM furniture",
        "MQL": "db.furniture.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_num_of_component: { $sum: \"$Num_of_Component\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_num_of_component: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2159,
        "db_id": "network_2",
        "nl_queries": [
            "What is average age of male for different job title?",
            "What is the average age for a male in each job?",
            "What is the average age of male individuals across various job titles?",
            "How old, on average, are males working in different professions?",
            "Can you provide the average age of males grouped by their job roles?"
        ],
        "ref_sql": "SELECT avg(age) , job FROM Person WHERE gender = 'male' GROUP BY job",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      gender: \"male\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$job\",\n      avg_age: {\n        $avg: \"$age\"\n      }\n    }\n  },\n  {\n    $project: {\n      job: \"$_id\",\n      avg_age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2282,
        "db_id": "csu_1",
        "nl_queries": [
            "What is the campus fee of \"San Francisco State University\" in year 1996?",
            "What is the campus fee for San Francisco State University in 1996?",
            "How much is the campus fee at San Francisco State University for the year 1996?",
            "What was the campus fee for San Francisco State University during 1996?",
            "Can you provide the campus fee amount for San Francisco State University in the year 1996?"
        ],
        "ref_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Francisco State University\"\n    }\n  },\n  {\n    $unwind: \"$csu_fees\"\n  },\n  {\n    $match: {\n      \"csu_fees.Year\": 1996\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      CampusFee: \"$csu_fees.CampusFee\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 830,
        "db_id": "world_1",
        "nl_queries": [
            "What are the population and life expectancies in Brazil?",
            "Give me Brazil’s population and life expectancies.",
            "What is Brazil's population and life expectancy?",
            "Please provide the population figures and life expectancy for Brazil.",
            "Can you tell me the population and life expectancy in Brazil?"
        ],
        "ref_sql": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "MQL": "db.country.find(\n  { \"Name\": \"Brazil\" },\n  { \"Population\": 1, \"LifeExpectancy\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 366,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the names of all the product characteristics.",
            "What are the different names of the product characteristics?",
            "List all the names associated with product characteristics.",
            "What are the various names for the characteristics of the products?",
            "Can you provide the names of every product characteristic available?"
        ],
        "ref_sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
        "MQL": "db.Ref_Characteristic_Types.aggregate([\n  {\n    $unwind: \"$Characteristics\"\n  },\n  {\n    $project: {\n      characteristic_name: \"$Characteristics.characteristic_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1467,
        "db_id": "college_1",
        "nl_queries": [
            "Which school has the smallest amount of professors?",
            "Which school has the fewest professors?",
            "Which school has the least number of professors?",
            "Identify the school with the lowest count of professors.",
            "What is the school that employs the fewest faculty members?"
        ],
        "ref_sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.SCHOOL_CODE\",\n      count_PROFESSOR: {\n        $sum: {\n          $size: \"$DEPARTMENT.PROFESSOR\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count_PROFESSOR: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      SCHOOL_CODE: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3264,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
            "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
            "List the gender codes along with the total number of guests, arranging the results from highest to lowest count.",
            "Display the counts of guests categorized by gender code, sorted in descending order by the guest count.",
            "Provide a sorted list of gender codes and their respective guest counts, showing the highest counts first."
        ],
        "ref_sql": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "MQL": "db.Guests.aggregate([\n  {\n    $group: {\n      _id: \"$gender_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      gender_code: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  },\n  {\n    $sort: { COUNT: -1 }\n  }\n]);\n"
    },
    {
        "record_id": 1841,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the id of the pet owned by student whose last name is ‘Smith’.",
            "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "Retrieve the pet identifier for the student with the last name 'Smith'.",
            "What is the identifier for the pet owned by the student named 'Smith'?",
            "Can you tell me the pet ID of the student whose surname is 'Smith'?"
        ],
        "ref_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      LName: \"Smith\"\n    }\n  },\n  {\n    $unwind: \"$Has_Pet\"\n  },\n  {\n    $project: {\n      PetID: \"$Has_Pet.PetID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 787,
        "db_id": "orchestra",
        "nl_queries": [
            "List the names of orchestras that have no performance.",
            "What are the orchestras that do not have any performances?",
            "Identify the orchestras that do not have any scheduled performances.",
            "Provide the names of orchestras that haven't conducted any performances.",
            "Please list the orchestras that currently have no performances scheduled."
        ],
        "ref_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $project: {\n      Orchestra: \"$orchestra.Orchestra\",\n      count_performance: {\n        $size: \"$orchestra.performance\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_performance: 0\n    }\n  },\n  {\n    $project: {\n      Orchestra: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1607,
        "db_id": "entrepreneur",
        "nl_queries": [
            "List the names of entrepreneurs and their companies in descending order of money requested?",
            "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
            "Provide a list of entrepreneur names along with their companies, sorted by the total money requested in descending order.",
            "Show the names of entrepreneurs and their investors, arranged in order from the highest to the lowest money requested.",
            "Can you list the entrepreneurs along with their associated companies, sorted by the amount of money they are seeking, from highest to lowest?"
        ],
        "ref_sql": "SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $sort: {\n      \"entrepreneur.Money_Requested\": -1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      Company: \"$entrepreneur.Company\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3801,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the category and typical buying price of the product with name \"cumin\"?",
            "Return the category code and typical price of 'cumin'.",
            "Can you provide the category code and average buying price for the product \"cumin\"?",
            "What is the product category and typical purchase price for \"cumin\"?",
            "Please tell me the category and the standard buying cost of the product named \"cumin\"."
        ],
        "ref_sql": "SELECT product_category_code , typical_buying_price FROM products WHERE product_name = \"cumin\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"cumin\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_category_code: \"$Products.product_category_code\",\n      typical_buying_price: \"$Products.typical_buying_price\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2613,
        "db_id": "loan_1",
        "nl_queries": [
            "How many bank branches are there?",
            "Count the number of bank branches.",
            "What is the total number of branches in the bank?",
            "How many branches does the bank have?",
            "Determine the total count of bank branches."
        ],
        "ref_sql": "SELECT count(*) FROM bank",
        "MQL": "db.bank.aggregate([\n  {\n    $group: {\n      _id: \"$branch_ID\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4055,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the names of customers who ordered both products Latte and Americano.",
            "What are the names of customers who have purchased both products Latte and Americano?",
            "List the names of customers who have ordered both a Latte and an Americano.",
            "Who are the customers that purchased both Latte and Americano products?",
            "Identify the customers who ordered both products: Latte and Americano."
        ],
        "ref_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $unwind: \"$Customer_Orders.Order_Items\"\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"Customer_Orders.Order_Items.product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.product_details\": { $in: [\"Latte\", \"Americano\"] }\n    }\n  },\n  {\n    $group: {\n      _id: {\n        customer_id: \"$customer_id\",\n        customer_name: \"$customer_name\"\n      },\n      products: { $addToSet: \"$Docs1.product_details\" }\n    }\n  },\n  {\n    $match: {\n      products: { $all: [\"Latte\", \"Americano\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_name: \"$_id.customer_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2652,
        "db_id": "match_season",
        "nl_queries": [
            "How many countries are there in total?",
            "Count the number of countries.",
            "What is the total number of countries represented in the database?",
            "How many countries exist in the records?",
            "Determine the overall count of countries listed."
        ],
        "ref_sql": "SELECT count(*) FROM country",
        "MQL": "db.country.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3859,
        "db_id": "storm_record",
        "nl_queries": [
            "List all region names in alphabetical order.",
            "What are the names of the regions in alphabetical order?",
            "Please provide the names of all regions sorted in alphabetical order.",
            "Give me a list of region names arranged alphabetically.",
            "Can you list all the regions by their names in alphabetical order?"
        ],
        "ref_sql": "SELECT region_name FROM region ORDER BY region_name",
        "MQL": "db.region.find({}, { Region_name: 1, _id: 0 }).sort({ Region_name: 1 });\n"
    },
    {
        "record_id": 3527,
        "db_id": "network_2",
        "nl_queries": [
            "list the name, job title of all people ordered by their names.",
            "What are the names and job titles of every person ordered alphabetically by name?",
            "Retrieve the names and job titles of all individuals, organized in alphabetical order by their names.",
            "Show the list of people’s names along with their job positions, sorted by name in ascending order.",
            "Can you provide the names and occupations of each person, sorted alphabetically according to their names?"
        ],
        "ref_sql": "SELECT name , job FROM Person ORDER BY name",
        "MQL": "db.Person.find({}, { name: 1, job: 1, _id: 0 }).sort({ name: 1 });\n"
    },
    {
        "record_id": 1102,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
            "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
            "Can you provide the account IDs, names, dates when they opened, and any other details for accounts linked to the customer named \"Meaghan\"?",
            "List the IDs, account names, opening dates, and additional details of all accounts associated with the customer who has the first name \"Meaghan\".",
            "What are the details, including account IDs, names, and opening dates for the accounts belonging to the customer named \"Meaghan\"?"
        ],
        "ref_sql": "SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_first_name: \"Meaghan\"\n    }\n  },\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $project: {\n      account_id: \"$Accounts.account_id\",\n      date_account_opened: \"$Accounts.date_account_opened\",\n      account_name: \"$Accounts.account_name\",\n      other_account_details: \"$Accounts.other_account_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3224,
        "db_id": "driving_school",
        "nl_queries": [
            "What is the first name of the staff who did not give any lesson?",
            "What is the first name of all employees who do not give any lessons?",
            "Can you provide the first names of staff members who have not conducted any lessons?",
            "What are the first names of employees with no lessons assigned?",
            "List the first names of staff who have never taught a lesson."
        ],
        "ref_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.Lessons\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      first_name: \"$Staff.first_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1036,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
            "Tell me the name of the staff in charge of the attraction called \"US museum\".",
            "Who is the staff member responsible for the attraction named \"US museum\"?",
            "Can you provide the name of the staff overseeing the \"US museum\" attraction?",
            "What is the name of the person in charge of the attraction called \"US museum\"?"
        ],
        "ref_sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\"",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $match: {\n      \"Tourist_Attractions.Name\": \"US museum\"\n    }\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Staff\"\n  },\n  {\n    $project: {\n      Name: \"$Tourist_Attractions.Staff.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 629,
        "db_id": "phone_1",
        "nl_queries": [
            "the names of models that launched between 2002 and 2004.",
            "List the names of phone models released from 2002 to 2004.",
            "Provide the names of models that were launched during the years 2002 through 2004.",
            "What are the names of the models introduced between 2002 and 2004?",
            "Retrieve the model names of devices that came out within the range of 2002 to 2004."
        ],
        "ref_sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
        "MQL": "db.chip_model.find({\n  \"Launch_year\": { $gte: 2002, $lte: 2004 }\n}, { \"Model_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2199,
        "db_id": "architecture",
        "nl_queries": [
            "What is the average length in feet of the bridges?",
            "What is the mean length of the bridges measured in feet?",
            "Can you tell me the average bridge length, specifically in feet?",
            "How long are the bridges on average when measured in feet?",
            "What is the average measurement in feet for the lengths of the bridges?"
        ],
        "ref_sql": "SELECT avg(length_feet) FROM bridge",
        "MQL": "db.architect.aggregate([\n  {\n    $unwind: \"$bridge\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_length_feet: { $avg: \"$bridge.length_feet\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_length_feet: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3699,
        "db_id": "museum_visit",
        "nl_queries": [
            "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "List the names of visitors with a membership level greater than 4, sorted in descending order of their membership level.",
            "Retrieve the names of visitors whose membership level exceeds 4, organized from the highest level to the lowest.",
            "Show the names of those visitors who have a membership level above 4, arranged in order from highest to lowest membership level.",
            "What are the names of visitors with a membership level higher than 4, displayed in order from highest membership level to lowest?"
        ],
        "ref_sql": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "MQL": "db.visitor.find({\n  \"Level_of_membership\": { $gt: 4 }\n}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Level_of_membership\": -1 });\n"
    },
    {
        "record_id": 1813,
        "db_id": "company_office",
        "nl_queries": [
            "Show the name of the building that has the most company offices.",
            "Which building has the largest number of company offices? Give me the building name.",
            "Identify the building with the highest count of company office locations.",
            "What is the name of the building that hosts the largest number of offices for companies?",
            "Please tell me the building that has the greatest number of offices occupied by companies."
        ],
        "ref_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.buildings.aggregate([\n  {\n    $unwind: \"$Office_locations\"\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 646,
        "db_id": "debate",
        "nl_queries": [
            "Show the names of people aged either 35 or 36.",
            "Retrieve the names of individuals who are either 35 years old or 36 years old.",
            "List the names of people aged 35 or 36.",
            "Find the names of those who are 35 or 36 years of age.",
            "Provide the names of persons who are either 35 or 36 years old."
        ],
        "ref_sql": "SELECT Name FROM people WHERE Age = 35 OR Age = 36",
        "MQL": "db.people.find({\n  $or: [\n    { \"Age\": 35 },\n    { \"Age\": 36 }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1749,
        "db_id": "real_estate_properties",
        "nl_queries": [
            "What is the feature type name of feature AirCon?",
            "Can you tell me the feature type name for AirCon?",
            "What is the name of the feature type associated with AirCon?",
            "Please provide the feature type name linked to the feature AirCon.",
            "What feature type corresponds to AirCon?"
        ],
        "ref_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
        "MQL": "db.Ref_Feature_Types.find({\n  \"Other_Available_Features.feature_name\": \"AirCon\"\n}, {\n  \"feature_type_name\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 1512,
        "db_id": "student_assessment",
        "nl_queries": [
            "List the id of students who registered some courses and the number of their registered courses?",
            "For every student who is registered for some course, how many courses are they registered for?",
            "Retrieve the student IDs and the total number of courses each has signed up for.",
            "Provide a list of student identifiers alongside the count of courses they are enrolled in.",
            "For each student who has registered for courses, what is the total number of courses they are enrolled in?"
        ],
        "ref_sql": "SELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$Students.Student_Course_Registrations\"\n  },\n  {\n    $group: {\n      _id: \"$Students.student_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      student_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3784,
        "db_id": "candidate_poll",
        "nl_queries": [
            "which poll source does the highest oppose rate come from?",
            "Return the poll source corresponding to the candidate who has the oppose rate.",
            "Which candidate source has the most significant oppose rate?",
            "Identify the poll source associated with the candidate who received the highest oppose rate.",
            "What is the poll source linked to the candidate with the greatest oppose rate?"
        ],
        "ref_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $sort: {\n      \"candidate.Oppose_rate\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Poll_Source: \"$candidate.Poll_Source\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4235,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the maximum and minimum share count of different transaction types.",
            "What are the highest and lowest share counts for various types of transactions?",
            "Provide the maximum and minimum share counts associated with different transaction categories.",
            "Display the maximum and minimum share counts for each transaction type.",
            "List out the highest and lowest share count per transaction type."
        ],
        "ref_sql": "SELECT transaction_type_code , max(share_count) , min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $group: {\n      _id: \"$Transactions.transaction_type_code\",\n      max_share_count: { $max: \"$Transactions.share_count\" },\n      min_share_count: { $min: \"$Transactions.share_count\" }\n    }\n  },\n  { $project: {\n      transaction_type_code: \"$_id\",\n      max_share_count: 1,\n      min_share_count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 877,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "List roles that have more than one employee. List the role description and number of employees.",
            "Identify roles that are associated with more than one employee, including their descriptions and the total number of employees for each role.",
            "Retrieve a list of role descriptions along with the number of employees for roles that have at least two employees.",
            "Show all roles that have multiple employees, specifying both the role description and the employee count for those roles.",
            "Find and list all roles with more than one employee, detailing the role's description and the corresponding employee figures."
        ],
        "ref_sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1;",
        "MQL": "db.Roles.aggregate([\n  {\n    $project: {\n      role_description: 1,\n      count_Employees_employee_id: { $size: \"$Employees\" }\n    }\n  },\n  {\n    $match: {\n      count_Employees_employee_id: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n   _id: 0,\n   role_description: 1,\n      count_Employees_employee_id: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3426,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the maximum share count of transactions where the amount is smaller than 10000",
            "What is the highest share count for transactions with amounts lower than 10,000?",
            "Retrieve the maximum number of shares for transactions where the transaction amount is under 10,000.",
            "Find the peak share count for transactions that have an amount less than 10,000.",
            "Display the greatest share count of transactions restricted to amounts below 10,000."
        ],
        "ref_sql": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction < 10000",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $match: {\n      \"Transactions.amount_of_transaction\": { $lt: 10000 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_share_count: { $max: \"$Transactions.share_count\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_share_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2213,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Compute the average price of all the products.",
            "What is the average price across all products?",
            "What is the mean price of all products available?",
            "Determine the average cost for products in the inventory.",
            "Calculate the typical price for products listed in the database."
        ],
        "ref_sql": "SELECT avg(price) FROM products",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_price: {\n        $avg: \"$Products.Price\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_price: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 125,
        "db_id": "world_1",
        "nl_queries": [
            "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "List the names of countries that have more than two languages and indicate how many languages are spoken in each.",
            "Provide the names of countries along with the total number of languages they speak for those that are multilingual with at least three languages.",
            "Identify countries that communicate in more than two languages and display both their names and the respective language counts."
        ],
        "ref_sql": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$Code\",\n      count: { $sum: 1 },\n      Name: { $first: \"$Name\" }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 951,
        "db_id": "flight_2",
        "nl_queries": [
            "What are airlines that have flights arriving at airport 'AHD'?",
            "Which airlines have a flight with destination airport AHD?",
            "Which airlines operate flights to or from airport code 'AHD'?",
            "List the airlines that have flights coming into or departing from the airport 'AHD'.",
            "What airlines are involved in flights arriving at or leaving from the airport designated as 'AHD'?"
        ],
        "ref_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"flights.DestAirport\": \"AHD\" },\n        { \"flights.SourceAirport\": \"AHD\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Airline: \"$flights.Airline\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1589,
        "db_id": "world_1",
        "nl_queries": [
            "Which languages are spoken by only one country in republic governments?",
            "What languages are only used by a single country with a republic government?",
            "What languages are unique to a single republic country?",
            "Which languages are the sole languages of one country governed as a republic?",
            "Identify the languages that are only utilized by one country with a republican government structure."
        ],
        "ref_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      GovernmentForm: \"Republic\"\n    }\n  },\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.Language\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: 1\n    }\n  },\n  {\n    $project: {\n      Language: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1820,
        "db_id": "hospital_1",
        "nl_queries": [
            "List the name of physicians who took some appointment.",
            "What are the names of all the physicians who took appointments.",
            "Retrieve the names of physicians who have had at least one appointment scheduled.",
            "Show me the names of all physicians who have taken appointments.",
            "Can you provide a list of physician names who have attended to patients with scheduled appointments?"
        ],
        "ref_sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
        "MQL": "db.Physician.find(\n  {\n    Appointment: { $exists: true, $ne: [] }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2209,
        "db_id": "store_product",
        "nl_queries": [
            "What is the average pages per minute color?",
            "What is the average number of pages per minute color?",
            "What is the mean number of pages printed per minute in color?",
            "Calculate the average color printing speed in pages per minute.",
            "How many pages per minute can be printed in color on average?"
        ],
        "ref_sql": "SELECT avg(pages_per_minute_color) FROM product",
        "MQL": "db.product.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_pages_per_minute_color: {\n        $avg: \"$pages_per_minute_color\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_pages_per_minute_color: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2703,
        "db_id": "protein_institute",
        "nl_queries": [
            "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
            "What is the total number of proteins tied to institutions founded post-1880 or categorized as \"Private\"?",
            "How many proteins are linked to institutions that were established after the year 1880 or are classified as \"Private\"?",
            "Count the proteins associated with institutions that either originated after 1880 or belong to the \"Private\" type.",
            "Determine the number of proteins related to institutions founded after 1880 or those identified as \"Private\"."
        ],
        "ref_sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'",
        "MQL": "db.building.aggregate([\n  \n  { $unwind: \"$Institution\" },\n  \n  {\n    $match: {\n      $or: [\n        { \"Institution.Founded\": { $gt: 1880 } },\n        { \"Institution.Type\": \"Private\" }\n      ]\n    }\n  },\n  \n  { $unwind: \"$Institution.protein\" },\n  \n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  \n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 207,
        "db_id": "film_rank",
        "nl_queries": [
            "List the distinct director of all films.",
            "What are the different film Directors?",
            "Provide the list of unique film directors.",
            "Show me the distinct directors associated with all films.",
            "What are the unique names of directors of films?"
        ],
        "ref_sql": "SELECT DISTINCT Director FROM film",
        "MQL": "db.film.aggregate([\n  {\n    $group: {\n      _id: \"$Director\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Director: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3691,
        "db_id": "swimming",
        "nl_queries": [
            "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
            "List the names of all swimmers, arranged by their 100-meter performance from lowest to highest.",
            "Retrieve all swimmers' names, ordered by their scores in the 100-meter event in ascending fashion.",
            "Show the names of swimmers sorted in increasing order of their times for the 100-meter race.",
            "Provide a list of all swimmer names, sorted by their scores in the 100-meter distance from best to worst."
        ],
        "ref_sql": "SELECT name FROM swimmer ORDER BY meter_100",
        "MQL": "db.swimmer.find({}, { \"name\": 1, \"_id\": 0 }).sort({ \"meter_100\": 1 });\n"
    },
    {
        "record_id": 3248,
        "db_id": "icfp_1",
        "nl_queries": [
            "What is the first name of the author with last name \"Ueno\"?",
            "Which authors have last name \"Ueno\"? List their first names.",
            "Can you provide the first name of the author whose last name is \"Ueno\"?",
            "List the first names of any authors that have \"Ueno\" as their last name.",
            "What are the first names of all authors named \"Ueno\" in their surname?"
        ],
        "ref_sql": "SELECT fname FROM authors WHERE lname = \"Ueno\"",
        "MQL": "db.Authors.aggregate([\n  {\n    $match: {\n      lname: \"Ueno\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      fname: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1937,
        "db_id": "college_1",
        "nl_queries": [
            "Find the name of the department that offers the largest number of credits of all classes.",
            "Which department offers the most credits all together?",
            "Identify the department that provides the highest total credit hours for its courses.",
            "Which department has the greatest sum of credits across all its classes?",
            "What is the name of the department that delivers the most credits from its course offerings?"
        ],
        "ref_sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_NAME\",\n      total_credits: {\n        $sum: \"$DEPARTMENT.COURSE.CRS_CREDIT\"\n      }\n    }\n  },\n  {\n    $sort: {\n      total_credits: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      DEPT_NAME: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2230,
        "db_id": "news_report",
        "nl_queries": [
            "Find the average age and experience working length of journalists working on different role type.",
            "Calculate the average age and working experience of journalists based on their role types.",
            "What are the average age and years of experience for journalists in various job roles?",
            "Determine the mean age and the average tenure of journalists across different work categories.",
            "Find out the average age and duration of experience of journalists grouped by their specific roles."
        ],
        "ref_sql": "SELECT avg(t1.age) , avg(Years_working) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
        "MQL": "db.journalist.aggregate([\n  \n  { $unwind: \"$news_report\" },\n  \n  \n  {\n    $group: {\n      _id: \"$news_report.Work_Type\",\n      avg_Age: { $avg: { $toInt: \"$Age\" } },\n      avg_Years_working: { $avg: \"$Years_working\" }\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      Work_Type: \"$_id\",\n      avg_Age: 1,\n      avg_Years_working: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1592,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the lifespans of representatives in descending order of vote percent?",
            "Can you provide the lifespans of representatives, sorted from highest to lowest based on their vote percentage?",
            "What are the lifespans of representatives, listed in order of their vote percentages in descending fashion?",
            "Show me the lifespans of representatives ranked by their vote percent from most to least.",
            "List the lifespans of representatives according to their vote percentages, starting with the highest."
        ],
        "ref_sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC",
        "MQL": "db.representative.aggregate([\n  { $unwind: \"$election\" },\n  { $sort: { \"election.Vote_Percent\": -1 } },\n  { $project: { \"Lifespan\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3249,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the first name of students who is older than 20.",
            "What are the first names of all students who are older than 20?",
            "Retrieve the first names of students aged over 20.",
            "List the first names of all students whose age exceeds 20.",
            "What are the first names of students that are more than 20 years old?"
        ],
        "ref_sql": "SELECT fname FROM student WHERE age > 20",
        "MQL": "db.Student.find(\n  { Age: { $gt: 20 } }, \n  { Fname: 1, _id: 0 } \n);\n"
    },
    {
        "record_id": 2876,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "How many customers have at least one order with status \"Cancelled\"?",
            "Return the number of customers who have at least one order with \"Cancelled\" status.",
            "What is the total number of customers who have placed at least one cancelled order?",
            "Count how many distinct customers have any orders that were cancelled.",
            "Determine the number of unique customers with at least one order marked as \"Cancelled\"."
        ],
        "ref_sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = \"Cancelled\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $match: {\n      \"Customer_Orders.order_status\": \"Cancelled\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_id\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_customer_id\"\n  }\n]);\n"
    },
    {
        "record_id": 2812,
        "db_id": "body_builder",
        "nl_queries": [
            "How many distinct birth places are there?",
            "What is the total number of unique birth places recorded?",
            "How many different places of birth are listed in the data?",
            "Can you tell me the count of distinct birth locations?",
            "What is the number of unique locations where people were born?"
        ],
        "ref_sql": "SELECT count(DISTINCT Birth_Place) FROM people",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Birth_Place\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Birth_Place: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Birth_Place: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2391,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "For each product which has problems, what are the number of problems and the product id?",
            "For each product with some problems, list the count of problems and the product id.",
            "Identify the product ID along with the total number of reported issues for each product that has problems.",
            "For all products with associated problems, show their product IDs and the respective problem counts.",
            "List the product IDs and the count of issues for each product that encounters problems."
        ],
        "ref_sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "MQL": "db.Product.aggregate([\n  {\n    $match: {\n      Problems: {\n        $exists: true,\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      count: {\n        $size: \"$Problems\"\n      },\n      product_id: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3379,
        "db_id": "chinook_1",
        "nl_queries": [
            "What are the durations of the longest and the shortest tracks in milliseconds?",
            "Find the maximum and minimum durations of tracks in milliseconds.",
            "What are the longest and shortest track durations, measured in milliseconds?",
            "Retrieve the maximum and minimum track lengths in milliseconds.",
            "Can you provide the durations in milliseconds for both the longest and shortest tracks?"
        ],
        "ref_sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM TRACK",
        "MQL": "db.MediaType.aggregate([\n  {\n    $unwind: \"$Track\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_Milliseconds: { $max: \"$Track.Milliseconds\" },\n      min_Milliseconds: { $min: \"$Track.Milliseconds\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Milliseconds: 1,\n      min_Milliseconds: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2833,
        "db_id": "battle_death",
        "nl_queries": [
            "How many different results are there for the battles?",
            "What is the total number of unique outcomes recorded for the battles?",
            "How many distinct outcomes exist for the battles fought?",
            "Can you tell me the count of different battle results?",
            "What is the number of various results from the battles?"
        ],
        "ref_sql": "SELECT count(DISTINCT RESULT) FROM battle",
        "MQL": "db.battle.aggregate([\n  {\n    $group: {\n      _id: \"$result\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_RESULT\"\n  }\n]);\n"
    },
    {
        "record_id": 4199,
        "db_id": "tvshow",
        "nl_queries": [
            "list all cartoon titles and their directors ordered by their air date",
            "What is the name and directors of all the cartoons that are ordered by air date?",
            "Provide a list of all cartoon titles along with their directors sorted by the date they aired.",
            "Can you show me the titles and directors of the cartoons, arranged by their original air dates?",
            "Display all cartoon titles and their respective directors in order of airing dates."
        ],
        "ref_sql": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$Cartoon\"\n  },\n  {\n    $project: {\n      Title: \"$Cartoon.Title\",\n      Directed_by: \"$Cartoon.Directed_by\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      \"Cartoon.Original_air_date\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3420,
        "db_id": "battle_death",
        "nl_queries": [
            "What is maximum and minimum death toll caused each time?",
            "What are the highest and lowest casualties recorded in battles?",
            "Can you provide the minimum and maximum number of fatalities from each battle?",
            "How many people were killed at most and at least during battles?",
            "What is the range of killed soldiers from the battles, specifically the maximum and minimum numbers?"
        ],
        "ref_sql": "SELECT max(killed) , min(killed) FROM death",
        "MQL": "db.battle.aggregate([\n  \n  { $unwind: \"$ship\" },\n  \n  { $unwind: \"$ship.death\" },\n  \n  {\n    $group: {\n      _id: null,\n      max_killed: { $max: \"$ship.death.killed\" },\n      min_killed: { $min: \"$ship.death.killed\" }\n    }\n  },\n  \n  {\n    $project: {\n      _id: 0,\n      max_killed: 1,\n      min_killed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 927,
        "db_id": "game_1",
        "nl_queries": [
            "Show student ids who are on scholarship and have major 600.",
            "What are the student ids for those on scholarship in major number 600?",
            "List the student IDs of individuals who are receiving a scholarship and are majoring in 600.",
            "Provide the student IDs for those students who have a major of 600 and are on scholarship.",
            "Identify the student IDs of students enrolled in major 600 who are also on a scholarship."
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Major: 600,\n      \"SportsInfo.OnScholarship\": \"Y\"\n    }\n  },\n  {\n    $project: {\n      StuID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 929,
        "db_id": "game_1",
        "nl_queries": [
            "Show all male student ids who don't play football.",
            "What are the ids of all male students who do not play football?",
            "Provide the student IDs of all male students who are not involved in football.",
            "List the IDs of male students who do not engage in playing football.",
            "Identify all the male students' IDs who are not participants in football games."
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Sex: \"M\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"SportsInfo\",\n      localField: \"StuID\",\n      foreignField: \"StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.SportName\": {\n        $ne: \"football\"\n      }\n    }\n  },\n  {\n    $project: {\n      StuID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2906,
        "db_id": "department_store",
        "nl_queries": [
            "Find the number of different product types.",
            "Count the number of distinct product types.",
            "How many unique types of products are there?",
            "What is the total count of various product types?",
            "Determine the number of distinct types of products available."
        ],
        "ref_sql": "SELECT count(DISTINCT product_type_code) FROM products",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$product_type_code\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_product_type_code\"\n  }\n]);\n"
    },
    {
        "record_id": 2732,
        "db_id": "phone_market",
        "nl_queries": [
            "How many phones are there?",
            "What is the total number of phones available?",
            "Can you tell me how many phones exist in the database?",
            "How many phone models do we have listed?",
            "What is the count of all phones currently stored?"
        ],
        "ref_sql": "SELECT count(*) FROM phone",
        "MQL": "db.phone.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2782,
        "db_id": "storm_record",
        "nl_queries": [
            "How many storms had death records?",
            "Count the number of storms in which at least 1 person died.",
            "What is the total number of storms that resulted in fatalities?",
            "How many storms resulted in at least one recorded death?",
            "Determine the count of storms that had at least one death reported."
        ],
        "ref_sql": "SELECT count(*) FROM storm WHERE Number_Deaths > 0",
        "MQL": "db.storm.aggregate([\n  {\n    $match: {\n      Number_Deaths: { $gt: 0 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1464,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "Show the role description and the id of the project staff involved in most number of project outcomes?",
            "For each staff id, what is the description of the role that is involved with the most number of projects?",
            "Identify the role description and the ID of the project staff member who has contributed to the highest number of project outcomes.",
            "What is the role description associated with the project staff who are involved in the greatest number of project outcomes?",
            "Display the staff ID along with their corresponding role description for the individual involved in the most project outcomes."
        ],
        "ref_sql": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Projects\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Project_Staff\"\n  },\n  {\n    $unwind: \"$Organisations.Projects.Project_Outcomes\"\n  },\n  {\n    $group: {\n      _id: {\n        staff_id: \"$Organisations.Projects.Project_Staff.staff_id\",\n        role_code: \"$Organisations.Projects.Project_Staff.role_code\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Staff_Roles\",\n      localField: \"_id.role_code\",\n      foreignField: \"role_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      staff_id: \"$_id.staff_id\",\n      role_description: \"$Docs1.role_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1327,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the line 1 of addresses shared by some students and some teachers?",
            "Which address lines are associated with both students and teachers?",
            "Can you list the line 1 addresses that are shared by some students and at least one teacher?",
            "What are the first lines of addresses where there are both students and teachers present?",
            "Identify the line 1 of addresses that have both student and teacher occupants."
        ],
        "ref_sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id",
        "MQL": "db.Addresses.aggregate([\n  \n  { $unwind: \"$Students\" },\n  { $unwind: \"$Teachers\" },\n  \n  \n  {\n    $group: {\n      _id: \"$line_1\",\n      studentCount: { $sum: 1 },\n      teacherCount: { $sum: 1 }\n    }\n  },\n  \n  \n  {\n    $match: {\n      studentCount: { $gt: 0 },\n      teacherCount: { $gt: 0 }\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      line_1: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 640,
        "db_id": "world_1",
        "nl_queries": [
            "Find the name, population and expected life length of asian country with the largest area?",
            "What are the name, population, and life expectancy of the largest Asian country by land?",
            "What is the name, population, and life expectancy of the Asian nation with the greatest surface area?",
            "Can you provide the name, total population, and life expectancy of the largest country by land area in Asia?",
            "Identify the country in Asia that has the largest area and state its name, population, and expected lifespan."
        ],
        "ref_sql": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: \"Asia\"\n    }\n  },\n  {\n    $sort: {\n      SurfaceArea: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      Population: 1,\n      LifeExpectancy: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 404,
        "db_id": "hospital_1",
        "nl_queries": [
            "List the names of all distinct nurses ordered by alphabetical order?",
            "What is the alphabetically ordered list of all the distinct names of nurses?",
            "Provide an alphabetical list of all unique nurse names.",
            "Can you show me the distinct names of nurses sorted in alphabetical order?",
            "Generate a list of nurse names that are unique, arranged in alphabetical sequence."
        ],
        "ref_sql": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "MQL": "db.Nurse.aggregate([\n  {\n    $group: {\n      _id: \"$Name\"\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 529,
        "db_id": "performance_attendance",
        "nl_queries": [
            "List the hosts of performances in ascending order of attendance.",
            "Provide a list of performance hosts ordered by attendance from lowest to highest.",
            "Show the hosts for each performance sorted by the number of attendees in ascending order.",
            "Retrieve the names of hosts for performances, sorted by their attendance in increasing order.",
            "Display the hosts of the performances, arranged by attendance in ascending sequence."
        ],
        "ref_sql": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "MQL": "db.performance.find({}, { \"Host\": 1, \"_id\": 0 }).sort({ \"Attendance\": 1 });\n"
    },
    {
        "record_id": 907,
        "db_id": "roller_coaster",
        "nl_queries": [
            "Please show the most common status of roller coasters.",
            "What is the most frequently occurring status of roller coasters?",
            "Identify the roller coaster status that appears most often.",
            "Can you provide the status of roller coasters that is the most common?",
            "What roller coaster status is the most prevalent in the dataset?"
        ],
        "ref_sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $group: { _id: \"$roller_coaster.Status\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, Status: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 370,
        "db_id": "student_1",
        "nl_queries": [
            "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
            "What are the grade number and classroom number of each class in the list?",
            "List the highest grade for each classroom and include their respective classroom identifiers.",
            "Show the classroom numbers along with the highest grade taught in each class.",
            "Provide the grade that is taught in each classroom along with the classroom number."
        ],
        "ref_sql": "SELECT DISTINCT classroom , grade FROM list",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Classroom\",\n      Grade: { $max: \"$Grade\" }\n    }\n  },\n  {\n    $project: {\n      Classroom: \"$_id\",\n      Grade: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3061,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the number of rooms with price higher than 120 for different decor.",
            "How many rooms cost more than 120, for each different decor?",
            "Count the number of rooms that have a price exceeding 120, categorized by their decor styles.",
            "How many rooms are available for more than 120, grouped by different decor types?",
            "Determine the count of rooms priced above 120 for each unique decor."
        ],
        "ref_sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $match: {\n      basePrice: { $gt: 120 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$decor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      decor: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2198,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the average latitude and longitude of stations located in San Jose city?",
            "What is the average latitude and longitude in San Jose?",
            "What are the mean latitude and longitude coordinates of bike stations situated in San Jose?",
            "Can you provide the average latitude and longitude for stations within San Jose?",
            "Determine the average latitudinal and longitudinal values for stations found in the city of San Jose."
        ],
        "ref_sql": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      city: \"San Jose\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_lat: { $avg: \"$lat\" },\n      avg_long: { $avg: \"$long\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_lat: 1,\n      avg_long: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4189,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the template type code for template type description \"Book\".",
            "Return the type code of the template type with the description \"Book\".",
            "What is the type code associated with the template description labeled \"Book\"?",
            "Can you provide the template type code corresponding to the description \"Book\"?",
            "Please return the type code for the template that has the description \"Book\"."
        ],
        "ref_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      \"Template_Type_Description\": \"Book\"\n    }\n  },\n  {\n    $project: {\n      \"Template_Type_Code\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3482,
        "db_id": "train_station",
        "nl_queries": [
            "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
            "Provide the names and locations of all train stations sorted by their annual entry and exit totals combined with interchanges.",
            "Show a list of station names and their locations arranged by the total of yearly entries, exits, and interchange counts.",
            "Generate a list that includes the names and locations of each station, ordered by the sum of their annual entry-exit figures and interchange numbers.",
            "Display the names and locations of all train stations in descending order based on their total annual entry/exits and interchange totals."
        ],
        "ref_sql": "SELECT name , LOCATION FROM station ORDER BY Annual_entry_exit , Annual_interchanges",
        "MQL": "db.station.aggregate([\n  {\n    $addFields: {\n      \"Total_Annual_Amount\": {\n        $add: [\"$Annual_entry_exit\", \"$Annual_interchanges\"]\n      }\n    }\n  },\n  {\n    $sort: {\n      \"Total_Annual_Amount\": -1\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Location\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1447,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the name of the product with the color description 'yellow'?",
            "Give the name of the products that have a color description 'yellow'.",
            "Can you provide the name of the product that is described as 'yellow'?",
            "What are the names of the products that are colored 'yellow'?",
            "List the products with the color description 'yellow'."
        ],
        "ref_sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $match: {\n      color_description: \"yellow\"\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 437,
        "db_id": "e_government",
        "nl_queries": [
            "Find the last name of the individuals that have been contact individuals of an organization.",
            "What are the last names of individuals who have been contact individuals for an organization?",
            "What are the last names of individuals designated as contact persons for organizations?",
            "Retrieve the surnames of individuals who have served as organizational contact individuals.",
            "Provide the last names of individuals identified as contact representatives for an organization."
        ],
        "ref_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id",
        "MQL": "db.Individuals.aggregate([\n  {\n    $lookup: {\n      from: \"Organizations\",\n      localField: \"individual_id\",\n      foreignField: \"Organization_Contact_Individuals.individual_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      individual_last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3466,
        "db_id": "party_people",
        "nl_queries": [
            "Show all ministers who do not belong to Progress Party.",
            "Which ministers are not a part of the Progress Party?",
            "List the ministers who are not associated with the Progress Party.",
            "Identify all ministers that do not belong to the Progress Party.",
            "Provide the names of ministers who are affiliated with parties other than the Progress Party."
        ],
        "ref_sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $match: {\n      \"party.Party_name\": { $ne: \"Progress Party\" }\n    }\n  },\n  {\n    $project: {\n      Minister: \"$party.Minister\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3970,
        "db_id": "world_1",
        "nl_queries": [
            "What is the total surface area of the countries in the Caribbean region?",
            "How much surface area do the countires in the Carribean cover together?",
            "What is the combined surface area of the countries located in the Caribbean region?",
            "How large is the total surface area for all countries within the Caribbean?",
            "Can you provide the overall surface area covered by countries in the Caribbean region?"
        ],
        "ref_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Region: \"Caribbean\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_SurfaceArea: {\n        $sum: \"$SurfaceArea\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_SurfaceArea: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 176,
        "db_id": "railway",
        "nl_queries": [
            "Show the countries that have both managers of age above 50 and managers of age below 46.",
            "List the countries that employ managers who are over 50 years old as well as those who are under 46 years old.",
            "Identify countries with managers aged more than 50 and also those aged less than 46.",
            "Find the countries that have both older managers (above 50) and younger managers (below 46).",
            "Display the countries where there are managers exceeding the age of 50 and those who are under the age of 46."
        ],
        "ref_sql": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46",
        "MQL": "db.manager.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      above_50: { $sum: { $cond: [{ $gt: [\"$Age\", 50] }, 1, 0] } },\n      below_46: { $sum: { $cond: [{ $lt: [\"$Age\", 46] }, 1, 0] } }\n    }\n  },\n  {\n    $match: {\n      above_50: { $gt: 0 },\n      below_46: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1635,
        "db_id": "election_representative",
        "nl_queries": [
            "What are the names of representatives in descending order of votes?",
            "Can you list the representatives' names sorted by the number of votes in descending order?",
            "Show me the names of representatives ordered from the highest to the lowest votes.",
            "What are the names of the representatives ranked by their votes in descending order?",
            "List the names of representatives based on descending vote counts."
        ],
        "ref_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC",
        "MQL": "db.representative.aggregate([\n  { $unwind: \"$election\" },\n  { $sort: { \"election.Votes\": -1 } },\n  { $project: { \"Name\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 434,
        "db_id": "club_1",
        "nl_queries": [
            "List the clubs having \"Davis Steven\" as a member.",
            "What are the names of the clubs that have \"Davis Steven\" as a member?",
            "Which clubs count \"Davis Steven\" as a member?",
            "Show me the names of clubs where \"Davis Steven\" is a member.",
            "Can you list the clubs that include \"Davis Steven\" among their members?"
        ],
        "ref_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\"",
        "MQL": "db.Club.find({\n  \"Member_of_club\": {\n    $elemMatch: {\n      \"StuID\": {\n        $eq: \"Davis Steven\"\n      }\n    }\n  }\n}, {\n  \"ClubName\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 1693,
        "db_id": "student_assessment",
        "nl_queries": [
            "Find id of the candidate whose email is stanley.monahan@example.org?",
            "What is the id of the candidate whose email is stanley.monahan@example.org?",
            "What is the candidate ID for the email stanley.monahan@example.org?",
            "Retrieve the ID of the candidate with the email stanley.monahan@example.org.",
            "Can you provide the candidate ID linked to the email stanley.monahan@example.org?"
        ],
        "ref_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "MQL": "db.People.aggregate([\n  {\n    $match: {\n      email_address: \"stanley.monahan@example.org\"\n    }\n  },\n  {\n    $unwind: \"$Candidates\"\n  },\n  {\n    $project: {\n      candidate_id: \"$Candidates.candidate_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1021,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the names of members and the decoration themes they have.",
            "List the names of members along with the decoration themes they participated in.",
            "Provide a display of member names and their corresponding decoration themes.",
            "Present the names of the participants and the decoration themes they've engaged with.",
            "Show me the member names alongside the decoration themes they have worked on."
        ],
        "ref_sql": "SELECT T1.Name , T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID",
        "MQL": "db.college.aggregate([\n  {\n    $unwind: \"$member\"\n  },\n  {\n    $unwind: \"$member.round\"\n  },\n  {\n    $project: {\n      \"Name\": \"$member.Name\",\n      \"Decoration_Theme\": \"$member.round.Decoration_Theme\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2127,
        "db_id": "election_representative",
        "nl_queries": [
            "What is the average number of votes of representatives from party \"Republican\"?",
            "What is the average vote count for representatives belonging to the Republican party?",
            "Can you provide the mean number of votes received by Republican representatives?",
            "How many votes do Republican representatives receive on average?",
            "Determine the average votes garnered by members of the Republican party."
        ],
        "ref_sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\"",
        "MQL": "db.representative.aggregate([\n  {\n    $match: { \"Party\": \"Republican\" }\n  },\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Votes: { $avg: \"$election.Votes\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Votes: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2393,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of students who is older than 20 in each dorm.",
            "How many students are older than 20 in each dorm?",
            "What is the count of students over the age of 20 in each dormitory?",
            "How many students living in each dorm are aged above 20?",
            "Determine the number of residents in each dorm who are older than 20 years."
        ],
        "ref_sql": "SELECT count(*) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name",
        "MQL": "db.Dorm.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"dormid\",\n      foreignField: \"Lives_in.dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Age\": { $gt: 20 }\n    }\n  },\n  {\n    $group: {\n      _id: {\n        dormid: \"$dormid\",\n        dorm_name: \"$dorm_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      dorm_name: \"$_id.dorm_name\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4252,
        "db_id": "race_track",
        "nl_queries": [
            "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
            "What are the years of opening for tracks with seating between 4000 and 5000?",
            "List the opening years of tracks that accommodate between 4,000 and 5,000 spectators.",
            "What years did tracks with seating capacities ranging from 4,000 to 5,000 open?",
            "Provide the years when the tracks, having a seating capacity of at least 4,000 and no more than 5,000, were opened."
        ],
        "ref_sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "MQL": "db.track.find({\n  Seating: {\n    $gte: 4000,\n    $lte: 5000\n  }\n}, {\n  Year_Opened: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 3831,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "Identify professionals who are located in Indiana or have completed over two treatments. Provide their ID, last name, and cell phone number.",
            "List the professional ID, last name, and cell phone numbers of those who either reside in Indiana or have handled more than two treatments.",
            "Who are the professionals living in Indiana or those who have administered more than two treatments? Include their ID, last name, and mobile number in the results."
        ],
        "ref_sql": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
        "MQL": "db.Professionals.aggregate([\n  {\n    $addFields: {\n      count_Treatments: { $size: \"$Treatments\" }\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { state: \"Indiana\" },\n        { count_Treatments: { $gt: 2 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      professional_id: 1,\n      last_name: 1,\n      cell_number: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 934,
        "db_id": "film_rank",
        "nl_queries": [
            "List the studios which average gross is above 4500000.",
            "Which studios have an average gross of over 4500000?",
            "Identify the studios that earn an average gross of more than 4,500,000 dollars.",
            "Provide a list of studios whose average revenue exceeds 4,500,000.",
            "Which film studios have an average gross income surpassing 4.5 million dollars?"
        ],
        "ref_sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar) >= 4500000",
        "MQL": "db.film.aggregate([\n  {\n    $group: {\n      _id: \"$Studio\",\n      avg_Gross_in_dollar: { $avg: \"$Gross_in_dollar\" }\n    }\n  },\n  {\n    $match: {\n      avg_Gross_in_dollar: { $gt: 4500000 }\n    }\n  },\n  {\n    $project: {\n      Studio: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2544,
        "db_id": "products_for_hire",
        "nl_queries": [
            "How many products are never booked with amount higher than 200?",
            "What is the total count of products that have a booked amount of 200 or less?",
            "How many products have not been booked for an amount exceeding 200?",
            "Can you tell me the number of products that are always booked with amounts below 200?",
            "Determine how many products have a booked amount that never goes above 200."
        ],
        "ref_sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 )",
        "MQL": "db.Products_for_Hire.aggregate([\n  {\n    $match: {\n      \"Products_Booked.booked_amount\": { $not: { $gt: 200 } }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3573,
        "db_id": "network_2",
        "nl_queries": [
            "Find the name and age of all males in order of their age.",
            "What is the name and age of every male? Order the results by age.",
            "List the names of all male individuals sorted by their age.",
            "Retrieve the names of every male, arranged in ascending order of age.",
            "What are the names of all the males? Please sort these by their age."
        ],
        "ref_sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age",
        "MQL": "db.Person.find(\n  { gender: \"male\" },  \n  { name: 1, _id: 0 }  \n).sort(\n  { age: 1 }  \n);\n"
    },
    {
        "record_id": 3169,
        "db_id": "dog_kennels",
        "nl_queries": [
            "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "Retrieve the email addresses of professionals residing in Hawaii or Wisconsin.",
            "What email addresses belong to professionals who live in either Hawaii or Wisconsin?",
            "Show me the emails of professionals based in the states of Hawaii and Wisconsin."
        ],
        "ref_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "MQL": "db.Professionals.aggregate([\n  {\n    $match: {\n      $or: [\n        { state: \"Hawaii\" },\n        { state: \"Wisconsin\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      email_address: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 300,
        "db_id": "browser_web",
        "nl_queries": [
            "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
            "Which unique accelerator names are associated with browsers that possess a market share greater than 15?",
            "Identify the distinct names of accelerators that are compatible with browsers that have a market share exceeding 15.",
            "What are the unique names of accelerators that work with browsers showing a market share higher than 15?",
            "List the distinct accelerator names that are compatible with browsers having more than 15% market share."
        ],
        "ref_sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;",
        "MQL": "db.browser.aggregate([\n  {\n    $lookup: {\n      from: \"Web_client_accelerator\",\n      localField: \"accelerator_compatible_browser.accelerator_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      market_share: { $gt: 15 }\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2610,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "How many artworks are there?",
            "What is the total number of artworks available?",
            "Can you tell me how many artworks exist in the collection?",
            "How many pieces of artwork are recorded?",
            "What is the artwork count in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM artwork",
        "MQL": "db.artwork.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3331,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "Find the last names of teachers who are not involved in any detention.",
            "List the last names of teachers who do not have any detention records.",
            "Retrieve the last names of educators with no involvement in detentions.",
            "Show the last names of teachers that are free from any detention cases.",
            "Identify the last names of teachers who are not recorded as being involved in detention at all."
        ],
        "ref_sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Teachers\"\n  },\n  {\n    $match: {\n      \"Teachers.Detention\": { $exists: true, $size: 0 }\n    }\n  },\n  {\n    $project: {\n      \"last_name\": \"$Teachers.last_name\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 605,
        "db_id": "election",
        "nl_queries": [
            "Show the lieutenant governor and comptroller from the democratic party.",
            "Who are the lieutenant governor and comptroller from the democratic party?",
            "Provide the names of the lieutenant governor and comptroller associated with the Democratic party.",
            "List the lieutenant governor and comptroller from the Democratic party.",
            "Identify the individuals in the roles of lieutenant governor and comptroller for the Democratic party."
        ],
        "ref_sql": "SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = \"Democratic\"",
        "MQL": "db.party.find(\n  { Party: \"Democratic\" },\n  { Lieutenant_Governor: 1, Comptroller: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3896,
        "db_id": "school_finance",
        "nl_queries": [
            "Show all school names in alphabetical order.",
            "List all the names of schools sorted from A to Z.",
            "Retrieve and display all school names in sorted order alphabetically.",
            "Provide a complete list of school names arranged in alphabetical sequence.",
            "Present all school names ordered according to the alphabet."
        ],
        "ref_sql": "SELECT school_name FROM school ORDER BY school_name",
        "MQL": "db.School.find({}, { \"School_name\": 1, \"_id\": 0 }).sort({ \"School_name\": 1 });\n"
    },
    {
        "record_id": 4073,
        "db_id": "icfp_1",
        "nl_queries": [
            "What are the last names of the author of the paper titled \"Binders Unbound\"?",
            "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.",
            "Can you provide the last names of the authors of the paper called \"Binders Unbound\"?",
            "Who authored the paper titled \"Binders Unbound\"? Please give me their last name.",
            "What last names belong to the authors of the paper named \"Binders Unbound\"?"
        ],
        "ref_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $match: {\n      title: \"Binders Unbound\"\n    }\n  },\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      lname: \"$Docs1.lname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3956,
        "db_id": "insurance_policies",
        "nl_queries": [
            "What is the total amount of settlement made for all the settlements?",
            "Compute the total amount of settlement across all the settlements.",
            "What is the cumulative amount settled for all the claims?",
            "Find the overall total amount of settlements made for all claims.",
            "Determine the complete sum of amounts settled across every settlement."
        ],
        "ref_sql": "SELECT sum(Amount_Settled) FROM Settlements",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Amount_Settled: {\n        $sum: \"$Customer_Policies.Claims.Settlements.Amount_Settled\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Amount_Settled: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3963,
        "db_id": "world_1",
        "nl_queries": [
            "What is the total population and maximum GNP in Asia?",
            "How many people live in Asia, and what is the largest GNP among them?",
            "What is the combined population and the highest GNP for countries in Asia?",
            "How many individuals reside in Asia, and what is the top GNP recorded in the region?",
            "Can you tell me the total number of people living in Asia and the maximum GNP found there?"
        ],
        "ref_sql": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: \"Asia\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Population: {\n        $sum: \"$Population\"\n      },\n      max_GNP: {\n        $max: \"$GNP\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Population: 1,\n      max_GNP: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1904,
        "db_id": "phone_market",
        "nl_queries": [
            "Show the names of phones and the districts of markets they are on.",
            "List the names of mobile phones and their respective market districts.",
            "Display the phone names along with the districts of the markets where they are available.",
            "Provide a list of phones with the corresponding districts of the markets they belong to.",
            "Present the names of phones and the districts of the markets they can be found in."
        ],
        "ref_sql": "SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID",
        "MQL": "db.phone.aggregate([\n  {\n    $lookup: {\n      from: \"market\",\n      localField: \"phone_market.Market_ID\",\n      foreignField: \"Market_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"District\": \"$Docs1.District\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1557,
        "db_id": "chinook_1",
        "nl_queries": [
            "What city does the employee who helps the customer with postal code 70174 live in?",
            "Find the cities corresponding to employees who help customers with the postal code 70174.",
            "Which city is home to the employee assisting the customer with postal code 70174?",
            "Identify the city where the employee who supports customers with the postal code 70174 resides.",
            "What city does the representative, helping customers in postal code 70174, live in?"
        ],
        "ref_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\"",
        "MQL": "db.Employee.aggregate([\n  {\n    $unwind: \"$Customer\"\n  },\n  {\n    $match: {\n      \"Customer.PostalCode\": \"70174\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Employee\",\n      localField: \"Customer.SupportRepId\",\n      foreignField: \"EmployeeId\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      City: \"$Docs1.City\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3569,
        "db_id": "network_2",
        "nl_queries": [
            "Who is the person whose age is below 30?",
            "What is the name of the person whose age is below 30?",
            "Can you tell me the names of individuals under the age of 30?",
            "Which people are younger than 30 years old?",
            "List the names of those whose age is less than 30."
        ],
        "ref_sql": "SELECT name FROM Person WHERE age < 30",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      age: { $lt: 30 }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3930,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the state, account type, and credit score of the customer whose number of loan is 0.",
            "What are the states, account types, and credit scores for customers who have 0 loans?",
            "What states, account types, and credit scores do customers with no loans have?",
            "Provide the state, account type, and credit score for customers who do not have any loans.",
            "List the state, account classification, and credit scores for customers without any loans."
        ],
        "ref_sql": "SELECT state , acc_type , credit_score FROM customer WHERE no_of_loans = 0",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $project: {\n      state: \"$customer.state\",\n      acc_type: \"$customer.acc_type\",\n      credit_score: \"$customer.credit_score\",\n      no_of_loans: \"$customer.no_of_loans\"\n    }\n  },\n  {\n    $match: {\n      no_of_loans: 0\n    }\n  },\n  {\n    $project: {\n      state: 1,\n      acc_type: 1,\n      credit_score: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3062,
        "db_id": "inn_1",
        "nl_queries": [
            "What is the decor of room Recluse and defiance?",
            "Return the decor of the room named \"Recluse and defiance\".",
            "Can you tell me the decor of the room called \"Recluse and defiance\"?",
            "What decor does the room named \"Recluse and defiance\" have?",
            "Please provide the decor details for the room titled \"Recluse and defiance\"."
        ],
        "ref_sql": "SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\";",
        "MQL": "db.Rooms.find(\n  { roomName: \"Recluse and defiance\" },\n  { _id: 0, decor: 1 }\n);\n"
    },
    {
        "record_id": 3786,
        "db_id": "customers_campaigns_ecommerce",
        "nl_queries": [
            "Find the types and details for all premises and order by the premise type.",
            "Retrieve all premises along with their types and details, sorted by the type of premises.",
            "List the types and details for each premise, ordered by premise type.",
            "Get a sorted list of all premises showing their types and associated details.",
            "Show the types and details of every premise, arranged in ascending order of premise type."
        ],
        "ref_sql": "SELECT premises_type , premise_details FROM premises ORDER BY premises_type",
        "MQL": "db.Premises.find({}, { \"premises_type\": 1, \"premise_details\": 1, \"_id\": 0 }).sort({ \"premises_type\": 1 });\n"
    },
    {
        "record_id": 1250,
        "db_id": "college_1",
        "nl_queries": [
            "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
            "What is the first name of the professor who is teaching CIS-220 and QM-261?",
            "Who is the professor teaching both courses CIS-220 and QM-261? Please provide their first name.",
            "Identify the first name of the professor associated with the courses CIS-220 and QM-261.",
            "What is the first name of the instructor who teaches the courses coded CIS-220 and QM-261?"
        ],
        "ref_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $match: {\n      \"CLASS.CRS_CODE\": { $in: [\"CIS-220\", \"QM-261\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$EMP_NUM\",\n      courseCodes: { $addToSet: \"$CLASS.CRS_CODE\" },\n      EMP_FNAME: { $first: \"$EMP_FNAME\" }\n    }\n  },\n  {\n    $match: {\n      courseCodes: { $all: [\"CIS-220\", \"QM-261\"] }\n    }\n  },\n  {\n    $project: {\n      EMP_FNAME: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1562,
        "db_id": "perpetrator",
        "nl_queries": [
            "Show the date of the tallest perpetrator.",
            "What is the date associated with the tallest individual among the perpetrators?",
            "Provide the date for the perpetrator who has the greatest height.",
            "Can you tell me the date linked to the perpetrator with the maximum height?",
            "Get the date that corresponds to the tallest perpetrator in the database."
        ],
        "ref_sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  { $sort: { \"Height\": -1 } },\n  { $limit: 1 },\n  { $unwind: \"$perpetrator\" },\n  { $project: { \"Date\": \"$perpetrator.Date\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2827,
        "db_id": "poker_player",
        "nl_queries": [
            "How many distinct nationalities are there?",
            "Count the number of different nationalities.",
            "What is the total count of unique nationalities in the dataset?",
            "How many unique nationalities can be found?",
            "Determine the number of different nationalities represented."
        ],
        "ref_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Nationality: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Nationality: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1140,
        "db_id": "csu_1",
        "nl_queries": [
            "Which campus has the most faculties in year 2003?",
            "What campus has the most faculties in 2003?",
            "Which campus had the highest number of faculty members in 2003?",
            "Identify the campus with the greatest faculty count for the year 2003.",
            "What campus employed the most faculty in the year 2003?"
        ],
        "ref_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$faculty\"\n  },\n  {\n    $match: {\n      \"faculty.Year\": 2003\n    }\n  },\n  {\n    $sort: {\n      \"faculty.Faculty\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Campus: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2200,
        "db_id": "bike_1",
        "nl_queries": [
            "What is the average longitude of stations that never had bike availability more than 10?",
            "What is the mean longitude for all stations that have never had more than 10 bikes available?",
            "What is the average longitude for stations that have always had bike availability of 10 or fewer?",
            "Calculate the mean longitude of all stations that have never recorded more than 10 bikes available at any time.",
            "How much is the average longitude of stations that have not exceeded 10 bikes in availability throughout their operation?"
        ],
        "ref_sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      \"status.bikes_available\": {\n        $not: {\n          $gt: 10\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_long: {\n        $avg: \"$long\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_long: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1392,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
            "What are the names of the enzymes used in the medicine Amisulpride that acts as inhibitors?",
            "Can you provide the names of enzymes that interact as inhibitors with the medication Amisulpride?",
            "Which enzymes associated with the drug Amisulpride are identified as inhibitors?",
            "List the names of enzymes linked to the medicine Amisulpride that act as inhibitors."
        ],
        "ref_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
        "MQL": "db.medicine.aggregate([\n  {\n    $match: {\n      name: \"Amisulpride\"\n    }\n  },\n  {\n    $unwind: \"$medicine_enzyme_interaction\"\n  },\n  {\n    $match: {\n      \"medicine_enzyme_interaction.interaction_type\": \"inhibitor\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"enzyme\",\n      localField: \"medicine_enzyme_interaction.enzyme_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$Docs1.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1307,
        "db_id": "mountain_photos",
        "nl_queries": [
            "What are the id and name of the mountains that have at least 2 photos?",
            "List the id and name of mountains that feature a minimum of 2 photographs.",
            "Show me the id and name of the mountains that have two or more photos available.",
            "Provide the id and name for those mountains which possess at least 2 photos.",
            "What are the ids and names of mountains that contain a minimum of two pictures?"
        ],
        "ref_sql": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count(*) >= 2",
        "MQL": "db.mountain.find({\n  $expr: {\n    $gte: [{ $size: \"$photos\" }, 2]\n  }\n}, {\n  \"id\": 1,\n  \"name\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 128,
        "db_id": "phone_market",
        "nl_queries": [
            "Show different carriers of phones together with the number of phones with each carrier.",
            "List the various phone carriers along with the count of phones associated with each carrier.",
            "Provide a summary of phone carriers and the number of phones available for each one.",
            "Display the different carriers for phones together with the total number of phones for each carrier.",
            "Show the distinct phone carriers and how many phones are linked to each of them."
        ],
        "ref_sql": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "MQL": "db.phone.aggregate([\n  {\n    $group: {\n      _id: \"$Carrier\",\n      \"COUNT\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      \"Carrier\": \"$_id\",\n      \"COUNT\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 630,
        "db_id": "poker_player",
        "nl_queries": [
            "What is the money rank of the poker player with the highest earnings?",
            "Return the money rank of the player with the greatest earnings.",
            "What is the ranking of the poker player who has earned the most money?",
            "Provide the money rank for the player with the highest total earnings.",
            "Can you tell me the money rank of the player who has the greatest earnings in poker?"
        ],
        "ref_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $sort: {\n      \"poker_player.Earnings\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Money_Rank: \"$poker_player.Money_Rank\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2342,
        "db_id": "student_1",
        "nl_queries": [
            "Which classroom has the most students?",
            "Find the classroom that the most students use.",
            "Identify the classroom with the highest number of students.",
            "What classroom accommodates the largest student population?",
            "Which classroom has the greatest student enrollment?"
        ],
        "ref_sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.list.aggregate([\n  {\n    $group: {\n      _id: \"$Classroom\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Classroom: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1837,
        "db_id": "party_people",
        "nl_queries": [
            "Show all party names and the number of members in each party.",
            "How many members are in each party?",
            "List the names of all parties alongside the total number of members they each have.",
            "Provide the count of members for every political party.",
            "Display each party's name and the corresponding number of its members."
        ],
        "ref_sql": "SELECT T2.party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $unwind: \"$party.member\"\n  },\n  {\n    $group: {\n      _id: \"$party.Party_name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Party_name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3405,
        "db_id": "driving_school",
        "nl_queries": [
            "What is maximum, minimum and average amount of outstanding of customer?",
            "What is the maximum, minimum, and average amount of money outsanding for all customers?",
            "Can you provide the highest, lowest, and average outstanding amount for customers?",
            "What are the maximum, minimum, and average outstanding balances for all customers?",
            "Please tell me the maximum, minimum, and average amount that customers owe outstanding."
        ],
        "ref_sql": "SELECT max(amount_outstanding) , min(amount_outstanding) , avg(amount_outstanding) FROM Customers;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_amount_outstanding: { $max: \"$Customers.amount_outstanding\" },\n      min_amount_outstanding: { $min: \"$Customers.amount_outstanding\" },\n      avg_amount_outstanding: { $avg: \"$Customers.amount_outstanding\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_amount_outstanding: 1,\n      min_amount_outstanding: 1,\n      avg_amount_outstanding: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3228,
        "db_id": "student_1",
        "nl_queries": [
            "Find the first names of students studying in room 108.",
            "What are the first names of students in room 108?",
            "List the first names of students who are in classroom 108.",
            "What first names do students have in room 108?",
            "Show me the first names of all students assigned to room 108."
        ],
        "ref_sql": "SELECT firstname FROM list WHERE classroom = 108",
        "MQL": "db.list.find(\n  { \"Classroom\": 108 },\n  { \"FirstName\": 1, \"_id\": 0 }\n)"
    },
    {
        "record_id": 1732,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all document names using templates with template type code BK.",
            "What are the names of documents that use templates with the code BK?",
            "List the names of all documents that correspond to templates with the type code BK.",
            "Provide the document names associated with templates tagged as BK.",
            "Retrieve the names of documents that utilize templates classified under the code BK."
        ],
        "ref_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Code: \"BK\"\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $project: {\n      Document_Name: \"$Templates.Documents.Document_Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4104,
        "db_id": "museum_visit",
        "nl_queries": [
            "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "Can you provide the names of visitors who have been to museums established before 2009 and those that were opened after 2011?",
            "Who are the visitors that have visited both a museum that opened prior to 2009 and one that opened subsequent to 2011?",
            "List the names of visitors who attended museums launched before 2009 and also those opened after 2011.",
            "What are the names of visitors who frequented museums that were inaugurated before 2009 and those that opened post-2011?"
        ],
        "ref_sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
        "MQL": "db.visitor.aggregate([\n  {\n    $lookup: {\n      from: \"museum\",\n      localField: \"visit.Museum_ID\",\n      foreignField: \"Museum_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Open_Year\": {\n        $lt: \"2009\",\n        $gt: \"2011\"\n      }\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4249,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the version number and template type code for the template with version number later than 5?",
            "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "Can you provide the template type codes and version numbers for templates that have a version number exceeding 5?",
            "List the version numbers along with their respective template type codes for all templates with a version greater than 5.",
            "What are the version numbers and corresponding template type codes for templates that feature a version number higher than 5?"
        ],
        "ref_sql": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $match: {\n      \"Templates.Version_Number\": { $gt: 5 }\n    }\n  },\n  {\n    $project: {\n      Version_Number: \"$Templates.Version_Number\",\n      Template_Type_Code: \"$Templates.Template_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3987,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the total amount of loans offered by each bank branch.",
            "What are the names of the different bank branches, and what are their total loan amounts?",
            "Calculate the overall loan amount for each branch of the bank.",
            "List the names of the bank branches along with the total loan amounts they have issued.",
            "What is the total value of loans provided by each bank branch and what are the names of those branches?"
        ],
        "ref_sql": "SELECT sum(amount) , T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$loan\"\n  },\n  {\n    $group: {\n      _id: {\n        branch_ID: \"$branch_ID\",\n        bname: \"$bname\"\n      },\n      sum_amount: {\n        $sum: \"$loan.amount\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_amount: 1,\n      bname: \"$_id.bname\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3310,
        "db_id": "document_management",
        "nl_queries": [
            "List all the image name and URLs in the order of their names.",
            "What are the names and urls of images, sorted alphabetically?",
            "Retrieve the names and URLs of all images sorted by their names.",
            "Show all image names along with their URLs sorted in alphabetical order.",
            "Provide a list of image names and links, arranged according to their names."
        ],
        "ref_sql": "SELECT image_name , image_url FROM images ORDER BY image_name",
        "MQL": "db.Images.find({}, { image_name: 1, image_url: 1, _id: 0 }).sort({ image_name: 1 });\n"
    },
    {
        "record_id": 4263,
        "db_id": "singer",
        "nl_queries": [
            "What is the most common singer citizenship ?",
            "Which citizenship is the most frequently represented among singers?",
            "What citizenship do the majority of singers have?",
            "Identify the citizenship that is most common among all singers.",
            "What is the dominant citizenship among singers in the database?"
        ],
        "ref_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "MQL": "db.singer.aggregate([\n  {\n    $group: {\n      _id: \"$Citizenship\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Citizenship: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 134,
        "db_id": "phone_market",
        "nl_queries": [
            "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
            "Identify the carriers that sell phones with memory less than 32 GB and those with memory exceeding 64 GB.",
            "List all carriers that offer both low-memory phones (under 32 GB) and high-memory phones (over 64 GB).",
            "Provide the names of carriers that have phones featuring memory capacities both below 32 GB and above 64 GB.",
            "Find out which carriers provide phones with less than 32 GB of memory alongside those with more than 64 GB."
        ],
        "ref_sql": "SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64",
        "MQL": "db.phone.aggregate([\n  { $match: { $or: [{ \"Memory_in_G\": { $lt: 32 } }, { \"Memory_in_G\": { $gt: 64 } }] } },\n  { $group: { _id: \"$Carrier\", count: { $sum: 1 } } },\n  { $match: { count: { $gt: 1 } } },\n  { $project: { \"Carrier\": \"$_id\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 4220,
        "db_id": "epinions_1",
        "nl_queries": [
            "List the titles of all items in alphabetic order .",
            "Retrieve all item titles sorted in alphabetical order.",
            "Generate a list of item titles arranged in ascending alphabetical sequence.",
            "Show the titles of all items ordered alphabetically.",
            "Display the item titles in a list sorted from A to Z."
        ],
        "ref_sql": "SELECT title FROM item ORDER BY title",
        "MQL": "db.item.find({}, { \"title\": 1, \"_id\": 0 }).sort({ \"title\": 1 });\n"
    },
    {
        "record_id": 760,
        "db_id": "news_report",
        "nl_queries": [
            "Show the most common nationality for journalists.",
            "What is the nationality that appears most frequently among journalists?",
            "Identify the nationality with the highest number of journalists.",
            "Which nationality is the most represented among journalists?",
            "Find the most prevalent nationality of journalists in the database."
        ],
        "ref_sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.journalist.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Nationality: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4150,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What is the address content of the customer named \"Maudie Kertzmann\"?",
            "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
            "What address details are associated with the customer named \"Maudie Kertzmann\"?",
            "Please provide the address information for the customer called \"Maudie Kertzmann\".",
            "Can you show me the address content for the customer identified as \"Maudie Kertzmann\"?"
        ],
        "ref_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_name: \"Maudie Kertzmann\"\n    }\n  },\n  {\n    $unwind: \"$Customer_Addresses\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Addresses.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      address_content: {\n        $arrayElemAt: [\"$Docs1.address_content\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1479,
        "db_id": "local_govt_mdm",
        "nl_queries": [
            "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
            "Can you provide the source system code for benefits and overpayments? Please include the council tax ID and sort the results by council tax ID.",
            "What is the source code of the system associated with benefits overpayments? List both the code and the respective council tax ID, arranged by council tax ID.",
            "Please list the tax source system codes linked to benefits and overpayments, along with their council tax IDs, ordered by the council tax ID.",
            "Retrieve the source system code for benefits and overpayments, including the council tax ID, sorted by the council tax ID in ascending order."
        ],
        "ref_sql": "SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "MQL": "db.Customer_Master_Index.aggregate([\n  {\n    $unwind: \"$CMI_Cross_References\"\n  },\n  {\n    $unwind: \"$CMI_Cross_References.Benefits_Overpayments\"\n  },\n  {\n    $sort: { \"CMI_Cross_References.Benefits_Overpayments.council_tax_id\": 1 }\n  },\n  {\n    $project: {\n      \"source_system_code\": \"$CMI_Cross_References.source_system_code\",\n      \"council_tax_id\": \"$CMI_Cross_References.Benefits_Overpayments.council_tax_id\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2716,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "How many medicines have the FDA approval status 'No' ?",
            "How many medicines were not approved by the FDA?",
            "What is the total number of medicines that are not FDA approved?",
            "Can you tell me how many medicines are listed as having no FDA approval?",
            "How many medications have received a negative FDA approval status?"
        ],
        "ref_sql": "SELECT count(*) FROM medicine WHERE FDA_approved = 'No'",
        "MQL": "db.medicine.aggregate([\n  {\n    $match: {\n      FDA_approved: \"No\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 162,
        "db_id": "sports_competition",
        "nl_queries": [
            "What are the types and countries of competitions?",
            "What are the types of every competition and in which countries are they located?",
            "Can you provide the various types of competitions and the countries in which they are held?",
            "What types of competitions exist, and which countries host them?",
            "List the different competition categories and the corresponding countries where they occur."
        ],
        "ref_sql": "SELECT Competition_type , Country FROM competition",
        "MQL": "db.competition.aggregate([\n  {\n    $group: {\n      _id: {\n        Competition_type: \"$Competition_type\",\n        Country: \"$Country\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Competition_type: \"$_id.Competition_type\",\n      Country: \"$_id.Country\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3520,
        "db_id": "manufacturer",
        "nl_queries": [
            "Return the name and id of the furniture with the highest market rate.",
            "Provide the name and identifier of the furniture item with the highest market rate.",
            "What is the name and ID of the furniture that has the greatest market rate?",
            "Please return the ID and name of the furniture piece with the top market rate.",
            "Show me the name and identification number of the furniture with the highest market price."
        ],
        "ref_sql": "SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "MQL": "db.furniture.aggregate([\n  { $sort: { \"Market_Rate\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Name\": 1, \"Furniture_ID\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 4237,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the transaction type code that occurs the most frequently.",
            "What is the most common transaction type code?",
            "Identify the transaction type code that appears most often.",
            "Which transaction type code has the highest frequency of occurrence?",
            "Find the transaction type code with the greatest frequency."
        ],
        "ref_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  { $group: { _id: \"$Transactions.transaction_type_code\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, transaction_type_code: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 2257,
        "db_id": "college_2",
        "nl_queries": [
            "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
            "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
            "List the room numbers along with their corresponding buildings for classrooms that can hold between 50 and 100 students.",
            "Which classrooms have a capacity for 50 to 100 students, and what are their room numbers and buildings?",
            "Provide the building names and room numbers of classrooms that can accommodate 50 to 100 students."
        ],
        "ref_sql": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "MQL": "db.classroom.aggregate([\n  {\n    $match: {\n      capacity: {\n        $gte: 50,\n        $lte: 100\n      }\n    }\n  },\n  {\n    $project: {\n      building: 1,\n      room_number: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2536,
        "db_id": "dog_kennels",
        "nl_queries": [
            "How many owners temporarily do not have any dogs?",
            "Find the number of owners who do not own any dogs at this moment.",
            "What is the total count of owners without any dogs right now?",
            "How many pet owners currently do not have dogs in their possession?",
            "Determine the number of owners who presently do not own dogs."
        ],
        "ref_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "MQL": "db.Owners.aggregate([\n  {\n    $project: {\n      count: {\n        $cond: {\n          if: {\n            $eq: [\n              {\n                $size: \"$Dogs\"\n              },\n              0\n            ]\n          },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: \"$count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1663,
        "db_id": "music_4",
        "nl_queries": [
            "What are the songs in volumes associated with the artist aged 32 or older?",
            "Return names of songs in volumes that are by artists that are at least 32 years old.",
            "List all song titles found in volumes by artists who are 32 years of age or older.",
            "What titles of songs can be found in the volumes produced by artists that are at least 32 years old?",
            "Provide the names of songs included in volumes by artists aged 32 and above."
        ],
        "ref_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      Age: { $gte: 32 }\n    }\n  },\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $project: {\n      Song: \"$volume.Song\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3073,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names and average salaries of all departments whose average salary is greater than 42000.",
            "What are the names and average salaries for departments with average salary higher than 42000?",
            "List the department names along with their average instructor salaries for those departments where the average salary exceeds 42000.",
            "Provide the names and average salaries of departments that have an average salary above 42000.",
            "Identify the departments and their average salaries where the average salary is greater than 42000."
        ],
        "ref_sql": "SELECT dept_name , AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary) > 42000",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $group: {\n      _id: \"$dept_name\",\n      AVG_salary: { $avg: \"$instructor.salary\" }\n    }\n  },\n  {\n    $match: {\n      AVG_salary: { $gt: 42000 }\n    }\n  },\n  {\n    $project: {\n      dept_name: \"$_id\",\n      AVG_salary: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1103,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the account id and name with at least 4 transactions.",
            "What are the ids and names of accounts with 4 or more transactions?",
            "Retrieve the IDs and names of accounts that have a minimum of four financial transactions.",
            "List the account identifiers and their corresponding names for accounts with four or more transactions.",
            "Find the account IDs and names where there are at least four recorded transactions."
        ],
        "ref_sql": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Accounts\"\n  },\n  {\n    $unwind: \"$Accounts.Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: {\n        account_id: \"$Accounts.account_id\",\n        account_name: \"$Accounts.account_name\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 4 }\n    }\n  },\n  {\n    $project: {\n      account_id: \"$_id.account_id\",\n      account_name: \"$_id.account_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2609,
        "db_id": "music_1",
        "nl_queries": [
            "How many artists are from Bangladesh?",
            "How many Bangladeshi artists are listed?",
            "What is the total number of artists hailing from Bangladesh?",
            "Can you tell me how many artists there are from Bangladesh?",
            "How many artists are recorded as being from Bangladesh?"
        ],
        "ref_sql": "SELECT count(*) FROM artist WHERE country = \"Bangladesh\"",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $match: {\n      \"artist.country\": \"Bangladesh\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3191,
        "db_id": "party_people",
        "nl_queries": [
            "find the event names that have more than 2 records.",
            "Which event names were used more than twice for party events?",
            "List the names of events that have appeared more than twice in the records.",
            "Identify event names that are associated with more than two occurrences in party events.",
            "What are the event names that feature over two times in the dataset?"
        ],
        "ref_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*) > 2",
        "MQL": "db.region.aggregate([\n  { $unwind: \"$party\" },\n  { $unwind: \"$party.party_events\" },\n  {\n    $group: {\n      _id: \"$party.party_events.Event_Name\",\n      count: { $sum: 1 }\n    }\n  },\n  { $match: { count: { $gt: 2 } } },\n  { $project: { Event_Name: \"$_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 2822,
        "db_id": "shop_membership",
        "nl_queries": [
            "How many different levels do members have?",
            "What are the different membership levels?",
            "How many unique membership levels exist for members?",
            "Can you list the various levels of membership available?",
            "What is the total number of distinct membership tiers that members have?"
        ],
        "ref_sql": "SELECT count(DISTINCT LEVEL) FROM member",
        "MQL": "db.member.aggregate([\n  {\n    $group: {\n      _id: \"$Level\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_LEVEL: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_LEVEL: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2395,
        "db_id": "college_1",
        "nl_queries": [
            "Find the number of classes in each school.",
            "How many classes exist for each school?",
            "What is the total number of classes available at every school?",
            "Determine how many classes there are in each school.",
            "Can you provide the count of classes for each individual school?"
        ],
        "ref_sql": "SELECT count(*) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE.CLASS\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.SCHOOL_CODE\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      SCHOOL_CODE: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 188,
        "db_id": "car_1",
        "nl_queries": [
            "What are the name of the countries where there is not a single car maker?",
            "What are the names of the countries with no car makers?",
            "Which countries do not have any car manufacturers?",
            "List the names of countries that lack car makers.",
            "What countries have no car manufacturing companies present?"
        ],
        "ref_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $project: {\n      CountryName: \"$countries.CountryName\",\n      hasCarMakers: {\n        $cond: { if: { $isArray: \"$countries.car_makers\" }, then: { $gt: [{ $size: \"$countries.car_makers\" }, 0] }, else: false }\n      }\n    }\n  },\n  {\n    $match: {\n      hasCarMakers: false\n    }\n  },\n  {\n    $project: {\n      CountryName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1118,
        "db_id": "music_1",
        "nl_queries": [
            "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
            "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
            "List the names and countries of all artists who have released at least one song with a resolution greater than 900.",
            "Provide the artist names and their countries for those who have at least one song that exceeds a resolution of 900.",
            "Retrieve the names and countries of all artists with songs that have a resolution above 900."
        ],
        "ref_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count(*) >= 1",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $project: {\n      artist_name: \"$artist.artist_name\",\n      country: \"$artist.country\",\n      songs_above_900: {\n        $filter: {\n          input: \"$artist.song\",\n          as: \"song\",\n          cond: {\n            $gt: [\"$$song.resolution\", 900]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      songs_above_900: {\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      artist_name: 1,\n      country: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1443,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the category descriptions of the products whose descriptions include letter 't'.",
            "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
            "List the descriptions of product categories for items whose descriptions contain the letter 't'.",
            "What category descriptions correspond to products that feature the letter 't' in their descriptions?",
            "Identify the descriptions of categories that include products with descriptions containing the letter 't'."
        ],
        "ref_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_description\": { $regex: \"t\", $options: \"i\" }\n    }\n  },\n  {\n    $group: {\n      _id: \"$product_category_code\",\n      product_category_description: { $first: \"$product_category_description\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_category_description: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 350,
        "db_id": "election",
        "nl_queries": [
            "In which distinct years was the governor \"Eliot Spitzer\"?",
            "Find the distinct years when the governor was named \"Eliot Spitzer\".",
            "Which unique years did Eliot Spitzer serve as governor?",
            "List the distinct years during which Eliot Spitzer held the position of governor.",
            "Identify the different years in which the governorship was held by Eliot Spitzer."
        ],
        "ref_sql": "SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\"",
        "MQL": "db.party.aggregate([\n  {\n    $match: {\n      Governor: \"Eliot Spitzer\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Year\"\n    }\n  },\n  {\n    $project: {\n      Year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2589,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "How many tourists did not make any visit?",
            "Count the number of tourists who did not visit any place.",
            "What is the total number of tourists who haven't visited any attractions?",
            "How many tourists have never made a visit to any location?",
            "Determine the count of tourists that did not visit any sites."
        ],
        "ref_sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "MQL": "db.Visitors.aggregate([\n  {\n    $project: {\n      count: {\n        $cond: {\n          if: {\n            $eq: [\n              {\n                $size: \"$Visits\"\n              },\n              0\n            ]\n          },\n          then: 1,\n          else: 0\n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: \"$count\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1766,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
            "List the investor IDs along with their details for those who have completed two or more SALE transactions.",
            "Provide the IDs and information of investors who have conducted at least two transactions marked as \"SALE\".",
            "Retrieve the IDs and descriptions of investors with a minimum of two transactions of the type \"SALE\".",
            "Display the investor IDs and their details for all investors who have a count of at least two \"SALE\" transactions."
        ],
        "ref_sql": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
        "MQL": "db.Investors.aggregate([\n  \n  { $unwind: \"$Transactions\" },\n  \n  \n  { $match: { \"Transactions.transaction_type_code\": \"SALE\" } },\n  \n  \n  { \n    $group: {\n      _id: \"$investor_id\",\n      Investor_details: { $first: \"$Investor_details\" },\n      saleTransactionCount: { $sum: 1 }\n    }\n  },\n  \n  \n  { $match: { saleTransactionCount: { $gte: 2 } } },\n  \n  \n  { \n    $project: {\n      _id: 0,\n      investor_id: \"$_id\",\n      Investor_details: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1184,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of customer who has the highest amount of loans.",
            "What is the name of the customer who has greatest total loan amount?",
            "Identify the customer with the largest total amount of loans.",
            "Who is the customer that holds the most significant loan balance?",
            "Name the customer with the highest cumulative loan value."
        ],
        "ref_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $unwind: \"$customer.loan\"\n  },\n  {\n    $group: {\n      _id: \"$customer.cust_name\",\n      total_loan_amount: {\n        $sum: \"$customer.loan.amount\"\n      }\n    }\n  },\n  {\n    $sort: {\n      total_loan_amount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      cust_name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3806,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"",
            "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
            "List the products that mention \"Latte\" or \"Americano\" in their descriptions.",
            "What products have descriptions that include \"Latte\" or \"Americano\"? Please provide the complete details.",
            "Identify products whose details feature the terms \"Latte\" or \"Americano\" and display their full descriptions."
        ],
        "ref_sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "MQL": "db.Products.find({\n  product_details: {\n    $regex: \"Latte|Americano\",\n    $options: \"i\"\n  }\n}, {\n  product_details: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 1237,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name and capacity of the dorm with least number of amenities.",
            "What is the name and capacity of the dorm with the fewest amount of amenities?",
            "What is the name and student capacity of the dormitory that offers the least amenities?",
            "Provide the dorm's name and its capacity that has the smallest number of available amenities.",
            "Identify the dormitory with the fewest amenities and state its name along with its student capacity."
        ],
        "ref_sql": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "MQL": "db.Dorm.aggregate([\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"Has_amenity.amenid\",\n      foreignField: \"amenid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      student_capacity: 1,\n      count_Docs1: {\n        $size: \"$Docs1\"\n      }\n    }\n  },\n  {\n    $sort: {\n      count_Docs1: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      student_capacity: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 647,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find the names of artists that do not have any albums.",
            "What are the names of artists who have not released any albums?",
            "List the names of artists with zero albums to their credit.",
            "Can you provide the names of artists who haven't published any albums?",
            "Show me the names of artists that lack album releases."
        ],
        "ref_sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId",
        "MQL": "db.Artist.aggregate([\n  {\n    $project: {\n      Name: 1,\n      count_Album: {\n        $size: \"$Album\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Album: 0\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2946,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "List the countries having more than 4 addresses listed.",
            "For which countries are there more than four distinct addresses listed?",
            "Identify the countries with over four registered addresses.",
            "Which countries have more than four addresses recorded?",
            "Provide a list of countries that contain more than four listed addresses."
        ],
        "ref_sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4",
        "MQL": "db.Addresses.aggregate([\n  {\n    $group: {\n      _id: \"$country\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 4 }\n    }\n  },\n  {\n    $project: {\n      country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 554,
        "db_id": "aircraft",
        "nl_queries": [
            "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
            "How many international and domestic passengers are there in the airport London Heathrow?",
            "What is the total number of international and domestic passengers at London Heathrow Airport?",
            "Can you provide the counts of international and domestic passengers for Heathrow Airport in London?",
            "How many international and domestic passengers does the London Heathrow Airport serve?"
        ],
        "ref_sql": "SELECT International_Passengers , Domestic_Passengers FROM airport WHERE Airport_Name = \"London Heathrow\"",
        "MQL": "db.airport.aggregate([\n  {\n    $match: {\n      Airport_Name: \"London Heathrow\"\n    }\n  },\n  {\n    $project: {\n      International_Passengers: 1,\n      Domestic_Passengers: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3732,
        "db_id": "program_share",
        "nl_queries": [
            "List all program origins in the alphabetical order.",
            "What is the list of program origins ordered alphabetically?",
            "Provide the names of all program origins sorted in alphabetical order.",
            "Can you display the list of program origins arranged in ascending order?",
            "Show me all the origins of programs listed alphabetically."
        ],
        "ref_sql": "SELECT origin FROM program ORDER BY origin",
        "MQL": "db.program.aggregate([\n  {\n    $group: {\n      _id: null,\n      origins: { $addToSet: \"$Origin\" }\n    }\n  },\n  {\n    $unwind: \"$origins\"\n  },\n  {\n    $sort: { \"origins\": 1 }\n  },\n  {\n    $project: {\n      _id: 0,\n      Origin: \"$origins\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1466,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "What are the sale details and dates of transactions with amount smaller than 3000?",
            "Can you provide the sales details and transaction dates for amounts less than 3000?",
            "What are the transaction dates and sales information for all transactions below 3000?",
            "Please list the details of sales and the dates of transactions where the amount is under 3000.",
            "Show me the sales details along with the transaction dates for transactions with amounts less than 3000."
        ],
        "ref_sql": "SELECT T1.sales_details , T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000",
        "MQL": "db.Investors.aggregate([\n  { \n    $unwind: \"$Transactions\" \n  },\n  { \n    $match: { \n      \"Transactions.amount_of_transaction\": { $lt: 3000 } \n    } \n  },\n  { \n    $unwind: \"$Transactions.Sales\" \n  },\n  { \n    $project: { \n      \"sales_details\": \"$Transactions.Sales.sales_details\", \n      \"date_of_transaction\": \"$Transactions.date_of_transaction\", \n      \"_id\": 0 \n    } \n  }\n]);\n"
    },
    {
        "record_id": 2348,
        "db_id": "club_1",
        "nl_queries": [
            "What is the location of the club named \"Tennis Club\"?",
            "Where us the club named \"Tennis Club\" located?",
            "Can you tell me the location of the \"Tennis Club\"?",
            "What is the address of the club called \"Tennis Club\"?",
            "Where can I find the \"Tennis Club\"?"
        ],
        "ref_sql": "SELECT clublocation FROM club WHERE clubname = \"Tennis Club\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Tennis Club\"\n    }\n  },\n  {\n    $project: {\n      ClubLocation: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3957,
        "db_id": "aircraft",
        "nl_queries": [
            "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
            "What are the total number of domestic passengers at all London airports?",
            "How many domestic passengers have flown through airports with \"London\" in their name?",
            "What is the total count of domestic passengers at airports that reference London?",
            "Please provide the total number of domestic travelers at all airports named after London."
        ],
        "ref_sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
        "MQL": "db.airport.aggregate([\n  {\n    $match: {\n      Airport_Name: { $regex: \"London\", $options: \"i\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Domestic_Passengers: { $sum: \"$Domestic_Passengers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Domestic_Passengers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3389,
        "db_id": "sports_competition",
        "nl_queries": [
            "What are the maximum and minimum number of silver medals for clubs.",
            "What are the maximum and minimum number of silver medals for all the clubs?",
            "What are the highest and lowest counts of silver medals achieved by clubs?",
            "Can you tell me the maximum and minimum number of silver medals won by all clubs?",
            "What is the range of silver medals, specifically the most and least, for different clubs?"
        ],
        "ref_sql": "SELECT max(Silver) , min(Silver) FROM club_rank",
        "MQL": "db.club.aggregate([\n  {\n    $unwind: \"$club_rank\" \n  },\n  {\n    $group: {\n      _id: null,\n      max_Silver: { $max: \"$club_rank.Silver\" }, \n      min_Silver: { $min: \"$club_rank.Silver\" } \n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Silver: 1,\n      min_Silver: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3625,
        "db_id": "department_management",
        "nl_queries": [
            "What are the names of the heads who are born outside the California state?",
            "List the names of heads who were not born in California.",
            "What are the names of department heads originating from states other than California?",
            "Provide the names of heads that have their birthplace outside of California.",
            "Show me the names of heads born in places other than the state of California."
        ],
        "ref_sql": "SELECT name FROM head WHERE born_state != 'California'",
        "MQL": "db.head.find({\n  \"born_state\": { $ne: \"California\" }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 550,
        "db_id": "company_office",
        "nl_queries": [
            "Please show the industries of companies in descending order of the number of companies.",
            "Sort all the industries in descending order of the count of companies in each industry",
            "List the industries of companies, ordered by the number of companies in each industry, from highest to lowest.",
            "Show the industries along with their company counts, sorted in descending order of the number of companies per industry.",
            "Present the industries of companies sorted by the total number of companies in descending order."
        ],
        "ref_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "MQL": "db.Companies.aggregate([\n  {\n    $group: {\n      _id: \"$Industry\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      Industry: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3011,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the names of customers who never ordered product Latte.",
            "What are names of customers who never ordered product Latte.",
            "List the names of customers that have never placed an order for the Latte product.",
            "Who are the customers that have not ordered any product called Latte?",
            "Provide the names of customers who did not purchase the Latte item."
        ],
        "ref_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'",
        "MQL": "db.Customers.aggregate([\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"Customer_Orders.Order_Items.product_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: {\n        $not: {\n          $elemMatch: {\n            product_details: \"Latte\"\n          }\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1552,
        "db_id": "workshop_paper",
        "nl_queries": [
            "Show the authors of submissions and the acceptance results of their submissions.",
            "For each submission, find its author and acceptance result.",
            "Provide a list of submission authors alongside the results of their acceptance.",
            "Retrieve the author names and corresponding acceptance outcomes for each submission.",
            "Deliver the authors for each submission along with the results indicating whether they were accepted."
        ],
        "ref_sql": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
        "MQL": "db.submission.aggregate([\n  {\n    $unwind: \"$Acceptance\"\n  },\n  {\n    $lookup: {\n      from: \"workshop\",\n      localField: \"Acceptance.Workshop_ID\",\n      foreignField: \"Workshop_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.Acceptance\"\n  },\n  {\n    $match: {\n      $expr: {\n        $and: [\n          { $eq: [\"$Submission_ID\", \"$Docs1.Acceptance.Submission_ID\"] },\n          { $eq: [\"$Acceptance.Workshop_ID\", \"$Docs1.Workshop_ID\"] }\n        ]\n      }\n    }\n  },\n  {\n    $project: {\n      Author: 1,\n      Result: \"$Docs1.Acceptance.Result\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1576,
        "db_id": "phone_1",
        "nl_queries": [
            "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
            "Retrieve the hardware model and company names for all phones released in 2002 or those with RAM exceeding 32 MiB.",
            "Provide a list of company names and hardware model names of phones that were launched in the year 2002 or have more than 32 MiB of RAM.",
            "For phones either launched in 2002 or featuring more than 32 MiB of RAM, list their hardware model names along with the respective company names.",
            "Identify the hardware model names and company names for phones that were either introduced in 2002 or have a RAM size greater than 32 MiB."
        ],
        "ref_sql": "SELECT T2.Hardware_Model_name , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32;",
        "MQL": "db.chip_model.aggregate([\n  {\n    $unwind: \"$phone\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Launch_year\": 2002 },\n        { \"RAM_MiB\": { $gt: 32 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      \"Hardware_Model_name\": \"$phone.Hardware_Model_name\",\n      \"Company_name\": \"$phone.Company_name\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1821,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the name of the project for which a scientist whose name contains ‘Smith’ is assigned to.",
            "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?",
            "What is the name of the project assigned to any scientist with \"Smith\" in their name?",
            "Identify the project name associated with a scientist whose name includes 'Smith'.",
            "Can you provide the project title for a scientist that has 'Smith' in their name?"
        ],
        "ref_sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%'",
        "MQL": "db.Scientists.aggregate([\n  {\n    $match: {\n      Name: { $regex: \"Smith\", $options: \"i\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Projects\",\n      localField: \"SSN\",\n      foreignField: \"AssignedTo.Scientist\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs1.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3883,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the name of rooms whose price is higher than the average price.",
            "What are the name of rooms that cost more than the average.",
            "List the names of rooms with a price above the average room rate.",
            "Identify the rooms that have a higher cost than the average price.",
            "Provide the names of any rooms priced greater than the average base price."
        ],
        "ref_sql": "SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg(basePrice) FROM Rooms );",
        "MQL": "db.Rooms.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_basePrice: { $avg: \"$basePrice\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Rooms\",\n      let: { avg_basePrice: \"$avg_basePrice\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$basePrice\", \"$$avg_basePrice\"] }\n          }\n        },\n        {\n          $project: {\n            roomName: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 2124,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
            "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?",
            "Retrieve the names of manufacturers whose average product pricing is $150 or greater.",
            "List the names and average costs of products from manufacturers that have an average price of at least $150.",
            "Identify manufacturers whose products have an average price that meets or exceeds $150, along with their names and average product prices."
        ],
        "ref_sql": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$Code\",\n      Name: { $first: \"$Name\" },\n      avg_Price: { $avg: \"$Products.Price\" }\n    }\n  },\n  {\n    $match: {\n      avg_Price: { $gte: 150 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      avg_Price: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1147,
        "db_id": "city_record",
        "nl_queries": [
            "Which city has the highest temperature in February?",
            "In February, which city marks the highest temperature?",
            "Which city records the highest temperature during February?",
            "What city experiences the peak temperature in the month of February?",
            "Identify the city with the warmest temperature in February."
        ],
        "ref_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "MQL": "db.city.aggregate([\n  {\n    $unwind: \"$temperature\"\n  },\n  {\n    $match: {\n      \"temperature.Feb\": { $exists: true }\n    }\n  },\n  {\n    $sort: {\n      \"temperature.Feb\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      City: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 508,
        "db_id": "party_host",
        "nl_queries": [
            "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
            "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
            "What are the starting and ending years for parties themed \"Spring\" or \"Teqnology\"?",
            "Retrieve the initial and final years of parties that feature the themes \"Spring\" or \"Teqnology\".",
            "List the first and last years of parties with either \"Spring\" or \"Teqnology\" as their theme."
        ],
        "ref_sql": "SELECT First_year , Last_year FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"",
        "MQL": "db.party.aggregate([\n  {\n    $match: {\n      $or: [\n        { Party_Theme: \"Spring\" },\n        { Party_Theme: \"Teqnology\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      First_year: 1,\n      Last_year: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 922,
        "db_id": "game_1",
        "nl_queries": [
            "Show ids for all students who have advisor 1121.",
            "What are the ids of all students who have advisor number 1121?",
            "List the student IDs for those assigned to advisor 1121.",
            "Provide the IDs of all students under the supervision of advisor number 1121.",
            "What are the student IDs of individuals whose advisor is 1121?"
        ],
        "ref_sql": "SELECT StuID FROM Student WHERE Advisor = 1121",
        "MQL": "db.Student.find(\n  { Advisor: 1121 },\n  { StuID: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2775,
        "db_id": "ship_mission",
        "nl_queries": [
            "How many ships are there?",
            "What is the number of ships?",
            "Count the number of ships.",
            "What is the total number of ships available?",
            "How many ships are present in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM ship",
        "MQL": "db.ship.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2430,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of students whose age is older than the average age for each gender.",
            "How many students are older than average for each gender?",
            "How many students exceed the average age for their respective genders?",
            "Count the number of students who are older than the average age within each gender group.",
            "What is the total number of students by gender that are older than the average age?"
        ],
        "ref_sql": "SELECT count(*) , sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Sex\",\n      avg_age: { $avg: \"$Age\" },\n      students: { $push: \"$$ROOT\" }\n    }\n  },\n  {\n    $unwind: \"$students\"\n  },\n  {\n    $match: {\n      $expr: {\n        $gt: [\"$students.Age\", \"$avg_age\"]\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Sex: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 577,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "List the names and locations of all stadiums that can hold between 5,000 and 10,000 spectators.",
            "Provide the location and name of every stadium with a capacity in the range of 5,000 to 10,000.",
            "What are the names and locations of stadiums that accommodate from 5,000 to 10,000 individuals?"
        ],
        "ref_sql": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "MQL": "db.stadium.find({\n  Capacity: {\n    $gte: 5000,\n    $lte: 10000\n  }\n}, {\n  Location: 1,\n  Name: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 992,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the faculty id of each faculty member, along with the number of students he or she advises.",
            "What are the faculty id and the number of students each faculty has?",
            "List the faculty IDs alongside the total number of students they advise.",
            "Provide the faculty member IDs along with how many students each one advises.",
            "What is the number of students assigned to each faculty advisor, along with their faculty IDs?"
        ],
        "ref_sql": "SELECT T1.FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      FacID: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3665,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the name of project that continues for the longest time.",
            "What is the name of the project with the most hours?",
            "Identify the project that has the maximum hours dedicated to it.",
            "What is the title of the project that has the longest duration in terms of hours worked?",
            "Which project is associated with the highest total number of hours spent?"
        ],
        "ref_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "MQL": "db.Projects.aggregate([\n  {\n    $sort: { Hours: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 866,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the name of the shipping agent of the document with id 2?",
            "Can you tell me the name of the shipping agent for the document identified by ID 2?",
            "What is the shipping agent's name associated with document ID 2?",
            "Please provide the name of the shipping agent related to the document that has the ID 2.",
            "Who is the shipping agent for the document numbered 2?"
        ],
        "ref_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
        "MQL": "db.Ref_Shipping_Agents.find({\n  \"Documents.document_id\": 2\n}, {\n  \"shipping_agent_name\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 3541,
        "db_id": "program_share",
        "nl_queries": [
            "List the name, origin and owner of each program.",
            "What are the name, origin and owner of each program?",
            "Provide the names, origins, and owners of all programs.",
            "Can you show me the name, origin, and owner for each program available?",
            "What are the names, origins, and owners of every program listed?"
        ],
        "ref_sql": "SELECT name , origin , OWNER FROM program",
        "MQL": "db.program.find({}, { Name: 1, Origin: 1, Owner: 1, _id: 0 })\n"
    },
    {
        "record_id": 1425,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which owner owns the most dogs? List the owner id, first name and last name.",
            "Return the owner id, first name and last name of the owner who has the most dogs.",
            "Who is the owner with the largest number of dogs? Provide their owner id, first name, and last name.",
            "Identify the owner that has the most dogs, including their owner id, first name, and last name.",
            "Find the owner with the highest count of dogs and list their owner id, first name, and last name."
        ],
        "ref_sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Owners.aggregate([\n  {\n    $project: {\n      owner_id: 1,\n      first_name: 1,\n      last_name: 1,\n      count_dogs: {\n        $size: \"$Dogs\"\n      }\n    }\n  },\n  {\n    $sort: {\n      count_dogs: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      owner_id: 1,\n      first_name: 1,\n      last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3696,
        "db_id": "twitter_1",
        "nl_queries": [
            "List the names of 5 users followed by the largest number of other users.",
            "Retrieve the names of the top 5 users who have the most followers.",
            "Show me the names of five users with the highest number of followers.",
            "Provide a list of five users that are most followed by others.",
            "What are the names of the five users with the largest followings?"
        ],
        "ref_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "MQL": "db.user_profiles.aggregate([\n  { $sort: { followers: -1 } },\n  { $limit: 5 },\n  { $project: { _id: 0, name: 1 } }\n]);\n"
    },
    {
        "record_id": 859,
        "db_id": "restaurant_1",
        "nl_queries": [
            "What is the rating of the restaurant Subway?",
            "Can you tell me the rating for the restaurant named Subway?",
            "What rating does the restaurant Subway have?",
            "How is the Subway restaurant rated?",
            "What is Subway's rating as a restaurant?"
        ],
        "ref_sql": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
        "MQL": "db.Restaurant.find({ \"ResName\": \"Subway\" }, { \"Rating\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 303,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the states where have some college students in tryout and their decisions are yes.",
            "What are the different states that had students successfully try out?",
            "List the states where colleges have students whose tryout decisions were affirmative.",
            "Which states had students who were accepted after tryouts for colleges?",
            "Identify the various states that had colleges with students successfully participating in tryouts."
        ],
        "ref_sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$state\"\n    }\n  },\n  {\n    $project: {\n      state: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2588,
        "db_id": "game_1",
        "nl_queries": [
            "How many video games have type Massively multiplayer online game?",
            "Count the number of video games with Massively multiplayer online game type .",
            "What is the total number of games categorized as Massively multiplayer online games?",
            "Please provide the count of video games that are classified as Massively multiplayer online games.",
            "How many games are there that belong to the Massively multiplayer online game genre?"
        ],
        "ref_sql": "SELECT count(*) FROM Video_games WHERE gtype = \"Massively multiplayer online game\"",
        "MQL": "db.Video_Games.aggregate([\n  {\n    $match: {\n      GType: \"Massively multiplayer online game\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 3390,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
            "For each position, what is the maximum number of hours for students who spent more than 1000 hours training?",
            "What are the highest training hours recorded for students with more than 1000 hours, categorized by their positions?",
            "Show the peak training hours for each position among players who have trained for over 1000 hours.",
            "How many maximum training hours do students exceed 1000 for each position?"
        ],
        "ref_sql": "SELECT max(T1.HS) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos",
        "MQL": "db.Player.aggregate([\n  {\n    $match: {\n      HS: { $gt: 1000 }\n    }\n  },\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $group: {\n      _id: \"$Tryout.pPos\",\n      max_HS: { $max: \"$HS\" }\n    }\n  },\n  {\n    $project: {\n      pPos: \"$_id\",\n      max_HS: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3931,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which states have both owners and professionals living there?",
            "Find the states where both owners and professionals live.",
            "Identify the states that have both pet owners and professionals residing within them.",
            "List the states where both owners and professionals are present.",
            "What states feature both owners of dogs and trained professionals living in them?"
        ],
        "ref_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "MQL": "db.Owners.aggregate([\n  {\n    $group: {\n      _id: \"$state\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Professionals\",\n      localField: \"_id\",\n      foreignField: \"state\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $addFields: {\n      count_Docs1: { $size: \"$Docs1\" }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 0 },\n      count_Docs1: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      state: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1712,
        "db_id": "tracking_orders",
        "nl_queries": [
            "For each customer who has at least two orders, find the customer name and number of orders made.",
            "Which customers have made at least two orders? Give me each customer name and number of orders made.",
            "List the names of customers who have placed a minimum of two orders along with the total number of orders they have made.",
            "Identify customers with two or more orders and provide their names along with the respective number of orders.",
            "Show each customer's name and their order count if they have made at least two orders."
        ],
        "ref_sql": "SELECT T2.customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) >= 2",
        "MQL": "db.Customers.aggregate([\n  {\n    $project: {\n      customer_name: 1,\n      number_of_orders: { $size: \"$Orders\" }\n    }\n  },\n  {\n    $match: {\n      number_of_orders: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      customer_name: 1,\n      count: \"$number_of_orders\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2624,
        "db_id": "mountain_photos",
        "nl_queries": [
            "How many camera lenses have a focal length longer than 15 mm?",
            "What is the total number of camera lenses with a focal length exceeding 15 mm?",
            "Count the number of camera lenses that have a focal length greater than 15 millimeters.",
            "How many camera lenses possess a focal length longer than 15 mm?",
            "Please provide the count of camera lenses with focal lengths above 15 mm."
        ],
        "ref_sql": "SELECT count(*) FROM camera_lens WHERE focal_length_mm > 15",
        "MQL": "db.camera_lens.aggregate([\n  { $match: { \"focal_length_mm\": { $gt: 15 } } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 2865,
        "db_id": "swimming",
        "nl_queries": [
            "How many cities have a stadium that was opened before the year of 2006?",
            "What is the number of cities with stadiums that opened before 2006?",
            "How many unique cities host stadiums that were inaugurated prior to the year 2006?",
            "Count the distinct cities that have a stadium opened any time before 2006.",
            "How many cities have stadiums that were established before 2006?"
        ],
        "ref_sql": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year < 2006",
        "MQL": "db.stadium.aggregate([\n  {\n    $match: {\n      \"Opening_year\": { $lt: 2006 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_city: { $addToSet: \"$City\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_city: { $size: \"$count_DISTINCT_city\" }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2823,
        "db_id": "perpetrator",
        "nl_queries": [
            "How many distinct locations of perpetrators are there?",
            "What is the total number of unique locations where perpetrators have been identified?",
            "Can you tell me how many distinct places are associated with the perpetrators?",
            "How many unique locations exist for the individuals identified as perpetrators?",
            "What is the count of different locations linked to the perpetrators?"
        ],
        "ref_sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $group: { _id: \"$perpetrator.Location\" } },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count_DISTINCT_LOCATION: \"$count\" } }\n]);\n"
    },
    {
        "record_id": 1449,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "Who are the professionals that have conducted at least two treatments? Please provide their ID, role, and first name.",
            "Can you list the professional IDs, roles, and first names of those who have performed two or more treatments?",
            "Identify the professionals with two or more treatments completed, detailing their ID, role, and first name."
        ],
        "ref_sql": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "MQL": "db.Professionals.aggregate([\n  {\n    $unwind: \"$Treatments\"\n  },\n  {\n    $group: {\n      _id: \"$professional_id\",\n      role_code: { $first: \"$role_code\" },\n      first_name: { $first: \"$first_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      professional_id: \"$_id\",\n      role_code: 1,\n      first_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3798,
        "db_id": "store_product",
        "nl_queries": [
            "Find the name of the products that are not using the most frequently-used max page size.",
            "What are the names of all products that are not the most frequently-used maximum page size?",
            "List the names of products that do not utilize the most commonly used maximum page size.",
            "Identify all products whose maximum page size is not the most frequently encountered one.",
            "Provide the names of products that aren't configured with the maximum page size that is most prevalent."
        ],
        "ref_sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "MQL": "db.product.aggregate([\n  \n  {\n    $group: {\n      _id: \"$max_page_size\",\n      count: { $sum: 1 }\n    }\n  },\n  \n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      most_frequent_max_page_size: \"$_id\"\n    }\n  },\n  \n  {\n    $lookup: {\n      from: \"product\",\n      pipeline: [\n        {\n          $match: {\n            max_page_size: { $ne: \"$most_frequent_max_page_size\" }\n          }\n        },\n        {\n          $project: {\n            product: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: {\n      newRoot: \"$Docs1\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3976,
        "db_id": "driving_school",
        "nl_queries": [
            "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
            "How long is the total lesson time took by the customer named Rylan Goodwin?",
            "What is the total duration of lessons taken by the customer named Rylan Goodwin?",
            "Can you provide the cumulative lesson time for the customer whose first name is Rylan and last name is Goodwin?",
            "How much time in total has Rylan Goodwin spent on lessons?"
        ],
        "ref_sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.first_name\": \"Rylan\",\n      \"Customers.last_name\": \"Goodwin\"\n    }\n  },\n  {\n    $unwind: \"$Customers.Lessons\"\n  },\n  {\n    $group: {\n      _id: null,\n      total_lesson_time: {\n        $sum: {\n          $toInt: \"$Customers.Lessons.lesson_time\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Lessons_lesson_time: \"$total_lesson_time\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2043,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Which address has both members younger than 30 and members older than 40?",
            "Which addresses have members both below the age of 30 and above the age of 40?",
            "Identify the addresses where there are members younger than 30 years old and older than 40 years old.",
            "What are the addresses that feature both members who are under 30 and those who are over 40?",
            "List the addresses that include members aged less than 30 as well as those aged more than 40."
        ],
        "ref_sql": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
        "MQL": "db.member.aggregate([\n  {\n    $group: {\n      _id: \"$Address\",\n      countYoungerThan30: {\n        $sum: {\n          $cond: [{ $lt: [\"$Age\", 30] }, 1, 0]\n        }\n      },\n      countOlderThan40: {\n        $sum: {\n          $cond: [{ $gt: [\"$Age\", 40] }, 1, 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      countYoungerThan30: { $gt: 0 },\n      countOlderThan40: { $gt: 0 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Address: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3044,
        "db_id": "driving_school",
        "nl_queries": [
            "When are the birthdays of customer who are classified as 'Good Customer' status?",
            "What is the date of birth of every customer whose status code is 'Good Customer'?",
            "What are the birth dates of customers categorized as having a 'Good Customer' status?",
            "Can you provide the dates of birth for all customers whose status is marked as 'Good Customer'?",
            "When did the customers with a status code of 'Good Customer' celebrate their birthdays?"
        ],
        "ref_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.customer_status_code\": \"Good Customer\"\n    }\n  },\n  {\n    $project: {\n      date_of_birth: \"$Customers.date_of_birth\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 49,
        "db_id": "inn_1",
        "nl_queries": [
            "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
            "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
            "What is the count of adults for the reservation made by CONRAD SELBIG on October 23, 2010?",
            "How many adults are included in the room reservation that CONRAD SELBIG checked in on Oct 23, 2010?",
            "Can you tell me the total number of adults for the room booked by CONRAD SELBIG for the check-in date of October 23, 2010?"
        ],
        "ref_sql": "SELECT Adults FROM Reservations WHERE CheckIn = \"2010-10-23\" AND FirstName = \"CONRAD\" AND LastName = \"SELBIG\";",
        "MQL": "db.Rooms.aggregate([\n  {\n    $unwind: \"$Reservations\"\n  },\n  {\n    $match: {\n      \"Reservations.CheckIn\": \"Oct 23, 2010\",\n      \"Reservations.LastName\": \"SELBIG\",\n      \"Reservations.FirstName\": \"CONRAD\"\n    }\n  },\n  {\n    $project: {\n      Adults: \"$Reservations.Adults\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4037,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "What is the effective date of the claim that has the largest amount of total settlement?",
            "Find the claim that has the largest total settlement amount. Return the effective date of the claim.",
            "What is the effective date associated with the claim that received the highest total settlement amount?",
            "Identify the effective date of the claim with the maximum total settlement.",
            "Can you provide the effective date for the claim that has the highest amount in total settlements?"
        ],
        "ref_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "MQL": "db.Available_Policies.aggregate([\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss.Claims\"\n  },\n  {\n    $unwind: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements\"\n  },\n  {\n    $group: {\n      _id: \"$Customers_Policies.First_Notification_of_Loss.Claims.Effective_Date\",\n      total_settlement: {\n        $sum: \"$Customers_Policies.First_Notification_of_Loss.Claims.Settlements.Settlement_Amount\"\n      }\n    }\n  },\n  {\n    $sort: {\n      total_settlement: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Effective_Date: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3151,
        "db_id": "school_finance",
        "nl_queries": [
            "Show the names of all the donors except those whose donation amount less than 9.",
            "List the names of all donors who contributed at least 9.",
            "Provide the names of donors whose donation amounts are 9 or greater.",
            "Display the names of all contributors with donations of 9 or more.",
            "Retrieve the names of donors, excluding those who donated less than 9."
        ],
        "ref_sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9",
        "MQL": "db.School.aggregate([\n  {\n    $unwind: \"$endowment\"\n  },\n  {\n    $match: {\n      \"endowment.amount\": { $gte: 9 }\n    }\n  },\n  {\n    $project: {\n      donator_name: \"$endowment.donator_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 81,
        "db_id": "workshop_paper",
        "nl_queries": [
            "List the authors who do not have submission to any workshop.",
            "Which authors did not submit to any workshop?",
            "Identify the authors who haven't submitted to any workshops.",
            "Show me the names of authors with no submissions to workshops.",
            "Find authors that have not made any submissions for workshops."
        ],
        "ref_sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "MQL": "db.submission.aggregate([\n  {\n    $lookup: {\n      from: \"workshop\",\n      localField: \"Acceptance.Workshop_ID\",\n      foreignField: \"Workshop_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: { $size: 0 }\n    }\n  },\n  {\n    $project: {\n      Author: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2480,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "How many courses in total are listed?",
            "How many courses are there?",
            "What is the total number of courses currently available?",
            "Can you tell me how many courses are offered?",
            "How many courses do we have in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM Courses",
        "MQL": "db.Courses.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 654,
        "db_id": "gymnast",
        "nl_queries": [
            "What are the names of people in ascending alphabetical order?",
            "Return the names of people, ordered alphabetically.",
            "List the names of individuals sorted in alphabetical order.",
            "Show the names of people arranged in ascending order.",
            "Provide the names of all individuals, sorted alphabetically."
        ],
        "ref_sql": "SELECT Name FROM People ORDER BY Name ASC",
        "MQL": "db.people.find({}, { Name: 1, _id: 0 }).sort({ Name: 1 });\n"
    },
    {
        "record_id": 3265,
        "db_id": "game_1",
        "nl_queries": [
            "Show all video games and their types in the order of their names.",
            "What are the names of all the video games and their types in alphabetical order?",
            "List all video games along with their categories, arranged by their names in alphabetical order.",
            "Provide the titles and types of every video game sorted by name in ascending order.",
            "Display all video game names and their corresponding types, ordered by name from A to Z."
        ],
        "ref_sql": "SELECT gname , gtype FROM Video_games ORDER BY gname",
        "MQL": "db.Video_Games.find({}, { GName: 1, GType: 1, _id: 0 }).sort({ GName: 1 });\n"
    },
    {
        "record_id": 1469,
        "db_id": "game_injury",
        "nl_queries": [
            "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
            "During which season did Walter Samuel sustain an injury in a game?",
            "Can you tell me the season of the game where Walter Samuel got injured?",
            "What season corresponds to the game in which Walter Samuel was injured?",
            "In which season did the injury occur for the player Walter Samuel during a match?"
        ],
        "ref_sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $unwind: \"$game.injury_accident\" },\n  { $match: { \"game.injury_accident.Player\": \"Walter Samuel\" } },\n  { $project: { \"Season\": \"$game.Season\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 704,
        "db_id": "railway",
        "nl_queries": [
            "What are the names of managers in ascending order of level?",
            "Can you provide the names of the managers sorted by their level in ascending order?",
            "List the names of managers arranged from the lowest to the highest level.",
            "What are the names of the managers, ordered by their level in increasing order?",
            "Please show me the names of all managers in ascending level order."
        ],
        "ref_sql": "SELECT Name FROM manager ORDER BY LEVEL ASC",
        "MQL": "db.manager.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Level\": 1 });\n"
    },
    {
        "record_id": 2065,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Return the apartment number with the largest number of bedrooms.",
            "What is the apartment number of the apartment with the most beds?",
            "Provide the apartment number for the unit that has the highest bedroom count.",
            "What is the apartment number of the unit with the greatest number of bedrooms?",
            "Identify the apartment number of the apartment that features the most bedrooms."
        ],
        "ref_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $sort: {\n      \"Apartments.bedroom_count\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      apt_number: \"$Apartments.apt_number\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 488,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
            "Who is the employee featured the most in circulation history documents? Please provide their name and the total number of drafts and copies associated with them.",
            "Identify the employee that participates the most in the documents' circulation history. Include their name and the count of drafts and copies.",
            "Which employee appears most frequently in the circulation history of documents? List their name along with the total number of drafts and copies they have.",
            "Find the employee with the highest occurrences in circulation history documents. Give the employee's name and the corresponding count of their drafts and copies."
        ],
        "ref_sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
        "MQL": "db.Roles.aggregate([\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Document_Types\",\n      localField: \"Employees.Circulation_History.document_id\",\n      foreignField: \"Documents.Document_Drafts.Draft_Copies.Circulation_History.document_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Employees.employee_id\",\n      employee_name: { $first: \"$Employees.employee_name\" },\n      count: { $sum: { $size: \"$Docs1\" } }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      employee_name: 1,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1871,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What are the template ids with template type description \"Presentation\".",
            "Return the ids corresponding to templates with the description 'Presentation'.",
            "List the template IDs that have the description \"Presentation\".",
            "What template IDs are associated with the type description 'Presentation'?",
            "Provide the IDs of templates that correspond to the description \"Presentation\"."
        ],
        "ref_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $match: {\n      Template_Type_Description: \"Presentation\"\n    }\n  },\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $project: {\n      Template_ID: \"$Templates.Template_ID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4211,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the titles of all movies that have no ratings.",
            "What are the titles of all movies that have not been rated?",
            "List the titles of movies that do not have any ratings.",
            "What titles are associated with movies that haven't received any ratings?",
            "Show me the titles of all films that lack ratings."
        ],
        "ref_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "MQL": "db.Movie.aggregate([\n  {\n    $match: {\n      Rating: { $exists: true, $eq: [] }\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3033,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
            "What are the dates that have an average sea level pressure between 30.3 and 31?",
            "Which dates fall within the range of 30.3 and 31 for the mean sea level pressure?",
            "List the dates when the average sea level pressure was recorded between 30.3 and 31.",
            "Can you provide the dates that show a mean sea level pressure in the interval from 30.3 to 31?"
        ],
        "ref_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "MQL": "db.weather.aggregate([\n  {\n    $match: {\n      mean_sea_level_pressure_inches: {\n        $gte: 30.3,\n        $lt: 31\n      }\n    }\n  },\n  {\n    $project: {\n      date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2202,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the average number of customers cross all banks.",
            "What is the average number of bank customers?",
            "Calculate the average total of customers served by all bank branches.",
            "What is the mean number of customers across different banks?",
            "Determine the overall average of customers at various bank locations."
        ],
        "ref_sql": "SELECT avg(no_of_customers) FROM bank",
        "MQL": "db.bank.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_no_of_customers: {\n        $avg: \"$no_of_customers\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_no_of_customers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1606,
        "db_id": "decoration_competition",
        "nl_queries": [
            "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
            "List the names of college members along with their college locations, sorted in alphabetical order by member names.",
            "Retrieve the names of the members and their respective college locations, organized in ascending order based on member names.",
            "Provide the member names and their colleges' locations, arranged alphabetically by the members' names.",
            "Display the names of the members together with the locations of their colleges, ordered alphabetically in an ascending manner by member names."
        ],
        "ref_sql": "SELECT T2.Name , T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC",
        "MQL": "db.college.aggregate([\n  { \n    $unwind: \"$member\" \n  },\n  { \n    $project: { \n      \"Name\": \"$member.Name\", \n      \"College_Location\": 1, \n      \"_id\": 0 \n    } \n  },\n  { \n    $sort: { \n      \"Name\": 1 \n    } \n  }\n]);\n"
    },
    {
        "record_id": 1854,
        "db_id": "storm_record",
        "nl_queries": [
            "What are the region names affected by the storm with a number of deaths of least 10?",
            "Return the names of the regions affected by storms that had a death count of at least 10.",
            "What are the names of regions impacted by storms that resulted in a minimum of 10 fatalities?",
            "List the regions that suffered from storms with at least 10 reported deaths.",
            "Identify the names of regions affected by storms that had ten or more casualties."
        ],
        "ref_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10",
        "MQL": "db.storm.aggregate([\n  {\n    $lookup: {\n      from: \"region\",\n      localField: \"Storm_ID\",\n      foreignField: \"affected_region.Storm_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      Number_Deaths: { $gte: 10 }\n    }\n  },\n  {\n    $project: {\n      Region_name: \"$Docs1.Region_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 123,
        "db_id": "chinook_1",
        "nl_queries": [
            "How many distinct cities does the employees live in?",
            "Find the number of different cities that employees live in.",
            "What is the total number of unique cities where employees are located?",
            "How many different cities do the employees call home?",
            "Count the distinct cities that the employees reside in."
        ],
        "ref_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "MQL": "db.Employee.aggregate([\n  {\n    $group: {\n      _id: \"$City\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT_DISTINCT_city\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT_DISTINCT_city\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3794,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "What is the id of the problem log that is created most recently?",
            "Which problem log was created most recently? Give me the log id.",
            "What is the identifier of the latest problem log entry?",
            "Can you show me the log ID for the most recent problem log?",
            "Please tell me the ID of the most recently created entry in the problem log."
        ],
        "ref_sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "MQL": "db.Problem_Status_Codes.aggregate([\n  {\n    $unwind: \"$Problem_Log\"\n  },\n  {\n    $sort: {\n      \"Problem_Log.log_entry_date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      problem_log_id: \"$Problem_Log.problem_log_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1028,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the names and ids of tourist attractions that are visited at least two times.",
            "Which tourist attractions are visited at least twice? Give me their names and ids.",
            "List the names and IDs of tourist attractions with a minimum of two visits.",
            "Which attractions have been visited at least twice? Please provide their names and IDs.",
            "Retrieve the names and identifiers of tourist attractions that have received two or more visits."
        ],
        "ref_sql": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Visits\"\n  },\n  {\n    $group: {\n      _id: \"$Tourist_Attractions.Tourist_Attraction_ID\",\n      Name: { $first: \"$Tourist_Attractions.Name\" },\n      visitCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      visitCount: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Tourist_Attraction_ID: \"$_id\",\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4058,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "What is the name of the customer who has the most policies listed?",
            "Which customer uses the most policies? Give me the customer name.",
            "Which customer holds the highest number of policies? Please provide their name.",
            "Identify the customer who has the greatest number of policies. What is their name?",
            "Who is the customer with the largest quantity of policies registered? I need the name."
        ],
        "ref_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customers_Policies\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_ID\",\n      Customer_name: { $first: \"$Customer_name\" },\n      count_policy: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count_policy: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Customer_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2280,
        "db_id": "csu_1",
        "nl_queries": [
            "Which university is in Los Angeles county and opened after 1950?",
            "What campuses are located in Los Angeles county and opened after 1950?",
            "Which colleges are situated in Los Angeles County and were established post-1950?",
            "Can you list the campuses located in Los Angeles county that opened after the year 1950?",
            "What universities can be found in Los Angeles County that began operation after 1950?"
        ],
        "ref_sql": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950",
        "MQL": "db.Campuses.find({\n  \"County\": \"Los Angeles\",\n  \"Year\": { $gt: 1950 }\n}, {\n  \"Campus\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 553,
        "db_id": "perpetrator",
        "nl_queries": [
            "List the number of people injured by perpetrators in ascending order.",
            "Provide a list of the injured counts associated with perpetrators, sorted from least to most.",
            "Show the number of individuals harmed by perpetrators in increasing order.",
            "Generate a ranked list of injury figures attributed to perpetrators, arranged in ascending order.",
            "Display the counts of people injured by perpetrators, organized from the lowest to the highest."
        ],
        "ref_sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $sort: { \"perpetrator.Injured\": 1 } },\n  { $project: { \"Injured\": \"$perpetrator.Injured\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2797,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many students got accepted after the tryout?",
            "How many students received a yes from tryouts?",
            "What is the total number of students who were accepted following their tryouts?",
            "How many players received an acceptance following the tryout process?",
            "What count of students secured a \"yes\" decision after the tryouts?"
        ],
        "ref_sql": "SELECT count(*) FROM tryout WHERE decision = 'yes'",
        "MQL": "db.College.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.decision\": \"yes\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1305,
        "db_id": "browser_web",
        "nl_queries": [
            "What is the id and name of the browser that is compatible with the most web accelerators?",
            "Which browser has the highest compatibility with web accelerators, and what are its id and name?",
            "Identify the browser that supports the most web accelerators, providing its id and name.",
            "What are the id and name of the browser that is compatible with the maximum number of web acceleration tools?",
            "Can you tell me the id and name of the browser that is associated with the largest number of compatible web accelerators?"
        ],
        "ref_sql": "SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.browser.aggregate([\n  {\n    $project: {\n      id: 1,\n      name: 1,\n      numCompatibleAccelerators: { $size: \"$accelerator_compatible_browser\" }\n    }\n  },\n  {\n    $sort: { numCompatibleAccelerators: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, id: 1, name: 1 }\n  }\n]);\n"
    },
    {
        "record_id": 2850,
        "db_id": "match_season",
        "nl_queries": [
            "How many distinct teams are involved in match seasons?",
            "Count the number of different teams involved in match season.",
            "What is the total number of unique teams participating in match seasons?",
            "How many different teams are there in the match seasons?",
            "Determine the count of distinct teams that take part in the match seasons."
        ],
        "ref_sql": "SELECT count(DISTINCT Team) FROM match_season",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.Team\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Team: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_Team: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1957,
        "db_id": "tracking_orders",
        "nl_queries": [
            "List the name and count of each product in all orders.",
            "For each product, show its name and the number of times it was ordered.",
            "Provide a list of product names along with their order counts from all customer orders.",
            "Display the names of products and the total number of orders for each product.",
            "For every product, provide its name and how often it has been ordered by customers."
        ],
        "ref_sql": "SELECT T3.product_name , count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$Orders.Order_Items.product_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"_id\",\n      foreignField: \"product_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      product_name: \"$Docs1.product_name\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3128,
        "db_id": "document_management",
        "nl_queries": [
            "Find names of the document without any images.",
            "What are the names of documents that do not have any images?",
            "List the names of documents that lack any images.",
            "What documents are there that do not contain images?",
            "Provide the names of documents that have no associated images."
        ],
        "ref_sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $unwind: {\n      path: \"$Documents.Document_Sections\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $unwind: {\n      path: \"$Documents.Document_Sections.Document_Sections_Images\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$Documents.document_code\",\n      document_name: { $first: \"$Documents.document_name\" },\n      image_count: { $sum: { $cond: [{ $ifNull: [\"$Documents.Document_Sections.Document_Sections_Images.image_id\", false] }, 1, 0] } }\n    }\n  },\n  {\n    $match: {\n      image_count: 0\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      document_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1325,
        "db_id": "driving_school",
        "nl_queries": [
            "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
            "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
            "Retrieve lesson IDs for all lessons delivered by the staff member named Janessa Sawayn, whose nickname includes the letter 's'.",
            "Show me the lesson IDs for lessons that were taught by Janessa Sawayn, with a nickname containing an 's'.",
            "Provide the lesson IDs associated with lessons conducted by staff named Janessa Sawayn and having a nickname that contains the letter 's'."
        ],
        "ref_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\",\n      \"Staff.nickname\": { $regex: \"s\", $options: \"i\" }  \n    }\n  },\n  {\n    $unwind: \"$Staff.Lessons\"\n  },\n  {\n    $project: {\n      lesson_id: \"$Staff.Lessons.lesson_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1221,
        "db_id": "tracking_orders",
        "nl_queries": [
            "What is the placement date of the order whose invoice number is 10?",
            "On what day was the order with invoice number 10 placed?",
            "What date was the order linked to invoice number 10 made?",
            "Can you tell me the order placement date for the invoice number 10?",
            "When was the order associated with invoice number 10 placed?"
        ],
        "ref_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Shipments\"\n  },\n  {\n    $match: {\n      \"Orders.Shipments.invoice_number\": 10\n    }\n  },\n  {\n    $project: {\n      date_order_placed: \"$Orders.date_order_placed\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1228,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the code and description of the least frequent detention type ?",
            "Can you provide the code and description for the detention type that is the least common?",
            "What is the detention type code and its corresponding description for the type with the lowest frequency?",
            "Please tell me the detention type's code and description that appears the least often.",
            "What information do you have on the least frequently occurring detention type, specifically its code and description?"
        ],
        "ref_sql": "SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "MQL": "db.Ref_Detention_Type.aggregate([\n  {\n    $unwind: \"$Detention\"\n  },\n  {\n    $group: {\n      _id: \"$Detention.detention_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Ref_Detention_Type\",\n      localField: \"_id\",\n      foreignField: \"detention_type_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      detention_type_code: \"$Docs1.detention_type_code\",\n      detention_type_description: \"$Docs1.detention_type_description\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1545,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the description of the transaction type that occurs most frequently.",
            "What is the description of the transaction type with the highest occurrence?",
            "Provide the description for the most common transaction type.",
            "Give me the details on the transaction type that is recorded the most often.",
            "Identify the transaction type that appears most frequently and show its description."
        ],
        "ref_sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.Ref_Transaction_Types.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $group: {\n      _id: \"$transaction_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Ref_Transaction_Types\",\n      localField: \"_id\",\n      foreignField: \"transaction_type_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      transaction_type_description: \"$Docs1.transaction_type_description\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3196,
        "db_id": "music_1",
        "nl_queries": [
            "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
            "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
            "Can you provide the ids of songs that are either in mp4 format or have a resolution greater than 720?",
            "What ids correspond to songs that are either available in mp4 format or have a resolution above 720?",
            "Please list the ids of all songs that are available as mp4 files or boast a resolution higher than 720."
        ],
        "ref_sql": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.files\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"artist.files.formats\": \"mp4\" },\n        { \"artist.files.resolution\": { $gt: 720 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      f_id: \"$artist.files.f_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 114,
        "db_id": "chinook_1",
        "nl_queries": [
            "How many tracks are in the AAC audio file media type?",
            "Count the number of tracks that are of the media type \"AAC audio file\".",
            "What is the total number of tracks that fall under the media type \"AAC audio file\"?",
            "How many tracks belong to the AAC audio file media type?",
            "Determine the count of tracks designated as \"AAC audio file\"."
        ],
        "ref_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\"",
        "MQL": "db.MediaType.aggregate([\n  {\n    $match: {\n      Name: \"AAC audio file\"\n    }\n  },\n  {\n    $unwind: \"$Track\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT\": \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2818,
        "db_id": "election",
        "nl_queries": [
            "How many distinct governors are there?",
            "Count the number of distinct governors.",
            "What is the total number of unique governors?",
            "How many unique individuals have served as governors?",
            "Determine the count of distinct individuals who have held the governor position."
        ],
        "ref_sql": "SELECT count(DISTINCT Governor) FROM party",
        "MQL": "db.party.aggregate([\n  {\n    $group: {\n      _id: \"$Governor\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_Governor\"\n  }\n]);\n"
    },
    {
        "record_id": 1253,
        "db_id": "college_1",
        "nl_queries": [
            "What is the last name and office of the professor from the history department?",
            "What are the last name and office of all history professors?",
            "Can you provide the last name and office location of the professor in the History department?",
            "What are the last names and office numbers for all professors associated with the History department?",
            "Tell me the last names along with the office details of professors from the department of History."
        ],
        "ref_sql": "SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"History\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"EMPLOYEE\",\n      localField: \"DEPARTMENT.PROFESSOR.EMP_NUM\",\n      foreignField: \"EMP_NUM\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      EMP_LNAME: \"$Docs1.EMP_LNAME\",\n      PROF_OFFICE: \"$DEPARTMENT.PROFESSOR.PROF_OFFICE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1560,
        "db_id": "car_1",
        "nl_queries": [
            "Which of the countries has the most car makers? List the country name.",
            "What is the name of the country with the most car makers?",
            "Which country is home to the highest number of car manufacturers? Please provide the country name.",
            "Identify the country that boasts the most car makers. What is its name?",
            "Can you tell me the name of the country with the largest quantity of car manufacturers?"
        ],
        "ref_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $group: {\n      _id: \"$countries.CountryName\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      CountryName: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2790,
        "db_id": "course_teach",
        "nl_queries": [
            "How many teachers are there?",
            "What is the total count of teachers?",
            "What is the total number of teachers in the database?",
            "Can you tell me how many teachers are registered?",
            "How many teaching staff members are there in total?"
        ],
        "ref_sql": "SELECT count(*) FROM teacher",
        "MQL": "db.teacher.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2549,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "How many roles are there?",
            "Count the total number of roles listed.",
            "What is the total number of roles available?",
            "Can you provide the count of all roles present?",
            "How many distinct roles are recorded in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM ROLES",
        "MQL": "db.Roles.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3299,
        "db_id": "browser_web",
        "nl_queries": [
            "What is the id and market share of the browser Safari?",
            "Can you provide the ID and market share for the Safari browser?",
            "What are the ID and market share associated with the browser named Safari?",
            "Please tell me the ID and market share figures for Safari.",
            "What is the identification number and market share percentage for the Safari web browser?"
        ],
        "ref_sql": "SELECT id , market_share FROM browser WHERE name = 'Safari'",
        "MQL": "db.browser.find({\n  \"name\": \"Safari\"\n}, { \"id\": 1, \"market_share\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3510,
        "db_id": "formula_1",
        "nl_queries": [
            "What is the name and date of the most recent race?",
            "What is the name and date of the race that occurred most recently?",
            "Can you provide the name and date of the latest race?",
            "What are the name and date of the most up-to-date race?",
            "Please tell me the name and date of the race that took place last."
        ],
        "ref_sql": "SELECT name , date FROM races ORDER BY date DESC LIMIT 1",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $sort: {\n      \"races.date\": -1\n    }\n  },\n  {\n    $project: {\n      name: \"$races.name\",\n      date: \"$races.date\",\n      _id: 0\n    },\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 3723,
        "db_id": "e_government",
        "nl_queries": [
            "List all the name of organizations in order of the date formed.",
            "What are the names of organizations, ordered by the date they were formed, ascending?",
            "Retrieve the names of all organizations sorted by their formation date in ascending order.",
            "Show me the list of organization names, organized by the date they were established, starting from the earliest.",
            "Provide the names of organizations arranged by their date of formation, in increasing order."
        ],
        "ref_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "MQL": "db.Organizations.find(\n  {},\n  { organization_name: 1, _id: 0 }\n).sort({ date_formed: 1 });\n"
    },
    {
        "record_id": 2958,
        "db_id": "swimming",
        "nl_queries": [
            "Which country has at most 3 stadiums listed?",
            "Which countries have three or fewer stadiums?",
            "Identify countries with a maximum of three listed stadiums.",
            "What countries are there with no more than three stadiums?",
            "List the countries that contain at most three stadiums."
        ],
        "ref_sql": "SELECT country FROM stadium GROUP BY country HAVING count(*) <= 3",
        "MQL": "db.stadium.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      stadiumCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      stadiumCount: { $lte: 3 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 359,
        "db_id": "activity_1",
        "nl_queries": [
            "Show all the distinct buildings that have faculty rooms.",
            "What buildings have faculty offices?",
            "List all the unique buildings that contain faculty offices.",
            "Which buildings have spaces designated for faculty use?",
            "Provide a list of all buildings that house faculty rooms."
        ],
        "ref_sql": "SELECT DISTINCT building FROM Faculty",
        "MQL": "db.Faculty.aggregate([\n  {\n    $group: {\n      _id: \"$Building\"\n    }\n  },\n  {\n    $project: {\n      Building: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2873,
        "db_id": "college_1",
        "nl_queries": [
            "How many courses are offered?",
            "What are the number of different course codes?",
            "What is the total number of courses available?",
            "How many unique course codes are there?",
            "Can you tell me the count of distinct courses that are offered?"
        ],
        "ref_sql": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.COURSE\"\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.COURSE.CRS_CODE\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_crs_code: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_crs_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1977,
        "db_id": "architecture",
        "nl_queries": [
            "What is the most common mill type, and how many are there?",
            "What mill type is the most prevalent, and what is the total count of that type?",
            "Which type of mill is the most frequently found, and how many do we have?",
            "Identify the most common type of mill and provide the number of mills of that type.",
            "What is the predominant mill type, and how many units exist of that type?"
        ],
        "ref_sql": "SELECT TYPE , count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.architect.aggregate([\n  { $unwind: \"$mill\" },\n  { $group: { _id: \"$mill.type\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  { $project: { _id: 0, type: \"$_id\", count: 1 } }\n]);\n"
    },
    {
        "record_id": 165,
        "db_id": "election",
        "nl_queries": [
            "Show the people that have been comptroller the most times and the corresponding number of times.",
            "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
            "Identify the individual who has held the position of comptroller the highest number of times along with the total count.",
            "Who has served most often as comptroller? Please provide their name and the number of times they have served.",
            "Find out which person has been comptroller the most frequently and include the count of their terms."
        ],
        "ref_sql": "SELECT Comptroller , COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.party.aggregate([\n  {\n    $group: {\n      _id: \"$Comptroller\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Comptroller: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4174,
        "db_id": "icfp_1",
        "nl_queries": [
            "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
            "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.",
            "What are the titles of papers authored by \"Ohori\" as the first author, affiliated with an institution in Japan?",
            "List the titles of papers for which the first author is \"Ohori\" and has a connection to an institution located in Japan.",
            "Provide the titles of papers where the primary author is \"Ohori\" and is affiliated with a Japanese institution."
        ],
        "ref_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"Authorship.instID\",\n      foreignField: \"instID\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.lname\": \"Ohori\",\n      \"Docs2.country\": \"Japan\",\n      \"Authorship.authOrder\": 1\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3571,
        "db_id": "network_2",
        "nl_queries": [
            "Find the name of people whose age is greater than any engineer sorted by their age.",
            "What is the name of all the people who are older than at least one engineer? Order them by age.",
            "List the names of people who are older than any engineer, arranged by their age.",
            "Identify all individuals whose age exceeds that of at least one engineer, sorted by their age in ascending order.",
            "Retrieve the names of those who are older than one or more engineers, and display them in order of age."
        ],
        "ref_sql": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      job: \"engineer\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      engineerAges: { $addToSet: \"$age\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Person\",\n      pipeline: [\n        {\n          $match: {\n            age: { $exists: true }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      engineerAges: 1,\n      person: \"$Docs1\"\n    }\n  },\n  {\n    $match: {\n      $expr: {\n        $gt: [\n          \"$person.age\",\n          { $min: \"$engineerAges\" }\n        ]\n      }\n    }\n  },\n  {\n    $sort: {\n      \"person.age\": 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$person.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 717,
        "db_id": "entrepreneur",
        "nl_queries": [
            "List the names of people that are not entrepreneurs.",
            "What are the names of people who are not entrepreneurs?",
            "Retrieve the names of individuals who do not have any entrepreneurial involvement.",
            "Can you provide the names of persons that aren't classified as entrepreneurs?",
            "Show me the names of those who are not involved in entrepreneurship."
        ],
        "ref_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      $or: [\n        { entrepreneur: { $exists: false } },\n        { entrepreneur: { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4008,
        "db_id": "scientist_1",
        "nl_queries": [
            "Find the total hours of all projects.",
            "What is the total number of hours for all projects?",
            "Calculate the overall total of hours dedicated to all projects.",
            "What is the cumulative number of hours spent on all projects?",
            "Determine the sum of hours recorded for every project."
        ],
        "ref_sql": "SELECT sum(hours) FROM projects",
        "MQL": "db.Projects.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_hours: {\n        $sum: \"$Hours\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_hours: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 259,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of bank branches that provided some loans.",
            "What are the names of the different banks that have provided loans?",
            "List the names of bank branches that have issued at least one loan.",
            "What bank branch names are associated with customers who hold loans?",
            "Identify the names of branches that provide loan services."
        ],
        "ref_sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id",
        "MQL": "db.bank.aggregate([\n  {\n    $match: {\n      loan: { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      bname: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2696,
        "db_id": "game_injury",
        "nl_queries": [
            "How many games are held after season 2007?",
            "What is the total number of games played since the 2007 season?",
            "How many games have taken place following the conclusion of the 2007 season?",
            "Count the number of games that occurred after season 2007.",
            "How many matches were held post-2007 season?"
        ],
        "ref_sql": "SELECT count(*) FROM game WHERE season > 2007",
        "MQL": "db.stadium.aggregate([\n  {\n    $unwind: \"$game\"\n  },\n  {\n    $match: {\n      \"game.Season\": { $gt: 2007 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3951,
        "db_id": "student_assessment",
        "nl_queries": [
            "List the id of students who never attends courses?",
            "What are the ids of every student who has never attended a course?",
            "Provide the IDs of students who have not participated in any courses.",
            "Can you list the student IDs for those who have not attended any course sessions?",
            "What are the IDs of students who lack any course attendance records?"
        ],
        "ref_sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: {\n      path: \"$Students.Student_Course_Registrations\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $unwind: {\n      path: \"$Students.Student_Course_Registrations.Student_Course_Attendance\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$Students.student_id\",\n      count_attendance: {\n        $sum: {\n          $cond: {\n            if: { $not: [\"$Students.Student_Course_Registrations.Student_Course_Attendance\"] },\n            then: 0,\n            else: 1\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      count_attendance: 0\n    }\n  },\n  {\n    $project: {\n      student_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3293,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the id and star rating of each hotel, ordered by its price from low to high.",
            "Find the id and star rating of each hotel and sort them in increasing order of price.",
            "List each hotel's ID along with its star rating, arranged by price from the lowest to the highest.",
            "Display the hotel ID and star rating for all hotels, sorted in ascending order according to price.",
            "Provide the hotel ID and associated star rating for each hotel, ordered by price in increasing order."
        ],
        "ref_sql": "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "MQL": "db.Ref_Hotel_Star_Ratings.aggregate([\n  {\n    $unwind: \"$Hotels\"\n  },\n  {\n    $sort: {\n      \"Hotels.price_range\": 1\n    }\n  },\n  {\n    $project: {\n      hotel_id: \"$Hotels.hotel_id\",\n      star_rating_code: \"$star_rating_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3660,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the name of the products with a price less than or equal to $200.",
            "What are the names of products with price at most 200?",
            "List the names of products priced at $200 or less.",
            "Retrieve the names of products whose prices do not exceed $200.",
            "What are the names of the products that cost no more than $200?"
        ],
        "ref_sql": "SELECT name FROM products WHERE price <= 200",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.Price\": { $lte: 200 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Products.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 653,
        "db_id": "perpetrator",
        "nl_queries": [
            "What are the names of people in ascending order of height?",
            "Can you provide the names of individuals sorted by their height from shortest to tallest?",
            "List the names of people arranged in increasing order of height.",
            "What are the names of individuals sorted by height in ascending order?",
            "Show me the names of people ordered by their height, starting from the smallest."
        ],
        "ref_sql": "SELECT Name FROM People ORDER BY Height ASC",
        "MQL": "db.people.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Height\": 1 });\n"
    },
    {
        "record_id": 3619,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Find the names of employees who never won any award in the evaluation.",
            "What are the names of the employees who never received any evaluation?",
            "List the names of employees who have not received any awards in their evaluations.",
            "What names belong to employees who lack any evaluation records?",
            "Identify the employees' names that have never been awarded in any evaluation."
        ],
        "ref_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "MQL": "db.employee.aggregate([\n  {\n    $match: {\n      evaluation: { $exists: true, $eq: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 738,
        "db_id": "singer",
        "nl_queries": [
            "Show the name of singers whose birth year is either 1948 or 1949?",
            "What are the names of the singers whose birth years are either 1948 or 1949?",
            "List the names of singers born in either 1948 or 1949.",
            "Provide the names of the singers who were born in the years 1948 or 1949.",
            "Can you give me the names of singers with birth years of 1948 or 1949?"
        ],
        "ref_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "MQL": "db.singer.find(\n  {\n    Birth_Year: { $in: [1948, 1949] }\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 2683,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "How many kinds of enzymes are there?",
            "What is the total count of enzymes?",
            "What is the total number of different enzymes available?",
            "Can you tell me how many distinct enzyme types exist?",
            "How many enzymes are recorded in the database?"
        ],
        "ref_sql": "SELECT count(*) FROM enzyme",
        "MQL": "db.enzyme.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 398,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What are the different location codes for documents?",
            "Give me all the distinct location codes for documents.",
            "Can you provide a list of unique location codes for the documents?",
            "What are all the distinct codes representing document locations?",
            "Show me the various location codes associated with the documents."
        ],
        "ref_sql": "SELECT DISTINCT location_code FROM Document_locations",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $unwind: \"$All_Documents.Document_Locations\"\n  },\n  {\n    $group: {\n      _id: \"$All_Documents.Document_Locations.Location_Code\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location_Code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1263,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
            "Can you provide all the fault descriptions along with their status from the recorded logs?",
            "Show me all recorded fault descriptions and their corresponding statuses from the logs.",
            "What are the descriptions of faults and their statuses that have been logged?",
            "List all fault descriptions and the status of each fault logged in the records."
        ],
        "ref_sql": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { \n    $unwind: \"$Assets\" \n  },\n  { \n    $unwind: \"$Assets.Fault_Log\" \n  },\n  { \n    $unwind: \"$Assets.Fault_Log.Fault_Log_Parts\" \n  },\n  { \n    $project: {\n      _id: 0,\n      fault_description: \"$Assets.Fault_Log.fault_description\",\n      fault_status: \"$Assets.Fault_Log.Fault_Log_Parts.fault_status\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2428,
        "db_id": "company_1",
        "nl_queries": [
            "Find the number of employees of each gender whose salary is lower than 50000.",
            "How many employees belong to each gender with a salary below 50,000?",
            "Count the number of male and female employees earning less than $50,000.",
            "List the number of employees by gender whose salaries fall under the 50,000 mark.",
            "Determine the count of employees in each gender category that have a salary less than 50,000."
        ],
        "ref_sql": "SELECT count(*) , sex FROM employee WHERE salary < 50000 GROUP BY sex",
        "MQL": "db.employee.aggregate([\n  {\n    $match: {\n      Salary: { $lt: 50000 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Sex\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Sex: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 862,
        "db_id": "orchestra",
        "nl_queries": [
            "What are the record companies of orchestras in descending order of years in which they were founded?",
            "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "List the record companies of orchestras ordered by the years they were established, starting with the most recent.",
            "Provide the record companies affiliated with orchestras, sorted in descending order according to their founding years.",
            "Show the record companies of orchestras, arranged from the most recently founded to the oldest."
        ],
        "ref_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $sort: {\n      \"orchestra.Year_of_Founded\": -1\n    }\n  },\n  {\n    $group: {\n      _id: \"$orchestra.Record_Company\"\n    }\n  },\n  {\n    $project: {\n      Record_Company: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Record_Company: -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3082,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of the department which has the highest average salary of professors.",
            "Which department has the highest average instructor salary?",
            "Identify the department that offers the highest average salary for its instructors.",
            "What is the name of the department with the greatest average salary for professors?",
            "Which academic department has the highest average salary for faculty members?"
        ],
        "ref_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $group: {\n      _id: \"$dept_name\",\n      acg_salary: { $avg: \"$instructor.salary\" }\n    }\n  },\n  {\n    $sort: { acg_salary: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      dept_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2349,
        "db_id": "club_1",
        "nl_queries": [
            "What are the names of all clubs?",
            "Give me the name of each club.",
            "List all the club names available.",
            "Show me the names of every club.",
            "Can you provide a list of all clubs' names?"
        ],
        "ref_sql": "SELECT clubname FROM club",
        "MQL": "db.Club.find({}, { ClubName: 1, _id: 0 });\n"
    },
    {
        "record_id": 568,
        "db_id": "roller_coaster",
        "nl_queries": [
            "What are the lengths and heights of roller coasters?",
            "Can you provide the lengths and heights of the roller coasters?",
            "What lengths and heights do roller coasters have?",
            "List the lengths and heights of the various roller coasters.",
            "Show me the dimensions (lengths and heights) of the roller coasters."
        ],
        "ref_sql": "SELECT LENGTH , Height FROM roller_coaster",
        "MQL": "db.country.aggregate([\n  { $unwind: \"$roller_coaster\" },\n  { $project: { \"Length\": \"$roller_coaster.Length\", \"Height\": \"$roller_coaster.Height\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3446,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What the smallest version number and its template type code?",
            "Return the lowest version number, along with its corresponding template type code.",
            "What is the minimum version number and the associated template type code?",
            "Provide the lowest version number together with its related template type code.",
            "Can you show me the smallest version number along with the corresponding template type code?"
        ],
        "ref_sql": "SELECT min(Version_Number) , template_type_code FROM Templates",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $group: {\n      _id: null,\n      min_Version_Number: { $min: \"$Templates.Version_Number\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Ref_Template_Types\",\n      let: { min_Version_Number: \"$min_Version_Number\" },\n      pipeline: [\n        {\n          $unwind: \"$Templates\"\n        },\n        {\n          $match: {\n            $expr: { $eq: [\"$Templates.Version_Number\", \"$$min_Version_Number\"] }\n          }\n        },\n        {\n          $project: {\n            Template_Type_Code: \"$Template_Type_Code\",\n            min_Version_Number: \"$Templates.Version_Number\",\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      min_Version_Number: \"$Docs1.min_Version_Number\",\n      Template_Type_Code: \"$Docs1.Template_Type_Code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1651,
        "db_id": "election",
        "nl_queries": [
            "What are the names of parties that have both delegates on \"Appropriations\" committee and",
            "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
            "Which political parties have representatives serving on both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
            "What parties are represented in both the \"Appropriations\" and \"Economic Matters\" committees?",
            "Identify the names of parties that include delegates on the \"Appropriations\" committee as well as the \"Economic Matters\" committee."
        ],
        "ref_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"",
        "MQL": "db.party.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"election.Committee\": \"Appropriations\" },\n        { \"election.Committee\": \"Economic Matters\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Party\",\n      committees: { $addToSet: \"$election.Committee\" }\n    }\n  },\n  {\n    $match: {\n      committees: { $all: [\"Appropriations\", \"Economic Matters\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Party: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2612,
        "db_id": "icfp_1",
        "nl_queries": [
            "How many papers have \"Atsushi Ohori\" published?",
            "How many papers are \"Atsushi Ohori\" the author of?",
            "What is the total number of papers authored by Atsushi Ohori?",
            "How many research papers has Atsushi Ohori written?",
            "Can you tell me the number of publications by Atsushi Ohori?"
        ],
        "ref_sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\"",
        "MQL": "db.Authors.aggregate([\n  {\n    $match: {\n      fname: \"Atsushi\",\n      lname: \"Ohori\"\n    }\n  },\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $lookup: {\n      from: \"Papers\",\n      localField: \"Authorship.paperID\",\n      foreignField: \"paperID\",\n      as: \"Doc1\"\n    }\n  },\n  {\n    $unwind: \"$Doc1\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3663,
        "db_id": "program_share",
        "nl_queries": [
            "find the name of the program that was launched most recently.",
            "Which program was launched most recently? Return the program name.",
            "What is the name of the most recently launched program?",
            "Identify the program that had the latest launch date and provide its name.",
            "Which program has the most recent launch? Please give the title of that program."
        ],
        "ref_sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "MQL": "db.program.aggregate([\n  {\n    $sort: { Launch: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3596,
        "db_id": "company_office",
        "nl_queries": [
            "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
            "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
            "List the names of buildings that have an \"on-hold\" status, sorted by the number of stories in increasing order.",
            "Show the names of buildings currently marked as \"on-hold\" and arrange them by their stories in ascending order.",
            "Retrieve the names of buildings with \"on-hold\" status and sort these results based on the ascending count of stories."
        ],
        "ref_sql": "SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY Stories ASC",
        "MQL": "db.buildings.aggregate([\n  {\n    $match: {\n      Status: \"on-hold\"\n    }\n  },\n  {\n    $sort: {\n      Stories: 1\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4042,
        "db_id": "csu_1",
        "nl_queries": [
            "Find the campus fee of \"San Jose State University\" in year 2000.",
            "What is the campus fee in the year 2000 for San Jose State University?",
            "What is the fee for attending San Jose State University in the year 2000?",
            "Retrieve the campus fee for San Jose State University during the year 2000.",
            "Show me the campus fee applicable to San Jose State University for the year 2000."
        ],
        "ref_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Jose State University\",\n      Year: 2000\n    }\n  },\n  {\n    $project: {\n      CampusFee: {\n        $arrayElemAt: [\"$csu_fees.CampusFee\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1462,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
            "What is the response received date for the document described as Regular that was granted more than 100 dollars?",
            "List the dates when responses were received for documents marked as 'Regular' or linked to grants exceeding 100 dollars.",
            "Can you provide the response received dates for documents identified as Regular or those associated with grants valued over 100?",
            "What are the dates when responses were received for documents categorized as 'Regular' or for grants that are more than 100 in amount?"
        ],
        "ref_sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Grants\"\n  },\n  {\n    $unwind: \"$Organisations.Grants.Documents\"\n  },\n  {\n    $lookup: {\n      from: \"Document_Types\",\n      localField: \"Organisations.Grants.Documents.document_type_code\",\n      foreignField: \"document_type_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Docs1.document_description\": \"Regular\" },\n        { \"Organisations.Grants.grant_amount\": { $gt: 100 } }\n      ]\n    }\n  },\n  {\n    $project: {\n      response_received_date: \"$Organisations.Grants.Documents.response_received_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3998,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the total enrollment number of all colleges?",
            "How many students are enrolled in college?",
            "How many students are there in total at all colleges?",
            "What is the combined enrollment figure for every college?",
            "Can you provide the overall number of enrollments across all colleges?"
        ],
        "ref_sql": "SELECT sum(enr) FROM College",
        "MQL": "db.College.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_enr: { $sum: \"$enr\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_enr: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1197,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
            "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.",
            "Retrieve the customer IDs of those who have orders with statuses \"On Road\" and \"Shipped\".",
            "List the IDs of customers whose orders include both \"On Road\" and \"Shipped\" statuses.",
            "Identify customers that have an order marked as \"On Road\" and another as \"Shipped\"; provide their customer IDs."
        ],
        "ref_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $match: {\n      \"Orders.order_status\": {\n        $in: [\"On Road\", \"Shipped\"]\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      order_statuses: {\n        $addToSet: \"$Orders.order_status\"\n      }\n    }\n  },\n  {\n    $match: {\n      order_statuses: {\n        $all: [\"On Road\", \"Shipped\"]\n      }\n    }\n  },\n  {\n    $project: {\n      customer_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 38,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
            "What are the average prices of products, grouped by manufacturer code?",
            "Provide the average product price for each manufacturer, displaying only their codes.",
            "What average prices do the products have when sorted by manufacturer code?",
            "List out the average prices of products associated with each manufacturer, showing their respective codes."
        ],
        "ref_sql": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$Code\",\n      avg_Price: { $avg: \"$Products.Price\" }\n    }\n  },\n  {\n    $project: {\n      Manufacturer: \"$_id\",\n      avg_Price: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1211,
        "db_id": "car_1",
        "nl_queries": [
            "For model volvo, how many cylinders does the car with the least accelerate have?",
            "For a volvo model, how many cylinders does the version with least accelerate have?",
            "How many cylinders does the Volvo model with the lowest acceleration feature?",
            "For the Volvo car model, what is the cylinder count of the version that accelerates the slowest?",
            "In terms of acceleration, how many cylinders does the Volvo model exhibit for the one that accelerates the least?"
        ],
        "ref_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.model_list.car_names.Model\": \"volvo\"\n    }\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $sort: {\n      \"countries.car_makers.model_list.car_names.cars_data.Accelerate\": 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Cylinders: \"$countries.car_makers.model_list.car_names.cars_data.Cylinders\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4165,
        "db_id": "store_product",
        "nl_queries": [
            "Find the city with the most number of stores.",
            "What is the city with the most number of flagship stores?",
            "Which city hosts the largest number of stores?",
            "Identify the city that has the highest quantity of retail stores.",
            "What city is home to the greatest number of flagship stores?"
        ],
        "ref_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.store.aggregate([\n  {\n    $unwind: \"$store_district\"\n  },\n  {\n    $lookup: {\n      from: \"district\",\n      localField: \"store_district.District_ID\",\n      foreignField: \"District_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Docs1.Headquartered_City\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Headquartered_City: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1398,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
            "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
            "List the names of doctors who are connected to the Surgery or Psychiatry departments.",
            "Can you provide the names of physicians linked to either the Surgery or the Psychiatry department?",
            "Identify the doctors affiliated with the Surgery or Psychiatry departments and give me their names."
        ],
        "ref_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Affiliated_With\"\n  },\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"Affiliated_With.Department\",\n      foreignField: \"Department.DepartmentID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Department.Name\": { $in: [\"Surgery\", \"Psychiatry\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$EmployeeID\",\n      Name: { $first: \"$Name\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1642,
        "db_id": "gymnast",
        "nl_queries": [
            "List the names of gymnasts in ascending order by their heights.",
            "What are the names of gymnasts, ordered by their heights ascending?",
            "Provide a list of gymnast names, sorted by height in increasing order.",
            "Show the names of gymnasts arranged in ascending order according to their height.",
            "Retrieve the names of gymnasts listed by their height from shortest to tallest."
        ],
        "ref_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      gymnast: { $ne: [] }\n    }\n  },\n  {\n    $sort: {\n      Height: 1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3472,
        "db_id": "race_track",
        "nl_queries": [
            "Show name, class, and date for all races.",
            "What are the names, classes, and dates for all races?",
            "List the names, classes, and dates associated with all races.",
            "Provide the names, classes, and dates for every race recorded.",
            "Can you retrieve the names, classifications, and dates of all races?"
        ],
        "ref_sql": "SELECT name , CLASS , date FROM race",
        "MQL": "db.track.aggregate([\n  {\n    $unwind: \"$race\"\n  },\n  {\n    $project: {\n      Name: \"$race.Name\",\n      Class: \"$race.Class\",\n      Date: \"$race.Date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2669,
        "db_id": "college_1",
        "nl_queries": [
            "How many courses are offered by the Computer Info. Systems department?",
            "How many courses does the department of Computer Information Systmes offer?",
            "What is the total number of courses available in the Computer Info. Systems department?",
            "Can you tell me how many courses the Computer Information Systems department provides?",
            "How many classes are offered by the department of Computer Info. Systems?"
        ],
        "ref_sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\"",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"Computer Info. Systems\"\n    }\n  },\n  {\n    $project: {\n      count: { $size: \"$DEPARTMENT.COURSE\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 415,
        "db_id": "tracking_software_problems",
        "nl_queries": [
            "List all the distinct product names ordered by product id?",
            "What is the list of distinct product names sorted by product id?",
            "Provide a list of all unique product names sorted by their corresponding product IDs.",
            "Can you show me the distinct product names arranged in order of product ID?",
            "Generate a list of unique product names, organized by ascending product ID."
        ],
        "ref_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
        "MQL": "db.Product.aggregate([\n  {\n    $group: {\n      _id: \"$product_id\",\n      product_name: { $first: \"$product_name\" }\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1815,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the names of all reviewers who have contributed three or more ratings.",
            "What are the names of all reviewers that have rated 3 or more movies?",
            "List the names of reviewers who have submitted at least three movie ratings.",
            "Can you provide the names of reviewers that have rated three or more films?",
            "Retrieve the names of all reviewers who have given ratings for three or more movies."
        ],
        "ref_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: \"$rID\",\n      name: { $first: \"$name\" },\n      ratingCount: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      ratingCount: { $gte: 3 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1053,
        "db_id": "perpetrator",
        "nl_queries": [
            "What are the names of perpetrators?",
            "Can you provide a list of names of all individuals identified as perpetrators?",
            "Please show me the names of people who are categorized as perpetrators.",
            "What names are associated with individuals labeled as perpetrators?",
            "List the names of all the perpetrators present in the database."
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID",
        "MQL": "db.people.find({\n  \"perpetrator\": { $exists: true, $ne: [] }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2190,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the average number of followers for the users who had some tweets.",
            "What is the average follower count for users who have posted tweets?",
            "Calculate the mean number of followers for users that have tweets available.",
            "Determine the average number of followers for users with at least one tweet.",
            "Find the average follower figures of users who have engaged in tweeting."
        ],
        "ref_sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "MQL": "db.user_profiles.aggregate([\n  {\n    $match: {\n      tweets: { $exists: true, $not: { $size: 0 } }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_followers: { $avg: \"$followers\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_followers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1349,
        "db_id": "bike_1",
        "nl_queries": [
            "For each station, return its longitude and the average duration of trips that started from the station.",
            "For each start station id, what is its name, longitude and average duration of trips started there?",
            "Provide the longitude and average trip duration for each starting station.",
            "What are the names, longitudes, and average durations of trips from each station?",
            "For every start station ID, return its associated name, longitude, and the average duration of trips that commenced there."
        ],
        "ref_sql": "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
        "MQL": "db.trip.aggregate([\n  {\n    $group: {\n      _id: \"$start_station_id\",\n      avg_trip_duration: { $avg: \"$duration\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      name: { $arrayElemAt: [\"$Docs1.name\", 0] },\n      long: { $arrayElemAt: [\"$Docs1.long\", 0] },\n      avg_trip_duration: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3109,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "List all document ids and receipt dates of documents.",
            "Retrieve all document IDs along with their corresponding receipt dates.",
            "Show me the document IDs and their receipt dates for all documents.",
            "Provide a list of document IDs and the dates they were received.",
            "Can you list the IDs of the documents and their associated receipt dates?"
        ],
        "ref_sql": "SELECT document_id , receipt_date FROM Documents;",
        "MQL": "db.Ref_Shipping_Agents.aggregate([\n  { $unwind: \"$Documents\" },\n  { $project: { \"document_id\": \"$Documents.document_id\", \"receipt_date\": \"$Documents.receipt_date\", \"_id\": 0 } }\n])\n"
    },
    {
        "record_id": 3842,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all publishers which do not have a book in 1989.",
            "Which publishers did not publish a book in 1989?",
            "List all publishers that did not release any books in 1989.",
            "Identify which publishers were inactive in terms of book publishing in 1989.",
            "Can you provide a list of publishers with no book publications during 1989?"
        ],
        "ref_sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989",
        "MQL": "db.book_club.aggregate([\n  {\n    $match: {\n      Year: 1989\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      publishersIn1989: {\n        $addToSet: \"$Publisher\"\n      }\n    }\n  },\n  {\n    $lookup: {\n      from: \"book_club\",\n      pipeline: [\n        {\n          $group: {\n            _id: null,\n            allPublishers: {\n              $addToSet: \"$Publisher\"\n            }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      publishersIn1989: 1,\n      Docs1: \"$Docs1.allPublishers\"\n    }\n  },\n  {\n    $project: {\n      publishersNotIn1989: {\n        $setDifference: [\"$Docs1\", \"$publishersIn1989\"]\n      }\n    }\n  },\n  {\n    $unwind: \"$publishersNotIn1989\"\n  },\n  {\n    $project: {\n      Publisher: \"$publishersNotIn1989\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 744,
        "db_id": "match_season",
        "nl_queries": [
            "What are the names of teams that do no have match season record?",
            "Return the names of teams that have no match season record.",
            "List the names of teams that do not have any recorded match season data.",
            "Provide the names of teams that lack a record for the match season.",
            "Identify the teams that are missing match season records and return their names."
        ],
        "ref_sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "MQL": "db.team.find(\n  {\n    $or: [\n      { match_season: { $exists: false } },\n      { match_season: { $size: 0 } }\n    ]\n  },\n  {\n    Name: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3965,
        "db_id": "world_1",
        "nl_queries": [
            "What is the total number of people living in the nations that do not use English?",
            "How many people live in countries that do not speak English?",
            "How many individuals reside in countries where English is not an official language?",
            "What is the combined population of nations that do not have English as a language?",
            "Calculate the total number of inhabitants in countries that do not recognize English as an official language."
        ],
        "ref_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      \"countrylanguage.Language\": { $ne: \"English\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_Population: { $sum: \"$Population\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Population: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1465,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the role of the employee named Koby?",
            "Can you tell me the role held by the employee named Koby?",
            "What role does the employee Koby have in the organization?",
            "Please provide the role description for the employee referred to as Koby.",
            "What is Koby's job title or role within the company?"
        ],
        "ref_sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
        "MQL": "db.Roles.find({ \"Employees.employee_name\": \"Koby\" }, { \"role_description\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2535,
        "db_id": "real_estate_properties",
        "nl_queries": [
            "How many available features are there in total?",
            "What is the total number of available features?",
            "Can you tell me how many features are available overall?",
            "How many features are there in total that are currently available?",
            "What is the complete count of all the available features?"
        ],
        "ref_sql": "SELECT count(*) FROM Other_Available_Features",
        "MQL": "db.Ref_Feature_Types.aggregate([\n  { $unwind: \"$Other_Available_Features\" },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 346,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What are the distinct visit dates?",
            "Find all the distinct visit dates.",
            "Can you provide a list of unique visit dates?",
            "What are all the different dates when visits took place?",
            "Show me the various distinct dates of the visits."
        ],
        "ref_sql": "SELECT DISTINCT Visit_Date FROM VISITS",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Visits\"\n  },\n  {\n    $group: {\n      _id: \"$Tourist_Attractions.Visits.Visit_Date\"\n    }\n  },\n  {\n    $project: {\n      Visit_Date: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3084,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of department has the highest amount of students?",
            "What is the name of the deparment with the highest enrollment?",
            "Which department has the largest number of students enrolled?",
            "Identify the department with the most student enrollments.",
            "What is the name of the department that boasts the highest student population?"
        ],
        "ref_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $project: {\n      dept_name: 1,\n      count_student: { $size: \"$student\" }\n    }\n  },\n  {\n    $sort: { count_student: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, dept_name: 1 }\n  }\n]);\n"
    },
    {
        "record_id": 2223,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the average and maximum rating of all reviews.",
            "What are the average and highest ratings for all the reviews?",
            "Give me the average rating and the maximum rating from all reviews.",
            "Calculate the average and the maximum review rating across all entries.",
            "Determine the overall average and peak rating from all review evaluations."
        ],
        "ref_sql": "SELECT avg(rating) , max(rating) FROM review",
        "MQL": "db.item.aggregate([\n  { $unwind: \"$review\" },\n  {\n    $group: {\n      _id: null,\n      avg_rating: { $avg: \"$review.rating\" },\n      max_rating: { $max: \"$review.rating\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_rating: 1,\n      max_rating: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3688,
        "db_id": "college_2",
        "nl_queries": [
            "What is the name of the student who has the highest total credits in the History department.",
            "Give the name of the student in the History department with the most credits.",
            "Who is the student with the highest number of total credits in the History department?",
            "Identify the student in the History department who has accumulated the most credits.",
            "Name the student with the greatest total credits enrolled in the History department."
        ],
        "ref_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $match: { \"dept_name\": \"History\" }\n  },\n  {\n    $project: {\n      name: \"$student.name\",\n      tot_cred: \"$student.tot_cred\"\n    }\n  },\n  {\n    $sort: { \"tot_cred\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, name: 1 }\n  }\n]);\n"
    },
    {
        "record_id": 3449,
        "db_id": "network_2",
        "nl_queries": [
            "What is minimum age for different job title?",
            "How old is the youngest person for each job?",
            "What is the youngest age among people in different job categories?",
            "Can you tell me the minimum age of individuals for each type of job?",
            "What age corresponds to the youngest individual for every job title?"
        ],
        "ref_sql": "SELECT min(age) , job FROM Person GROUP BY job",
        "MQL": "db.Person.aggregate([\n  {\n    $group: {\n      _id: \"$job\",\n      min_age: { $min: \"$age\" }\n    }\n  },\n  {\n    $project: {\n      job: \"$_id\",\n      min_age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1182,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of customers who have more than one loan.",
            "What are the names of customers who have taken out more than one loan?",
            "List the names of customers that have more than one active loan.",
            "Provide the names of customers who hold multiple loans.",
            "Show me the names of customers with over one loan."
        ],
        "ref_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count(*) > 1",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $project: {\n      cust_name: \"$customer.cust_name\",\n      count_loan: {\n        $size: \"$customer.loan\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_loan: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      cust_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3777,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find the number of records of each policy type and its type code.",
            "For each policy type, return its type code and its count in the record.",
            "Count how many records exist for each type of policy and their corresponding type codes.",
            "List the count of records grouped by policy type along with their type codes.",
            "Retrieve the number of entries for every policy type and display its associated type code."
        ],
        "ref_sql": "SELECT policy_type_code , count(*) FROM policies GROUP BY policy_type_code",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $group: {\n      _id: \"$Policies.Policy_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Policy_Type_Code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 285,
        "db_id": "bike_1",
        "nl_queries": [
            "What are the id and name of the stations that have ever had more than 12 bikes available?",
            "What are the different ids and names of the stations that have had more than 12 bikes available?",
            "Can you provide the ids and names of stations that have ever had over 12 bikes available?",
            "Please list the unique station ids and names where the number of available bikes has exceeded 12 at any time.",
            "What are the ids and names of the stations that have had more than 12 bicycles available at any time?"
        ],
        "ref_sql": "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "MQL": "db.station.aggregate([\n  {\n    $unwind: \"$status\"\n  },\n  {\n    $match: {\n      \"status.bikes_available\": { $gt: 12 }\n    }\n  },\n  {\n    $group: {\n      _id: {\n        id: \"$id\",\n        name: \"$name\"\n      }\n    }\n  },\n  {\n    $project: {\n      id: \"$_id.id\",\n      name: \"$_id.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3261,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the number of customers for each gender.",
            "How many customers are there of each gender?",
            "Can you provide the count of customers categorized by gender?",
            "What is the total number of customers for each gender category?",
            "How many customers exist for each gender type?"
        ],
        "ref_sql": "SELECT gender , count(*) FROM Customers GROUP BY gender",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$gender\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      gender: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1948,
        "db_id": "train_station",
        "nl_queries": [
            "Show all train names and times in stations in London in descending order by train time.",
            "List the names and times of all trains that operate from stations in London, arranged from the latest to the earliest time.",
            "Provide the train names and their corresponding times for services departing from London stations, sorted in descending order by time.",
            "Retrieve all train names along with their schedules at London stations, displayed in order of time from highest to lowest.",
            "Show the schedule of trains, including their names and times, for stations located in London, sorted by time in descending fashion."
        ],
        "ref_sql": "SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC",
        "MQL": "db.train.aggregate([\n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"Train_ID\",\n      foreignField: \"train_station.Train_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Location\": \"London\"\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"Time\": 1,\n      \"_id\": 0\n    }\n  },\n  {\n    $sort: {\n      \"Time\": -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3132,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the description of document status code 'working'?",
            "Can you provide the description for the document status with the code 'working'?",
            "What does the document status code 'working' refer to?",
            "Please tell me the description associated with the 'working' document status code.",
            "What is the meaning of the document status code 'working'?"
        ],
        "ref_sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";",
        "MQL": "db.Ref_Document_Status.find({\n  \"document_status_code\": \"working\"\n}, { \"document_status_description\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2945,
        "db_id": "tvshow",
        "nl_queries": [
            "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "What are the countries that are not playing cartoons written by Todd Casey?",
            "In which countries do TV channels not feature any cartoons authored by Todd Casey?",
            "Can you list the countries without cartoons written by Todd Casey airing on their TV channels?",
            "What countries' television channels do not showcase cartoons created by Todd Casey?"
        ],
        "ref_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: {\n      path: \"$Cartoon\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $match: {\n      $or: [\n        { \"Cartoon.Written_by\": { $ne: \"Todd Casey\" } },\n        { \"Cartoon\": { $exists: false } }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Country\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"TV_Channel\",\n      let: { country: \"$_id\" },\n      pipeline: [\n        { $unwind: \"$Cartoon\" },\n        { $match: { $expr: { $and: [ { $eq: [ \"$Country\", \"$$country\" ] }, { $eq: [ \"$Cartoon.Written_by\", \"Todd Casey\" ] } ] } } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Country: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1119,
        "db_id": "music_1",
        "nl_queries": [
            "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
            "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
            "Can you tell me the name and nationality of the artist who has a song titled with \"love\"?",
            "Who are the artists that created a song containing \"love\" in the title, and what countries do they hail from?",
            "Please provide the names and countries of the artists who have released songs that include \"love\" in their titles."
        ],
        "ref_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$artist\"\n  },\n  {\n    $unwind: \"$artist.song\"\n  },\n  {\n    $match: {\n      \"artist.song.song_name\": { $regex: \"love\", $options: \"i\" }\n    }\n  },\n  {\n    $project: {\n      artist_name: \"$artist.artist_name\",\n      country: \"$artist.country\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1878,
        "db_id": "movie_1",
        "nl_queries": [
            "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
            "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?",
            "What titles and directors belong to films that have a higher star rating than the average for movies directed by James Cameron?",
            "List the titles and directors of all films that received a rating exceeding the mean film rating of James Cameron's works.",
            "Can you provide the titles and directors of movies with ratings above the average star rating of James Cameron's movies?"
        ],
        "ref_sql": "SELECT T2.title , T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")",
        "MQL": "db.Movie.aggregate([\n  {\n    $match: {\n      director: \"James Cameron\"\n    }\n  },\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_stars: { $avg: \"$Rating.stars\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_stars: 1\n    }\n  },\n  {\n    $lookup: {\n      from: \"Movie\",\n      let: { avg_stars: \"$avg_stars\" },\n      pipeline: [\n        { $unwind: \"$Rating\" },\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$Rating.stars\", \"$$avg_stars\"]\n            }\n          }\n        },\n        {\n          $project: {\n            title: 1,\n            director: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: {\n      newRoot: \"$Docs1\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3107,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "List document IDs, document names, and document descriptions for all documents.",
            "What are the ids, names, and descriptions for all documents?",
            "Provide a list of all document IDs along with their corresponding names and descriptions.",
            "Can you show me the IDs, names, and descriptions of every document available?",
            "Please retrieve the document IDs, names, and descriptions for all existing documents."
        ],
        "ref_sql": "SELECT document_id , document_name , document_description FROM Documents",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $project: {\n      Document_ID: \"$Templates.Documents.Document_ID\",\n      Document_Name: \"$Templates.Documents.Document_Name\",\n      Document_Description: \"$Templates.Documents.Document_Description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2143,
        "db_id": "formula_1",
        "nl_queries": [
            "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
            "What is the average fastest lap speed for the Monaco Grand Prix in 2008?",
            "What was the average speed of the fastest lap in the 2008 Monaco Grand Prix?",
            "Can you tell me the average fastest lap speed recorded during the Monaco Grand Prix in 2008?",
            "What is the mean speed of the fastest laps in the Monaco Grand Prix held in 2008?"
        ],
        "ref_sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      \"races.name\": \"Monaco Grand Prix\",\n      \"races.year\": 2008\n    }\n  },\n  {\n    $unwind: \"$races.results\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_results_fastestlapspeed: {\n        $avg: {\n          $convert: {\n            input: \"$races.results.fastestLapSpeed\",\n            to: \"double\",\n            onError: 0,\n            onNull: 0\n          }\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_results_fastestlapspeed: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2270,
        "db_id": "soccer_2",
        "nl_queries": [
            "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
            "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
            "Provide the names of colleges with enrollments exceeding 18,000, organized in alphabetical order.",
            "Retrieve the names of all colleges that have more than 18,000 students, sorted by the college name in ascending order.",
            "Can you list the colleges that enroll over 18,000 students, sorted alphabetically by their names?"
        ],
        "ref_sql": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      enr: { $gt: 18000 }\n    }\n  },\n  {\n    $sort: {\n      cName: 1\n    }\n  },\n  {\n    $project: {\n      cName: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2122,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the average hours for the students whose tryout decision is no.",
            "What is the average number of hours spent practicing for students who got rejected?",
            "Calculate the average number of hours that students who were not accepted for tryouts spent practicing.",
            "Determine the mean hours of practice for students whose tryout outcome was a rejection.",
            "What is the average practice time for players whose tryout decisions were unfavorable?"
        ],
        "ref_sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $match: {\n      \"Tryout.decision\": \"no\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_HS: { $avg: \"$HS\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_HS: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1522,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all template type codes and the number of documents using each type.",
            "What are the different template type codes, and how many documents use each type?",
            "Provide a list of template type codes along with the respective counts of documents for each type.",
            "Can you detail the different template type codes and the total number of documents associated with each?",
            "Present the various template type codes and indicate how many documents correspond to each type."
        ],
        "ref_sql": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $group: {\n      _id: \"$Template_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Template_Type_Code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4283,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the first name of students who have both cat and dog pets .",
            "Retrieve the first names of students who own both a dog and a cat.",
            "Which students have both cats and dogs? Please provide their first names.",
            "Get the first names of those students who possess both a cat and a dog as pets.",
            "List the first names of students that have both a dog and a cat as their pets."
        ],
        "ref_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.PetType\": { $all: [\"cat\", \"dog\"] }\n    }\n  },\n  {\n    $project: {\n      \"Fname\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4084,
        "db_id": "architecture",
        "nl_queries": [
            "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
            "List the names of all bridges created by American architects, ordered by their length in feet.",
            "Retrieve the names of bridges designed by architects from the United States, sorted by the length in feet.",
            "Provide the names of bridges built by American architects, arranging the results based on their length in feet.",
            "Display the names of bridges that were constructed by American architects, sorting the output according to their length in feet."
        ],
        "ref_sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' ORDER BY t1.length_feet",
        "MQL": "db.architect.aggregate([\n  {\n    $match: {\n      \"nationality\": \"American\",\n      \"bridge\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $unwind: \"$bridge\"\n  },\n  {\n    $sort: {\n      \"bridge.length_feet\": 1\n    }\n  },\n  {\n    $project: {\n      \"_id\": 0,\n      \"name\": \"$bridge.name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 793,
        "db_id": "match_season",
        "nl_queries": [
            "Show the most common position of players in match seasons.",
            "What is the position that is most common among players in match seasons?",
            "What is the most frequently occurring player position in the match seasons?",
            "Identify the player position that appears most often across match seasons.",
            "Determine which position is the most prevalent among players during match seasons."
        ],
        "ref_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.Position\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Position: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3924,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "List the research staff details, and order in ascending order.",
            "What details are there on the research staff? List the result in ascending alphabetical order.",
            "Provide the details of the research staff, sorted in alphabetical order.",
            "Show a list of research staff details arranged in ascending order.",
            "Can I get the research staff details, organized in ascending order?"
        ],
        "ref_sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Research_Staff\"\n  },\n  {\n    $project: {\n      staff_details: \"$Organisations.Research_Staff.staff_details\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      staff_details: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3603,
        "db_id": "program_share",
        "nl_queries": [
            "What are the names of the channels owned by CCTV or HBS?",
            "List the names of all the channels owned by either CCTV or HBS",
            "Identify the names of the channels that are managed by either CCTV or HBS.",
            "Provide a list of channel names owned by CCTV or HBS.",
            "What channels are owned by CCTV or HBS? Please list their names."
        ],
        "ref_sql": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
        "MQL": "db.channel.aggregate([\n  {\n    $match: {\n      Owner: { $in: [\"CCTV\", \"HBS\"] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3512,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of the students and their department names sorted by their total credits in ascending order.",
            "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
            "List the names of students along with their department names, sorted by total credits in increasing order.",
            "Retrieve the names of students and their corresponding department names, arranged by their credits in ascending sequence.",
            "Show the student names and their department affiliations, ordered from the lowest to the highest total credits."
        ],
        "ref_sql": "SELECT name , dept_name FROM student ORDER BY tot_cred",
        "MQL": "db.department.aggregate([\n  { $unwind: \"$student\" },\n  {\n    $project: {\n      name: \"$student.name\",\n      dept_name: \"$student.dept_name\",\n      tot_cred: \"$student.tot_cred\"\n    }\n  },\n  { $sort: { tot_cred: 1 } },\n  {\n    $project: {\n      name: 1,\n      dept_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 764,
        "db_id": "poker_player",
        "nl_queries": [
            "What is the most common nationality of people?",
            "Give the nationality that is most common across all people.",
            "What nationality appears most frequently among the people?",
            "Which nationality is the most prevalent in the dataset?",
            "Identify the nationality that is found the most among all individuals."
        ],
        "ref_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $group: {\n      _id: \"$Nationality\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Nationality: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2289,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show all card type codes and the number of cards in each type.",
            "What are the different card types, and how many cards are there of each?",
            "List the various types of cards along with the total count for each type.",
            "Identify the different card types and specify how many cards exist for each type.",
            "Provide an overview of card type codes and the associated number of cards under each type."
        ],
        "ref_sql": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
        "MQL": "db.Customers_Cards.aggregate([\n  {\n    $group: {\n      _id: \"$card_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      card_type_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1171,
        "db_id": "car_1",
        "nl_queries": [
            "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "List the IDs and names of countries that have over three car manufacturers or offer the 'fiat' model.",
            "Which countries have either more than three car makers or produce the 'fiat' model? Provide their IDs and names.",
            "Please provide the country IDs and names where there are more than three car makers or they manufacture the 'fiat' model.",
            "Identify the countries with more than three car manufacturers or that produce the 'fiat' model, including their IDs and names."
        ],
        "ref_sql": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
        "MQL": "db.continents.aggregate([\n  {\n    $project: {\n      countries: {\n        $filter: {\n          input: \"$countries\",\n          as: \"country\",\n          cond: {\n            $or: [\n              { $gt: [{ $size: \"$$country.car_makers\" }, 3] },\n              {\n                $gt: [\n                  {\n                    $size: {\n                      $filter: {\n                        input: \"$$country.car_makers\",\n                        as: \"maker\",\n                        cond: {\n                          $gt: [\n                            {\n                              $size: {\n                                $filter: {\n                                  input: \"$$maker.model_list\",\n                                  as: \"model\",\n                                  cond: {\n                                    $eq: [\"$$model.Model\", \"fiat\"]\n                                  }\n                                }\n                              }\n                            },\n                            0\n                          ]\n                        }\n                      }\n                    }\n                  },\n                  0\n                ]\n              }\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $project: {\n   _id:0,\n   CountryId: \"$countries.CountryId\",\n      CountryName: \"$countries.CountryName\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2926,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "How many distinct students have been in detention?",
            "What is the total number of unique students who have experienced detention?",
            "How many unique students have faced detention?",
            "Can you tell me the count of distinct students who have been recorded in detention?",
            "What is the number of different students that have ever been in detention?"
        ],
        "ref_sql": "SELECT count(DISTINCT student_id) FROM Students_in_Detention",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Students\" },\n  { $unwind: \"$Students.Students_in_Detention\" },\n  { $group: { _id: \"$Students.Students_in_Detention.student_id\" } },\n  { $group: { _id: null, count_DISTINCT_student_id: { $sum: 1 } } },\n  { $project: { _id: 0, count_DISTINCT_student_id: 1 } }\n]);\n"
    },
    {
        "record_id": 3760,
        "db_id": "e_government",
        "nl_queries": [
            "Find the payment method and phone of the party with email \"enrico09@example.com\".",
            "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?",
            "What are the party's payment method and phone number for the email address \"enrico09@example.com\"?",
            "Retrieve the phone number and payment method code for the party associated with \"enrico09@example.com\".",
            "Can you provide the payment method and contact phone for the party whose email is \"enrico09@example.com\"?"
        ],
        "ref_sql": "SELECT payment_method_code , party_phone FROM parties WHERE party_email = \"enrico09@example.com\"",
        "MQL": "db.Parties.aggregate([\n  {\n    $match: {\n      party_email: \"enrico09@example.com\"\n    }\n  },\n  {\n    $project: {\n      payment_method_code: 1,\n      party_phone: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1991,
        "db_id": "wrestler",
        "nl_queries": [
            "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
            "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
            "List the teams that contain wrestlers eliminated by both Orton and Benjamin.",
            "Identify the teams with wrestlers that were eliminated by \"Orton\" and also by \"Benjamin\".",
            "Which teams have wrestlers that have been eliminated by both Orton and Benjamin?"
        ],
        "ref_sql": "SELECT Team FROM Elimination WHERE Eliminated_By = \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = \"Benjamin\"",
        "MQL": "db.wrestler.aggregate([\n  {\n    $unwind: \"$Elimination\"\n  },\n  {\n    $group: {\n      _id: \"$Elimination.Team\",\n      wrestlers: {\n        $push: {\n          wrestler_id: \"$Elimination.Wrestler_ID\",\n          eliminated_by: \"$Elimination.Eliminated_By\"\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      wrestlers: {\n        $elemMatch: {\n          eliminated_by: \"Orton\"\n        }\n      },\n      wrestlers: {\n        $elemMatch: {\n          eliminated_by: \"Benjamin\"\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      Team: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 270,
        "db_id": "department_store",
        "nl_queries": [
            "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
            "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
            "List the unique names of customers who have pending orders, ordered by their customer ID.",
            "Provide the distinct customer names with an order status of Pending, arranged by customer ID.",
            "Retrieve the unique customer names for those whose orders are pending, sorted according to their customer ID."
        ],
        "ref_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\" ORDER BY T2.customer_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $match: {\n      \"Customer_Orders.order_status_code\": \"Pending\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer_id\",\n      customer_name: {\n        $first: \"$customer_name\"\n      }\n    }\n  },\n  {\n    $sort: {\n      _id: 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      customer_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2148,
        "db_id": "hospital_1",
        "nl_queries": [
            "What is the average cost of procedures that physician John Wen was trained in?",
            "Compute the mean price of procedures physician John Wen was trained in.",
            "What’s the average expense of the procedures that physician John Wen is trained in?",
            "Find the average price associated with procedures for which physician John Wen has received training.",
            "Determine the mean cost of the procedures that physician John Wen is qualified to perform."
        ],
        "ref_sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
        "MQL": "db.Procedures.aggregate([\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"Code\",\n      foreignField: \"Trained_In.Treatment\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Name\": \"John Wen\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Cost: {\n        $avg: \"$Cost\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Cost: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2662,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "How many orders have detail \"Second time\"?",
            "Tell me the number of orders with \"Second time\" as order detail.",
            "What is the total number of orders that have \"Second time\" in their details?",
            "How many orders include the detail \"Second time\"?",
            "Can you tell me the count of orders labeled as \"Second time\"?"
        ],
        "ref_sql": "SELECT count(*) FROM customer_orders WHERE order_details = \"Second time\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $match: {\n      \"Customer_Orders.order_details\": \"Second time\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2372,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the number of rooms located on each block floor.",
            "How many rooms does each block floor have?",
            "Count the total number of rooms on every block floor.",
            "What is the room count for each block floor?",
            "Determine how many rooms are found on each floor of the block."
        ],
        "ref_sql": "SELECT count(*) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor",
        "MQL": "db.Block.aggregate([\n  {\n    $unwind: \"$Room\"\n  },\n  {\n    $group: {\n      _id: \"$BlockFloor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      BlockFloor: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 702,
        "db_id": "news_report",
        "nl_queries": [
            "List the names of journalists who have not reported any event.",
            "Retrieve the names of journalists who have never reported on any events.",
            "Show me the names of all journalists without any associated event reports.",
            "Identify the journalists who have not been involved in reporting any events.",
            "Provide a list of journalist names that have not participated in any event coverage."
        ],
        "ref_sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
        "MQL": "db.journalist.find({\n  \"news_report\": { $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1810,
        "db_id": "network_1",
        "nl_queries": [
            "Show the names of students who have at least 2 likes.",
            "What are the names of students who have 2 or more likes?",
            "List the names of students who have a minimum of 2 likes.",
            "Provide the names of students with 2 or more likes.",
            "Identify the students who possess at least 2 likes and display their names."
        ],
        "ref_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
        "MQL": "db.Highschooler.aggregate([\n  {\n    $project: {\n      name: 1,\n      likesCount: {\n        $size: \"$Likes\"\n      }\n    }\n  },\n  {\n    $match: {\n      likesCount: {\n        $gte: 2\n      }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2285,
        "db_id": "student_assessment",
        "nl_queries": [
            "Find id of candidates whose assessment code is \"Pass\"?",
            "What are the ids of the candidates that have an outcome code of Pass?",
            "Retrieve the IDs of candidates who received a \"Pass\" in their assessment.",
            "List the candidate IDs with an assessment outcome of \"Pass.\"",
            "What are the candidate identifiers for those who passed their assessments?"
        ],
        "ref_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Candidates\"\n  },\n  {\n    $unwind: \"$Candidates.Candidate_Assessments\"\n  },\n  {\n    $match: {\n      \"Candidates.Candidate_Assessments.asessment_outcome_code\": \"Pass\"\n    }\n  },\n  {\n    $project: {\n      candidate_id: \"$Candidates.candidate_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3079,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of the department that offers the highest total credits?",
            "What is the name of the department with the most credits?",
            "Which department has the highest total number of credits available?",
            "Identify the department that provides the most credits in total.",
            "What is the department name that offers the greatest sum of credits?"
        ],
        "ref_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $group: {\n      _id: \"$dept_name\",\n      sum_credits: { $sum: \"$course.credits\" }\n    }\n  },\n  {\n    $sort: { sum_credits: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      dept_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2416,
        "db_id": "college_2",
        "nl_queries": [
            "Find the total number of students in each department.",
            "How many students are in each department?",
            "What is the number of students enrolled in each department?",
            "Count the students across all departments.",
            "How many students are there in each academic department?"
        ],
        "ref_sql": "SELECT count(*) , dept_name FROM student GROUP BY dept_name",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $group: {\n      _id: \"$dept_name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      dept_name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1424,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "Who is the owner that has spent the most money on their dogs' treatments? Provide the owner ID along with their zip code.",
            "Identify the owner ID and zip code of the person who has incurred the highest total expenses for veterinary treatments for their dogs.",
            "Which owner has the highest total treatment costs for their dogs? Please list their owner ID and zip code."
        ],
        "ref_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $unwind: \"$Dogs.Treatments\"\n  },\n  {\n    $group: {\n      _id: \"$owner_id\",\n      sum_cost_of_treatment: {\n        $sum: \"$Dogs.Treatments.cost_of_treatment\"\n      },\n      zip_code: {\n        $first: \"$zip_code\"\n      }\n    }\n  },\n  {\n    $sort: {\n      sum_cost_of_treatment: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      owner_id: \"$_id\",\n      zip_code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1401,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the physician who was trained in the most expensive procedure?",
            "Which physician was trained in the procedure that costs the most.",
            "Which physician has the highest training cost for any procedure?",
            "Identify the physician associated with the most expensive treatment procedure.",
            "Who is the physician trained in the procedure that has the greatest cost?"
        ],
        "ref_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "MQL": "db.Physician.aggregate([\n  {\n    $lookup: {\n      from: \"Procedures\",\n      localField: \"Trained_In.Treatment\",\n      foreignField: \"Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      max_cost: {\n        $max: \"$Docs1.Cost\"\n      }\n    }\n  },\n  {\n    $sort: {\n      max_cost: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 815,
        "db_id": "chinook_1",
        "nl_queries": [
            "List the phone numbers of all employees.",
            "What are the phone numbers for each employee?",
            "Provide the contact numbers for all employees.",
            "Show me the phone details for every employee.",
            "Fetch the employee phone numbers."
        ],
        "ref_sql": "SELECT Phone FROM EMPLOYEE",
        "MQL": "db.Employee.find({}, { Phone: 1, _id: 0 });\n"
    },
    {
        "record_id": 4233,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "What is the transaction type that has processed the greatest total amount in transactions?",
            "Return the type of transaction with the highest total amount.",
            "Which transaction type has resulted in the highest total transaction amount?",
            "Identify the type of transactions that accumulated the most money.",
            "What transaction type accounts for the largest total of processed amounts?"
        ],
        "ref_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "MQL": "db.Accounts.aggregate([\n  { $unwind: \"$Financial_Transactions\" },\n  {\n    $group: {\n      _id: \"$Financial_Transactions.transaction_type\",\n      total_amount: { $sum: \"$Financial_Transactions.transaction_amount\" }\n    }\n  },\n  { $sort: { total_amount: -1 } },\n  { $limit: 1 },\n  { $project: { transaction_type: \"$_id\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 2914,
        "db_id": "college_2",
        "nl_queries": [
            "How many students have advisors?",
            "Count the number of students who have advisors.",
            "What is the total count of students who are assigned an advisor?",
            "How many students have been paired with advisors?",
            "Determine the number of students that possess an advisor."
        ],
        "ref_sql": "SELECT count(DISTINCT s_id) FROM advisor",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $match: {\n      \"student.advisor\": { $ne: [] }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_s_id: { $addToSet: \"$student.ID\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_s_id: { $size: \"$count_DISTINCT_s_id\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2717,
        "db_id": "decoration_competition",
        "nl_queries": [
            "How many members are there?",
            "What is the total number of members in the colleges?",
            "Can you tell me how many members there are in total?",
            "How many total members are part of the colleges?",
            "What’s the overall count of members across all college entries?"
        ],
        "ref_sql": "SELECT count(*) FROM member",
        "MQL": "db.college.aggregate([\n  {\n    $group: {\n      _id: null,\n      count: { $sum: { $size: \"$member\" } }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1895,
        "db_id": "party_host",
        "nl_queries": [
            "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
            "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
            "List the locations of the parties along with the names of their hosts, ordered by the hosts' ages from youngest to oldest.",
            "Retrieve the location of each party and the corresponding host's name, sorted by the age of the hosts in increasing order.",
            "Display each party's location alongside the name of the host, sorted in ascending order of host age."
        ],
        "ref_sql": "SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age",
        "MQL": "db.party.aggregate([\n  {\n    $lookup: {\n      from: \"host\",\n      localField: \"Party_ID\",\n      foreignField: \"party_host.Party_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Location: 1,\n      Name: \"$Docs1.Name\",\n      Age: \"$Docs1.Age\"\n    }\n  },\n  {\n    $sort: {\n      Age: 1\n    }\n  },\n  {\n    $project: {\n      Location: 1,\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4170,
        "db_id": "club_1",
        "nl_queries": [
            "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
            "Return the last name for the members of the club named \"Hopkins Student Enterprises\".",
            "Can you provide the last names of the students who are members of \"Hopkins Student Enterprises\" club?",
            "List the last names of the members belonging to the club called \"Hopkins Student Enterprises.\"",
            "Who are the students associated with the \"Hopkins Student Enterprises\" club? Please show their last names."
        ],
        "ref_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Hopkins Student Enterprises\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      LName: \"$Docs1.LName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2008,
        "db_id": "book_2",
        "nl_queries": [
            "What are the titles of the books whose writer is not \"Elaine Lee\"?",
            "List the titles of books whose authors aren't \"Elaine Lee\".",
            "Retrieve the names of books written by authors other than \"Elaine Lee\".",
            "What titles of books are available that do not involve the writer \"Elaine Lee\"?",
            "Show me the titles of all books except those authored by \"Elaine Lee\"."
        ],
        "ref_sql": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
        "MQL": "db.book.find({\n  \"Writer\": { $ne: \"Elaine Lee\" }\n}, { \"Title\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3055,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "What is the date when the document \"Marry CV\" was stored?",
            "When was the document named \"Marry CV\" stored? Give me the date.",
            "Can you tell me the storage date for the document titled \"Marry CV\"?",
            "What date was the document \"Marry CV\" recorded in the system?",
            "Please provide the date when \"Marry CV\" was stored as a document."
        ],
        "ref_sql": "SELECT date_stored FROM All_documents WHERE Document_name = \"Marry CV\"",
        "MQL": "db.Ref_Calendar.aggregate([\n  {\n    $unwind: \"$All_Documents\"\n  },\n  {\n    $match: {\n      \"All_Documents.Document_Name\": \"Marry CV\"\n    }\n  },\n  {\n    $project: {\n      Date_Stored: \"$All_Documents.Date_Stored\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2921,
        "db_id": "game_1",
        "nl_queries": [
            "How many sports do we have?",
            "How many different types of sports do we offer?",
            "What is the total number of unique sports available?",
            "Can you tell me how many distinct types of sports we provide?",
            "How many different sports are represented in the dataset?"
        ],
        "ref_sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo",
        "MQL": "db.Student.aggregate([\n  {\n    $unwind: \"$SportsInfo\"\n  },\n  {\n    $group: {\n      _id: \"$SportsInfo.SportName\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_sportname: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_sportname: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1335,
        "db_id": "party_people",
        "nl_queries": [
            "What is the name of member in charge of greatest number of events?",
            "Return the name of the member who is in charge of the most events.",
            "Who is the member that oversees the largest number of events?",
            "Find the name of the member responsible for the most events held.",
            "Identify the member in charge of the highest number of events."
        ],
        "ref_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $unwind: \"$party.member\"\n  },\n  {\n    $unwind: \"$party.member.party_events\"\n  },\n  {\n    $group: {\n      _id: {\n        Member_ID: \"$party.member.Member_ID\",\n        Member_Name: \"$party.member.Member_Name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Member_Name: \"$_id.Member_Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2068,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
            "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.",
            "List all apartment type codes along with the total number of apartments for each type, arranged in ascending order by the number of apartments.",
            "Provide a count of apartments for each apartment type code, sorted from the least to the most number of apartments.",
            "Display the different apartment type codes with their associated apartment counts, in increasing order of the count of apartments."
        ],
        "ref_sql": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $group: {\n      _id: \"$Apartments.apt_type_code\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      apt_type_code: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      COUNT: 1  \n    }\n  }\n]);\n"
    },
    {
        "record_id": 311,
        "db_id": "gymnast",
        "nl_queries": [
            "What are the distinct hometowns of gymnasts with total points more than 57.5?",
            "Give the different hometowns of gymnasts that have a total point score of above 57.5.",
            "What unique hometowns do gymnasts come from if their total score exceeds 57.5?",
            "List the various hometowns of gymnasts who achieved a score above 57.5 points.",
            "Identify the distinct hometowns of gymnasts with total points greater than 57.5."
        ],
        "ref_sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $match: {\n      \"gymnast.Total_Points\": { $gt: 57.5 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Hometown\"\n    }\n  },\n  {\n    $project: {\n      Hometown: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1559,
        "db_id": "film_rank",
        "nl_queries": [
            "Please list the countries and years of film market estimations.",
            "What are the countries of markets and their corresponding years of market estimation?",
            "Can you provide the list of countries along with the respective years for film market estimates?",
            "What countries are there in the film market, and what are their associated estimation years?",
            "Show me the countries involved in film markets and the corresponding years for their market estimations."
        ],
        "ref_sql": "SELECT T2.Country , T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID",
        "MQL": "db.market.aggregate([\n  {\n    $unwind: \"$film_market_estimation\"\n  },\n  {\n    $project: {\n      Country: 1,\n      Year: \"$film_market_estimation.Year\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4022,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
            "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?",
            "What is the total revenue generated by companies with a revenue exceeding that of some manufacturers in Austin?",
            "Calculate the combined revenue of firms whose income is greater than the minimum revenue among Austin-based manufacturers.",
            "Determine the overall revenue of companies that have earnings higher than the lowest revenue from any manufacturer located in Austin."
        ],
        "ref_sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      Headquarter: \"Austin\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      min_Revenue: {\n        $min: \"$Revenue\"\n      }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Manufacturers\",\n      let: { min_Revenue: \"$min_Revenue\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$Revenue\", \"$$min_Revenue\"] }\n          }\n        },\n        {\n          $group: {\n            _id: null,\n            sum_revenue: { $sum: \"$Revenue\" }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            sum_revenue: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 407,
        "db_id": "tracking_orders",
        "nl_queries": [
            "List the ids of all distinct orders ordered by placed date.",
            "What are ids of the all distinct orders, sorted by placement date?",
            "Show the unique order IDs sorted by the date they were placed.",
            "Retrieve the distinct IDs of orders, arranged by their placement date.",
            "What are the unique order IDs, listed in order of the dates they were placed?"
        ],
        "ref_sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $project: {\n      order_id: \"$Orders.order_id\",\n      date_order_placed: \"$Orders.date_order_placed\"\n    }\n  },\n  {\n    $sort: {\n      date_order_placed: 1\n    }\n  },\n  {\n    $group: {\n      _id: \"$order_id\"\n    }\n  },\n  {\n    $project: {\n      order_id: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2244,
        "db_id": "inn_1",
        "nl_queries": [
            "Find the number of rooms for each bed type.",
            "What are the number of rooms for each bed type?",
            "How many rooms are available for each type of bed?",
            "Count the total number of rooms corresponding to each bed type.",
            "What is the count of rooms categorized by bed type?"
        ],
        "ref_sql": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType;",
        "MQL": "db.Rooms.aggregate([\n  {\n    $group: {\n      _id: \"$bedType\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      bedType: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1001,
        "db_id": "flight_2",
        "nl_queries": [
            "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "Give the flight numbers of flights leaving from Aberdeen.",
            "List the flight numbers for flights that are scheduled to depart from Aberdeen.",
            "What are the flight numbers for outgoing flights from the city of Aberdeen?",
            "Provide the flight numbers for flights leaving Aberdeen airport."
        ],
        "ref_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      City: \"Aberdeen\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      FlightNo: \"$flights.FlightNo\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 154,
        "db_id": "match_season",
        "nl_queries": [
            "Which college have both players with position midfielder and players with position defender?",
            "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
            "Identify the colleges that have players in both Midfielder and Defender positions.",
            "List the colleges that feature players who play as both Midfielders and Defenders.",
            "Find the colleges with athletes occupying the positions of both Midfielder and Defender."
        ],
        "ref_sql": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $match: {\n      \"match_season.Position\": { $in: [\"Midfielder\", \"Defender\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$match_season.College\",\n      positions: { $addToSet: \"$match_season.Position\" }\n    }\n  },\n  {\n    $match: {\n      positions: { $all: [\"Midfielder\", \"Defender\"] }\n    }\n  },\n  {\n    $project: {\n      College: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1550,
        "db_id": "gymnast",
        "nl_queries": [
            "Show the ages of gymnasts in descending order of total points.",
            "What are the ages of the gymnasts, ordered descending by their total points?",
            "List the ages of gymnasts sorted in descending order based on their total points.",
            "Provide the ages of gymnasts, arranged from highest to lowest total points.",
            "What are the age statistics of gymnasts, ranked in descending order by their total scores?"
        ],
        "ref_sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $sort: {\n      \"gymnast.Total_Points\": -1\n    }\n  },\n  {\n    $project: {\n      Age: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3074,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name and budget of departments whose budgets are more than the average budget.",
            "What are the names and budgets of departments with budgets greater than the average?",
            "List the names and budgets of departments that have budgets higher than the average budget.",
            "What departments have budgets that exceed the average, and what are their respective budgets?",
            "Provide the names and budget figures for departments whose budgets are above the average."
        ],
        "ref_sql": "SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department)",
        "MQL": "db.department.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_budget: { $avg: \"$budget\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { avg_budget: \"$avg_budget\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $gt: [\"$budget\", \"$$avg_budget\"] }\n          }\n        },\n        {\n          $project: {\n            dept_name: 1,\n            budget: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      dept_name: \"$Docs1.dept_name\",\n      budget: \"$Docs1.budget\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2645,
        "db_id": "club_1",
        "nl_queries": [
            "How many clubs are located at \"HHH\"?",
            "Count the number of clubs located at \"HHH\".",
            "What is the total number of clubs situated in \"HHH\"?",
            "How many clubs can be found at the location \"HHH\"?",
            "Please provide the count of clubs available at \"HHH\"."
        ],
        "ref_sql": "SELECT count(*) FROM club WHERE clublocation = \"HHH\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubLocation: \"HHH\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2477,
        "db_id": "soccer_2",
        "nl_queries": [
            "How many colleges has more than 15000 students?",
            "What is the number of colleges with a student population greater than 15000?",
            "What is the total number of colleges that have an enrollment exceeding 15,000 students?",
            "How many colleges are there with more than 15,000 enrolled students?",
            "Can you tell me the number of colleges with a student body larger than 15,000?"
        ],
        "ref_sql": "SELECT count(*) FROM College WHERE enr > 15000",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      enr: { $gt: 15000 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1933,
        "db_id": "mountain_photos",
        "nl_queries": [
            "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
            "Identify the brands of camera lenses that have captured images of mountains in both the 'Toubkal Atlas' and 'Lasta Massif' ranges.",
            "What lens brands have been used for photographing mountains in the 'Toubkal Atlas' range as well as the 'Lasta Massif' range?",
            "Provide a list of camera lens brands that took photos of mountains belonging to both the 'Toubkal Atlas' and 'Lasta Massif' ranges.",
            "Which brands of camera lenses have produced images of mountains from both the 'Toubkal Atlas' and 'Lasta Massif' ranges?"
        ],
        "ref_sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'",
        "MQL": "db.camera_lens.aggregate([\n  {\n    $lookup: {\n      from: \"mountain\",\n      localField: \"photos.mountain_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Docs1.Range\": \"Toubkal Atlas\" },\n        { \"Docs1.Range\": \"Lasta Massif\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$brand\",\n      ranges: { $addToSet: \"$Docs1.Range\" }\n    }\n  },\n  {\n    $match: {\n      ranges: { $all: [\"Toubkal Atlas\", \"Lasta Massif\"] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      brand: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2984,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find the names of customers who have no policies associated.",
            "What are the names of customers who do not have any policies?",
            "List the names of customers without any associated policies.",
            "Identify customers who currently do not have any policies linked to their accounts.",
            "Provide the names of customers that have no policies registered."
        ],
        "ref_sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "MQL": "db.Customers.find(\n  {\n    \"Policies\": { $size: 0 }\n  },\n  {\n    \"Customer_Details\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 3318,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the average share count of transactions for different investors.",
            "What is the average number of shares transacted per investor?",
            "Provide the average share transaction count among various investors.",
            "Calculate the mean share count for transactions associated with different investors.",
            "Display the average share count from transactions for each investor."
        ],
        "ref_sql": "SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
        "MQL": "db.Investors.aggregate([\n  {\n    $unwind: \"$Transactions\"\n  },\n  {\n    $addFields: {\n      share_count_numeric: {\n        $convert: {\n          input: \"$Transactions.share_count\",\n          to: \"double\",\n          onError: 0,  \n          onNull: 0    \n        }\n      }\n    }\n  },\n  {\n    $group: {\n      _id: \"$investor_id\",\n      avg_share_count: { $avg: \"$share_count_numeric\" }\n    }\n  },\n  {\n    $project: {\n      investor_id: \"$_id\",\n      avg_share_count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3157,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of dorms that can accommodate more than 300 students.",
            "What are the names of all the dorms that can accomdate more than 300 students?",
            "List the names of dormitories that have a capacity exceeding 300 students.",
            "What dorm names are available for those that can hold more than 300 students?",
            "Identify all dorms that can accommodate over 300 students and provide their names."
        ],
        "ref_sql": "SELECT dorm_name FROM dorm WHERE student_capacity > 300",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      student_capacity: { $gt: 300 }\n    }\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 408,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the players whose names contain letter 'a'.",
            "Who are the players that have names containing the letter a?",
            "List the players that have the letter 'a' in their names.",
            "Identify players whose names feature the character 'a'.",
            "Which players include the letter 'a' within their names?"
        ],
        "ref_sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "MQL": "db.Player.find({\n  pName: {\n    $regex: \"a\",\n    $options: \"i\"\n  }\n}, {\n  pName: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 118,
        "db_id": "bike_1",
        "nl_queries": [
            "How many stations does Mountain View city has?",
            "How many stations are in Mountain View?",
            "What is the total number of bike stations in the city of Mountain View?",
            "Can you tell me the count of stations that exist in Mountain View?",
            "How many bike-sharing stations are located within Mountain View?"
        ],
        "ref_sql": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      city: \"Mountain View\"\n    }\n  },\n  {\n    $count: \"COUNT\"\n  }\n]);\n"
    },
    {
        "record_id": 3065,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What is the description of the department whose name has the substring the computer?",
            "What is the department description for the one whose name has the word computer?",
            "Can you provide the description of the department that includes the term computer in its name?",
            "What is the description for the department with \"computer\" in its name?",
            "Please tell me the department description for any department whose name contains the word computer."
        ],
        "ref_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "MQL": "db.Departments.aggregate([\n  {\n    $match: {\n      department_name: {\n        $regex: \"computer\",\n        $options: \"i\" \n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0, \n      department_description: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4167,
        "db_id": "e_government",
        "nl_queries": [
            "Find the last name of the latest contact individual of the organization \"Labour Party\".",
            "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
            "What is the last name of the individual who last contacted the organization named \"Labour Party\"?",
            "Identify the last name of the most recently contacted person from the \"Labour Party.\"",
            "Can you provide the last name of the latest individual contact for the Labour Party organization?"
        ],
        "ref_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "MQL": "db.Organizations.aggregate([\n  {\n    $match: {\n      organization_name: \"Labour Party\"\n    }\n  },\n  {\n    $unwind: \"$Organization_Contact_Individuals\"\n  },\n  {\n    $lookup: {\n      from: \"Individuals\",\n      localField: \"Organization_Contact_Individuals.individual_id\",\n      foreignField: \"individual_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      individual_last_name: \"$Docs1.individual_last_name\",\n      date_contact_to: \"$Organization_Contact_Individuals.date_contact_to\"\n    }\n  },\n  {\n    $sort: {\n      date_contact_to: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      individual_last_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2136,
        "db_id": "gymnast",
        "nl_queries": [
            "What is the average age of all gymnasts?",
            "Return the average age across all gymnasts.",
            "What is the mean age of gymnasts?",
            "Calculate the average age for the entire gymnast population.",
            "Find the typical age of all gymnasts."
        ],
        "ref_sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3427,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the lowest and highest rating star?",
            "What is the maximum and mininum number of stars a rating can receive?",
            "What are the extremes of the star ratings given by reviewers?",
            "Can you tell me the lowest and highest star ratings that have been awarded?",
            "What is the range of star ratings, including the minimum and maximum values?"
        ],
        "ref_sql": "SELECT max(stars) , min(stars) FROM Rating",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: null,\n      min_stars: { $min: \"$Rating.stars\" },\n      max_stars: { $max: \"$Rating.stars\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_stars: 1,\n      max_stars: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2875,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "How many customers have an account?",
            "Count the number of customers who hold an account.",
            "How many customers have opened an account?",
            "Count the number of customers who have an account.",
            "What is the total number of customers that currently have an account?"
        ],
        "ref_sql": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "MQL": "db.Accounts.aggregate([\n  {\n    $group: {\n      _id: \"$customer_id\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_customer_id: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2126,
        "db_id": "body_builder",
        "nl_queries": [
            "What is the average total score of body builders with height bigger than 200?",
            "What is the mean total score for body builders taller than 200 centimeters?",
            "How much is the average total score of body builders whose height exceeds 200 cm?",
            "Can you tell me the average total score for body builders with a height greater than 200?",
            "What is the average total for those body builders who are over 200 centimeters tall?"
        ],
        "ref_sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"Height\": { $gt: 200 }\n    }\n  },\n  {\n    $unwind: \"$body_builder\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Total: { $avg: \"$body_builder.Total\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Total: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2907,
        "db_id": "products_for_hire",
        "nl_queries": [
            "How many different product types are there?",
            "What is the total number of unique product types available?",
            "Can you tell me how many distinct types of products there are?",
            "How many unique categories of products can be found in the dataset?",
            "What is the count of different product classifications that exist?"
        ],
        "ref_sql": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
        "MQL": "db.Products_for_Hire.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_product_type_code: { $addToSet: \"$product_type_code\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_product_type_code: { $size: \"$count_DISTINCT_product_type_code\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3017,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "What is the phone and email for customer with first name Aniyah and last name Feest?",
            "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
            "Can you provide the phone number and email address for the customer named Aniyah Feest?",
            "Please fetch the contact details, specifically the phone and email, for Aniyah Feest.",
            "What are the contact information (phone and email) for the customer who is referred to as Aniyah Feest?"
        ],
        "ref_sql": "SELECT customer_phone , customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"",
        "MQL": "db.Customers.find(\n  {\n    customer_first_name: \"Aniyah\",\n    customer_last_name: \"Feest\"\n  },\n  {\n    customer_phone: 1,\n    customer_email: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3251,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the forename and surname of drivers whose nationality is German?",
            "What is the first and last name of all the German drivers?",
            "List the first and last names of drivers who are from Germany.",
            "Provide the forenames and surnames of all drivers with German nationality.",
            "Show the names (first and last) of the drivers that belong to the German nationality."
        ],
        "ref_sql": "SELECT forename , surname FROM drivers WHERE nationality = \"German\"",
        "MQL": "db.drivers.find(\n  { nationality: \"German\" },\n  { forename: 1, surname: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3845,
        "db_id": "movie_1",
        "nl_queries": [
            "find the ids of reviewers who did not give 4 star.",
            "What are the ids of all reviewers who did not give 4 stars?",
            "List the IDs of reviewers who have never rated a movie with 4 stars.",
            "Retrieve the identifiers of reviewers that did not assign a 4-star rating to any films.",
            "Provide the IDs of all reviewers who have not given a rating of 4 stars."
        ],
        "ref_sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $project: {\n      rID: 1,\n      has_4_star_rating: {\n        $gt: [\n          {\n            $size: {\n              $filter: {\n                input: \"$Rating\",\n                as: \"rating\",\n                cond: {\n                  $eq: [\"$$rating.stars\", 4]\n                }\n              }\n            }\n          },\n          0\n        ]\n      }\n    }\n  },\n  {\n    $match: {\n      has_4_star_rating: false\n    }\n  },\n  {\n    $project: {\n      rID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 803,
        "db_id": "election",
        "nl_queries": [
            "Show the name of the party that has at least two records.",
            "Which party has two or more records?",
            "List the names of parties that are represented by at least two entries in the database.",
            "Identify which political parties have two or more entries recorded.",
            "Provide the names of parties that have a minimum of two records in the election dataset."
        ],
        "ref_sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2",
        "MQL": "db.party.aggregate([\n  {\n    $group: {\n      _id: \"$Party\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Party: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 297,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the unique names of races that held after 2000 and the circuits were in Spain?",
            "What are the names of all races held after 2000 in Spain?",
            "List the distinct names of races that occurred in Spain after the year 2000.",
            "Show me all unique race names that took place in Spain post-2000.",
            "What are the names of races held in Spain since the year 2001?"
        ],
        "ref_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "MQL": "db.circuits.aggregate([\n  {\n    $match: {\n      country: \"Spain\"\n    }\n  },\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      \"races.year\": { $gt: 2000 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$races.name\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      name: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 774,
        "db_id": "manufacturer",
        "nl_queries": [
            "Find the component amounts and names of all furnitures that have more than 10 components.",
            "List the names and component counts of all furniture pieces that contain more than 10 components.",
            "Retrieve the names along with the number of components for furniture items that have over 10 components.",
            "Show the component totals and names for all furniture types with a component count exceeding 10.",
            "Provide the names and component quantities of furniture that consist of more than 10 components."
        ],
        "ref_sql": "SELECT Num_of_Component , name FROM furniture WHERE Num_of_Component > 10",
        "MQL": "db.furniture.find({\n  \"Num_of_Component\": { $gt: 10 }\n}, { \"Num_of_Component\": 1, \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4078,
        "db_id": "museum_visit",
        "nl_queries": [
            "Find the name and age of the visitor who bought the most tickets at once.",
            "Identify the visitor's name and age who purchased the maximum number of tickets in a single visit.",
            "Who is the visitor that bought the largest number of tickets at once? Please provide their name and age.",
            "What are the name and age of the visitor who obtained the highest ticket quantity in one transaction?",
            "Find the individual with the most tickets bought at once, along with their age and name."
        ],
        "ref_sql": "SELECT t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "MQL": "db.visitor.aggregate([\n  { $unwind: \"$visit\" },\n  { $sort: { \"visit.Num_of_Ticket\": -1 } },\n  { $limit: 1 },\n  { $project: { \"Name\": 1, \"Age\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1081,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the descriptions of the service types with product price above 100?",
            "Give me the descriptions of the service types that cost more than 100.",
            "List the service type descriptions for products priced over 100.",
            "What are the descriptions of service types that have a price greater than 100?",
            "Provide the descriptions of service types whose product prices are above 100."
        ],
        "ref_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100",
        "MQL": "db.Ref_Service_Types.aggregate([\n  {\n    $unwind: \"$Services\"\n  },\n  {\n    $match: {\n      \"Services.Product_Price\": { $gt: 100 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Service_Type_Description: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4147,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the unit of measurement of product named \"cumin\"?",
            "Give the unit of measure for the product with the name 'cumin'.",
            "Can you tell me the unit of measure for the product called \"cumin\"?",
            "What unit is used to measure the product named 'cumin'?",
            "Identify the unit of measurement for the item referred to as \"cumin\"."
        ],
        "ref_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"cumin\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"cumin\"\n    }\n  },\n  {\n    $project: {\n      unit_of_measure: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3227,
        "db_id": "student_assessment",
        "nl_queries": [
            "List the first names of people in alphabetical order?",
            "What are the first names of the people in alphabetical order?",
            "Provide the first names of individuals sorted in alphabetical order.",
            "Retrieve the first names of all people arranged in ascending order.",
            "Show the first names of people sorted alphabetically."
        ],
        "ref_sql": "SELECT first_name FROM people ORDER BY first_name",
        "MQL": "db.People.find({}, { first_name: 1, _id: 0 }).sort({ first_name: 1 });\n"
    },
    {
        "record_id": 164,
        "db_id": "sports_competition",
        "nl_queries": [
            "List the most common type of competition.",
            "What is the most common competition type?",
            "What is the competition type that occurs most frequently?",
            "Identify the most prevalent type of competition.",
            "Can you tell me which type of competition is the most commonly found?"
        ],
        "ref_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.competition.aggregate([\n  {\n    $group: {\n      _id: \"$Competition_type\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Competition_type: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3757,
        "db_id": "driving_school",
        "nl_queries": [
            "List all payment methods and number of payments using each payment methods.",
            "For each payment method, how many payments were made?",
            "Provide a list of all payment methods along with the total number of payments made for each.",
            "How many payments have been processed for each different payment method?",
            "Enumerate the various payment methods and indicate the count of payments associated with each method."
        ],
        "ref_sql": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code;",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $unwind: \"$Customers.Customer_Payments\"\n  },\n  {\n    $group: {\n      _id: \"$Customers.Customer_Payments.payment_method_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      payment_method_code: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3154,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of the dorm with the largest capacity.",
            "What are the names of the dorm with the largest capacity?",
            "What is the name of the dormitory that can accommodate the most students?",
            "Identify the dorm with the highest student capacity.",
            "Which dorm has the largest number of available spaces for students?"
        ],
        "ref_sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "MQL": "db.Dorm.aggregate([\n  {\n    $sort: { student_capacity: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      dorm_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1474,
        "db_id": "tvshow",
        "nl_queries": [
            "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "Which TV channel features the series that includes the episode titled \"A Love of a Lifetime\"? Please provide the name of the series.",
            "Can you tell me the name of the series that contains the episode \"A Love of a Lifetime\"?",
            "What is the name of the series airing the episode \"A Love of a Lifetime\" and which channel broadcasts it?"
        ],
        "ref_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $project: {\n      series_name: 1,\n      TV_series: {\n        $filter: {\n          input: \"$TV_series\",\n          as: \"series\",\n          cond: {\n            $eq: [\"$$series.Episode\", \"A Love of a Lifetime\"]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      \"TV_series\": {\n        $ne: []\n      }\n    }\n  },\n  {\n    $project: {\n      series_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3781,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find all the policy types that are used by more than 2 customers.",
            "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
            "List all policy types that have been selected by over two customers.",
            "What policy types are utilized by more than two customers? Please provide the policy type codes.",
            "Show me the policy type codes for those types that are favored by more than two customers."
        ],
        "ref_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $group: {\n      _id: \"$Policies.Policy_Type_Code\",\n      customers: {\n        $addToSet: \"$Customer_ID\"\n      }\n    }\n  },\n  {\n    $project: {\n      Policy_Type_Code: \"$_id\",\n      coung_customers: {\n        $size: \"$customers\"\n      }\n    }\n  },\n  {\n    $match: {\n      coung_customers: {\n        $gt: 2\n      }\n    }\n  },\n  {\n    $project: {\n      Policy_Type_Code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2002,
        "db_id": "chinook_1",
        "nl_queries": [
            "Please list all album titles in alphabetical order.",
            "What are all the album titles, in alphabetical order?",
            "Can you provide a list of all album titles sorted in alphabetical order?",
            "What are the titles of the albums arranged alphabetically?",
            "Show me all album titles, ordered from A to Z."
        ],
        "ref_sql": "SELECT Title FROM ALBUM ORDER BY Title",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $project: {\n      Title: \"$Album.Title\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3803,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the product category description and unit of measurement of category \"Herbs\"?",
            "Return the description and unit of measurement for products in the 'Herbs' category.",
            "What is the description and unit of measure for the product category labeled \"Herbs\"?",
            "Provide the product category description along with the unit of measurement for items under the \"Herbs\" category.",
            "Can you give me the category description and the measuring unit associated with \"Herbs\" products?"
        ],
        "ref_sql": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $match: {\n      product_category_code: \"Herbs\"\n    }\n  },\n  {\n    $project: {\n      product_category_description: 1,\n      unit_of_measure: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1913,
        "db_id": "news_report",
        "nl_queries": [
            "Show the names of journalists that have reported more than one event.",
            "List the names of journalists who have covered more than one event.",
            "Provide the names of reporters that have reported on multiple events.",
            "Identify the journalists with more than one event report.",
            "Retrieve the names of journalists who have participated in multiple events."
        ],
        "ref_sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1",
        "MQL": "db.journalist.aggregate([\n  {\n    $lookup: {\n      from: \"event\",\n      localField: \"journalist_ID\",\n      foreignField: \"news_report.journalist_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1\": { $exists: true, $not: { $size: 0 } }\n    }\n  },\n  {\n    $group: {\n      _id: \"$journalist_ID\",\n      Name: { $first: \"$Name\" },\n      Num_of_Events: { $sum: { $size: \"$Docs1\" } }\n    }\n  },\n  {\n    $match: {\n      Num_of_Events: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2097,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the average training hours of all players?",
            "How many hours do the players train on average?",
            "What is the average amount of training hours logged by all players?",
            "Can you provide the mean training hours for the players?",
            "How many total training hours do players average?"
        ],
        "ref_sql": "SELECT avg(HS) FROM Player",
        "MQL": "db.Player.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_HS: { $avg: \"$HS\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_HS: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4067,
        "db_id": "e_government",
        "nl_queries": [
            "Find the name of the most popular party form.",
            "What is the name of the party form that is most common?",
            "What is the title of the most frequently used party form?",
            "Identify the party form that is utilized the most.",
            "Retrieve the name of the party form with the highest usage rate."
        ],
        "ref_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Services.aggregate([\n  {\n    $unwind: \"$Forms\"\n  },\n  {\n    $group: {\n      _id: {\n        form_id: \"$Forms.form_id\",\n        form_name: \"$Forms.form_name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      form_name: \"$_id.form_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2988,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "List the names and emails of customers who payed by Visa card.",
            "Retrieve the names and email addresses of customers who made payments using a Visa card.",
            "Show the names and email IDs of clients who paid with Visa.",
            "Provide a list of customer names and their emails for those who utilized Visa as their payment method.",
            "Display the names and emails of customers that used a Visa card for their transactions."
        ],
        "ref_sql": "SELECT customer_email , customer_name FROM customers WHERE payment_method = 'Visa'",
        "MQL": "db.Customers.find({\n  \"payment_method\": \"Visa\"\n}, { \"customer_email\": 1, \"customer_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 57,
        "db_id": "course_teach",
        "nl_queries": [
            "What are the age and hometown of teachers?",
            "What is the age and hometown of every teacher?",
            "Can you provide the ages and hometowns of all the teachers?",
            "What are the ages and hometowns for each teacher in the database?",
            "Show me the age and hometown information for every teacher listed."
        ],
        "ref_sql": "SELECT Age , Hometown FROM teacher",
        "MQL": "db.teacher.find({}, { Age: 1, Hometown: 1, _id: 0 });\n"
    },
    {
        "record_id": 3860,
        "db_id": "storm_record",
        "nl_queries": [
            "Show the name for regions not affected.",
            "What are the names of regions that were not affected?",
            "List the names of regions that have not been impacted by storms.",
            "Identify regions that experienced no storm damage and provide their names.",
            "What regions are free from storm effects? Show their names."
        ],
        "ref_sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
        "MQL": "db.region.aggregate([\n  {\n    $lookup: {\n      from: \"storm\",\n      localField: \"Region_id\",\n      foreignField: \"affected_region.Region_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: {\n        $size: 0\n      }\n    }\n  },\n  {\n    $project: {\n      Region_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 483,
        "db_id": "match_season",
        "nl_queries": [
            "Show the draft pick numbers and draft classes of players whose positions are defenders.",
            "What are the draft pick numbers and draft classes for players who play the Defender position?",
            "List the draft pick numbers along with the draft classes for players designated as defenders.",
            "Provide the draft pick numbers and draft classes associated with players occupying the Defender position.",
            "Retrieve the draft classes and draft pick numbers of athletes who are categorized as defenders."
        ],
        "ref_sql": "SELECT Draft_Pick_Number , Draft_Class FROM match_season WHERE POSITION = \"Defender\"",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $match: {\n      \"match_season.Position\": \"Defender\"\n    }\n  },\n  {\n    $project: {\n      Draft_Pick_Number: \"$match_season.Draft_Pick_Number\",\n      Draft_Class: \"$match_season.Draft_Class\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 914,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the ids for all the students who participate in an activity and are under 20.",
            "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
            "List the IDs of students who are under 20 years old and participate in an activity.",
            "Retrieve the student IDs for those who are younger than 20 and are involved in any activities.",
            "Provide the identifiers of students aged under 20 who are taking part in at least one activity."
        ],
        "ref_sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20",
        "MQL": "db.Student.aggregate([\n  {\n    $match: {\n      Age: { $lt: 20 },\n      \"Participates_in.0\": { $exists: true }\n    }\n  },\n  {\n    $project: {\n      stuid: \"$StuID\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1410,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the names of users who have more than one tweet.",
            "List the names of users that have posted more than one tweet.",
            "Retrieve the names of individuals who own over one tweet.",
            "Provide the names of users who have more than one entry in their tweets.",
            "Identify users with a tweet count greater than one and return their names."
        ],
        "ref_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) > 1",
        "MQL": "db.user_profiles.find({\n  $expr: { $gt: [{ $size: \"$tweets\" }, 1] }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1312,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
            "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
            "Can you provide the ids and trade names of medicines that interact with three or more enzymes?",
            "List the ids and trade names of medicines which can engage with no fewer than three enzymes.",
            "What are the ids and trade names for medicines that have interactions with at least three different enzymes?"
        ],
        "ref_sql": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3",
        "MQL": "db.medicine.aggregate([\n  {\n    $unwind: \"$medicine_enzyme_interaction\"\n  },\n  {\n    $group: {\n      _id: \"$id\",\n      Trade_Name: { $first: \"$Trade_Name\" },\n      count_enzyme: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count_enzyme: { $gte: 3 }\n    }\n  },\n  {\n    $project: {\n      id: \"$_id\",\n      Trade_Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1534,
        "db_id": "college_2",
        "nl_queries": [
            "list in alphabetic order all course names and their instructors' names in year 2008.",
            "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
            "Retrieve and display all course titles along with their respective instructors for the year 2008, sorted alphabetically.",
            "Provide a list of course names and the names of their instructors for the year 2008, arranged in alphabetical order.",
            "Present all course titles from 2008 along with their corresponding instructors' names, organized in alphabetical sequence."
        ],
        "ref_sql": "SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$course\"\n  },\n  {\n    $unwind: \"$course.section\"\n  },\n  {\n    $unwind: \"$course.section.teaches\"\n  },\n  {\n    $match: {\n      \"course.section.year\": 2008\n    }\n  },\n  {\n    $lookup: {\n      from: \"department\",\n      let: { instructor_id: \"$course.section.teaches.ID\" },\n      pipeline: [\n        { $unwind: \"$instructor\" },\n        { $match: { $expr: { $eq: [\"$instructor.ID\", \"$$instructor_id\"] } } },\n        { $project: { _id: 0, name: \"$instructor.name\" } }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      title: \"$course.title\",\n      name: \"$Docs1.name\"\n    }\n  },\n  {\n    $sort: {\n      title: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 153,
        "db_id": "match_season",
        "nl_queries": [
            "Show the top 3 most common colleges of players in match seasons.",
            "What are the three colleges from which the most players are from?",
            "List the three colleges with the highest number of players in the match seasons.",
            "Identify the top 3 colleges that have produced the most players during the match seasons.",
            "What are the three colleges that are most represented by players in match seasons?"
        ],
        "ref_sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $group: {\n      _id: \"$match_season.College\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      College: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 202,
        "db_id": "phone_market",
        "nl_queries": [
            "List the distinct carriers of phones with memories bigger than 32.",
            "Retrieve all unique carriers for phones that have more than 32 GB of memory.",
            "Show the different carriers of mobile phones with memory capacities exceeding 32 GB.",
            "Identify distinct phone carriers for devices with memory larger than 32 GB.",
            "List all the unique carriers associated with phones that feature more than 32 GB of memory."
        ],
        "ref_sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32",
        "MQL": "db.phone.aggregate(\n  [\n    { $match: { Memory_in_G: { $gt: 32 } } },\n    { $group: { _id: '$Carrier' } },\n    { $project: { _id: 0, Carrier: '$_id' } }\n]);"
    },
    {
        "record_id": 3490,
        "db_id": "shop_membership",
        "nl_queries": [
            "Show name, address road, and city for all branches sorted by open year.",
            "What are the names, address roads, and cities of the branches ordered by opening year?",
            "Provide the names, address roads, and cities of all branches sorted by their year of establishment.",
            "List the names, address roads, and cities for each branch, arranged in order of the year they opened.",
            "What are the branch names, address roads, and cities, sorted according to their opening years?"
        ],
        "ref_sql": "SELECT name , address_road , city FROM branch ORDER BY open_year",
        "MQL": "db.branch.find({}, { \"Name\": 1, \"Address_road\": 1, \"City\": 1, \"_id\": 0 }).sort({ \"Open_year\": 1 });\n"
    },
    {
        "record_id": 1834,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
            "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.",
            "Provide the order IDs and their statuses for orders placed by the customer named \"Jeramie\".",
            "Can you show me the order identification numbers and statuses for all orders from the customer \"Jeramie\"?",
            "What are the IDs and statuses of the orders belonging to the customer called \"Jeramie\"?"
        ],
        "ref_sql": "SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      customer_name: \"Jeramie\"\n    }\n  },\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $project: {\n      order_id: \"$Orders.order_id\",\n      order_status: \"$Orders.order_status\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 953,
        "db_id": "flight_2",
        "nl_queries": [
            "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "Which airlines have departing flights from both APG and CVO airports?",
            "List all the airlines that operate flights from both the APG and CVO airports.",
            "Which airlines provide service from both the APG and CVO departure points?",
            "Identify the airlines that have outgoing flights from two airports: APG and CVO."
        ],
        "ref_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"flights.SourceAirport\": \"APG\" },\n        { \"flights.SourceAirport\": \"CVO\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$flights.Airline\",\n      airports: { $addToSet: \"$flights.SourceAirport\" }\n    }\n  },\n  {\n    $match: {\n      airports: { $all: [\"APG\", \"CVO\"] }\n    }\n  },\n  {\n    $project: {\n      Airline: { $arrayElemAt: [\"$_id\", 0] },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3959,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "What are the total number of the audiences who visited any of the festivals?",
            "How many people attended all the festivals combined?",
            "What is the total count of audiences that participated in any festival?",
            "Can you provide the aggregate number of attendees across all festivals?",
            "What is the complete number of audience members who visited different festivals?"
        ],
        "ref_sql": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "MQL": "db.festival_detail.aggregate([\n  {\n    $group: {\n      _id: null,\n      sum_Num_of_Audience: { $sum: \"$Num_of_Audience\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_Num_of_Audience: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2448,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "How many assessment notes are there in total?",
            "What is the total number of assessment notes recorded?",
            "Can you tell me how many assessment notes exist overall?",
            "How many total assessment notes do we have?",
            "What is the cumulative count of assessment notes in the system?"
        ],
        "ref_sql": "SELECT count(*) FROM ASSESSMENT_NOTES",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Teachers\" },\n  { $unwind: \"$Teachers.Assessment_Notes\" },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 2843,
        "db_id": "game_injury",
        "nl_queries": [
            "How many distinct kinds of injuries happened after season 2010?",
            "What is the count of unique injuries recorded in games following the 2010 season?",
            "How many different types of injuries occurred in matches after the 2010 season?",
            "Give me the number of distinct injury types that were reported since the 2010 season.",
            "Can you tell me the total number of unique injuries that happened after the conclusion of the 2010 season?"
        ],
        "ref_sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010",
        "MQL": "db.stadium.aggregate([\n  {\n    $unwind: \"$game\"\n  },\n  {\n    $unwind: \"$game.injury_accident\"\n  },\n  {\n    $match: {\n      \"game.Season\": { $gt: 2010 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$game.injury_accident.injury\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_injury_accident_injury: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1711,
        "db_id": "customers_and_products_contacts",
        "nl_queries": [
            "Show the customer name, customer address city, date from, and date to for each customer address history.",
            "Provide the names of customers, along with their address city, and the relevant date range for each address history entry.",
            "List each customer's name, the city of their address, and the starting and ending dates of their address history.",
            "Display customer names, the corresponding city of their address, and the duration of their address history for each customer.",
            "Fetch the customer names, associated address cities, and the effective dates for their address history records."
        ],
        "ref_sql": "SELECT T2.customer_name , T3.city , T1.date_from , T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Address_History\"\n  },\n  {\n    $lookup: {\n      from: \"Addresses\",\n      localField: \"Customer_Address_History.address_id\",\n      foreignField: \"address_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      \"customer_name\": 1,\n      \"city\": \"$Docs1.city\",\n      \"date_from\": \"$Customer_Address_History.date_from\",\n      \"date_to\": \"$Customer_Address_History.date_to\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3242,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the first and last name of students whose age is younger than the average age.",
            "What is the first and last name of all students who are younger than average?",
            "List the first and last names of students whose age is below the average age.",
            "Provide the first and last names of all students that are younger than the average age.",
            "Identify the first and last names of students whose ages are less than the average age of all students."
        ],
        "ref_sql": "SELECT fname , lname FROM student WHERE age < (SELECT avg(age) FROM student)",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_Age: { $avg: \"$Age\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      let: { avg_Age: \"$avg_Age\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $lt: [\"$Age\", \"$$avg_Age\"] }\n          }\n        },\n        {\n          $project: {\n            Fname: 1,\n            LName: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 166,
        "db_id": "tvshow",
        "nl_queries": [
            "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "What is the content of the series Sky Radio?",
            "Can you tell me what content is available for the series called \"Sky Radio\"?",
            "What content does the TV Channel named \"Sky Radio\" provide?",
            "Retrieve the content for the series \"Sky Radio.\""
        ],
        "ref_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $match: {\n      series_name: \"Sky Radio\"\n    }\n  },\n  {\n    $project: {\n      Content: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1276,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "Find the first names of owners living in Virginia and the names of dogs they own.",
            "What are the names of the dogs owned by individuals residing in Virginia? Please include the owner's first names.",
            "List the first names of dog owners from Virginia along with the names of their dogs.",
            "Identify the dogs belonging to owners who live in Virginia, and provide the first names of those owners."
        ],
        "ref_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
        "MQL": "db.Owners.aggregate([\n  {\n    $match: {\n      state: \"Virginia\"\n    }\n  },\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $project: {\n      first_name: 1,\n      name: \"$Dogs.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2365,
        "db_id": "city_record",
        "nl_queries": [
            "Find the number of matches in different competitions.",
            "For each competition, count the number of matches.",
            "Please provide the total count of matches across various competitions.",
            "How many matches are there for each individual competition?",
            "Count the matches held in each competition and display the results."
        ],
        "ref_sql": "SELECT count(*) , Competition FROM MATCH GROUP BY Competition",
        "MQL": "db.match.aggregate([\n  {\n    $group: {\n      _id: \"$Competition\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      count: 1,\n      Competition: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 500,
        "db_id": "music_4",
        "nl_queries": [
            "What are the famous titles of the artist \"Triumfall\"?",
            "Return the famous titles of the artist called \"Triumfall\".",
            "Could you provide the famous titles associated with the artist \"Triumfall\"?",
            "List the notable titles from the artist known as \"Triumfall\".",
            "What are the well-known titles by the artist named \"Triumfall\"?"
        ],
        "ref_sql": "SELECT Famous_Title FROM artist WHERE Artist = \"Triumfall\"",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      Artist: \"Triumfall\"\n    }\n  },\n  {\n    $project: {\n      Famous_Title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 192,
        "db_id": "election",
        "nl_queries": [
            "Return the names of all counties sorted by county name in descending alphabetical order.",
            "Sort the names of all counties in descending alphabetical order.",
            "List all county names arranged in descending alphabetical order.",
            "Fetch the names of every county sorted from Z to A.",
            "Provide a sorted list of all counties' names in reverse alphabetical order."
        ],
        "ref_sql": "SELECT County_name FROM county ORDER BY County_name DESC",
        "MQL": "db.county.find({}, { County_name: 1, _id: 0 }).sort({ County_name: -1 });\n"
    },
    {
        "record_id": 612,
        "db_id": "coffee_shop",
        "nl_queries": [
            "Which months have more than 2 happy hours?",
            "What months have over two instances of happy hours?",
            "Identify the months with more than two happy hour events.",
            "Which months feature greater than two happy hour occurrences?",
            "List the months that include more than two happy hours."
        ],
        "ref_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*) > 2",
        "MQL": "db.shop.aggregate([\n  { $unwind: \"$happy_hour\" },\n  { $group: { _id: \"$happy_hour.Month\", count: { $sum: 1 } } },\n  { $match: { count: { $gt: 2 } } },\n  { $project: { _id: 0, Month: \"$_id\" } }\n]);\n"
    },
    {
        "record_id": 3452,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "What is the minimum and maximum number of bathrooms of all the apartments?",
            "Give me the minimum and maximum bathroom count among all the apartments.",
            "What are the least and most number of bathrooms available in all the apartments?",
            "Can you tell me the minimum and maximum number of bathrooms for the apartments?",
            "Please provide the lowest and highest bathroom counts found in the apartments."
        ],
        "ref_sql": "SELECT min(bathroom_count) , max(bathroom_count) FROM Apartments",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $group: {\n      _id: null,\n      min_bathroom_count: { $min: \"$Apartments.bathroom_count\" },\n      max_bathroom_count: { $max: \"$Apartments.bathroom_count\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_bathroom_count: 1,\n      max_bathroom_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2541,
        "db_id": "network_2",
        "nl_queries": [
            "How many females does this network has?",
            "How many females are in the network?",
            "What is the total number of females in this network?",
            "How many women are present in the network?",
            "Can you tell me the count of female individuals in the network?"
        ],
        "ref_sql": "SELECT count(*) FROM Person WHERE gender = 'female'",
        "MQL": "db.Person.aggregate([\n  {\n    $match: {\n      gender: \"female\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1682,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
            "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?",
            "List the apartment codes and numbers for all apartments in buildings managed by \"Kyle\".",
            "Provide the types of apartments and their respective numbers located in buildings overseen by \"Kyle\".",
            "What are the apartment type identifiers and numbers for the buildings under the management of \"Kyle\"?"
        ],
        "ref_sql": "SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $match: {\n      building_manager: \"Kyle\"\n    }\n  },\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $project: {\n      apt_type_code: \"$Apartments.apt_type_code\",\n      apt_number: \"$Apartments.apt_number\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3120,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "What is the document id with 1 to 2 paragraphs?",
            "Give the ids of documents that have between one and two paragraphs.",
            "What are the document IDs that contain between one and two paragraphs?",
            "List the IDs of documents that have a paragraph count ranging from one to two.",
            "Identify the document IDs for those documents that feature one to two paragraphs."
        ],
        "ref_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $project: {\n      Document_ID: \"$Templates.Documents.Document_ID\",\n      count_Paragraphs: {\n        $size: \"$Templates.Documents.Paragraphs\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Paragraphs: { $gte: 1, $lte: 2 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Document_ID\"\n    }\n  },\n  {\n    $project: {\n      Document_ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4244,
        "db_id": "driving_school",
        "nl_queries": [
            "Show the detail of vehicle with id 1.",
            "What are the details of the car with id 1?",
            "Could you provide the details for the vehicle identified by id 1?",
            "What information do you have about the vehicle with the id of 1?",
            "Please show me the specifications of the vehicle having vehicle id 1."
        ],
        "ref_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
        "MQL": "db.Vehicles.find(\n  { vehicle_id: 1 },\n  { vehicle_details: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3356,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the average rating star for each movie that are not reviewed by Brittany Harris.",
            "What is the average rating for each movie that has never been reviewed by Brittany Harris?",
            "What is the average star rating for movies that were not assessed by Brittany Harris?",
            "Calculate the mean rating stars for all films that do not have a review from Brittany Harris.",
            "Determine the average star ratings of movies that have never been evaluated by Brittany Harris."
        ],
        "ref_sql": "SELECT mID , avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY mID",
        "MQL": "db.Movie.aggregate([\n  {\n    $lookup: {\n      from: \"Reviewer\",\n      localField: \"mID\",\n      foreignField: \"Rating.mID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": { $ne: \"Brittany Harris\" }\n    }\n  },\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: \"$mID\",\n      avg_stars: { $avg: \"$Rating.stars\" }\n    }\n  },\n  {\n     $project: {\n       mID: \"$_id\",\n       avg_stars: 1,\n       _id: 0\n     }\n   }\n]);\n"
    },
    {
        "record_id": 2566,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "How many students are not involved in any behavior incident?",
            "What is the total number of students without any recorded behavior incidents?",
            "How many students have not participated in any behavior-related incidents?",
            "Count the number of students who have no history of behavioral incidents.",
            "How many students are free from any recorded behavior incidents?"
        ],
        "ref_sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
        "MQL": "db.Addresses.aggregate([\n  { $unwind: \"$Students\" },\n  { $match: { \"Students.Behavior_Incident\": { $size: 0 } } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 1348,
        "db_id": "bike_1",
        "nl_queries": [
            "For each station, find its latitude and the minimum duration of trips that ended at the station.",
            "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
            "Retrieve the latitude and the shortest trip duration for every station where trips have concluded.",
            "For all end stations, provide the station name, latitude, and the minimum duration of trips that ended at each location.",
            "What are the names and latitudes of stations along with the shortest duration of trips that finished at those stations?"
        ],
        "ref_sql": "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
        "MQL": "db.trip.aggregate([\n  {\n    $group: {\n      _id: \"$end_station_id\",\n      min_trip_duration: { $min: \"$duration\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"station\",\n      localField: \"_id\",\n      foreignField: \"id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      name: { $arrayElemAt: [\"$Docs1.name\", 0] },\n      lat: { $arrayElemAt: [\"$Docs1.lat\", 0] },\n      min_trip_duration: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2900,
        "db_id": "soccer_2",
        "nl_queries": [
            "What are the unique types of player positions in the tryout?",
            "What are the different types of player positions?",
            "How many unique player positions are there in the tryout process?",
            "Can you list the different player positions available during the tryout?",
            "What unique positions do players hold in the tryout evaluations?"
        ],
        "ref_sql": "SELECT count(DISTINCT pPos) FROM tryout",
        "MQL": "db.Player.aggregate([\n  {\n    $unwind: \"$Tryout\"\n  },\n  {\n    $group: {\n      _id: \"$Tryout.pPos\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_pPos: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_pPos: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4229,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show ids for all transactions whose amounts are greater than the average.",
            "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
            "Provide the transaction IDs for all transactions with amounts surpassing the average transaction amount.",
            "List the IDs of transactions that exceed the average amount of transactions.",
            "Retrieve transaction IDs for those transactions whose amounts are above the average transaction amount."
        ],
        "ref_sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Orders\"\n  },\n  {\n    $unwind: \"$Orders.Invoices\"\n  },\n  {\n    $unwind: \"$Orders.Invoices.Financial_Transactions\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_transaction_amount: { $avg: \"$Orders.Invoices.Financial_Transactions.transaction_amount\" }\n    }\n  },\n  {\n    $addFields: {\n      avg_transaction_amount: \"$avg_transaction_amount\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Customers\",\n      let: { avg_transaction_amount: \"$avg_transaction_amount\" },\n      pipeline: [\n        { $unwind: \"$Orders\" },\n        { $unwind: \"$Orders.Invoices\" },\n        { $unwind: \"$Orders.Invoices.Financial_Transactions\" },\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$Orders.Invoices.Financial_Transactions.transaction_amount\", \"$$avg_transaction_amount\"]\n            }\n          }\n        },\n        {\n          $project: {\n            transaction_id: \"$Orders.Invoices.Financial_Transactions.transaction_id\",\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 1062,
        "db_id": "singer",
        "nl_queries": [
            "Show the names of singers that have more than one song.",
            "What are the names of the singers that have more than one songs?",
            "Provide a list of singers who have recorded more than one song.",
            "Give me the names of singers that possess multiple songs.",
            "What are the names of singers who have at least two songs?"
        ],
        "ref_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "MQL": "db.singer.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $group: {\n      _id: {\n        Singer_ID: \"$Singer_ID\",\n        Name: \"$Name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3754,
        "db_id": "products_for_hire",
        "nl_queries": [
            "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
            "List the payment dates for those payments that either exceed $300 or were made using a 'Check'.",
            "Retrieve the dates of payments made that were either over 300 in amount or processed as 'Check' transactions.",
            "What are the dates of payments that have either an amount paid greater than 300 or were categorized as 'Check'?",
            "Find the payment dates for payments where the amount exceeds 300 or the payment type is 'Check'."
        ],
        "ref_sql": "SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'",
        "MQL": "db.Discount_Coupons.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $unwind: \"$Customers.Payments\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Customers.Payments.amount_paid\": { $gt: 300 } },\n        { \"Customers.Payments.payment_type_code\": \"Check\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      payment_date: \"$Customers.Payments.payment_date\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3978,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the total amount of loans provided by bank branches in the state of New York.",
            "What is the total amount of money loaned by banks in New York state?",
            "What is the total sum of loan amounts issued by bank branches located in New York?",
            "Calculate the overall amount of loans granted by banks in the state of New York.",
            "Determine the total loan amount distributed by bank branches operating in New York state."
        ],
        "ref_sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'",
        "MQL": "db.bank.aggregate([\n  {\n    $match: {\n      state: \"New York\"\n    }\n  },\n  {\n    $unwind: \"$loan\"\n  },\n  {\n    $group: {\n      _id: null,\n      sum_amount: {\n        $sum: \"$loan.amount\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_amount: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2193,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Find the average height and weight for all males (sex is M).",
            "What are the average height and weight across males (sex is M)?",
            "What is the average height and weight of male individuals?",
            "Calculate the mean height and weight for all men.",
            "Determine the average height and weight among the male population."
        ],
        "ref_sql": "SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      Sex: \"M\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_height: { $avg: \"$Height\" },\n      avg_weight: { $avg: \"$Weight\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_height: 1,\n      avg_weight: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3689,
        "db_id": "college_2",
        "nl_queries": [
            "Find the names of students who have taken any course in the fall semester of year 2003.",
            "What are the names of students who took a course in the Fall of 2003?",
            "List the names of students who enrolled in courses during the Fall semester of 2003.",
            "What names of students correspond to those who took courses in the Fall of the year 2003?",
            "Retrieve the names of students who completed any courses in Fall 2003."
        ],
        "ref_sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$student\"\n  },\n  {\n    $unwind: \"$student.takes\"\n  },\n  {\n    $match: {\n      \"student.takes.semester\": \"Fall\",\n      \"student.takes.year\": 2003\n    }\n  },\n  {\n    $project: {\n      name: \"$student.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 63,
        "db_id": "aircraft",
        "nl_queries": [
            "List the names of aircrafts and that did not win any match.",
            "What are the names of all aicrafts that have never won any match?",
            "Provide the names of aircrafts that have never achieved victory in any match.",
            "Enumerate all aircraft that have not secured any wins in matches.",
            "What are the names of aircraft that haven't won any competitions?"
        ],
        "ref_sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
        "MQL": "db.aircraft.aggregate([\n  {\n    $match: {\n      \"match.Winning_Pilot\": { $exists: false }\n    }\n  },\n  {\n    $project: {\n      Aircraft: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4077,
        "db_id": "aircraft",
        "nl_queries": [
            "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
            "What is the name and age of the pilot younger than 30 who has won the most number of times?",
            "Identify the name and age of the youngest pilot with the highest number of victories.",
            "Who is the pilot under 30 years old that has achieved the most wins, and what are their name and age?",
            "Give me the name and age of the pilot, aged less than 30, who has the most wins to their credit."
        ],
        "ref_sql": "SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.pilot.aggregate([\n  {\n    $match: {\n      Age: { $lt: 30 }\n    }\n  },\n  {\n    $group: {\n      _id: {\n        Name: \"$Name\",\n        Age: \"$Age\"\n      },\n      winCount: { $sum: { $size: \"$match\" } }\n    }\n  },\n  {\n    $sort: {\n      winCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id.Name\",\n      Age: \"$_id.Age\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2225,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the average room count of the apartments that have booking status code \"Provisional\".",
            "What is the average room count of the apartments whose booking status code is \"Provisional\"?",
            "What is the average number of rooms in apartments that are marked as \"Provisional\" in their booking status?",
            "Can you provide the mean room count for apartments with a booking status of \"Provisional\"?",
            "Determine the average room quantity for apartments that have been booked provisionally."
        ],
        "ref_sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $match: {\n      \"Apartments.Apartment_Bookings.booking_status_code\": \"Provisional\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_room_count: {\n        $avg: {\n          $convert: {\n            input: \"$Apartments.room_count\",\n            to: \"double\"\n          }\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_room_count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2296,
        "db_id": "product_catalog",
        "nl_queries": [
            "What is the entry name of the most expensive catalog (in USD)?",
            "Find the entry name of the catalog with the highest price (in USD).",
            "What is the name of the catalog entry with the highest price in US dollars?",
            "Identify the catalog entry that has the maximum price in USD.",
            "What is the name of the catalog item that is priced the highest in terms of dollars?"
        ],
        "ref_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $sort: {\n      \"Catalog_Structure.Catalog_Contents.price_in_dollars\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      catalog_entry_name: \"$Catalog_Structure.Catalog_Contents.catalog_entry_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4041,
        "db_id": "csu_1",
        "nl_queries": [
            "What is the campus fee of \"San Francisco State University\" in year 2000?",
            "In the year 2000, what is the campus fee for San Francisco State University?",
            "What is the fee charged by San Francisco State University for the year 2000?",
            "Can you tell me the campus fee for San Francisco State University in the year 2000?",
            "How much is the campus fee for San Francisco State University for the year 2000?"
        ],
        "ref_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000",
        "MQL": "db.Campuses.aggregate([\n  {\n    $match: {\n      Campus: \"San Francisco State University\",\n      Year: 2000\n    }\n  },\n  {\n    $project: {\n      CampusFee: {\n        $arrayElemAt: [\"$csu_fees.CampusFee\", 0]\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 863,
        "db_id": "orchestra",
        "nl_queries": [
            "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "List the record companies associated with orchestras that were established both before and after the year 2003.",
            "Identify the record companies that have orchestras founded in both periods: before 2003 and after 2003.",
            "Find the record labels used by orchestras that were founded both prior to 2003 and post-2003."
        ],
        "ref_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $group: {\n      _id: \"$orchestra.Record_Company\",\n      foundedBefore2003: {\n        $addToSet: {\n          $cond: [{ $lt: [\"$orchestra.Year_of_Founded\", 2003] }, \"$orchestra.Orchestra_ID\", null]\n        }\n      },\n      foundedAfter2003: {\n        $addToSet: {\n          $cond: [{ $gte: [\"$orchestra.Year_of_Founded\", 2003] }, \"$orchestra.Orchestra_ID\", null]\n        }\n      }\n    }\n  },\n  {\n    $project: {\n      foundedBefore2003: {\n        $setDifference: [\"$foundedBefore2003\", [null]]\n      },\n      foundedAfter2003: {\n        $setDifference: [\"$foundedAfter2003\", [null]]\n      }\n    }\n  },\n  {\n    $match: {\n      $and: [\n        { \"foundedBefore2003.0\": { $exists: true } },\n        { \"foundedAfter2003.0\": { $exists: true } }\n      ]\n    }\n  },\n  {\n    $project: {\n      Record_Company: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3702,
        "db_id": "driving_school",
        "nl_queries": [
            "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
            "What is the nickname of the employee named Janessa Sawayn?",
            "What nickname does the staff member named Janessa Sawayn go by?",
            "Can you tell me the nickname of the employee Janessa Sawayn?",
            "What is the preferred nickname for the staff with the name Janessa Sawayn?"
        ],
        "ref_sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Janessa\",\n      \"Staff.last_name\": \"Sawayn\"\n    }\n  },\n  {\n    $project: {\n      nickname: \"$Staff.nickname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3093,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all director names who have a movie in the year 1999 or 2000.",
            "Which directors had a movie in either 1999 or 2000?",
            "List the names of directors who directed films released in 1999 or 2000.",
            "Identify all directors with movies that came out in either 1999 or 2000.",
            "Provide the names of all directors who had releases in the years 1999 or 2000."
        ],
        "ref_sql": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
        "MQL": "db.movie.find(\n  { \n    $or: [ { Year: 1999 }, { Year: 2000 } ] \n  },\n  { Director: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2635,
        "db_id": "college_2",
        "nl_queries": [
            "How many rooms whose capacity is less than 50 does the Lamberton building have?",
            "Count the number of rooms in Lamberton with capacity lower than 50.",
            "What is the total number of rooms in the Lamberton building that can hold fewer than 50 people?",
            "How many classrooms with a capacity of under 50 are located in the Lamberton building?",
            "Can you tell me the number of rooms in the Lamberton building that have a capacity of less than 50?"
        ],
        "ref_sql": "SELECT count(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50",
        "MQL": "db.classroom.aggregate([\n  {\n    $match: {\n      building: \"Lamberton\",\n      capacity: { $lt: 50 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1638,
        "db_id": "entrepreneur",
        "nl_queries": [
            "What are the names of entrepreneurs?",
            "Return the names of entrepreneurs.",
            "Can you list the names of individuals who are entrepreneurs?",
            "Provide the names of people identified as entrepreneurs.",
            "Show me the names of those who are classified as entrepreneurs."
        ],
        "ref_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "MQL": "db.people.aggregate([\n  {\n    $match: {\n      \"entrepreneur\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4198,
        "db_id": "theme_gallery",
        "nl_queries": [
            "Show theme and year for all exhibitions with ticket prices lower than 15.",
            "What are the theme and year for all exhibitions that have a ticket price under 15?",
            "Provide the theme and year for exhibitions that charge a ticket price below 15.",
            "List the theme and year of all exhibitions with ticket costs that are less than 15.",
            "What themes and years correspond to exhibitions where the ticket price is under 15?"
        ],
        "ref_sql": "SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$exhibition\"\n  },\n  {\n    $match: {\n      \"exhibition.Ticket_Price\": { $lt: 15 }\n    }\n  },\n  {\n    $project: {\n      Theme: \"$exhibition.Theme\",\n      Year: \"$exhibition.Year\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 589,
        "db_id": "performance_attendance",
        "nl_queries": [
            "Show the locations that have at least two performances.",
            "Identify locations that host a minimum of two performances.",
            "List all locations with at least two past performances.",
            "Retrieve the locations that have recorded two or more performances.",
            "Find the venues where there have been a minimum of two performances."
        ],
        "ref_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2",
        "MQL": "db.performance.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2316,
        "db_id": "bike_1",
        "nl_queries": [
            "For each city, return the highest latitude among its stations.",
            "For each city, what is the highest latitude for its stations?",
            "Identify the maximum latitude of bike stations for every city.",
            "What is the top latitude recorded among bike stations in each city?",
            "For each city, determine the highest latitude of its bike stations."
        ],
        "ref_sql": "SELECT city , max(lat) FROM station GROUP BY city",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      max_lat: { $max: \"$lat\" }\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      max_lat: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4057,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Who made the latest order?",
            "Find the name of the customer who made an order most recently.",
            "Who is the customer that placed the most recent order?",
            "Identify the name of the customer who last made an order.",
            "Which customer made the latest purchase?"
        ],
        "ref_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Orders\"\n  },\n  {\n    $sort: {\n      \"Customer_Orders.order_date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      customer_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2330,
        "db_id": "bike_1",
        "nl_queries": [
            "List all the cities in a decreasing order of each city's stations' highest latitude.",
            "For each city, list their names in decreasing order by their highest station latitude.",
            "Provide a list of cities sorted by the highest latitude of their stations in descending order.",
            "Enumerate the names of cities based on the maximum latitude of their respective stations, sorted from highest to lowest.",
            "Show all city names arranged in decreasing order according to the highest latitude recorded among their stations."
        ],
        "ref_sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      highest_latitude: { $max: \"$lat\" }\n    }\n  },\n  {\n    $sort: {\n      highest_latitude: -1\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3775,
        "db_id": "game_injury",
        "nl_queries": [
            "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
            "Can you provide the names of players, the total matches they've played, and the sources of injury details for those who did not report a 'Knee problem'?",
            "List the names, match counts, and information sources for athletes who have not suffered from a 'Knee problem' injury.",
            "What are the names of players along with their number of matches and the sources of injury information for those without a 'Knee problem'?",
            "Show the player names, their match participation, and the source of information for players who are free from 'Knee problem' injuries."
        ],
        "ref_sql": "SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$game\" },\n  { $unwind: \"$game.injury_accident\" },\n  { $match: { \"game.injury_accident.Injury\": { $ne: \"Knee problem\" } } },\n  { $project: {\n      \"Player\": \"$game.injury_accident.Player\",\n      \"Number_of_matches\": \"$game.injury_accident.Number_of_matches\",\n      \"Source\": \"$game.injury_accident.Source\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2629,
        "db_id": "product_catalog",
        "nl_queries": [
            "How many products are there in the records?",
            "Find the total number of catalog contents.",
            "What is the total count of products listed in the catalog?",
            "How many items are present in the catalog's contents?",
            "Can you provide the total number of entries available in the product records?"
        ],
        "ref_sql": "SELECT count(*) FROM catalog_contents",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1321,
        "db_id": "battle_death",
        "nl_queries": [
            "What are the death and injury situations caused by the ship with tonnage 't'?",
            "Can you tell me the details regarding deaths and injuries linked to the ship that has a tonnage of 't'?",
            "What information is available on the casualties (killed and injured) from the ship with a tonnage of 't'?",
            "What are the statistics on casualties caused by the ship whose tonnage is 't'?",
            "Provide the details on the fatalities and injuries resulting from the ship categorized with a tonnage of 't'."
        ],
        "ref_sql": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
        "MQL": "db.battle.aggregate([\n  { $unwind: \"$ship\" },\n  { $match: { \"ship.tonnage\": \"t\" } },\n  { $unwind: \"$ship.death\" },\n  { $project: { \"killed\": \"$ship.death.killed\", \"injured\": \"$ship.death.injured\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 3013,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find the name of all customers whose name contains \"Alex\".",
            "Which customer's name contains \"Alex\"? Find the full name.",
            "List the names of all customers that have \"Alex\" in their name.",
            "Retrieve the full names of customers whose names include the string \"Alex\".",
            "Identify customers with names that feature \"Alex\"."
        ],
        "ref_sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "MQL": "db.Customers.find(\n  { customer_name: { $regex: \"Alex\", $options: \"i\" } },\n  { customer_name: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 3607,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the names of circuits that belong to UK or Malaysia?",
            "What are the names of all the circuits that are in the UK or Malaysia?",
            "Could you provide the names of the circuits situated in either the UK or Malaysia?",
            "What are the names of all circuits located in the UK or Malaysia?",
            "List the names of circuits that are found in the UK or Malaysia."
        ],
        "ref_sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "MQL": "db.circuits.aggregate([\n  {\n    $match: {\n      $or: [\n        { country: \"UK\" },\n        { country: \"Malaysia\" }\n      ]\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3821,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
            "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
            "List the names of products that are described as \"red\" and possess the characteristic \"fast\".",
            "What product names correspond to the \"red\" color description and have a characteristic classified as \"fast\"?",
            "Provide the names of products that feature both the color \"red\" and the \"fast\" characteristic."
        ],
        "ref_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $match: {\n      color_description: \"red\"\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $lookup: {\n      from: \"Ref_Characteristic_Types\",\n      let: { product_id: \"$Products.product_id\" },\n      pipeline: [\n        { $unwind: \"$Characteristics\" },\n        { $match: { \"Characteristics.characteristic_name\": \"fast\" } },\n        { $unwind: \"$Characteristics.Product_Characteristics\" },\n        {\n          $match: {\n            $expr: {\n              $eq: [\"$Characteristics.Product_Characteristics.product_id\", \"$$product_id\"]\n            }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.0\": { $exists: true }\n    }\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1393,
        "db_id": "college_2",
        "nl_queries": [
            "Find the name of instructors who are advising more than one student.",
            "What are the names of instructors who advise more than one student?",
            "List the names of instructors who have more than one student they are advising.",
            "Provide the names of instructors that are mentoring over one student.",
            "Identify instructors who are advising multiple students by name."
        ],
        "ref_sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count(*) > 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $group: {\n      _id: \"$instructor.name\",\n      count: {\n        $sum: {\n          $cond: {\n            if: {\n              $isArray: \"$instructor.advisor\"\n            },\n            then: {\n              $size: \"$instructor.advisor\"\n            },\n            else: 0\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      count: {\n        $gt: 1\n      }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 835,
        "db_id": "solvency_ii",
        "nl_queries": [
            "What are the names and type codes of products?",
            "Can you provide the names and type codes for the available products?",
            "Please list the product names along with their corresponding type codes.",
            "What are the product names and their associated type codes?",
            "Show me the names of products together with their type codes."
        ],
        "ref_sql": "SELECT Product_Name , Product_Type_Code FROM Products",
        "MQL": "db.Products.find({}, { \"Product_Name\": 1, \"Product_Type_Code\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3263,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "Which gender makes up the majority of the staff?",
            "What gender constitutes the largest portion of the staff?",
            "Which gender has the highest number of staff members?",
            "Identify the gender that represents the majority among the staff.",
            "Which gender is the most prevalent in the staff population?"
        ],
        "ref_sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Staff.aggregate([\n  {\n    $group: {\n      _id: \"$gender\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      gender: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3595,
        "db_id": "company_office",
        "nl_queries": [
            "List the names of buildings in descending order of building height.",
            "What are the names of buildings sorted in descending order of building height?",
            "Provide the names of buildings arranged from tallest to shortest.",
            "Can you show the building names ordered by height in descending order?",
            "What are the names of the buildings listed according to their height in descending sequence?"
        ],
        "ref_sql": "SELECT name FROM buildings ORDER BY Height DESC",
        "MQL": "db.buildings.find({}, { name: 1, _id: 0 }).sort({ Height: -1 });\n"
    },
    {
        "record_id": 869,
        "db_id": "wrestler",
        "nl_queries": [
            "Please show the most common reigns of wrestlers.",
            "Which reign is the most common among wrestlers?",
            "What are the reigns that occur most frequently among wrestlers?",
            "Identify the reign that is most prevalent among wrestlers.",
            "Can you find out which reign is the most frequently seen among wrestlers?"
        ],
        "ref_sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "MQL": "db.wrestler.aggregate([\n  {\n    $group: {\n      _id: \"$Reign\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Reign: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2831,
        "db_id": "election_representative",
        "nl_queries": [
            "How many distinct parties are there for representatives?",
            "What is the total number of unique parties represented by the officials?",
            "How many different political parties are involved with the representatives?",
            "Can you tell me the count of distinct political parties within the representative list?",
            "What is the number of unique parties among the representatives in the database?"
        ],
        "ref_sql": "SELECT count(DISTINCT Party) FROM representative",
        "MQL": "db.representative.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_Party: { $addToSet: \"$Party\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_Party: { $size: \"$count_DISTINCT_Party\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 728,
        "db_id": "election_representative",
        "nl_queries": [
            "List the names of representatives that have not participated in elections listed here.",
            "Provide the names of representatives who have never taken part in any elections.",
            "Show the names of representatives that are not listed as participants in any elections.",
            "Identify the representatives that have not been involved in elections and list their names.",
            "Retrieve the names of those representatives without any election records."
        ],
        "ref_sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
        "MQL": "db.representative.find({\n  \"election\": { $size: 0 }\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4175,
        "db_id": "icfp_1",
        "nl_queries": [
            "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
            "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".",
            "What are the titles of papers authored by \"Turon\" as the second author from institutions located in the USA?",
            "List the papers where the second author is named \"Turon\" and is affiliated with a US-based institution.",
            "Identify papers that have \"Turon\" as their second author and are published by institutions in the United States."
        ],
        "ref_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $unwind: \"$Authorship\"\n  },\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $lookup: {\n      from: \"Inst\",\n      localField: \"Authorship.instID\",\n      foreignField: \"instID\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $unwind: \"$Docs2\"\n  },\n  {\n    $match: {\n      \"Authorship.authOrder\": 2,\n      \"AuthorDetails.lname\": \"Turon\",\n      \"Docs2.country\": \"USA\"\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 623,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the marketing region code that has the most drama workshop groups?",
            "Which marketing region has the most drama workshop groups? Give me the region code.",
            "Identify the marketing region code that hosts the largest number of drama workshop groups.",
            "Which marketing region code corresponds to the greatest count of drama workshop groups?",
            "What is the region code for the marketing area with the highest number of drama workshop groups?"
        ],
        "ref_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Drama_Workshop_Groups\"\n  },\n  {\n    $group: {\n      _id: \"$Drama_Workshop_Groups.Marketing_Region_Code\",\n      workshopGroupCount: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { workshopGroupCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Marketing_Region_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4161,
        "db_id": "club_1",
        "nl_queries": [
            "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
            "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
            "List the first and last names of all female members in the \"Bootup Baltimore\" club.",
            "Provide the first names and last names of female students belonging to the \"Bootup Baltimore\" club.",
            "Retrieve the first and last names of every female member associated with the \"Bootup Baltimore\" club."
        ],
        "ref_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Bootup Baltimore\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Sex\": \"F\"\n    }\n  },\n  {\n    $project: {\n      Fname: \"$Docs1.Fname\",\n      LName: \"$Docs1.LName\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2700,
        "db_id": "department_management",
        "nl_queries": [
            "How many heads of the departments are older than 56 ?",
            "What is the number of department heads who are over the age of 56?",
            "How many heads of departments exceed the age of 56?",
            "Count the number of department heads that are older than 56.",
            "Determine how many department heads are aged beyond 56 years."
        ],
        "ref_sql": "SELECT count(*) FROM head WHERE age > 56",
        "MQL": "db.head.aggregate([\n  {\n    $match: {\n      \"age\": { $gt: 56 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 2924,
        "db_id": "soccer_2",
        "nl_queries": [
            "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
            "How many states have a college with more students than average?",
            "How many states have colleges with enrollment figures exceeding the average enrollment?",
            "What is the count of states that possess a college whose student body is larger than the average enrollment?",
            "Can you tell me how many states feature colleges that enroll more students than the average across all institutions?"
        ],
        "ref_sql": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)",
        "MQL": "db.College.aggregate([\n  {\n    $group: {\n      _id: null,\n      avg_enr: { $avg: \"$enr\" }\n    }\n  },\n  {\n    $addFields: {\n      avg_enr: \"$avg_enr\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"College\",\n      let: { avg_enr: \"$avg_enr\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: {\n              $gt: [\"$enr\", \"$$avg_enr\"]\n            }\n          }\n        },\n        {\n          $group: {\n            _id: \"$state\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_state: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_state: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1914,
        "db_id": "phone_market",
        "nl_queries": [
            "Show the names of phones that are on market with number of shops greater than 50.",
            "List the names of mobile phones available in markets that have more than 50 shops.",
            "Identify the names of phones found in markets with a shop count exceeding 50.",
            "What are the names of phones sold in markets where the number of shops is greater than 50?",
            "Provide the names of phones that are located in markets having over 50 shops."
        ],
        "ref_sql": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50",
        "MQL": "db.phone.aggregate([\n  {\n    $lookup: {\n      from: \"market\",\n      localField: \"phone_market.Market_ID\",\n      foreignField: \"Market_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Num_of_shops\": { $gt: 50 }\n    }\n  },\n  {\n    $project: {\n      \"Name\": 1,\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3461,
        "db_id": "race_track",
        "nl_queries": [
            "What is the minimum, maximum, and average seating for all tracks.",
            "Return the minimum, maximum, and average seating across all tracks.",
            "Can you provide the minimum, maximum, and average seating capacity for all race tracks?",
            "What are the minimum, maximum, and average seating figures for every track?",
            "Give me the statistics for seating capacities, including the minimum, maximum, and average for all tracks available."
        ],
        "ref_sql": "SELECT min(seating) , max(seating) , avg(seating) FROM track",
        "MQL": "db.track.aggregate([\n  {\n    $group: {\n      _id: null,\n      min_seating: { $min: \"$Seating\" },\n      max_seating: { $max: \"$Seating\" },\n      avg_seating: { $avg: \"$Seating\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      min_seating: 1,\n      max_seating: 1,\n      avg_seating: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 969,
        "db_id": "insurance_policies",
        "nl_queries": [
            "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
            "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
            "What is the count of settlements for each claim? Please provide both the claim ID and the associated settlement count.",
            "For each claim, how many settlements are recorded? Include the claim identifier and the number of settlements.",
            "List the number of settlements tied to each claim, along with the respective claim ID."
        ],
        "ref_sql": "SELECT T1.Claim_id , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Customer_Policies\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims\"\n  },\n  {\n    $unwind: \"$Customer_Policies.Claims.Settlements\"\n  },\n  {\n    $group: {\n      _id: \"$Customer_Policies.Claims.Claim_ID\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Claim_ID: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1291,
        "db_id": "formula_1",
        "nl_queries": [
            "What are the forename and surname of the driver who has the smallest laptime?",
            "What is the forename and surname of the driver with the shortest laptime?",
            "Who is the driver with the fastest lap time, and what are their first and last names?",
            "Identify the forename and surname of the driver that achieved the minimum lap time.",
            "Can you tell me the first name and last name of the driver who recorded the quickest lap?"
        ],
        "ref_sql": "SELECT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: \"$lapTimes\"\n  },\n  {\n    $group: {\n      _id: null,\n      min_milliseconds: { $min: \"$lapTimes.milliseconds\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"drivers\",\n      let: { min_milliseconds: \"$min_milliseconds\" },\n      pipeline: [\n        {\n          $unwind: \"$lapTimes\"\n        },\n        {\n          $match: {\n            $expr: {\n              $eq: [\"$lapTimes.milliseconds\", \"$$min_milliseconds\"]\n            }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            forename: 1,\n            surname: 1\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      forename: \"$Docs1.forename\",\n      surname: \"$Docs1.surname\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3471,
        "db_id": "company_office",
        "nl_queries": [
            "What are the name and assets of each company, sorted in ascending order of company name?",
            "List the name and assets of each company in ascending order of company name.",
            "Provide the names and asset values of all companies, arranged in alphabetical order by the company name.",
            "Show me the company names along with their assets, sorted by company name in ascending order.",
            "Can you list each company's name and assets, sorted in ascending order by their names?"
        ],
        "ref_sql": "SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
        "MQL": "db.Companies.aggregate([\n  {\n    $project: {\n      name: 1,\n      Assets_billion: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3670,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the names of all races held in 2017.",
            "What are the names of all the races that occurred in the year 2017?",
            "List the names of all races conducted in 2017.",
            "What names correspond to the races that took place during the year 2017?",
            "Retrieve the titles of every race that was held in the year 2017."
        ],
        "ref_sql": "SELECT name FROM races WHERE YEAR = 2017",
        "MQL": "db.circuits.aggregate([\n  {\n    $unwind: \"$races\"\n  },\n  {\n    $match: {\n      \"races.year\": 2017\n    }\n  },\n  {\n    $project: {\n      name: \"$races.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2152,
        "db_id": "loan_1",
        "nl_queries": [
            "For each account type, find the average account balance of customers with credit score lower than 50.",
            "What is the average account balance of customers with credit score below 50 for the different account types?",
            "Calculate the average account balance for customers with credit scores under 50, broken down by account type.",
            "What are the average balances of accounts for customers whose credit scores fall below 50 across various account types?",
            "Determine the average account balances according to each account type for customers whose credit scores are less than 50."
        ],
        "ref_sql": "SELECT avg(acc_bal) , acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $match: {\n      \"customer.credit_score\": { $lt: 50 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer.acc_type\",\n      avg_acc_bal: { $avg: \"$customer.acc_bal\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_acc_bal: 1,\n      acc_type: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1106,
        "db_id": "activity_1",
        "nl_queries": [
            "What is the name of the activity that has the most faculty members involved in?",
            "Which activity has the most faculty members participating in? Find the activity name.",
            "Identify the activity with the highest number of faculty participants and provide its name.",
            "Which activity has the greatest faculty involvement? Please give me the name of that activity.",
            "What activity features the most faculty members in its participation? What is the name of this activity?"
        ],
        "ref_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Activity.aggregate([\n  {\n    $unwind: \"$Faculty_Participates_in\"\n  },\n  {\n    $group: {\n      _id: \"$Faculty_Participates_in.actid\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Activity\",\n      localField: \"_id\",\n      foreignField: \"actid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      activity_name: { $arrayElemAt: [\"$Docs1.activity_name\", 0] },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 319,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
            "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.",
            "List the unique apartment numbers for those with confirmed booking statuses.",
            "What are the apartment numbers of the apartments that have confirmed bookings?",
            "Identify all distinct apartment numbers corresponding to apartments with booking status \"Confirmed\"."
        ],
        "ref_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $match: {\n      \"Apartments.Apartment_Bookings.booking_status_code\": \"Confirmed\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$Apartments.apt_number\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      apt_number: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 78,
        "db_id": "workshop_paper",
        "nl_queries": [
            "List the authors of submissions in ascending order of scores.",
            "Find the author for each submission and list them in ascending order of submission score.",
            "Retrieve the names of authors for all submissions, sorted by their scores in ascending order.",
            "Provide a list of authors corresponding to each submission, arranged by submission scores from lowest to highest.",
            "Compile a list of submission authors and sort them by their scores in increasing order."
        ],
        "ref_sql": "SELECT Author FROM submission ORDER BY Scores ASC",
        "MQL": "db.submission.find({}, { Author: 1, _id: 0 }).sort({ Scores: 1 });\n"
    },
    {
        "record_id": 4173,
        "db_id": "swimming",
        "nl_queries": [
            "Find the names of stadiums that the most swimmers have been to.",
            "Which stadium has seen the highest number of different swimmers?",
            "List the names of the stadiums with the most unique swimmer attendance.",
            "What is the name of the stadium that has hosted the greatest number of distinct swimmers?",
            "Identify the stadium that has attracted the largest count of unique swimmers."
        ],
        "ref_sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.stadium.aggregate([\n  { $unwind: \"$event\" },\n  { $unwind: \"$event.record\" },\n  {\n    $group: {\n      _id: { Stadium_ID: \"$ID\", name: \"$name\" },\n      uniqueSwimmers: { $addToSet: \"$event.record.Swimmer_ID\" }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id.name\",\n      swimmerCount: { $size: \"$uniqueSwimmers\" }\n    }\n  },\n  { $sort: { swimmerCount: -1 } },\n  { $limit: 1 },\n  { $project: { name: 1, _id: 0 } }\n]);\n"
    },
    {
        "record_id": 2862,
        "db_id": "network_2",
        "nl_queries": [
            "How many different cities are they from?",
            "How many different cities do people originate from?",
            "What is the count of distinct cities represented by the individuals?",
            "How many unique cities are associated with the people in the database?",
            "Can you tell me the number of different cities where the individuals come from?"
        ],
        "ref_sql": "SELECT count(DISTINCT city) FROM Person",
        "MQL": "db.Person.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_city: { $addToSet: \"$city\" }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_city: { $size: \"$count_DISTINCT_city\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1527,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "List the id and type of each thing, and the details of the organization that owns it.",
            "Provide a list showing the identifier and type of each item, along with the details of its owning organization.",
            "Retrieve the IDs and classifications of all things, as well as the corresponding organization details for each.",
            "Generate a list that includes each thing's ID and type alongside the details of the organization that possesses it.",
            "Display the identifiers and types for each thing along with the organization details of their respective owners."
        ],
        "ref_sql": "SELECT T1.thing_id , T1.type_of_Thing_Code , T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id",
        "MQL": "db.Organizations.aggregate([\n  {\n    $unwind: \"$Things\"\n  },\n  {\n    $project: {\n      \"thing_id\": \"$Things.thing_id\",\n      \"Type_of_Thing_Code\": \"$Things.Type_of_Thing_Code\",\n      \"organization_details\": \"$organization_details\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3820,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show all product names without an order.",
            "What are the names of products that have never been ordered?",
            "List the names of products that have not been placed in any orders.",
            "Which products have never been ordered? Provide their names.",
            "Retrieve all product names for items that contain no order records."
        ],
        "ref_sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
        "MQL": "db.Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.Order_Items\": { $eq: [] }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_name: \"$Products.product_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 209,
        "db_id": "store_product",
        "nl_queries": [
            "Find all the distinct district names ordered by city area in descending.",
            "What are the different district names in order of descending city area?",
            "List all unique district names sorted by their city area in descending order.",
            "Retrieve the different names of districts arranged in descending order based on the city area.",
            "Show all distinct district names ordered by city area from highest to lowest."
        ],
        "ref_sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "MQL": "db.district.aggregate([\n  {\n    $group: {\n      _id: \"$District_name\",\n      total_city_area: { $sum: \"$City_Area\" }\n    }\n  },\n  {\n    $sort: {\n      total_city_area: -1\n    }\n  },\n  {\n    $project: {\n      District_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1767,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the ids of the investors who have at least two transactions.",
            "Retrieve the IDs of investors that have two or more transactions.",
            "List the investor IDs who have engaged in at least two transactions.",
            "Provide the ids of investors with a minimum of two transactions.",
            "Find the IDs of investors who possess no fewer than two transactions."
        ],
        "ref_sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
        "MQL": "db.Investors.find({\n  $expr: {\n    $gte: [{ $size: \"$Transactions\" }, 2]\n  }\n}, { \"investor_id\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1055,
        "db_id": "perpetrator",
        "nl_queries": [
            "List the names of perpetrators in descending order of the year.",
            "Provide the names of all perpetrators sorted by the year in descending order.",
            "Show a list of perpetrator names arranged from the most recent year to the oldest.",
            "Retrieve the names of perpetrators, sorted by year with the latest year first.",
            "Display the names of individuals identified as perpetrators, ranked by year in decreasing order."
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC",
        "MQL": "db.people.aggregate([\n  { $unwind: \"$perpetrator\" },\n  { $sort: { \"perpetrator.Year\": -1 } },\n  { $project: { \"Name\": 1, \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 2238,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "What is the average and total transaction amount?",
            "Return the average transaction amount, as well as the total amount of all transactions.",
            "Please provide the average and cumulative transaction amounts.",
            "What are the average transaction amount and the total of all transactions combined?",
            "Can you return both the average transaction amount along with the aggregate total of transactions?"
        ],
        "ref_sql": "SELECT avg(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
        "MQL": "db.Accounts.aggregate([\n  {\n    $lookup: {\n      from: \"Customers_Cards\",\n      localField: \"account_id\",\n      foreignField: \"account_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      Docs1: {\n        $concatArrays: [\"$Financial_Transactions\", \"$Docs1.Financial_Transactions\"]\n      }\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_transaction_amount: {\n        $avg: \"$Docs1.transaction_amount\"\n      },\n      sum_transaction_amount: {\n        $sum: \"$Docs1.transaction_amount\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_transaction_amount: 1,\n      sum_transaction_amount: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1411,
        "db_id": "epinions_1",
        "nl_queries": [
            "Find the name of the user who gives the most reviews.",
            "Identify the user who has written the highest number of reviews.",
            "Who is the user that submits the most reviews?",
            "Name the user account with the largest quantity of reviews.",
            "Retrieve the name of the user that has provided the most feedback."
        ],
        "ref_sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.useracct.aggregate([\n  {\n    $project: {\n      name: 1,\n      reviewCount: { $size: \"$review\" }\n    }\n  },\n  {\n    $sort: { reviewCount: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { _id: 0, name: 1 }\n  }\n]);\n"
    },
    {
        "record_id": 1224,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "What is the program id and the summary of the degree that has the most students enrolled?",
            "Identify the degree program with the largest student enrollment and provide its id along with the summary.",
            "What is the degree program id and summary for the program that has the highest number of enrolled students?",
            "Please list the degree program that has the most students registered, including both its id and summary description."
        ],
        "ref_sql": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Departments.aggregate([\n  {\n    $unwind: \"$Degree_Programs\"\n  },\n  {\n    $unwind: \"$Degree_Programs.Student_Enrolment\"\n  },\n  {\n    $group: {\n      _id: {\n        degree_program_id: \"$Degree_Programs.degree_program_id\",\n        degree_summary_name: \"$Degree_Programs.degree_summary_name\"\n      },\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      degree_program_id: \"$_id.degree_program_id\",\n      degree_summary_name: \"$_id.degree_summary_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 388,
        "db_id": "club_1",
        "nl_queries": [
            "What are the first names of all the students?",
            "Find each student's first name.",
            "List the first names of every student.",
            "Retrieve the first names for all students enrolled.",
            "What are the first names of all students in the database?"
        ],
        "ref_sql": "SELECT DISTINCT fname FROM student",
        "MQL": "db.Student.find({}, { Fname: 1, _id: 0 });\n"
    },
    {
        "record_id": 2482,
        "db_id": "driving_school",
        "nl_queries": [
            "List the number of customers that did not have any payment history.",
            "How many customers have no payment histories?",
            "How many customers in the database lack any payment records?",
            "Can you provide the count of customers with no payment history?",
            "What is the number of customers who have not made any payments?"
        ],
        "ref_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.Customer_Payments\": { $eq: [] }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3430,
        "db_id": "station_weather",
        "nl_queries": [
            "Give me the maximum low temperature and average precipitation at the Amersham station.",
            "What is the highest low temperature and the average amount of precipitation recorded at the Amersham station?",
            "Please provide the maximum low temperature and average rainfall data for the Amersham station.",
            "Can you tell me the maximum recorded low temperature along with the average precipitation for the Amersham station?",
            "Reveal the peak low temperature and the typical precipitation level at Amersham station."
        ],
        "ref_sql": "SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"",
        "MQL": "db.station.aggregate([\n  {\n    $match: {\n      \"network_name\": \"Amersham\"\n    }\n  },\n  {\n    $unwind: \"$weekly_weather\"\n  },\n  {\n    $group: {\n      _id: \"$network_name\",\n      max_low_temperature: { $max: \"$weekly_weather.low_temperature\" },\n      avg_precipitation: { $avg: \"$weekly_weather.precipitation\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_low_temperature: 1,\n      avg_precipitation: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2128,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the average age of students living in each dorm and the name of dorm.",
            "What is the average age for each dorm and what are the names of each dorm?",
            "What is the average age of students residing in each dormitory along with the respective dormitory names?",
            "Provide the average age of each dorm's student population and the corresponding dorm names.",
            "Determine the average age for students in every dormitory and list their names."
        ],
        "ref_sql": "SELECT avg(T1.age) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
        "MQL": "db.Dorm.aggregate([\n  {\n    $unwind: \"$Lives_in\"\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"Lives_in.stuid\",\n      foreignField: \"StuID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: {\n        dormid: \"$dormid\",\n        dorm_name: \"$dorm_name\"\n      },\n      avg_Age: { $avg: \"$Docs1.Age\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      dorm_name: \"$_id.dorm_name\",\n      avg_Age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3045,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Return the date of birth for all the guests with gender code \"Male\".",
            "What are dates of birth of all the guests whose gender is \"Male\"?",
            "Provide the birth dates of all male guests.",
            "List the dates of birth for guests identified as \"Male\".",
            "Can you show the birth dates of guests with a gender code of \"Male\"?"
        ],
        "ref_sql": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\"",
        "MQL": "db.Guests.find(\n  { gender_code: \"Male\" },\n  { date_of_birth: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 492,
        "db_id": "tvshow",
        "nl_queries": [
            "List the Episode of all TV series sorted by rating.",
            "What are all of the episodes ordered by ratings?",
            "Provide a list of episodes from all TV series, arranged in order of their ratings.",
            "Show me the episodes of every TV series sorted by their ratings.",
            "Can you display all the episodes, organized by the ratings of the TV series?"
        ],
        "ref_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$TV_series\"\n  },\n  {\n    $sort: {\n      \"TV_series.Rating\": 1\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Episode: \"$TV_series.Episode\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1896,
        "db_id": "party_host",
        "nl_queries": [
            "Show the locations of parties with hosts older than 50.",
            "Which parties have hosts of age above 50? Give me the party locations.",
            "What are the locations of parties hosted by individuals over the age of 50?",
            "List the locations of parties where the hosts are older than 50 years.",
            "Find the venues of parties that have hosts above the age of 50."
        ],
        "ref_sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50",
        "MQL": "db.party.aggregate([\n  {\n    $lookup: {\n      from: \"host\",\n      localField: \"party_host.Host_ID\",\n      foreignField: \"Host_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Age\": { $gt: \"50\" }\n    }\n  },\n  {\n    $project: {\n      Location: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3726,
        "db_id": "wedding",
        "nl_queries": [
            "Show the organizer and name for churches that opened between 1830 and 1840.",
            "Retrieve the names and organizers of churches that were established from 1830 to 1840.",
            "List the organizers and corresponding names of churches that opened within the years 1830 and 1840.",
            "Get the names of churches and their organizers that were opened between the years 1830 and 1840.",
            "Find the names and organizing bodies of churches that were inaugurated during the decade of the 1830s."
        ],
        "ref_sql": "SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "MQL": "db.church.find({\n  \"Open_Date\": { $gte: 1830, $lte: 1840 }\n}, { \"Organized_by\": 1, \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 980,
        "db_id": "match_season",
        "nl_queries": [
            "What are the names of countries that have both players with position forward and players with position defender?",
            "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
            "Which countries have players who occupy both the Forward and Defender positions?",
            "List the names of countries that include players in the Forward position and those in the Defender position.",
            "Identify the countries with players designated as both Forward and Defender."
        ],
        "ref_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
        "MQL": "db.country.aggregate([\n  {\n    $project: {\n      Country_name: 1,\n      hasForward: {\n        $in: [\"Forward\", \"$match_season.Position\"]\n      },\n      hasDefender: {\n        $in: [\"Defender\", \"$match_season.Position\"]\n      }\n    }\n  },\n  {\n    $match: {\n      hasForward: true,\n      hasDefender: true\n    }\n  },\n  {\n    $project: {\n      Country_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3904,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Which semesters do not have any student enrolled? List the semester name.",
            "What is the name of the semester with no students enrolled?",
            "Can you provide the names of all semesters with zero student enrollments?",
            "Which semesters have no students registered? Please list their names.",
            "Name the semesters that currently do not have any student enrollments."
        ],
        "ref_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "MQL": "db.Semesters.aggregate([\n  {\n    $project: {\n      semester_name: 1,\n      count_student_enrolment: {\n        $size: \"$Student_Enrolment\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_student_enrolment: 0\n    }\n  },\n  {\n    $project: {\n      semester_name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 615,
        "db_id": "restaurant_1",
        "nl_queries": [
            "Which major has least number of students? List the major and the number of students.",
            "What is the major with the fewest students? Provide the major name along with its student count.",
            "Identify the major that has the smallest student enrollment, including the name of the major and the number of enrolled students.",
            "Which major has the lowest student population? Please list the major alongside the total number of students.",
            "Can you tell me which major has the least number of students, along with the count of students in that major?"
        ],
        "ref_sql": "SELECT Major , count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Major\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: 1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Major: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1900,
        "db_id": "course_teach",
        "nl_queries": [
            "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "List the names of teachers along with the courses they are scheduled to teach, sorted by the teachers' names in alphabetical order.",
            "Can you provide the names of the teachers and the courses they are assigned to teach, arranged in ascending order of the teachers' names?",
            "Retrieve the names of teachers and the corresponding courses they instruct, displayed in alphabetical order by the name of each teacher."
        ],
        "ref_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
        "MQL": "db.teacher.aggregate([\n  {\n    $unwind: \"$course_arrange\"\n  },\n  {\n    $lookup: {\n      from: \"course\",\n      localField: \"course_arrange.Course_ID\",\n      foreignField: \"Course_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Name: 1,\n      Course: \"$Docs1.Course\",\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1113,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the name of amenity that is most common in all dorms.",
            "What is the most common amenity in the dorms?",
            "Identify the amenity that appears most frequently in the dormitories.",
            "What amenity is most prevalent among all the dorms?",
            "Determine the name of the amenity that is found the most in dormitory facilities."
        ],
        "ref_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Dorm_amenity.aggregate([\n  {\n    $unwind: \"$Has_amenity\"\n  },\n  {\n    $group: {\n      _id: \"$Has_amenity.amenid\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"_id\",\n      foreignField: \"amenid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      amenity_name: \"$Docs1.amenity_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3747,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "What is the most common participant type?",
            "Which type of participant is the most prevalent?",
            "What participant type appears most frequently?",
            "Identify the participant type that is seen the most.",
            "What is the leading participant type in terms of occurrence?"
        ],
        "ref_sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Participants.aggregate([\n  {\n    $group: {\n      _id: \"$Participant_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Participant_Type_Code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 495,
        "db_id": "activity_1",
        "nl_queries": [
            "Show ids for the faculty members who don't advise any student.",
            "What are the ids of the faculty members who do not advise any student.",
            "List the IDs of faculty members who are not advising any students.",
            "Provide the identifiers of faculty who do not have any student advisees.",
            "Retrieve the IDs for faculty members without any students under their advisement."
        ],
        "ref_sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "MQL": "db.Faculty.aggregate([\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"FacID\",\n      foreignField: \"Advisor\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      Docs1: {\n        $size: 0\n      }\n    }\n  },\n  {\n    $project: {\n      FacID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2166,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What is the average age of the dogs who have gone through any treatments?",
            "Find the average age of the dogs who went through treatments.",
            "What is the mean age of dogs that have undergone any treatment?",
            "Calculate the average age for dogs that have received treatments.",
            "Determine the average age of dogs who have been treated."
        ],
        "ref_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $unwind: \"$Dogs.Treatments\"\n  },\n  {\n    $group: {\n      _id: \"$Dogs.dog_id\",\n      age: { $first: \"$Dogs.age\" }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: { $avg: { $toDouble: \"$age\" } }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 214,
        "db_id": "train_station",
        "nl_queries": [
            "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
            "List all locations for train stations that have a minimum of 15 platforms and over 25 total passengers.",
            "Identify locations of train stations with at least 15 platforms and more than 25 total passengers.",
            "Provide the locations of train stations that possess 15 or more platforms and exceed 25 total passengers.",
            "What are the locations of train stations featuring at least 15 platforms and having a total passenger count greater than 25?"
        ],
        "ref_sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25",
        "MQL": "db.station.find({\n  $and: [\n    { \"Number_of_Platforms\": { $gte: 15 } },\n    { \"Total_Passengers\": { $gt: 25 } }\n  ]\n}, { \"Location\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1936,
        "db_id": "college_1",
        "nl_queries": [
            "What is department name and office for the professor whose last name is Heffington?",
            "What is the name of the department and office location for the professor with the last name of Heffington?",
            "Can you tell me the name of the department and the office of the professor whose last name is Heffington?",
            "What department is the professor Heffington from, and where is their office located?",
            "Please provide the name of the department and the office details for the professor with the last name Heffington."
        ],
        "ref_sql": "SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $lookup: {\n      from: \"EMPLOYEE\",\n      localField: \"DEPARTMENT.PROFESSOR.EMP_NUM\",\n      foreignField: \"EMP_NUM\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.EMP_LNAME\": \"Heffington\"\n    }\n  },\n  {\n    $project: {\n      DEPT_NAME: \"$DEPARTMENT.DEPT_NAME\",\n      PROF_OFFICE: \"$DEPARTMENT.PROFESSOR.PROF_OFFICE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 965,
        "db_id": "flight_2",
        "nl_queries": [
            "Which city has most number of departing flights?",
            "Which city is the most frequent source airport?",
            "Which city records the highest volume of departing flights?",
            "Identify the city with the greatest number of flights leaving.",
            "What city serves as the most common departure point for flights?"
        ],
        "ref_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.airports.aggregate([\n  {\n    $unwind: \"$flights\"\n  },\n  {\n    $sortByCount: \"$flights.SourceAirport\"\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      City: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3708,
        "db_id": "shop_membership",
        "nl_queries": [
            "List all open years when at least two shops are opened.",
            "What are the opening years in which at least two shops opened?",
            "Identify the years during which a minimum of two shops have opened.",
            "What years saw the opening of at least two stores?",
            "Provide a list of opening years with a count of two or more shops established."
        ],
        "ref_sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*) >= 2",
        "MQL": "db.branch.aggregate([\n  {\n    $group: {\n      _id: \"$Open_year\",\n      total_shops: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      total_shops: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Open_year: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1013,
        "db_id": "car_1",
        "nl_queries": [
            "Which model of the car has the minimum horsepower?",
            "What is the model of the car with the smallest amount of horsepower?",
            "What is the car model that exhibits the lowest horsepower?",
            "Identify the car model that has the least horsepower available.",
            "Which car model features the minimum horsepower among all options?"
        ],
        "ref_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "MQL": "db.continents.aggregate([\n  { $unwind: \"$countries\" },\n  { $unwind: \"$countries.car_makers\" },\n  { $unwind: \"$countries.car_makers.model_list\" },\n  { $unwind: \"$countries.car_makers.model_list.car_names\" },\n  { $unwind: \"$countries.car_makers.model_list.car_names.cars_data\" },\n  {\n    $sort: { \"countries.car_makers.model_list.car_names.cars_data.Horsepower\": 1 }\n  },\n  { $limit: 1 },\n  { $project: { Model: \"$countries.car_makers.model_list.car_names.Model\", _id: 0 } }\n]);\n"
    },
    {
        "record_id": 909,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What is the most frequent status of bookings?",
            "Which status code is the most common of all the bookings?",
            "What booking status appears most frequently?",
            "Which booking status code is seen the most across all bookings?",
            "Identify the status code that is most prevalent among the bookings."
        ],
        "ref_sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Clients\"\n  },\n  {\n    $unwind: \"$Clients.Bookings\"\n  },\n  {\n    $group: {\n      _id: \"$Clients.Bookings.Status_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Status_Code: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2733,
        "db_id": "phone_1",
        "nl_queries": [
            "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
            "What is the total number of phone hardware models created by Nokia Corporation?",
            "Can you tell me how many hardware models of phones are made by Nokia Corporation?",
            "Find out the count of hardware phone models that belong to the company \"Nokia Corporation\".",
            "How many different phone hardware models does Nokia Corporation manufacture?"
        ],
        "ref_sql": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
        "MQL": "db.chip_model.aggregate([\n  { $unwind: \"$phone\" },\n  { $match: { \"phone.Company_name\": \"Nokia Corporation\" } },\n  { $group: { _id: null, count: { $sum: 1 } } },\n  { $project: { _id: 0, count: 1 } }\n]);\n"
    },
    {
        "record_id": 2433,
        "db_id": "manufacturer",
        "nl_queries": [
            "Find the number of funiture types produced by each manufacturer as well as the company names.",
            "List the various types of furniture made by each manufacturer along with the respective company names.",
            "Provide the count of different furniture items produced by each manufacturer and their corresponding company names.",
            "How many types of furniture does each manufacturer produce, and what are the names of those companies?",
            "Retrieve the number of furniture categories offered by each manufacturer along with each company's name."
        ],
        "ref_sql": "SELECT count(*) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "MQL": "db.manufacturer.aggregate([\n  {\n    $lookup: {\n      from: \"furniture\",\n      localField: \"Manufacturer_ID\",\n      foreignField: \"furniture_manufacte.Manufacturer_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Manufacturer_ID\",\n      Name: { $first: \"$Name\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4158,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "What is the name of the customer who has made the minimum amount of payment in one claim?",
            "Which customer made the smallest amount of claim in one claim? Return the customer details.",
            "Who is the customer that has the lowest payment for a single claim?",
            "Identify the customer who paid the least amount in one of their claims.",
            "Can you tell me the customer details of the individual who made the smallest payment in a single claim?"
        ],
        "ref_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $unwind: \"$Policies.Claim_Headers\"\n  },\n  {\n    $project: {\n      Customer_Details: 1,\n      Amount_Paid: \"$Policies.Claim_Headers.Amount_Paid\"\n    }\n  },\n  {\n    $sort: {\n      Amount_Paid: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Customer_Details: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2880,
        "db_id": "college_1",
        "nl_queries": [
            "How many different locations does the school with code BUS has?",
            "What are the different locations of the school with the code BUS?",
            "How many unique addresses are associated with the school identified by code BUS?",
            "Can you list all the distinct locations for the school with the BUS code?",
            "What is the total number of different department addresses for the BUS school?"
        ],
        "ref_sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.SCHOOL_CODE\": \"BUS\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$DEPARTMENT.DEPT_ADDRESS\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_dept_address\"\n  }\n]);\n"
    },
    {
        "record_id": 1492,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the states of the colleges that have students in the tryout who played in striker position.",
            "What are the states of the colleges where students who tried out for the striker position attend?",
            "List the states of colleges where players have participated in tryouts as strikers.",
            "Which states are home to colleges that have students trying out for the striker position?",
            "Provide the states of colleges with players who auditioned for the striker role in the tryout."
        ],
        "ref_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'",
        "MQL": "db.College.aggregate([\n  {\n    $match: {\n      \"Tryout.pPos\": \"striker\"\n    }\n  },\n  {\n    $project: {\n      state: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4116,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
            "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
            "List the names and typical buying and selling prices of products that are colored \"yellow.\"",
            "Provide the names along with the typical buying and selling prices for all products categorized by the color \"yellow.\"",
            "Show the product names and their respective typical buying and selling prices for items with a color description of \"yellow.\""
        ],
        "ref_sql": "SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\"",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $match: {\n      color_description: \"yellow\"\n    }\n  },\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $project: {\n      product_name: \"$Products.product_name\",\n      typical_buying_price: \"$Products.typical_buying_price\",\n      typical_selling_price: \"$Products.typical_selling_price\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3662,
        "db_id": "program_share",
        "nl_queries": [
            "list all the names of programs, ordering by launch time.",
            "What is the list of program names, sorted by the order of launch date?",
            "Show me the names of all programs arranged by their launch date.",
            "Provide a list of program titles sorted according to their launch times.",
            "Can you give me the names of the programs, organized by the date they were launched?"
        ],
        "ref_sql": "SELECT name FROM program ORDER BY launch",
        "MQL": "db.program.find({}, { Name: 1, _id: 0 }).sort({ Launch: 1 }).forEach(printjson)\n"
    },
    {
        "record_id": 3502,
        "db_id": "hospital_1",
        "nl_queries": [
            "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
            "Sort the list of names and costs of all procedures in the descending order of cost.",
            "Retrieve the names and costs of all procedures ordered by cost from highest to lowest.",
            "Provide a list of procedure names along with their costs sorted in descending order based on the cost.",
            "Show all procedures with their names and costs, arranged from the most expensive to the least expensive."
        ],
        "ref_sql": "SELECT name , cost FROM procedures ORDER BY cost DESC",
        "MQL": "db.Procedures.aggregate([\n  {\n    $project: {\n      Name: 1,\n      Cost: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Cost: -1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1868,
        "db_id": "student_assessment",
        "nl_queries": [
            "What is detail of the student who most recently registered course?",
            "What details do we have on the students who registered for courses most recently?",
            "Can you provide the information of the student who registered for a course most recently?",
            "What information do we have about the student with the latest course registration?",
            "Show me the details of the student who has the most recent course registration."
        ],
        "ref_sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
        "MQL": "db.People.aggregate([\n  {\n    $unwind: \"$Students\"\n  },\n  {\n    $unwind: \"$Students.Student_Course_Registrations\"\n  },\n  {\n    $sort: {\n      \"Students.Student_Course_Registrations.registration_date\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      student_details: \"$Students.student_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3470,
        "db_id": "museum_visit",
        "nl_queries": [
            "Find the id and name of the museum that has the most staff members?",
            "What is the ID and name of the museum with the highest number of staff?",
            "Identify the museum that employs the most staff members, along with its ID and name.",
            "Which museum has the largest staff, and what are its ID and name?",
            "Can you provide the ID and name of the museum that has the greatest number of staff?"
        ],
        "ref_sql": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "MQL": "db.museum.aggregate([\n  {\n    $sort: { \"Num_of_Staff\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: { \"Museum_ID\": 1, \"Name\": 1, \"_id\": 0 }\n  }\n]);\n"
    },
    {
        "record_id": 1839,
        "db_id": "party_people",
        "nl_queries": [
            "What is the name of party with most number of members?",
            "Return the name of the party with the most members.",
            "Which party has the highest number of members?",
            "Identify the party with the largest membership.",
            "Find out the name of the party that boasts the most members."
        ],
        "ref_sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $group: {\n      _id: \"$party.Party_name\",\n      count_member: {\n        $sum: {\n          $size: \"$party.member\"\n        }\n      }\n    }\n  },\n  {\n    $sort: {\n      count_member: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Party_name: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3676,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Find the name of the shops that do not hire any employee.",
            "Which shops run with no employees? Find the shop names",
            "Which shops are currently not hiring any employees? List their names.",
            "Provide the names of shops that do not have any employees associated with them.",
            "Identify the shops that have no employees hired; what are their names?"
        ],
        "ref_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "MQL": "db.shop.find({\n  $or: [\n    { hiring: { $exists: false } },\n    { hiring: { $size: 0 } }\n  ]\n}, { Name: 1, _id: 0 });\n"
    },
    {
        "record_id": 797,
        "db_id": "tvshow",
        "nl_queries": [
            "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "What is the Package Option for the television channel named \"Sky Radio\"?",
            "Can you tell me the Package Options available for the TV series titled \"Sky Radio\"?",
            "What Package Options does the TV Channel with the series name \"Sky Radio\" offer?"
        ],
        "ref_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "MQL": "db.TV_Channel.find(\n  { \"series_name\": \"Sky Radio\" },\n  { \"Package_Option\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1189,
        "db_id": "insurance_policies",
        "nl_queries": [
            "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
            "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
            "Identify customers who hold at least two policies and haven't made any claims. Provide their details and identification numbers.",
            "Find the customer information and IDs for those with a minimum of two policies who have not submitted any claims.",
            "List the details and IDs of customers who possess two or more policies without any claims filed."
        ],
        "ref_sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2 EXCEPT SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id",
        "MQL": "db.Customers.aggregate([\n  {\n    $project: {\n      Customer_Details: 1,\n      Customer_ID: 1,\n      policy_count: {\n        $size: \"$Customer_Policies\"\n      },\n      claims_count: {\n        $sum: {\n          $map: {\n            input: \"$Customer_Policies\",\n            as: \"policy\",\n            in: {\n              $size: \"$$policy.Claims\"\n            }\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      policy_count: {\n        $gte: 2\n      },\n      claims_count: 0\n    }\n  },\n  {\n    $project: {\n      Customer_Details: 1,\n      Customer_ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3626,
        "db_id": "college_2",
        "nl_queries": [
            "Who is the instructor with the highest salary?",
            "Give the name of the highest paid instructor.",
            "Who is the instructor earning the highest salary?",
            "Identify the instructor with the top salary.",
            "What is the name of the instructor with the greatest salary?"
        ],
        "ref_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $unwind: \"$instructor\"\n  },\n  {\n    $sort: {\n      \"instructor.salary\": -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      name: \"$instructor.name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2568,
        "db_id": "driving_school",
        "nl_queries": [
            "How many staff have the first name Ludie?",
            "How many employees have a first name of Ludie?",
            "What is the number of staff members named Ludie?",
            "How many people on the staff are called Ludie?",
            "Count the employees who have Ludie as their first name."
        ],
        "ref_sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Staff\"\n  },\n  {\n    $match: {\n      \"Staff.first_name\": \"Ludie\"\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4129,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "What is the description of the color for most products?",
            "Return the color description that is most common across all products.",
            "What color description is associated with the highest number of products?",
            "Identify the most frequently occurring color and provide its description.",
            "What is the most common color description found in the products?"
        ],
        "ref_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Ref_Colors.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$color_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Ref_Colors\",\n      localField: \"_id\",\n      foreignField: \"color_code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      color_description: \"$Docs1.color_description\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2714,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the number of manufactures that are based in Tokyo or Beijing.",
            "How many manufacturers have headquarters in either Tokyo or Beijing?",
            "How many manufacturing companies are located in either Tokyo or Beijing?",
            "Count the number of manufacturers whose headquarters are in Tokyo or Beijing.",
            "What is the total number of manufacturers based in either Tokyo or Beijing?"
        ],
        "ref_sql": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $match: {\n      $or: [\n        { Headquarter: \"Tokyo\" },\n        { Headquarter: \"Beijing\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2281,
        "db_id": "csu_1",
        "nl_queries": [
            "Which campus has the most degrees conferred in all times?",
            "What campus has the most degrees conferrred over its entire existence?",
            "Which campus has awarded the greatest number of degrees throughout its history?",
            "What is the campus with the highest total of degrees granted over time?",
            "Identify the campus that has conferred the most degrees ever."
        ],
        "ref_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$degrees\"\n  },\n  {\n    $group: {\n      _id: \"$degrees.Campus\",\n      totalDegrees: { $sum: \"$degrees.Degrees\" }\n    }\n  },\n  {\n    $sort: { totalDegrees: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Campus: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 726,
        "db_id": "aircraft",
        "nl_queries": [
            "List names of all pilot aged 30 or younger in descending alphabetical order.",
            "What are the names of all pilots 30 years old or young in descending alphabetical order?",
            "Provide a list of pilot names who are 30 years or younger, sorted in reverse alphabetical order.",
            "Can you show me the names of all pilots that are 30 years old or younger, arranged from Z to A?",
            "Retrieve the names of pilots aged 30 or less, listed in descending order by their names."
        ],
        "ref_sql": "SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC",
        "MQL": "db.pilot.aggregate([\n  {\n    $match: {\n      Age: { $lte: 30 }\n    }\n  },\n  {\n    $sort: {\n      Name: -1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1006,
        "db_id": "perpetrator",
        "nl_queries": [
            "What are the heights of perpetrators in descending order of the number of people they injured?",
            "List the heights of perpetrators sorted from highest to lowest based on the number of individuals they injured.",
            "Provide the heights of perpetrators, arranged in descending order by the count of people they have harmed.",
            "What are the heights of individuals categorized as perpetrators, ranked according to the severity of injuries they caused?",
            "Show the heights of perpetrators ordered by the number of people they injured, starting with the highest figures first."
        ],
        "ref_sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$perpetrator\"\n  },\n  {\n    $sort: { \"perpetrator.Injured\": -1 }\n  },\n  {\n    $project: { \"Height\": 1, \"_id\": 0 }\n  }\n]);\n"
    },
    {
        "record_id": 3880,
        "db_id": "inn_1",
        "nl_queries": [
            "List the name of all rooms sorted by their prices.",
            "Sort all the rooms according to the price. Just report the room names.",
            "Provide the names of all rooms arranged by their price in ascending order.",
            "Retrieve a list of room names sorted by their base prices.",
            "Show all room names ordered according to their prices from lowest to highest."
        ],
        "ref_sql": "SELECT roomName FROM Rooms ORDER BY basePrice;",
        "MQL": "db.Rooms.find({}, { roomName: 1, _id: 0 }).sort({ basePrice: 1 });\n"
    },
    {
        "record_id": 1549,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
            "Can you give me the zip code for the address of the teacher named \"Lyla\"?",
            "What is the postal code for the residence of the teacher whose first name is \"Lyla\"?",
            "Please provide the zip code associated with the address of the teacher called \"Lyla.\"",
            "What is the zip code for where the teacher named \"Lyla\" resides?"
        ],
        "ref_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\"",
        "MQL": "db.Addresses.find({\n  \"Teachers.first_name\": \"Lyla\"\n}, {\n  \"zip_postcode\": 1,\n  \"_id\": 0\n});\n"
    },
    {
        "record_id": 3728,
        "db_id": "station_weather",
        "nl_queries": [
            "Find the number of trains starting from each origin.",
            "How many trains are there originating from each departure point?",
            "List the count of trains that depart from each origin station.",
            "What is the total number of trains for every starting location?",
            "Determine how many trains start from each unique origin."
        ],
        "ref_sql": "SELECT origin , count(*) FROM train GROUP BY origin",
        "MQL": "db.train.aggregate([\n  { \n    $group: { \n      _id: \"$origin\", \n      count: { $sum: 1 } \n    } \n  },\n  { \n    $project: { \n      origin: \"$_id\", \n      count: 1, \n      _id: 0 \n    } \n  }\n]);\n"
    },
    {
        "record_id": 3378,
        "db_id": "chinook_1",
        "nl_queries": [
            "What are the duration of the longest and shortest pop tracks in milliseconds?",
            "Find the maximum and minimum millisecond lengths of pop tracks.",
            "What are the maximum and minimum lengths of pop tracks measured in milliseconds?",
            "Determine the longest and shortest durations for pop tracks in milliseconds.",
            "Can you provide the duration in milliseconds for the pop tracks with the greatest and least length?"
        ],
        "ref_sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\"",
        "MQL": "db.Genre.aggregate([\n  {\n    $match: {\n      Name: \"Pop\"\n    }\n  },\n  {\n    $unwind: \"$Track\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_Milliseconds: { $max: \"$Track.Milliseconds\" },\n      min_Milliseconds: { $min: \"$Track.Milliseconds\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Milliseconds: 1,\n      min_Milliseconds: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1043,
        "db_id": "orchestra",
        "nl_queries": [
            "Show the names of conductors that have conducted more than one orchestras.",
            "What are the names of conductors who have conducted at more than one orchestra?",
            "List the names of conductors who have worked with over one orchestra.",
            "Identify conductors that have led more than a single orchestra.",
            "Provide the names of conductors associated with multiple orchestras."
        ],
        "ref_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      uniqueOrchestras: { $addToSet: \"$orchestra.Orchestra_ID\" }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      orchestraCount: { $size: \"$uniqueOrchestras\" }\n    }\n  },\n  {\n    $match: {\n      orchestraCount: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3579,
        "db_id": "flight_company",
        "nl_queries": [
            "What are the names of the airports which are not in the country 'Iceland'?",
            "List the names of airports located outside of Iceland.",
            "Which airports are there that are not situated in Iceland?",
            "Provide the names of airports that do not belong to the country 'Iceland'.",
            "Identify airports whose names do not correspond to any in Iceland."
        ],
        "ref_sql": "SELECT name FROM airport WHERE country != 'Iceland'",
        "MQL": "db.airport.find({\n  \"Country\": { $ne: \"Iceland\" }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2475,
        "db_id": "wedding",
        "nl_queries": [
            "How many churches opened before 1850 are there?",
            "What is the total number of churches that were established before the year 1850?",
            "Can you tell me how many churches opened their doors prior to 1850?",
            "How many churches have an opening date that is earlier than 1850?",
            "Please provide the count of churches that were inaugurated before the year 1850."
        ],
        "ref_sql": "SELECT count(*) FROM Church WHERE Open_Date < 1850",
        "MQL": "db.church.aggregate([\n  { $match: { \"Open_Date\": { $lt: 1850 } } },\n  { $count: \"count\" }\n]);\n"
    },
    {
        "record_id": 4191,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show all template type codes with less than three templates.",
            "What are the codes of template types that have fewer than 3 templates?",
            "List all template type codes that have less than three associated templates.",
            "What template type codes correspond to types with fewer than three templates?",
            "Retrieve the codes for template types that contain fewer than three templates."
        ],
        "ref_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $project: {\n      Template_Type_Code: 1,\n      count_Templates: {\n        $size: \"$Templates\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_Templates: {\n        $lt: 3\n      }\n    }\n  },\n  {\n    $project: {\n      Template_Type_Code: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2870,
        "db_id": "browser_web",
        "nl_queries": [
            "How many different kinds of clients are supported by the web clients accelerators?",
            "What is the total number of unique clients that web client accelerators can support?",
            "How many different types of clients are recognized by the web client accelerators?",
            "Can you tell me the count of distinct clients supported by web client accelerators?",
            "Determine the number of unique client types that the web client accelerators are equipped to handle."
        ],
        "ref_sql": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "MQL": "db.Web_client_accelerator.aggregate([\n  {\n    $group: {\n      _id: \"$Client\"\n    }\n  },\n  {\n    $count: \"count_DISTINCT_client\"\n  }\n]);\n"
    },
    {
        "record_id": 3440,
        "db_id": "swimming",
        "nl_queries": [
            "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
            "Retrieve the results for Australian swimmers in the 200 meter and 300 meter events.",
            "List all the 200 meter and 300 meter times of swimmers representing Australia.",
            "Show the results of Australian athletes in both the 200 meter and 300 meter swimming competitions.",
            "Find the 200 and 300 meter race results for swimmers from Australia."
        ],
        "ref_sql": "SELECT meter_200 , meter_300 FROM swimmer WHERE nationality = 'Australia'",
        "MQL": "db.swimmer.find({\n  \"Nationality\": \"Australia\",\n  $or: [\n    { \"meter_200\": { $exists: true } },\n    { \"meter_300\": { $exists: true } }\n  ]\n}, { \"meter_200\": 1, \"meter_300\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 3096,
        "db_id": "music_4",
        "nl_queries": [
            "What are the distinct Famous release dates?",
            "Give the distinct famous release dates for all artists.",
            "List all unique release dates for famous songs.",
            "What are the unique release dates for renowned titles by artists?",
            "Provide the distinct dates of release for all artists' famous songs."
        ],
        "ref_sql": "SELECT distinct(Famous_Release_date) FROM artist",
        "MQL": "db.artist.aggregate([\n  {\n    $group: {\n      _id: \"$Famous_Release_date\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Famous_Release_date: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3487,
        "db_id": "battle_death",
        "nl_queries": [
            "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "List the names and outcomes of battles that do not have 'Boril' as the Bulgarian commander.",
            "What are the battles' names and results where the commander from Bulgaria is not 'Boril'?",
            "Provide the names and results of battles where the Bulgarian commander is anything other than 'Boril'.",
            "Identify the battles, including their names and results, when the Bulgarian commander is not 'Boril'."
        ],
        "ref_sql": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "MQL": "db.battle.find({\n  \"bulgarian_commander\": { $ne: \"Boril\" }\n}, { \"name\": 1, \"result\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2028,
        "db_id": "csu_1",
        "nl_queries": [
            "Which year has the most degrees conferred?",
            "In what year was the most degrees conferred?",
            "What year awarded the highest number of degrees?",
            "Which academic year had the greatest number of degrees conferred?",
            "In which year were the most degrees awarded?"
        ],
        "ref_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$degrees\"\n  },\n  {\n    $group: {\n      _id: \"$degrees.Year\",\n      totalDegrees: { $sum: \"$degrees.Degrees\" }\n    }\n  },\n  {\n    $sort: {\n      totalDegrees: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Year: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 414,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "What are the details of all products?",
            "Return the the details of all products.",
            "Can you provide the details for every product?",
            "Please list the details of all available products.",
            "Show me the product details for all items in the catalog."
        ],
        "ref_sql": "SELECT DISTINCT product_details FROM products",
        "MQL": "db.Products.find({}, { product_details: 1, _id: 0 });\n"
    },
    {
        "record_id": 292,
        "db_id": "architecture",
        "nl_queries": [
            "What are the distinct names and nationalities of the architects who have ever built a mill?",
            "Can you provide the unique names and nationalities of architects who have constructed a mill?",
            "What are the names and nationalities of architects known to have built mills, ensuring there are no duplicates?",
            "List the distinct names and nationalities of those architects associated with mill constructions.",
            "What are the unique names and nationalities of architects who have participated in mill building projects?"
        ],
        "ref_sql": "SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id = T2.architect_id",
        "MQL": "db.architect.find({\n  \"mill\": { $exists: true, $not: { $size: 0 } }\n}, { \"name\": 1, \"nationality\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2376,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
            "For each dorm, how many amenities does it have?",
            "How many amenities does each dorm have if it can support over 100 students?",
            "Count the amenities available for dorms that accommodate more than 100 students.",
            "For dormitories with a student capacity exceeding 100, what is the total number of amenities?"
        ],
        "ref_sql": "SELECT count(*) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      student_capacity: { $gt: 100 }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Dorm_amenity\",\n      localField: \"dormid\",\n      foreignField: \"Has_amenity.dormid\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      dormid: 1,\n      count: { $size: \"$Docs1\" },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2917,
        "db_id": "scientist_1",
        "nl_queries": [
            "How many different scientists are assigned to any project?",
            "Count the number of different scientists assigned to any project.",
            "What is the total number of unique scientists assigned to projects?",
            "Can you tell me how many distinct scientists are working on any project?",
            "Determine the count of unique scientists involved in projects."
        ],
        "ref_sql": "SELECT count(DISTINCT scientist) FROM assignedto",
        "MQL": "db.Projects.aggregate([\n  {\n    $unwind: \"$AssignedTo\"\n  },\n  {\n    $group: {\n      _id: \"$AssignedTo.Scientist\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_scientist: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_scientist: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2337,
        "db_id": "college_1",
        "nl_queries": [
            "List the codes of all courses that take place in room KLR209.",
            "What are the codes of all the courses that are located in room KLR209?",
            "Retrieve the course codes for all classes scheduled in room KLR209.",
            "Provide me with the codes of every course held in classroom KLR209.",
            "Can you list all the course codes for classes taking place in KLR209?"
        ],
        "ref_sql": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $match: {\n      \"CLASS.CLASS_ROOM\": \"KLR209\"\n    }\n  },\n  {\n    $project: {\n      CLASS_CODE: \"$CLASS.CLASS_CODE\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1436,
        "db_id": "party_people",
        "nl_queries": [
            "Show all party names and their region names.",
            "What are the names of parties and their respective regions?",
            "List the names of all parties along with the regions they belong to.",
            "Provide the names of political parties and the corresponding regions they are affiliated with.",
            "Display each party's name alongside its respective region name."
        ],
        "ref_sql": "SELECT T1.party_name , T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id",
        "MQL": "db.region.aggregate([\n  {\n    $unwind: \"$party\"\n  },\n  {\n    $project: {\n      Party_name: \"$party.Party_name\",\n      Region_name: \"$Region_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2299,
        "db_id": "product_catalog",
        "nl_queries": [
            "Find the names of all the products whose stock number starts with \"2\".",
            "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
            "List the names of products that have a stock number beginning with the digit \"2\".",
            "Retrieve the catalog entry names for any items whose product stock number starts with \"2\".",
            "Show the names of all catalog items where the product stock number begins with \"2\"."
        ],
        "ref_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "MQL": "db.Catalogs.aggregate([\n  {\n    $unwind: \"$Catalog_Structure\"\n  },\n  {\n    $unwind: \"$Catalog_Structure.Catalog_Contents\"\n  },\n  {\n    $match: {\n      \"Catalog_Structure.Catalog_Contents.product_stock_number\": {\n        $regex: \"^2\"\n      }\n    }\n  },\n  {\n    $project: {\n      catalog_entry_name: \"$Catalog_Structure.Catalog_Contents.catalog_entry_name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2007,
        "db_id": "book_2",
        "nl_queries": [
            "List the titles of books that are not published.",
            "Retrieve the titles of books that lack publication details.",
            "Show the titles of books that have not been published.",
            "Find the titles of books with no publication information.",
            "List the titles of books that do not have any publishing information available."
        ],
        "ref_sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
        "MQL": "db.book.find({\n  $or: [\n    { \"publication\": { $exists: false } },\n    { \"publication\": { $size: 0 } }\n  ]\n}, { \"Title\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 272,
        "db_id": "dog_kennels",
        "nl_queries": [
            "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "Find the arriving date and the departing date of the dogs that received a treatment.",
            "What are the dates when dogs arrived and departed if they received treatment?",
            "Can you provide the arrival and departure dates for dogs that have had treatment?",
            "List the entering and exiting dates of dogs that underwent treatments."
        ],
        "ref_sql": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "MQL": "db.Owners.aggregate([\n  {\n    $unwind: \"$Dogs\"\n  },\n  {\n    $match: {\n      \"Dogs.Treatments\": { $exists: true, $ne: [] }\n    }\n  },\n  {\n    $project: {\n      date_arrived: \"$Dogs.date_arrived\",\n      date_departed: \"$Dogs.date_departed\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3,
        "db_id": "activity_1",
        "nl_queries": [
            "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
            "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.",
            "List the full names of all faculty members who have taken part in any activity, along with the count of activities they engaged in.",
            "Provide the first and last names of faculty who have participated in one or more activities, as well as the total number of activities for each.",
            "Identify the faculty members’ first and last names who participated in at least a single activity, including the number of activities they were involved in."
        ],
        "ref_sql": "SELECT T1.fname , T1.lname , count(*) , T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID",
        "MQL": "db.Faculty.aggregate([\n  {\n    $unwind: \"$Faculty_Participates_in\"\n  },\n  {\n    $group: {\n      _id: \"$FacID\",\n      Fname: { $first: \"$Fname\" },\n      Lname: { $first: \"$Lname\" },\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      FacID: \"$_id\",\n      Fname: 1,\n      Lname: 1,\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 502,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "What are the names and locations of festivals?",
            "Can you provide the names and locations of all the festivals?",
            "List the festival names along with their respective locations.",
            "What are the festival names and their corresponding locations?",
            "Show me the names and venues of the festivals."
        ],
        "ref_sql": "SELECT Festival_Name , LOCATION FROM festival_detail",
        "MQL": "db.festival_detail.find({}, { \"Festival_Name\": 1, \"Location\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 2977,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the name of customers who do not have a loan with a type of Mortgages.",
            "What are the names of customers who have not taken a Mortage loan?",
            "List the names of customers who have never taken out a mortgage loan.",
            "Who are the customers without any loans categorized as Mortgages?",
            "Identify customers that do not possess a loan of the type Mortgages."
        ],
        "ref_sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'",
        "MQL": "db.bank.aggregate([\n  {\n    $unwind: \"$customer\"\n  },\n  {\n    $unwind: {\n      path: \"$customer.loan\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $group: {\n      _id: \"$customer.cust_ID\",\n      cust_name: { $first: \"$customer.cust_name\" },\n      has_mortgage: {\n        $max: {\n          $cond: [{ $eq: [\"$customer.loan.loan_type\", \"Mortgages\"] }, 1, 0]\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      has_mortgage: 0\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      cust_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 138,
        "db_id": "music_4",
        "nl_queries": [
            "What are the category of music festivals with result \"Awarded\"?",
            "Return the categories of music festivals that have the result \"Awarded\".",
            "List the different categories of music festivals that are marked as \"Awarded\".",
            "Provide the categories of music festivals with the status \"Awarded\".",
            "What categories do music festivals fall into when they have received an \"Awarded\" designation?"
        ],
        "ref_sql": "SELECT Category FROM music_festival WHERE RESULT = \"Awarded\"",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $unwind: \"$volume.music_festival\"\n  },\n  {\n    $match: {\n      \"volume.music_festival.Result\": \"Awarded\"\n    }\n  },\n  {\n    $project: {\n      Category: \"$volume.music_festival.Category\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2045,
        "db_id": "customers_and_addresses",
        "nl_queries": [
            "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
            "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
            "List all addresses located in East Julianaside, Texas, or in Gleasonmouth, Arizona.",
            "Retrieve all addresses in the city of East Julianaside and those in Gleasonmouth, specifically in the states of Texas or Arizona.",
            "Show me the addresses for East Julianaside in Texas, or for Gleasonmouth in either Texas or Arizona."
        ],
        "ref_sql": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"",
        "MQL": "db.Addresses.find({\n  $or: [\n    { city: \"East Julianaside\" },\n    { city: \"Gleasonmouth\", state_province_county: { $in: [\"Texas\", \"Arizona\"] } }\n  ]\n}, {\n  address_content: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 4015,
        "db_id": "loan_1",
        "nl_queries": [
            "Find the number of customers in the banks at New York City.",
            "What is the total number of customers who use banks in New York City?",
            "Count the total number of customers in the banks within New York City.",
            "How many customers are there across all banks in New York City?",
            "Determine the cumulative number of bank customers in New York City."
        ],
        "ref_sql": "SELECT sum(no_of_customers) FROM bank WHERE city = 'New York City'",
        "MQL": "db.bank.aggregate([\n  {\n    $match: {\n      city: \"New York City\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      sum_no_of_customers: {\n        $sum: \"$no_of_customers\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      sum_no_of_customers: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2698,
        "db_id": "gymnast",
        "nl_queries": [
            "How many gymnasts are there?",
            "Count the number of gymnasts.",
            "What is the total number of gymnasts?",
            "How many individuals are registered as gymnasts?",
            "Please provide the count of all gymnasts present in the database."
        ],
        "ref_sql": "SELECT count(*) FROM gymnast",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$gymnast\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 375,
        "db_id": "insurance_policies",
        "nl_queries": [
            "What are all the distinct details of the customers?",
            "Return the distinct customer details.",
            "List all unique details related to customers.",
            "Provide a collection of distinct customer information.",
            "What distinct information can be found about the customers?"
        ],
        "ref_sql": "SELECT DISTINCT customer_details FROM Customers",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: \"$Customer_Details\"\n    }\n  },\n  {\n    $project: {\n      Customer_Details: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2964,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "How is the math course described?",
            "What are the descriptions for all the math courses?",
            "Can you provide a description of the math course?",
            "What is the description for any course that is categorized as math?",
            "Give me the details described for all courses under the name math."
        ],
        "ref_sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "MQL": "db.Courses.aggregate([\n  {\n    $match: {\n      course_name: \"math\"\n    }\n  },\n  {\n    $project: {\n      course_description: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2715,
        "db_id": "film_rank",
        "nl_queries": [
            "How many markets have number of cities smaller than 300?",
            "Count the number of markets that have a number of cities lower than 300.",
            "What is the total number of markets with fewer than 300 cities?",
            "Find out how many markets have less than 300 cities.",
            "Determine the count of markets that feature a number of cities below 300."
        ],
        "ref_sql": "SELECT count(*) FROM market WHERE Number_cities < 300",
        "MQL": "db.market.aggregate([\n  {\n    $match: {\n      Number_cities: { $lt: 300 }\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 1590,
        "db_id": "world_1",
        "nl_queries": [
            "What is the official language spoken in the country whose head of state is Beatrix?",
            "What is the official language used in the country the name of whose head of state is Beatrix.",
            "Which official language is spoken in the country governed by Beatrix?",
            "Identify the official language of the country whose leader is Beatrix.",
            "What official language is associated with the country that has Beatrix as its head of state?"
        ],
        "ref_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      HeadOfState: \"Beatrix\"\n    }\n  },\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $match: {\n      \"countrylanguage.IsOfficial\": \"T\"  \n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Language: \"$countrylanguage.Language\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3335,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "what are all the addresses including line 1 and line 2?",
            "What is the first and second line for all addresses?",
            "Can you list all address records showing both line one and line two?",
            "Please provide the first and second lines from every address entry.",
            "What are the first two lines for all listed addresses?"
        ],
        "ref_sql": "SELECT line_1 , line_2 FROM addresses",
        "MQL": "db.Addresses.find({}, { line_1: 1, line_2: 1, _id: 0 });\n"
    },
    {
        "record_id": 1734,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
            "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?",
            "List the IDs and first names of drivers who took part in both the Australian Grand Prix and the Chinese Grand Prix.",
            "Provide the driver ID and first names of those who competed in the races known as the Australian Grand Prix and the Chinese Grand Prix.",
            "Retrieve the IDs and first names of all drivers who participated in both the Australian and Chinese Grand Prix events."
        ],
        "ref_sql": "SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "MQL": "db.drivers.aggregate([\n  {\n    $unwind: \"$results\"\n  },\n  {\n    $lookup: {\n      from: \"circuits\",\n      localField: \"results.raceId\",\n      foreignField: \"races.raceId\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.races\"\n  },\n  {\n    $match: {\n      \"Docs1.races.name\": { $in: [\"Australian Grand Prix\", \"Chinese Grand Prix\"] }\n    }\n  },\n  {\n    $group: {\n      _id: \"$driverId\",\n      forename: { $first: \"$forename\" },\n      raceNames: { $addToSet: \"$Docs1.races.name\" }\n    }\n  },\n  {\n    $match: {\n      raceNames: { $all: [\"Australian Grand Prix\", \"Chinese Grand Prix\"] }\n    }\n  },\n  {\n    $project: {\n      driverId: \"$_id\",\n      forename: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1419,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "Which organisation type hires most research staff?",
            "What is the type of the organization with the most research staff?",
            "What type of organization employs the greatest number of research staff?",
            "Identify the organization type with the highest number of hires for research staff.",
            "Which category of organization has the most staff engaged in research activities?"
        ],
        "ref_sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Research_Staff\"\n  },\n  {\n    $group: {\n      _id: \"$organisation_type\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      organisation_type: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 972,
        "db_id": "election",
        "nl_queries": [
            "Return all the committees that have delegates from Democratic party.",
            "Which committees have delegates from the Democratic party?",
            "List all committees that include delegates belonging to the Democratic party.",
            "What are the names of the committees with representatives from the Democratic party?",
            "Identify the committees that have Democratic party delegates."
        ],
        "ref_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\"",
        "MQL": "db.party.aggregate([\n  {\n    $match: {\n      Party: \"Democratic\"\n    }\n  },\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $group: {\n      _id: \"$election.Committee\"\n    }\n  },\n  {\n    $project: {\n      Committee: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2667,
        "db_id": "local_govt_and_lot",
        "nl_queries": [
            "How many customers did not have any event?",
            "What is the total count of customers with no recorded events?",
            "How many customers have never had any events logged?",
            "Can you tell me the number of customers who do not have any events associated with them?",
            "How many customers exist without any related customer events?"
        ],
        "ref_sql": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
        "MQL": "db.Customers.aggregate([\n  {\n    $match: {\n      $or: [\n        { \"Customer_Events\": { $exists: false } },\n        { \"Customer_Events\": { $size: 0 } }\n      ]\n    }\n  },\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 4288,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "What is the name and id of the department with the most number of degrees ?",
            "Which department has the highest number of degrees, and what are its name and ID?",
            "Identify the department with the most degrees and provide its name and ID.",
            "Can you tell me the name and ID of the department that offers the largest number of degree programs?",
            "What is the department's name and ID that boasts the highest count of degree offerings?"
        ],
        "ref_sql": "select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "MQL": "db.Departments.aggregate([\n  { $unwind: \"$Degree_Programs\" },\n  {\n    $group: {\n      _id: { department_id: \"$department_id\", department_name: \"$department_name\" },\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { count: -1 } },\n  { $limit: 1 },\n  {\n    $project: {\n      _id: 0,\n      department_id: \"$_id.department_id\",\n      department_name: \"$_id.department_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2478,
        "db_id": "company_office",
        "nl_queries": [
            "How many companies are there?",
            "Count the number of companies.",
            "What is the total number of companies present in the database?",
            "How many companies can be found in the records?",
            "Give me the count of all the companies listed."
        ],
        "ref_sql": "SELECT count(*) FROM Companies",
        "MQL": "db.Companies.aggregate([\n  {\n    $count: \"count\"\n  }\n]);\n"
    },
    {
        "record_id": 19,
        "db_id": "election",
        "nl_queries": [
            "Show all the information about election.",
            "Return all the information for each election record.",
            "Retrieve all details concerning each election.",
            "Provide full information for all election entries.",
            "Display complete data related to every election record available."
        ],
        "ref_sql": "SELECT * FROM election",
        "MQL": "db.county.aggregate([\n  {\n    $unwind: \"$election\"\n  },\n  {\n    $lookup: {\n      from: \"party\",\n      localField: \"election.Election_ID\",\n      foreignField: \"election.Election_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: {\n      path: \"$Docs1\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $project: {\n      Election_ID: \"$election.Election_ID\",\n      Counties_Represented: \"$election.Counties_Represented\",\n      District: \"$election.District\",\n      Delegate: \"$election.Delegate\",\n      Party: \"$election.Party\",\n      First_Elected: \"$election.First_Elected\",\n      Committee: \"$election.Committee\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3710,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the order ids and the number of items in each order.",
            "How many order items correspond to each order id?",
            "List the order IDs along with the total number of items for each order.",
            "What is the item count for each corresponding order ID?",
            "Provide the order IDs and the quantity of items included in each order."
        ],
        "ref_sql": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
        "MQL": "db.Customers.aggregate([\n  { $unwind: \"$Orders\" },\n  { $unwind: \"$Orders.Order_Items\" },\n  {\n    $group: {\n      _id: \"$Orders.order_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      order_id: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2232,
        "db_id": "club_1",
        "nl_queries": [
            "Find the average age of members of the club \"Hopkins Student Enterprises\".",
            "On average, how old are the members in the club \"Hopkins Student Enterprises\"?",
            "What is the average age of the students in the \"Hopkins Student Enterprises\" club?",
            "Can you tell me the mean age of members belonging to \"Hopkins Student Enterprises\"?",
            "Determine the average age of individuals who are part of the club \"Hopkins Student Enterprises\"."
        ],
        "ref_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\"",
        "MQL": "db.Club.aggregate([\n  {\n    $match: {\n      ClubName: \"Hopkins Student Enterprises\"\n    }\n  },\n  {\n    $lookup: {\n      from: \"Student\",\n      localField: \"ClubID\",\n      foreignField: \"Member_of_club.ClubID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_age: {\n        $avg: \"$Docs1.Age\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_age: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2066,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Return all the apartment numbers sorted by the room count in ascending order.",
            "Sort the apartment numbers in ascending order of room count.",
            "Retrieve the list of apartment numbers arranged by the number of rooms, starting from the least to the most.",
            "List the apartment numbers sorted in increasing order of room count.",
            "Provide all apartment numbers sorted by their room count in ascending sequence."
        ],
        "ref_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $project: {\n      apt_number: \"$Apartments.apt_number\",\n      room_count: \"$Apartments.room_count\"\n    }\n  },\n  {\n    $sort: {\n      room_count: 1\n    }\n  },\n  {\n    $project: {\n      apt_number: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 491,
        "db_id": "tvshow",
        "nl_queries": [
            "List top 3 highest Rating TV series. List the TV series's Episode and Rating.",
            "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "Identify the top 3 TV series with the best ratings and provide their episode numbers along with the ratings.",
            "What are the three episodes with the highest ratings in the TV series, and what ratings did they receive?",
            "Show me the three highest-rated episodes from the TV series, including their respective ratings."
        ],
        "ref_sql": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "MQL": "db.TV_Channel.aggregate([\n  {\n    $unwind: \"$TV_series\"\n  },\n  {\n    $sort: {\n      \"TV_series.Rating\": -1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      Episode: \"$TV_series.Episode\",\n      Rating: \"$TV_series.Rating\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 498,
        "db_id": "music_4",
        "nl_queries": [
            "What is the famous release date of the artist with the oldest age?",
            "Return the famous release date for the oldest artist.",
            "What is the release date of the most notable work by the oldest artist?",
            "Give me the release date of the famous album from the artist who is the oldest.",
            "Find the famous release date associated with the oldest artist in the collection."
        ],
        "ref_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
        "MQL": "db.artist.aggregate([\n  {\n    $sort: {\n      Age: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Famous_Release_date: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 974,
        "db_id": "entrepreneur",
        "nl_queries": [
            "Show the company of the tallest entrepreneur.",
            "Which company was started by the entrepreneur with the greatest height?",
            "What company does the tallest entrepreneur belong to?",
            "Identify the company associated with the entrepreneur who has the highest height.",
            "Which business is founded by the tallest person in the entrepreneurial group?"
        ],
        "ref_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$entrepreneur\"\n  },\n  {\n    $sort: { \"Height\": -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Company: \"$entrepreneur.Company\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3102,
        "db_id": "store_product",
        "nl_queries": [
            "Which district has the largest population?",
            "What is the name of the district with the most residents?",
            "Which district has the highest number of inhabitants?",
            "Identify the district with the greatest population.",
            "What is the name of the district that boasts the largest number of residents?"
        ],
        "ref_sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "MQL": "db.district.aggregate([\n  {\n    $group: {\n      _id: \"$District_ID\",\n      District_name: { $first: \"$District_name\" },\n      sum_City_Population: { $sum: \"$City_Population\" }\n    }\n  },\n  {\n    $sort: { sum_City_Population: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      District_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3807,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show the product ids and the number of unique orders containing each product.",
            "How many distinct order ids correspond to each product?",
            "List the IDs of the products along with the count of unique orders that include each product.",
            "Provide the number of different order IDs for each product available.",
            "What are the product IDs and how many distinct orders have been made for each one?"
        ],
        "ref_sql": "SELECT product_id , count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "MQL": "db.Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $unwind: \"$Products.Order_Items\"\n  },\n  {\n    $group: {\n      _id: \"$Products.product_id\",\n      count_DISTINCT_order_id: {\n        $addToSet: \"$Products.Order_Items.order_id\"\n      }\n    }\n  },\n  {\n    $project: {\n      product_id: \"$_id\",\n      count_DISTINCT_order_id: {\n        $size: \"$count_DISTINCT_order_id\"\n      },\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3865,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "Show all role codes with at least 3 employees.",
            "What are the roles with three or more employees? Give me the role codes.",
            "List all role codes that have three or more employees.",
            "Identify the roles that are associated with at least three employees; provide the role codes.",
            "What role codes exist for roles that include a minimum of three employees?"
        ],
        "ref_sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3",
        "MQL": "db.Roles.aggregate([\n  {\n    $group: {\n      _id: \"$Role_Code\",\n      employeeCount: { $sum: { $size: \"$Employees\" } }\n    }\n  },\n  {\n    $match: {\n      employeeCount: { $gte: 3 }\n    }\n  },\n  {\n    $project: {\n      Role_Code: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 293,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the name and position of physicians who prescribe some medication whose brand is X?",
            "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
            "Identify the names and positions of doctors who prescribe medications with the brand X.",
            "List the physicians who prescribe any medication from brand X along with their names and job titles.",
            "What are the names and positions of medical practitioners that provide prescriptions for medications branded as X?"
        ],
        "ref_sql": "SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\"",
        "MQL": "db.Physician.aggregate([\n  {\n    $unwind: \"$Prescribes\"\n  },\n  {\n    $lookup: {\n      from: \"Medication\",\n      localField: \"Prescribes.Medication\",\n      foreignField: \"Code\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      \"Docs1.Brand\": \"X\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      Position: 1,\n      _id: 0\n    }\n  },\n  {\n    $group: {\n      _id: {\n        Name: \"$Name\",\n        Position: \"$Position\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$_id.Name\",\n      Position: \"$_id.Position\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 501,
        "db_id": "music_4",
        "nl_queries": [
            "Find the famous titles of artists that do not have any volume.",
            "What are the famous titles of artists who do not have any volumes?",
            "List the famous titles of artists who don’t have any records of volume.",
            "Retrieve the famous titles from artists that lack any volume information.",
            "What famous titles do artists have if they have no associated volumes?"
        ],
        "ref_sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "MQL": "db.artist.find(\n  {\n    volume: { $not: { $exists: true, $ne: [] } }\n  },\n  {\n    Famous_Title: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3080,
        "db_id": "college_2",
        "nl_queries": [
            "Which department has the lowest budget?",
            "Give the name of the department with the lowest budget.",
            "Which department holds the smallest budget?",
            "Identify the department that has the least budget.",
            "What is the name of the department with the minimum budget?"
        ],
        "ref_sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "MQL": "db.department.aggregate([\n  {\n    $project: {\n      dept_name: 1,\n      budget: {\n        $toDouble: \"$budget\"\n      }\n    }\n  },\n  {\n    $sort: {\n      budget: 1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      dept_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2465,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "How many characteristics are there?",
            "Count the number of characteristics.",
            "What is the total count of characteristics available?",
            "Can you tell me the number of characteristics present?",
            "Identify how many characteristics exist in the dataset."
        ],
        "ref_sql": "SELECT count(*) FROM CHARACTERISTICS",
        "MQL": "db.Ref_Characteristic_Types.aggregate([\n  {\n    $unwind: \"$Characteristics\"\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2228,
        "db_id": "dorm_1",
        "nl_queries": [
            "Find the average and total capacity of dorms for the students with gender X.",
            "What is the average and total capacity for all dorms who are of gender X?",
            "What are the average and overall capacities of dormitories for students identified as gender X?",
            "Calculate the total and average dorm capacity for dorms assigned to individuals of gender X.",
            "Can you provide the average and total capacities of dorms for the gender category X?"
        ],
        "ref_sql": "SELECT avg(student_capacity) , sum(student_capacity) FROM dorm WHERE gender = 'X'",
        "MQL": "db.Dorm.aggregate([\n  {\n    $match: {\n      gender: \"X\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      avg_student_capacity: {\n        $avg: \"$student_capacity\"\n      },\n      sum_student_capacity: {\n        $sum: \"$student_capacity\"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_student_capacity: 1,\n      sum_student_capacity: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1735,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "What are the email addresses of teachers whose address has zip code \"918\"?",
            "Can you provide the email addresses for teachers living at addresses with the zip code \"918\"?",
            "What email addresses correspond to teachers whose addresses are listed under the zip code \"918\"?",
            "Please list the email addresses of teachers that are associated with the zip code \"918\".",
            "What are the email addresses of the teachers located at addresses identified by the zip code \"918\"?"
        ],
        "ref_sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = \"918\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $match: {\n      \"zip_postcode\": \"918\"\n    }\n  },\n  {\n    $project: {\n      \"Teachers.email_address\": 1,\n      \"_id\": 0\n    }\n  },\n  {\n    $unwind: \"$Teachers\"\n  },\n  {\n    $project: {\n      \"email_address\": \"$Teachers.email_address\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3401,
        "db_id": "music_4",
        "nl_queries": [
            "What are the maximum and minimum week on top of all volumes?",
            "Give the maximum and minimum weeks on top across all volumes.",
            "What is the highest and lowest number of weeks that any volume has remained at the top?",
            "Find the greatest and least weeks on the charts among all music volumes.",
            "Identify the maximum and minimum number of weeks spent on top by all volumes."
        ],
        "ref_sql": "SELECT max(Weeks_on_Top) , min(Weeks_on_Top) FROM volume",
        "MQL": "db.artist.aggregate([\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $group: {\n      _id: null,\n      max_Weeks_on_Top: { $max: \"$volume.Weeks_on_Top\" },\n      min_Weeks_on_Top: { $min: \"$volume.Weeks_on_Top\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      max_Weeks_on_Top: 1,\n      min_Weeks_on_Top: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3297,
        "db_id": "flight_company",
        "nl_queries": [
            "List the id, country, city and name of the airports ordered alphabetically by the name.",
            "Provide a list of airport IDs, countries, cities, and names sorted alphabetically by their names.",
            "Display the airports' identifiers, country names, city names, and their respective names in alphabetical order based on the airport names.",
            "Show the ID, country, city, and name of each airport, arranged in ascending order by their names.",
            "Generate a list of all airports, including their IDs, country, city, and names, sorted by the name of the airport in alphabetical order."
        ],
        "ref_sql": "SELECT id , country , city , name FROM airport ORDER BY name",
        "MQL": "db.airport.find({}, { \"id\": 1, \"Country\": 1, \"City\": 1, \"name\": 1, \"_id\": 0 }).sort({ \"name\": 1 });\n"
    },
    {
        "record_id": 2743,
        "db_id": "products_gen_characteristics",
        "nl_queries": [
            "How many characteristics does the product named \"laurel\" have?",
            "Count the number of characteristics of the product named 'laurel'.",
            "What is the total number of characteristics for the product called \"laurel\"?",
            "How many characteristics are associated with the item named 'laurel'?",
            "Please count the characteristics related to the product identified as \"laurel\"."
        ],
        "ref_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\"",
        "MQL": "db.Ref_Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $match: {\n      \"Products.product_name\": \"laurel\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: {\n        $size: \"$Products.Product_Characteristics\"\n      }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1890,
        "db_id": "driving_school",
        "nl_queries": [
            "What is zip code of customer with first name as Carole and last name as Bernhard?",
            "What is the zip code of the customer Carole Bernhard?",
            "Can you provide the postal code for the customer named Carole Bernhard?",
            "What is the zip code associated with the customer Carole and the last name Bernhard?",
            "Please tell me the zip code for Carole Bernhard, the customer."
        ],
        "ref_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "MQL": "db.Addresses.aggregate([\n  {\n    $unwind: \"$Customers\"\n  },\n  {\n    $match: {\n      \"Customers.first_name\": \"Carole\",\n      \"Customers.last_name\": \"Bernhard\"\n    }\n  },\n  {\n    $project: {\n      zip_postcode: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2970,
        "db_id": "student_assessment",
        "nl_queries": [
            "List the names of courses in alphabetical order?",
            "What are the names of the courses in alphabetical order?",
            "Provide the names of courses sorted in alphabetical order.",
            "Can you give me the course names arranged alphabetically?",
            "Show me all the courses' names in a list sorted from A to Z."
        ],
        "ref_sql": "SELECT course_name FROM courses ORDER BY course_name",
        "MQL": "db.Courses.aggregate([\n  {\n    $project: {\n      course_name: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      course_name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 822,
        "db_id": "match_season",
        "nl_queries": [
            "Show the players from college UCLA.",
            "Who are the players from UCLA?",
            "List the players associated with UCLA college.",
            "Who are the athletes playing for UCLA?",
            "Can you provide the names of players from the UCLA college team?"
        ],
        "ref_sql": "SELECT Player FROM match_season WHERE College = \"UCLA\"",
        "MQL": "db.team.aggregate([\n  {\n    $unwind: \"$match_season\"\n  },\n  {\n    $match: {\n      \"match_season.College\": \"UCLA\"\n    }\n  },\n  {\n    $project: {\n      Player: \"$match_season.Player\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2311,
        "db_id": "formula_1",
        "nl_queries": [
            "Find the id and location of circuits that belong to France or Belgium?",
            "What are the ids and locations of all circuits in France or Belgium?",
            "What are the circuit IDs and their locations for circuits found in France and Belgium?",
            "List the IDs and locations of the circuits located in either France or Belgium.",
            "Retrieve the circuit identifiers along with their locations for circuits from France or Belgium."
        ],
        "ref_sql": "SELECT circuitid , LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "MQL": "db.circuits.find(\n  { country: { $in: [\"France\", \"Belgium\"] } },\n  { circuitId: 1, location: 1, _id: 0 }\n);\n"
    },
    {
        "record_id": 2050,
        "db_id": "game_1",
        "nl_queries": [
            "Show all advisors who have at least two students.",
            "What are the advisors",
            "List all advisors with a minimum of two students assigned to them.",
            "Identify the advisors who supervise at least two students.",
            "Which advisors have two or more students under their mentorship?"
        ],
        "ref_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) >= 2",
        "MQL": "db.Student.aggregate([\n  {\n    $group: {\n      _id: \"$Advisor\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      Advisor: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 626,
        "db_id": "phone_market",
        "nl_queries": [
            "What are the memories and carriers of phones?",
            "Can you provide the memory capacities and carriers of all the phones?",
            "What information is available regarding the memories and carriers for phones?",
            "Please list the memory options and carriers associated with these phones.",
            "What are the memory sizes and mobile carriers used by the phones in stock?"
        ],
        "ref_sql": "SELECT Memory_in_G , Carrier FROM phone",
        "MQL": "db.phone.find({}, { \"Memory_in_G\": 1, \"Carrier\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 143,
        "db_id": "singer",
        "nl_queries": [
            "Show different citizenship of singers and the number of singers of each citizenship.",
            "For each citizenship, how many singers are from that country?",
            "Provide a breakdown of the various citizenships of singers along with the total number of singers in each nationality.",
            "List the citizenships of singers and indicate how many singers belong to each nationality.",
            "For each country of citizenship, show the count of singers originating from that nation."
        ],
        "ref_sql": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
        "MQL": "db.singer.aggregate([\n  {\n    $group: {\n      _id: \"$Citizenship\",\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Citizenship: \"$_id\",\n      COUNT: 1,\n      _id: 0\n    }\n  },\n  {\n    $sort: {\n      Citizenship: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1064,
        "db_id": "match_season",
        "nl_queries": [
            "What are the official languages of the countries of players from Maryland or Duke college?",
            "Return the official native languages of countries who have players from Maryland or Duke colleges.",
            "Which countries have players from Maryland or Duke, and what are their official languages?",
            "List the official native languages of the countries that feature players from either Maryland or Duke college.",
            "Provide the official languages for countries with players who attended Maryland or Duke universities."
        ],
        "ref_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\"",
        "MQL": "db.country.aggregate([\n  {\n    $project: {\n      Official_native_language: 1,\n      players: {\n        $filter: {\n          input: \"$match_season\",\n          as: \"player\",\n          cond: {\n            $or: [\n              { $eq: [\"$$player.College\", \"Maryland\"] },\n              { $eq: [\"$$player.College\", \"Duke\"] }\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      players: { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      Official_native_language: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 633,
        "db_id": "poker_player",
        "nl_queries": [
            "List the names and birth dates of people in ascending alphabetical order of name.",
            "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "Provide a list of people's names along with their birth dates, sorted alphabetically by name.",
            "Retrieve the names and birth dates of individuals, organized in alphabetical order based on their names.",
            "Show the names and birth dates of people in alphabetical order of their names."
        ],
        "ref_sql": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
        "MQL": "db.people.find({}, { Name: 1, Birth_Date: 1, _id: 0 }).sort({ Name: 1 });\n"
    },
    {
        "record_id": 103,
        "db_id": "college_2",
        "nl_queries": [
            "How many different instructors have taught some course?",
            "Count the number of distinct instructors who have taught a course.",
            "What is the total number of unique instructors who have delivered a course?",
            "Determine the count of distinct professors that have instructed any course.",
            "How many unique educators have taught at least one course?"
        ],
        "ref_sql": "SELECT COUNT (DISTINCT id) FROM teaches",
        "MQL": "db.department.aggregate([\n  { $unwind: \"$course\" },\n  { $unwind: \"$course.section\" },\n  { $unwind: \"$course.section.teaches\" },\n  {\n    $group: {\n      _id: \"$course.section.teaches.ID\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      \"COUNT__DISTINCT_id\": { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      \"COUNT__DISTINCT_id\": 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3766,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the id and weight of all pets whose age is older than 1.",
            "What is the id and weight of every pet who is older than 1?",
            "Retrieve the PetID and weight of all pets that are older than one year.",
            "List the ID and weight for every pet that is more than one year old.",
            "Show me the PetID and weight for pets whose age exceeds one year."
        ],
        "ref_sql": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "MQL": "db.Pets.find({\n  pet_age: { $gt: 1 }\n}, {\n  PetID: 1,\n  weight: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 638,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the names and details of all the staff members.",
            "What is the name and detail of each staff member?",
            "List the names and additional details of all staff members.",
            "Provide the names along with the details for each staff member available.",
            "Can you show me the staff members' names and their respective details?"
        ],
        "ref_sql": "SELECT Name , Other_Details FROM Staff",
        "MQL": "db.Ref_Attraction_Types.aggregate([\n  {\n    $unwind: \"$Tourist_Attractions\"\n  },\n  {\n    $unwind: \"$Tourist_Attractions.Staff\"\n  },\n  {\n    $project: {\n      Name: \"$Tourist_Attractions.Staff.Name\",\n      Other_Details: \"$Tourist_Attractions.Staff.Other_Details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3130,
        "db_id": "document_management",
        "nl_queries": [
            "List all the document names which contains \"CV\".",
            "What are the names of documents that contain the substring \"CV\"?",
            "Retrieve all document names that have \"CV\" in them.",
            "Show me the names of documents that include the text \"CV\".",
            "Find all document titles that contain the substring \"CV\"."
        ],
        "ref_sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
        "MQL": "db.Document_Structures.aggregate([\n  {\n    $unwind: \"$Documents\"\n  },\n  {\n    $match: {\n      \"Documents.document_name\": { $regex: \"CV\", $options: \"i\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      document_name: \"$Documents.document_name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3719,
        "db_id": "tracking_orders",
        "nl_queries": [
            "Find the ids of all the order items whose product id is 11.",
            "Find all the order items whose product id is 11. What are the order item ids?",
            "List the order item IDs for all order items linked to the product with ID 11.",
            "Retrieve the IDs of all order items for the product having a product ID of 11.",
            "What are the order item IDs for items that correspond to product ID 11?"
        ],
        "ref_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "MQL": "db.Products.aggregate([\n  {\n    $unwind: \"$Order_Items\"\n  },\n  {\n    $match: {\n      \"Order_Items.product_id\": 11\n    }\n  },\n  {\n    $project: {\n      order_item_id: \"$Order_Items.order_item_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3795,
        "db_id": "medicine_enzyme_interaction",
        "nl_queries": [
            "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
            "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
            "Can you provide the product, chromosome, and porphyria associated with enzymes found in the 'Cytosol' region?",
            "What are the product, chromosome, and porphyria details for enzymes situated in 'Cytosol'?",
            "Could you list the product, chromosome, and porphyria linked to enzymes operating at the location of 'Cytosol'?"
        ],
        "ref_sql": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
        "MQL": "db.enzyme.aggregate([\n  {\n    $match: {\n      Location: \"Cytosol\"\n    }\n  },\n  {\n    $project: {\n      Product: 1,\n      Chromosome: 1,\n      Porphyria: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 117,
        "db_id": "orchestra",
        "nl_queries": [
            "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "Count the number of orchestras that have CD or DVD as their record format.",
            "How many orchestras feature \"CD\" or \"DVD\" as their main record format?",
            "Determine the total count of orchestras that record in CD or DVD format.",
            "What is the number of orchestras using either the CD or DVD recording format?"
        ],
        "ref_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
        "MQL": "db.conductor.aggregate([\n  {\n    $unwind: \"$orchestra\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"orchestra.Major_Record_Format\": \"CD\" },\n        { \"orchestra.Major_Record_Format\": \"DVD\" }\n      ]\n    }\n  },\n  {\n    $count: \"COUNT\"\n  }\n]);\n"
    },
    {
        "record_id": 3864,
        "db_id": "dog_kennels",
        "nl_queries": [
            "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "Identify the role, street, city, and state of professionals residing in cities with 'West' in their names.",
            "What are the roles, streets, cities, and states for professionals located in areas that include 'West' in the city names?",
            "List the role, street address, city, and state for professionals who live in a city that contains the word 'West'."
        ],
        "ref_sql": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "MQL": "db.Professionals.find(\n  {\n    city: { $regex: 'West', $options: 'i' }\n  },\n  {\n    _id: 0,\n    role_code: 1,\n    street: 1,\n    city: 1,\n    state: 1\n  }\n);\n"
    },
    {
        "record_id": 721,
        "db_id": "phone_market",
        "nl_queries": [
            "List the names of phones in ascending order of price.",
            "Retrieve the names of phones sorted by their price from lowest to highest.",
            "Show the phone names arranged in order of increasing price.",
            "Provide a list of phone names in the order of their prices in ascending format.",
            "Display the names of mobile phones, sorted by price from the cheapest to the most expensive."
        ],
        "ref_sql": "SELECT Name FROM phone ORDER BY Price ASC",
        "MQL": "db.phone.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Price\": 1 });\n"
    },
    {
        "record_id": 256,
        "db_id": "world_1",
        "nl_queries": [
            "What are the regions that use English or Dutch?",
            "Which regions speak Dutch or English?",
            "Which regions have English or Dutch as their spoken languages?",
            "Identify the regions where either English or Dutch is used.",
            "What regions are associated with speaking Dutch or English?"
        ],
        "ref_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"countrylanguage.Language\": \"English\" },\n        { \"countrylanguage.Language\": \"Dutch\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Region\"\n    }\n  },\n  {\n    $project: {\n      Region: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 954,
        "db_id": "flight_2",
        "nl_queries": [
            "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "Which airlines have departures from CVO but not from APG airports?",
            "List all airlines operating flights from the airport 'CVO' while excluding those going to 'APG'.",
            "Identify which airlines provide services from CVO but avoid those that fly to APG.",
            "What airlines have routes that leave from CVO without including any to the APG airport?"
        ],
        "ref_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
        "MQL": "db.airports.aggregate([\n  {\n    $match: {\n      AirportCode: \"CVO\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Airline: {\n        $filter: {\n          input: \"$flights\",\n          as: \"flight\",\n          cond: {\n            $eq: [\"$$flight.SourceAirport\", \"CVO\"]\n          }\n        }\n      }\n    }\n  },\n  {\n    $unwind: \"$Airline\"\n  },\n  {\n    $lookup: {\n      from: \"airports\",\n      localField: \"Airline.DestAirport\",\n      foreignField: \"AirportCode\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.AirportCode\": {\n        $ne: \"APG\"\n      }\n    }\n  },\n  {\n    $project: {\n      Airline: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1641,
        "db_id": "gymnast",
        "nl_queries": [
            "What are the names of gymnasts?",
            "Return the names of the gymnasts.",
            "List the names of all individuals who are gymnasts.",
            "Show me the names of gymnasts.",
            "Provide the names of those who participate in gymnastics."
        ],
        "ref_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
        "MQL": "db.people.find(\n  {\n    \"gymnast\": { $exists: true, $ne: [] }\n  },\n  {\n    \"Name\": 1,\n    \"_id\": 0\n  }\n);\n"
    },
    {
        "record_id": 3899,
        "db_id": "student_transcripts_tracking",
        "nl_queries": [
            "Describe the section h.",
            "What is the description for the section named h?",
            "Can you provide the description for section h?",
            "What description corresponds to the section labeled h?",
            "Tell me the section description for the section named h."
        ],
        "ref_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "MQL": "db.Courses.aggregate([\n  {\n    $unwind: \"$Sections\"\n  },\n  {\n    $match: {\n      \"Sections.section_name\": \"h\"\n    }\n  },\n  {\n    $project: {\n      section_description: \"$Sections.section_description\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4248,
        "db_id": "city_record",
        "nl_queries": [
            "List venues of all matches in the order of their dates starting from the most recent one.",
            "What are the venues of all the matches? Sort them in the descending order of match date.",
            "Show the venues for all matches, sorted by date with the most recent matches listed first.",
            "Can you provide the venues for every match? Please arrange them in descending order based on their dates.",
            "What venues host the matches? List them starting from the latest date to the oldest."
        ],
        "ref_sql": "SELECT venue FROM MATCH ORDER BY date DESC",
        "MQL": "db.match.aggregate([\n  {\n    $sort: {\n      Date: -1\n    }\n  },\n  {\n    $project: {\n      Venue: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 449,
        "db_id": "movie_1",
        "nl_queries": [
            "Find the titles of all movies not reviewed by Chris Jackson.",
            "What are the titles of all movies that were not reviewed by Chris Jackson?",
            "List the titles of movies that have never received a review from Chris Jackson.",
            "Show me the titles of all films that were not evaluated by Chris Jackson.",
            "Provide the titles of movies for which Chris Jackson has not submitted a review."
        ],
        "ref_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
        "MQL": "db.Movie.aggregate([\n  {\n    $lookup: {\n      from: \"Reviewer\",\n      localField: \"mID\",\n      foreignField: \"Rating.mID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.name\": { $ne: \"Chris Jackson\" }\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3391,
        "db_id": "phone_1",
        "nl_queries": [
            "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
            "Can you tell me the highest and lowest RAM capacities of smartphones made by Nokia Corporation?",
            "What are the maximum and minimum RAM specifications for Nokia Corporation's chip models?",
            "Please provide the maximum and minimum RAM sizes available in phones manufactured by Nokia Corporation.",
            "What is the range of RAM sizes (both max and min) for chips from the Nokia Corporation?"
        ],
        "ref_sql": "SELECT max(T1.RAM_MiB) , min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "MQL": "db.chip_model.aggregate([\n  { $match: { \"phone.Company_name\": \"Nokia Corporation\" } },\n  { \n    $group: {\n      _id: null,\n      max_RAM_MiB: { $max: \"$RAM_MiB\" },\n      min_RAM_MiB: { $min: \"$RAM_MiB\" }\n    }\n  },\n  { \n    $project: {\n      _id: 0,\n      max_RAM_MiB: 1,\n      min_RAM_MiB: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1130,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "What are the booking start and end dates of the apartments with type code \"Duplex\"?",
            "Return the booking start date and end date for the apartments that have type code \"Duplex\".",
            "Can you provide the booking start and end dates for the duplex-type apartments?",
            "What are the starting and ending booking dates for apartments classified under the type code \"Duplex\"?",
            "Please list the booking start date as well as the end date for the apartments with a type code of \"Duplex\"."
        ],
        "ref_sql": "SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $match: {\n      \"Apartments.apt_type_code\": \"Duplex\"\n    }\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $project: {\n      booking_start_date: \"$Apartments.Apartment_Bookings.booking_start_date\",\n       _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3463,
        "db_id": "party_people",
        "nl_queries": [
            "Show all ministers and parties they belong to in descending order of the time they took office.",
            "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
            "List all ministers along with their affiliated parties, sorted in reverse chronological order by the date they assumed office.",
            "Provide the names of ministers and their corresponding parties, arranged in descending order based on when they took office.",
            "Display all ministers and the parties they are associated with, ordered from the most recent to the oldest date of taking office."
        ],
        "ref_sql": "SELECT minister , party_name FROM party ORDER BY took_office DESC",
        "MQL": "db.region.aggregate([\n  { $unwind: \"$party\" },\n  { $project: { Minister: \"$party.Minister\", Party_name: \"$party.Party_name\", Took_office: \"$party.Took_office\" } },\n  { $sort: { Took_office: -1 } },\n  { $project: { Minister: 1, Party_name: 1, _id: 0 } }\n]);\n"
    },
    {
        "record_id": 3692,
        "db_id": "swimming",
        "nl_queries": [
            "Find the names of the swimmers who have no record.",
            "List the names of swimmers who do not have any recorded events.",
            "Retrieve the names of swimmers lacking records.",
            "Identify swimmers without any records and provide their names.",
            "Show the names of swimmers that have no event records to their name."
        ],
        "ref_sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "MQL": "db.swimmer.find({\n  \"record\": { $exists: true, $size: 0 }\n}, { \"name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 4185,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show ids for all templates not used by any document.",
            "What are the ids for templates that are not used in any documents?",
            "Retrieve the IDs of templates that are not associated with any documents.",
            "List the template IDs which have no documents linked to them.",
            "Display the template IDs for those templates that do not have any document usage."
        ],
        "ref_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $project: {\n      Template_ID: \"$Templates.Template_ID\",\n      count_document: {\n        $size: \"$Templates.Documents\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_document: 0\n    }\n  },\n  {\n    $project: {\n      Template_ID: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2346,
        "db_id": "club_1",
        "nl_queries": [
            "Where is the club \"Hopkins Student Enterprises\" located?",
            "Tell me the location of the club \"Hopkins Student Enterprises\".",
            "What is the location of the club named \"Hopkins Student Enterprises\"?",
            "Could you provide me with the location for the club \"Hopkins Student Enterprises\"?",
            "Where can I find the club \"Hopkins Student Enterprises\"?"
        ],
        "ref_sql": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\"",
        "MQL": "db.Club.find(\n  { \"ClubName\": \"Hopkins Student Enterprises\" },\n  { \"ClubLocation\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 1073,
        "db_id": "solvency_ii",
        "nl_queries": [
            "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
            "List the names of products that feature in two or more events, sorted alphabetically.",
            "Identify products that are part of at least two different events and display their names in ascending order.",
            "Provide the names of products that are involved in a minimum of two events, sorted by product name in alphabetical order.",
            "Retrieve the names of products that have been included in at least two events, arranged in ascending order by name."
        ],
        "ref_sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2 ORDER BY T1.Product_Name",
        "MQL": "db.Products.aggregate([\n  \n  { $unwind: \"$Products_in_Events\" },\n  \n  \n  {\n    $group: {\n      _id: \"$Products_in_Events.Product_ID\",\n      eventCount: { $sum: 1 }\n    }\n  },\n  \n  \n  {\n    $match: {\n      eventCount: { $gte: 2 }\n    }\n  },\n  \n  \n  {\n    $lookup: {\n      from: \"Products\",\n      localField: \"_id\",\n      foreignField: \"Product_ID\",\n      as: \"Docs1\"\n    }\n  },\n  \n  \n  { $unwind: \"$Docs1\" },\n  \n  \n  {\n    $sort: {\n      \"Docs1.Product_Name\": 1\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      Product_Name: \"$Docs1.Product_Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 789,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "What is the detail of the location UK Gallery?",
            "Return the detail of the location named \"UK Gallery\".",
            "Can you provide the details for the location known as the UK Gallery?",
            "What information is available for the UK Gallery location?",
            "Please fetch the details pertaining to the location called \"UK Gallery.\""
        ],
        "ref_sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\"",
        "MQL": "db.Locations.find(\n  { \"Location_Name\": \"UK Gallery\" },\n  { \"Other_Details\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 2327,
        "db_id": "city_record",
        "nl_queries": [
            "Please give me a list of cities whose regional population is over 10000000.",
            "Which cities have regional population above 10000000?",
            "Can you provide a list of cities with a regional population exceeding 10 million?",
            "Which cities have a population greater than 10 million in their regions?",
            "Show me the names of cities where the regional population is more than 10,000,000."
        ],
        "ref_sql": "SELECT city FROM city WHERE regional_population > 10000000",
        "MQL": "db.city.find(\n  {\n    Regional_Population: { $gt: 10000000 }\n  },\n  {\n    City: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3783,
        "db_id": "candidate_poll",
        "nl_queries": [
            "Which poll resource provided the most number of candidate information?",
            "Return the poll resource associated with the most candidates.",
            "What is the polling source that has the highest number of candidates listed?",
            "Identify the poll source that contributed the most candidate data.",
            "Which polling resource corresponds to the largest number of candidates?"
        ],
        "ref_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$candidate\"\n  },\n  {\n    $group: {\n      _id: \"$candidate.Poll_Source\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      Poll_Source: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 413,
        "db_id": "customers_and_invoices",
        "nl_queries": [
            "Show all product colors.",
            "What are the different product colors?",
            "List all the available colors for products.",
            "What colors are offered for the products?",
            "Identify the various colors of products in the inventory."
        ],
        "ref_sql": "SELECT DISTINCT product_color FROM Products",
        "MQL": "db.Product_Categories.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$Products.product_color\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      product_color: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1835,
        "db_id": "tracking_grants_for_research",
        "nl_queries": [
            "Find the organisation ids and details of the organisations which are involved in",
            "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
            "Retrieve the IDs and corresponding details of organizations that hold grants exceeding 6000 dollars.",
            "List the organization IDs and their details for those that have received grants over 6000 dollars.",
            "What are the organization IDs and information for all entities with grants greater than 6000 dollars?"
        ],
        "ref_sql": "SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount) > 6000",
        "MQL": "db.Organisation_Types.aggregate([\n  {\n    $unwind: \"$Organisations\"\n  },\n  {\n    $unwind: \"$Organisations.Grants\"\n  },\n  {\n    $match: {\n      \"Organisations.Grants.grant_amount\": {\n        $gt: 6000\n      }\n    }\n  },\n  {\n    $project: {\n      organisation_id: \"$Organisations.organisation_id\",\n      organisation_details: \"$Organisations.organisation_details\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 179,
        "db_id": "film_rank",
        "nl_queries": [
            "List all countries of markets in descending order of number of cities.",
            "What are the countries for each market ordered by decreasing number of cities?",
            "Retrieve the countries of all markets sorted from highest to lowest number of cities.",
            "Show me the list of countries, ranked by the number of cities in descending order.",
            "Provide a list of market countries arranged by the total number of cities, starting with the most."
        ],
        "ref_sql": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "MQL": "db.market.aggregate([\n  {\n    $group: {\n      _id: \"$Country\",\n      number_of_cities: { $sum: \"$Number_cities\" }\n    }\n  },\n  {\n    $sort: { number_of_cities: -1 }\n  },\n  {\n    $project: {\n      Country: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2661,
        "db_id": "csu_1",
        "nl_queries": [
            "Find the count of universities whose campus fee is greater than the average campus fee.",
            "How many universities have a campus fee higher than average?",
            "How many universities have a campus fee greater than the average?",
            "Count the number of universities with campus fees exceeding the average campus fee.",
            "How many universities charge campus fees above the average?"
        ],
        "ref_sql": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
        "MQL": "db.Campuses.aggregate([\n  {\n    $unwind: \"$csu_fees\"\n  },\n  {\n    $group: {\n      _id: null,\n      averageCampusFee: { $avg: \"$csu_fees.CampusFee\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"Campuses\",\n      pipeline: [\n        { $unwind: \"$csu_fees\" },\n        {\n          $group: {\n            _id: \"$Id\",\n            campusFee: { $first: \"$csu_fees.CampusFee\" }\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      $expr: { $gt: [\"$Docs1.campusFee\", \"$averageCampusFee\"] }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4131,
        "db_id": "insurance_and_eClaims",
        "nl_queries": [
            "Find the name of the customer that has been involved in the most policies.",
            "Which customer have the most policies? Give me the customer details.",
            "Which customer has the highest number of insurance policies registered?",
            "Identify the customer with the most insurance policies and provide their details.",
            "Who is the customer that holds the greatest number of policies? Please share their information."
        ],
        "ref_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Customers.aggregate([\n  {\n    $unwind: \"$Policies\"\n  },\n  {\n    $group: {\n      _id: {\n        Customer_ID: \"$Customer_ID\",\n        Customer_Details: \"$Customer_Details\"\n      },\n      policyCount: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      policyCount: -1\n    }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $project: {\n      _id: 0,\n      Customer_Details: \"$_id.Customer_Details\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1967,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the name of medication used on the patient who stays in room 111?",
            "What is the name of the medication used for the patient staying in room 111?",
            "What is the name of the medication prescribed to the patient in room 111?",
            "Retrieve the name of the medication for the patient occupying room 111.",
            "Can you provide the name of the medication given to the patient who is in room 111?"
        ],
        "ref_sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111",
        "MQL": "db.Block.aggregate([\n  {\n    $unwind: \"$Room\"\n  },\n  {\n    $match: {\n      \"Room.RoomNumber\": 111\n    }\n  },\n  {\n    $unwind: \"$Room.Stay\"\n  },\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"Room.Stay.Patient\",\n      foreignField: \"Patient.SSN\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $unwind: \"$Docs1.Patient\"\n  },\n  {\n    $unwind: \"$Docs1.Patient.Prescribes\"\n  },\n  {\n    $lookup: {\n      from: \"Medication\",\n      localField: \"Docs1.Patient.Prescribes.Medication\",\n      foreignField: \"Code\",\n      as: \"Docs2\"\n    }\n  },\n  {\n    $unwind: \"$Docs2\"\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Docs2.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1745,
        "db_id": "twitter_1",
        "nl_queries": [
            "Find the id of users who are followed by Mary and Susan.",
            "Retrieve the user IDs of individuals who are being followed by either Mary or Susan.",
            "List the IDs of users that have Mary or Susan listed among their followers.",
            "Get the IDs of users followed by at least one of the two: Mary or Susan.",
            "Identify user IDs of accounts that are followed by Mary or Susan."
        ],
        "ref_sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Susan\"",
        "MQL": "db.user_profiles.find({\n  \"follows\": {\n    $elemMatch: {\n      \"f1\": { $in: [\"Mary\", \"Susan\"] }\n    }\n  }\n}, { \"follows.f1\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1955,
        "db_id": "hospital_1",
        "nl_queries": [
            "Find the names of procedures which physician John Wen was trained in.",
            "What are the names of procedures physician John Wen was trained in?",
            "List the names of procedures that physician John Wen is qualified to perform.",
            "What procedures has physician John Wen received training for?",
            "Can you provide the names of the procedures that John Wen has been trained to handle?"
        ],
        "ref_sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
        "MQL": "db.Procedures.aggregate([\n  {\n    $lookup: {\n      from: \"Physician\",\n      localField: \"Code\",\n      foreignField: \"Trained_In.Treatment\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Name\": \"John Wen\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1343,
        "db_id": "battle_death",
        "nl_queries": [
            "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "Provide the names and dates of battles involving the ships named 'Lettice' and 'HMS Atalanta'.",
            "What are the names and dates of the battles where the ships 'Lettice' and 'HMS Atalanta' were lost?",
            "Show me the battles that include the ships 'Lettice' and 'HMS Atalanta', along with their names and dates.",
            "List the battles with their names and dates that involved the ships 'Lettice' and 'HMS Atalanta'."
        ],
        "ref_sql": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
        "MQL": "db.battle.find({\n  \"ship.name\": { $in: [\"Lettice\", \"HMS Atalanta\"] }\n}, { \"name\": 1, \"date\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 419,
        "db_id": "culture_company",
        "nl_queries": [
            "Show all distinct publishers for books.",
            "What are all the different book publishers?",
            "List all the unique publishers of the books.",
            "Can you provide a list of all distinct book publishers?",
            "What unique publishers are there for the books?"
        ],
        "ref_sql": "SELECT DISTINCT publisher FROM book_club",
        "MQL": "db.book_club.aggregate([\n  {\n    $group: {\n      _id: \"$Publisher\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Publisher: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3905,
        "db_id": "local_govt_in_alabama",
        "nl_queries": [
            "List the service id and details for the events.",
            "Provide the service identifier along with the details of the events.",
            "Show the service IDs and corresponding event details.",
            "Display the IDs of the services and the details related to the events they cover.",
            "Retrieve a list of service IDs together with their respective event details."
        ],
        "ref_sql": "SELECT service_id , event_details FROM EVENTS",
        "MQL": "db.Services.aggregate([\n  { $unwind: \"$Events\" },\n  { $project: { \"Service_ID\": 1, \"Event_Details\": \"$Events.Event_Details\", \"_id\": 0 } }\n]);\n"
    },
    {
        "record_id": 1379,
        "db_id": "network_2",
        "nl_queries": [
            "Find the name of the person who has friends with age above 40 and under age 30?",
            "What are the names of every person who has a friend over 40 and under 30?",
            "List the names of people who have friends older than 40 or younger than 30.",
            "Can you provide the names of individuals that possess at least one friend over the age of 40 or under the age of 30?",
            "Who are the individuals with friends either above the age of 40 or below the age of 30?"
        ],
        "ref_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
        "MQL": "db.Person.aggregate([\n  {\n    $project: {\n      name: 1,\n      friends: {\n        $filter: {\n          input: \"$PersonFriend\",\n          as: \"friend\",\n          cond: {\n            $and: [\n              { $gt: [\"$$friend.age\", 40] },\n              { $lt: [\"$$friend.age\", 30] }\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    $match: {\n      friends: { $ne: [] }\n    }\n  },\n  {\n    $project: {\n      name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2378,
        "db_id": "assets_maintenance",
        "nl_queries": [
            "How many assets does each maintenance contract contain? List the number and the contract id.",
            "What is the count of assets under each maintenance contract? Include the asset count along with the contract ID.",
            "For every maintenance contract, how many assets are there? Please provide the numbers alongside the contract identifiers.",
            "Can you provide a list of maintenance contracts with their respective asset counts and contract IDs?",
            "How many assets does each maintenance contract include? Present the count along with the respective maintenance contract ID."
        ],
        "ref_sql": "SELECT count(*) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "MQL": "db.Third_Party_Companies.aggregate([\n  { \n    $unwind: \"$Maintenance_Contracts\" \n  },\n  { \n    $unwind: \"$Maintenance_Contracts.Assets\" \n  },\n  { \n    $group: {\n      _id: \"$Maintenance_Contracts.maintenance_contract_id\",\n      count: { $sum: 1 }\n    }\n  },\n  { \n    $project: {\n      _id: 0,\n      maintenance_contract_id: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2369,
        "db_id": "employee_hire_evaluation",
        "nl_queries": [
            "Find the number of shops in each location.",
            "How many shops are there in each location?",
            "Count the total number of shops for each location.",
            "What is the total count of shops located in each area?",
            "How many shops exist in every location?"
        ],
        "ref_sql": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
        "MQL": "db.shop.aggregate([\n  {\n    $group: {\n      _id: \"$Location\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Location: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1917,
        "db_id": "party_host",
        "nl_queries": [
            "Show the themes of parties and the names of the party hosts.",
            "For each party, return its theme and the name of its host.",
            "List the themes of all parties along with the names of their hosts.",
            "Retrieve the themes of parties together with the names of each hosting individual.",
            "Provide the themes associated with each party and the names of the hosts in charge."
        ],
        "ref_sql": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
        "MQL": "db.party.aggregate([\n  {\n    $unwind: \"$party_host\"\n  },\n  {\n    $lookup: {\n      from: \"host\",\n      localField: \"party_host.Host_ID\",\n      foreignField: \"Host_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      Party_Theme: 1,\n      Name: \"$Docs1.Name\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1897,
        "db_id": "company_employee",
        "nl_queries": [
            "Show the names of companies and the number of employees they have",
            "List the names of companies along with their total number of employees.",
            "Provide the names of each company and the corresponding count of employees they employ.",
            "Display company names and the associated employee headcounts.",
            "Reveal the names of companies alongside the number of individuals they have employed."
        ],
        "ref_sql": "SELECT T3.Name , COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID GROUP BY T3.Name",
        "MQL": "db.company.aggregate([\n  {\n    $lookup: {\n      from: \"people\",\n      localField: \"Company_ID\",\n      foreignField: \"employment.Company_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $group: {\n      _id: \"$Company_ID\",\n      Name: { $first: \"$Name\" },\n      COUNT: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1,\n      COUNT: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1059,
        "db_id": "poker_player",
        "nl_queries": [
            "What are the names of poker players in descending order of earnings?",
            "Return the names of poker players sorted by their earnings descending.",
            "List the names of poker players ordered by their earnings from highest to lowest.",
            "Provide the names of poker players arranged in descending order of their total earnings.",
            "Show the names of poker players, sorted by earnings in decreasing order."
        ],
        "ref_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
        "MQL": "db.people.aggregate([\n  {\n    $unwind: \"$poker_player\"\n  },\n  {\n    $sort: {\n      \"poker_player.Earnings\": -1\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3736,
        "db_id": "cre_Theme_park",
        "nl_queries": [
            "Show the details and star ratings of the 3 least expensive hotels.",
            "What are the details and star ratings of the three hotels with the lowest price ranges?",
            "List the details and star ratings for the three most affordable hotels.",
            "Can you provide the information and star ratings of the three hotels with the lowest prices?",
            "Give me the details and star ratings of the three least expensive hotels available."
        ],
        "ref_sql": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "MQL": "db.Ref_Hotel_Star_Ratings.aggregate([\n  {\n    $unwind: \"$Hotels\"\n  },\n  {\n    $sort: {\n      \"Hotels.price_range\": 1\n    }\n  },\n  {\n    $limit: 3\n  },\n  {\n    $project: {\n      other_hotel_details: \"$Hotels.other_hotel_details\",\n      star_rating_code: \"$star_rating_code\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1681,
        "db_id": "apartment_rentals",
        "nl_queries": [
            "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
            "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.",
            "List the apartment numbers where bookings carry both the \"Provisional\" and \"Confirmed\" status codes.",
            "Identify the apartments that have bookings associated with both \"Provisional\" and \"Confirmed\" status codes. Please provide their apartment numbers.",
            "What are the apartment numbers for units that have bookings with concurrent status codes of \"Provisional\" and \"Confirmed\"?"
        ],
        "ref_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
        "MQL": "db.Apartment_Buildings.aggregate([\n  {\n    $unwind: \"$Apartments\"\n  },\n  {\n    $unwind: \"$Apartments.Apartment_Bookings\"\n  },\n  {\n    $project: {\n      apt_number: \"$Apartments.apt_number\",\n      booking_status_codes: \"$Apartments.Apartment_Bookings.booking_status_code\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$apt_number\",\n      status_codes: {\n        $addToSet: \"$booking_status_codes\"\n      }\n    }\n  },\n  {\n    $match: {\n      status_codes: {\n        $all: [\"Provisional\", \"Confirmed\"]\n      }\n    }\n  },\n  {\n    $project: {\n      apt_number: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4222,
        "db_id": "icfp_1",
        "nl_queries": [
            "Which paper's title contains the word \"Database\"?",
            "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.",
            "What are the titles of papers that include the term \"Database\"?",
            "List all paper titles that feature the word \"Database\".",
            "Identify papers whose titles have the substring \"Database\" in them."
        ],
        "ref_sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "MQL": "db.Papers.find(\n  {\n    title: { $regex: \"Database\", $options: \"i\" }\n  },\n  {\n    title: 1,\n    _id: 0\n  }\n);\n"
    },
    {
        "record_id": 3961,
        "db_id": "world_1",
        "nl_queries": [
            "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "Provide a list of government forms along with their total populations for those that have an average life expectancy above 72 years.",
            "What are the total populations associated with each government form that boasts an average life expectancy greater than 72?",
            "Identify the total population for each type of government form where the average life expectancy exceeds 72 years."
        ],
        "ref_sql": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
        "MQL": "db.country.aggregate([\n  {\n    $group: {\n      _id: \"$GovernmentForm\",\n      avg_LifeExpectancy: { $avg: \"$LifeExpectancy\" },\n      sum_Population: { $sum: \"$Population\" }\n    }\n  },\n  {\n    $match: {\n      avg_LifeExpectancy: { $gt: 72 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      GovernmentForm: \"$_id\",\n      sum_Population: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2140,
        "db_id": "music_4",
        "nl_queries": [
            "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
            "Return the average number of weeks on top for volumes by artists that are at most 25 years old.",
            "What is the average duration that volumes by artists under the age of 26 have remained on top?",
            "Can you provide the average number of weeks that volumes from artists who are 25 years old or younger have been at the top?",
            "Calculate the average weeks that music volumes by artists aged 25 or less have spent at number one."
        ],
        "ref_sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25",
        "MQL": "db.artist.aggregate([\n  {\n    $match: {\n      Age: { $lte: 25 }\n    }\n  },\n  {\n    $unwind: \"$volume\"\n  },\n  {\n    $group: {\n      _id: null,\n      avg_Weeks_on_Top: { $avg: \"$volume.Weeks_on_Top\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      avg_Weeks_on_Top: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 288,
        "db_id": "car_1",
        "nl_queries": [
            "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "Which car models weigh less than 3500 and are not manufactured by Ford?",
            "List the models that are lighter than 3500 and were not produced by the Ford Motor Company.",
            "What models exist that have a weight less than 3500 and are not from the Ford Motor Company?"
        ],
        "ref_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $unwind: \"$countries.car_makers\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names\"\n  },\n  {\n    $unwind: \"$countries.car_makers.model_list.car_names.cars_data\"\n  },\n  {\n    $match: {\n      \"countries.car_makers.FullName\": { $ne: \"Ford Motor Company\" },\n      \"countries.car_makers.model_list.car_names.cars_data.Weight\": { $lt: 3500 }\n    }\n  },\n  {\n    $group: {\n      _id: \"$countries.car_makers.model_list.car_names.Model\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Model: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 198,
        "db_id": "cre_Drama_Workshop_Groups",
        "nl_queries": [
            "What are the phone and email for customer Harold?",
            "Find the phone number and email address of customer \"Harold\".",
            "Can you provide the email and phone number for the customer named Harold?",
            "What is Harold's contact information, including his phone and email address?",
            "Retrieve the phone and email details for the customer \"Harold\"."
        ],
        "ref_sql": "SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = \"Harold\"",
        "MQL": "db.Addresses.aggregate(\n  [\n    { $unwind: '$Customers' },\n    {\n      $match: {\n        'Customers.Customer_Name': 'Harold'\n      }\n    },\n    {\n      $project: {\n        Customer_Phone: '$Customers.Customer_Phone',\n        Customer_Email_Address: '$Customers.Customer_Email_Address'\n      }\n    }\n  ]\n);"
    },
    {
        "record_id": 3503,
        "db_id": "concert_singer",
        "nl_queries": [
            "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "What are the names, countries, and ages for every singer in descending order of age?",
            "List the names, countries, and ages of all singers sorted from the oldest to the youngest.",
            "Retrieve the names, countries, and ages of every singer in order of age, starting with the oldest.",
            "Provide the names, ages, and countries of all singers listed in descending order of their age."
        ],
        "ref_sql": "SELECT name , country , age FROM singer ORDER BY age DESC",
        "MQL": "db.singer.find({}, { \"Name\": 1, \"Country\": 1, \"Age\": 1, \"_id\": 0 }).sort({ \"Age\": -1 })\n"
    },
    {
        "record_id": 2784,
        "db_id": "pets_1",
        "nl_queries": [
            "Find the number of dog pets that are raised by female students (with sex F).",
            "How many dog pets are raised by female students?",
            "How many female students own dogs as pets?",
            "Count the number of dogs that are kept by students who are female.",
            "What is the total number of dog pets owned by female students?"
        ],
        "ref_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
        "MQL": "db.Student.aggregate([\n  {\n    $lookup: {\n      from: \"Pets\",\n      localField: \"Has_Pet.PetID\",\n      foreignField: \"PetID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $match: {\n      Sex: \"F\",\n      \"Docs1.PetType\": \"dog\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1588,
        "db_id": "world_1",
        "nl_queries": [
            "Which language is the most popular on the Asian continent?",
            "What is the language that is used by the largest number of Asian nations?",
            "What is the most widely spoken language in Asia?",
            "Identify the language that the highest number of Asian countries share.",
            "Which language has the greatest prevalence among nations in the Asian continent?"
        ],
        "ref_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Continent: \"Asia\"\n    }\n  },\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$countrylanguage.Language\",\n      count: {\n        $sum: 1\n      }\n    }\n  },\n  {\n    $sort: {\n      count: -1\n    }\n  },\n  {\n    $project: {\n      Language: \"$_id\",\n      _id: 0\n    }\n  },\n  {\n    $limit: 1\n  }\n]);\n"
    },
    {
        "record_id": 2434,
        "db_id": "station_weather",
        "nl_queries": [
            "Find the number of trains for each station, as well as the station network name and services.",
            "Retrieve the total number of trains at each station along with the respective network name and services offered.",
            "What is the train count for every station, including their network names and services?",
            "Provide the number of trains available for each station, as well as the network name and services it provides.",
            "List the count of trains for each station together with information on the network name and services available."
        ],
        "ref_sql": "SELECT count(*) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id",
        "MQL": "db.station.aggregate([\n  \n  { $unwind: \"$route\" },\n  \n  \n  {\n    $group: {\n      _id: {\n        station_id: \"$id\",\n        network_name: \"$network_name\",\n        services: \"$services\"\n      },\n      count: { $sum: 1 }\n    }\n  },\n  \n  \n  {\n    $project: {\n      _id: 0,\n      count: 1,\n      network_name: \"$_id.network_name\",\n      services: \"$_id.services\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 168,
        "db_id": "car_1",
        "nl_queries": [
            "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "How many different car models does each maker produce, and what are their IDs and full names?",
            "Provide the total number of car models for each maker along with their identification number and full names.",
            "What is the count of car models made by every manufacturer, and could you include each maker's ID and full name in the response?",
            "Can you tell me the number of car models owned by each maker, along with their maker IDs and complete names?"
        ],
        "ref_sql": "SELECT Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
        "MQL": "db.continents.aggregate([\n  { $unwind: \"$countries\" },\n  { $unwind: \"$countries.car_makers\" },\n  { $project: {\n      \"MakerId\": \"$countries.car_makers.Id\",\n      \"MakerFullName\": \"$countries.car_makers.FullName\",\n      \"ModelCount\": { $size: \"$countries.car_makers.model_list\" }\n    }\n  },\n  { $group: {\n      \"_id\": { \"MakerId\": \"$MakerId\", \"MakerFullName\": \"$MakerFullName\" },\n      \"ModelCount\": { $sum: \"$ModelCount\" }\n    }\n  },\n  { $project: {\n      \"_id\": 0,\n      \"Id\": \"$_id.MakerId\",\n      \"FullName\": \"$_id.MakerFullName\",\n      \"Count\": \"$ModelCount\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 660,
        "db_id": "chinook_1",
        "nl_queries": [
            "Find the names of all the tracks that contain the word \"you\".",
            "What are the names of tracks that contain the the word you in them?",
            "List all track names that include the word \"you\".",
            "What track titles feature the word \"you\"?",
            "Show me the names of tracks that have \"you\" in their titles."
        ],
        "ref_sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "MQL": "db.Artist.aggregate([\n  {\n    $unwind: \"$Album\"\n  },\n  {\n    $unwind: \"$Album.Track\"\n  },\n  {\n    $match: {\n      \"Album.Track.Name\": {\n        $regex: \"you\",\n        $options: \"i\"  \n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: \"$Album.Track.Name\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1790,
        "db_id": "movie_1",
        "nl_queries": [
            "What is the average rating star for each reviewer?",
            "What is the average number of stars that each reviewer awards for a movie?",
            "How many stars does each reviewer typically give to movies on average?",
            "What is the mean star rating provided by each reviewer for films?",
            "Can you tell me the average number of stars awarded by each reviewer for their movie ratings?"
        ],
        "ref_sql": "SELECT T2.name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name",
        "MQL": "db.Reviewer.aggregate([\n  {\n    $unwind: \"$Rating\"\n  },\n  {\n    $group: {\n      _id: \"$name\",\n      avg_stars: { $avg: \"$Rating.stars\" }\n    }\n  },\n  {\n    $project: {\n      name: \"$_id\",\n      avg_stars: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2913,
        "db_id": "hospital_1",
        "nl_queries": [
            "How many different types of rooms are there?",
            "Find the number of distinct room types available.",
            "What is the total number of unique room types available?",
            "Count how many various room types exist.",
            "Determine the total distinct types of rooms in the hospital."
        ],
        "ref_sql": "SELECT count(DISTINCT roomtype) FROM room",
        "MQL": "db.Block.aggregate([\n  {\n    $unwind: \"$Room\"\n  },\n  {\n    $group: {\n      _id: \"$Room.RoomType\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_roomtype: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_roomtype: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2286,
        "db_id": "customers_card_transactions",
        "nl_queries": [
            "Show ids, customer ids, card type codes, card numbers for all cards.",
            "What are card ids, customer ids, card types, and card numbers for each customer card?",
            "List the card IDs, customer IDs, card type codes, and card numbers for all available customer cards.",
            "Provide the card identifiers, along with customer identifiers, card types, and card numbers for every customer card in the database.",
            "Can you show me the IDs of the cards, customer IDs, types of cards, and numbers associated with each customer card?"
        ],
        "ref_sql": "SELECT card_id , customer_id , card_type_code , card_number FROM Customers_cards",
        "MQL": "db.Customers_Cards.find({}, {\n  card_id: 1,\n  customer_id: 1,\n  card_type_code: 1,\n  card_number: 1,\n  _id: 0\n});\n"
    },
    {
        "record_id": 2132,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the average prices of all products from each manufacture, and list each company's name.",
            "What are the average prices of products for each manufacturer?",
            "What is the average price of products sold by each manufacturer, along with their names?",
            "Provide the average pricing information for products for every manufacturer, listing their names.",
            "Calculate and display the average prices of products for each manufacturer, including their corresponding names."
        ],
        "ref_sql": "SELECT avg(T1.price) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      avg_Price: { $avg: \"$Products.Price\" }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      avg_Price: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2312,
        "db_id": "bike_1",
        "nl_queries": [
            "List the name and the number of stations for all the cities that have at least 15 stations.",
            "What is the name of every city that has at least 15 stations and how many stations does it have?",
            "Identify the cities that have 15 or more bike stations and provide the count of stations for each.",
            "Which cities boast at least 15 stations, and what is the number of stations in each city?",
            "Can you list all cities with a minimum of 15 bike stations along with their respective station counts?"
        ],
        "ref_sql": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$city\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gte: 15 }\n    }\n  },\n  {\n    $project: {\n      city: \"$_id\",\n      COUNT: \"$count\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 429,
        "db_id": "soccer_2",
        "nl_queries": [
            "Find the states where have the colleges whose enrollments are less than the largest size.",
            "What are the states with colleges that have enrollments less than the some other college?",
            "Identify the states that contain colleges with enrollments less than the highest enrollment amount.",
            "List the states where colleges have student enrollments that are below the maximum enrollment from any college.",
            "Which states have colleges that enroll fewer students than the largest college enrollment figure?"
        ],
        "ref_sql": "SELECT DISTINCT state FROM college WHERE enr < (SELECT max(enr) FROM college)",
        "MQL": "db.College.aggregate([\n  {\n    $group: {\n      _id: null,\n      max_enr: { $max: \"$enr\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"College\",\n      let: { max_enr: \"$max_enr\" },\n      pipeline: [\n        {\n          $match: {\n            $expr: { $lt: [\"$enr\", \"$$max_enr\"] }\n          }\n        },\n        {\n          $project: {\n            state: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: {\n      newRoot: \"$Docs1\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$state\"\n    }\n  },\n  {\n    $project: {\n      state: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1951,
        "db_id": "storm_record",
        "nl_queries": [
            "Show all storm names affecting region \"Denmark\".",
            "What are the names of the storms that affected Denmark?",
            "List the names of storms that have impacted the region of Denmark.",
            "Provide all storm names that have affected Denmark.",
            "Identify the storms that have caused an impact in the Denmark region."
        ],
        "ref_sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
        "MQL": "db.storm.aggregate([\n  {\n    $lookup: {\n      from: \"region\",\n      localField: \"affected_region.Region_id\",\n      foreignField: \"Region_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.Region_name\": \"Denmark\"\n    }\n  },\n  {\n    $project: {\n      Name: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1468,
        "db_id": "game_injury",
        "nl_queries": [
            "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
            "What seasons and stadiums experienced player injuries categorized as 'Foot injury' or 'Knee problem'?",
            "Identify the seasons and stadiums where players faced injuries such as 'Foot injury' or 'Knee problem'.",
            "In which seasons did players sustain 'Foot injury' or 'Knee problem', and what stadiums were involved?",
            "Can you list the seasons and stadiums where any player encountered 'Foot injury' or 'Knee problem'?"
        ],
        "ref_sql": "SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'",
        "MQL": "db.stadium.aggregate([\n  \n  { $unwind: \"$game\" },\n  \n  { $unwind: \"$game.injury_accident\" },\n  \n  { $match: { \n      $or: [\n        { \"game.injury_accident.Injury\": \"Foot injury\" },\n        { \"game.injury_accident.Injury\": \"Knee problem\" }\n      ]\n  }},\n  \n  { $project: { \n      \"Season\": \"$game.Season\", \n      \"name\": 1, \n      \"_id\": 0 \n  }},\n  \n  { $group: { \n      _id: { \"Season\": \"$Season\", \"name\": \"$name\" }\n  }},\n  \n  { $project: { \n      \"Season\": \"$_id.Season\", \n      \"name\": \"$_id.name\", \n      \"_id\": 0 \n  }}\n]);\n"
    },
    {
        "record_id": 826,
        "db_id": "riding_club",
        "nl_queries": [
            "List the names of players that do not have coaches.",
            "Retrieve the names of players who do not have any assigned coaches.",
            "Show me the names of players without a coach.",
            "Provide a list of players who lack coaching.",
            "List all player names who are not associated with a coach."
        ],
        "ref_sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
        "MQL": "db.player.find({\n  $or: [\n    { \"player_coach\": { $exists: false } },\n    { \"player_coach\": { $size: 0 } }\n  ]\n}, { \"Player_name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 126,
        "db_id": "world_1",
        "nl_queries": [
            "What is the total number of languages used in Aruba?",
            "How many languages are spoken in Aruba?",
            "How many different languages are officially recognized in Aruba?",
            "What is the count of languages that are spoken in the country Aruba?",
            "Can you tell me the number of languages that people speak in Aruba?"
        ],
        "ref_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
        "MQL": "db.country.aggregate([\n  {\n    $match: {\n      Name: \"Aruba\"\n    }\n  },\n  {\n    $unwind: \"$countrylanguage\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 213,
        "db_id": "train_station",
        "nl_queries": [
            "What are all locations of train stations?",
            "Can you provide a list of all the locations where train stations are found?",
            "What locations host train stations?",
            "Show me the unique locations of all train stations.",
            "Where are the train stations located? Please list all their locations."
        ],
        "ref_sql": "SELECT DISTINCT LOCATION FROM station",
        "MQL": "db.station.aggregate([\n  {\n    $group: {\n      _id: \"$Location\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Location: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1187,
        "db_id": "small_bank_1",
        "nl_queries": [
            "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
            "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
            "Retrieve the customer ID and name of accounts having a checking balance that is less than the highest checking balance.",
            "List the names and customer IDs of accounts where the checking account balance is lower than the maximum balance found.",
            "Identify the accounts with checking balances that are not as high as the maximum; provide their customer IDs and names."
        ],
        "ref_sql": "SELECT T1.custid , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT max(balance) FROM checking)",
        "MQL": "db.ACCOUNTS.aggregate([\n  {\n    $unwind: \"$CHECKING\"\n  },\n  {\n    $group: {\n      _id: null,\n      maxCheckingBalance: { $max: \"$CHECKING.balance\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"ACCOUNTS\",\n      let: { maxCheckingBalance: \"$maxCheckingBalance\" },\n      pipeline: [\n        { $unwind: \"$CHECKING\" },\n        {\n          $match: {\n            $expr: { $lt: [\"$CHECKING.balance\", \"$$maxCheckingBalance\"] }\n          }\n        },\n        {\n          $project: {\n            custid: 1,\n            name: 1,\n            _id: 0\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $replaceRoot: { newRoot: \"$Docs1\" }\n  }\n]);\n"
    },
    {
        "record_id": 1389,
        "db_id": "wedding",
        "nl_queries": [
            "Show all church names that have hosted least two weddings.",
            "List the names of churches that have conducted at least two weddings.",
            "Identify all church names that have presided over two or more weddings.",
            "Retrieve the names of churches hosting a minimum of two wedding ceremonies.",
            "Provide a list of church names where two or more weddings have taken place."
        ],
        "ref_sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING count(*) >= 2",
        "MQL": "db.church.aggregate([\n  {\n    $lookup: {\n      from: \"people\",\n      localField: \"Church_ID\",\n      foreignField: \"wedding.Church_ID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1\": { $exists: true, $not: { $size: 0 } }\n    }\n  },\n  {\n    $group: {\n      _id: \"$Church_ID\",\n      Name: { $first: \"$Name\" },\n      WeddingCount: { $sum: { $size: \"$Docs1\" } }\n    }\n  },\n  {\n    $match: {\n      WeddingCount: { $gte: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Name: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2830,
        "db_id": "college_1",
        "nl_queries": [
            "How many professors are teaching class with code ACCT-211?",
            "How many professors teach a class with the code ACCT-211?",
            "What is the total number of professors who instruct the class identified by the code ACCT-211?",
            "Can you tell me how many instructors are teaching the course with the code ACCT-211?",
            "How many faculty members are assigned to teach the class with code ACCT-211?"
        ],
        "ref_sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\"",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$CLASS\"\n  },\n  {\n    $match: {\n      \"CLASS.CRS_CODE\": \"ACCT-211\"\n    }\n  },\n  {\n    $group: {\n      _id: \"$CLASS.PROF_NUM\"\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_PROF_NUM: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_PROF_NUM: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1355,
        "db_id": "flight_company",
        "nl_queries": [
            "What are the names and types of the companies that have ever operated a flight?",
            "Can you provide the names and classifications of companies that have conducted flights?",
            "List the names and types of companies that have been involved in operating flights.",
            "What companies have operated flights, and what are their names and types?",
            "Show me the names and types of all companies that have ever managed a flight."
        ],
        "ref_sql": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
        "MQL": "db.operate_company.find({\n  \"flight\": { $exists: true, $ne: [] }\n}, { \"name\": 1, \"Type\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 1547,
        "db_id": "driving_school",
        "nl_queries": [
            "What is the id and detail of the vehicle used in lessons for most of the times?",
            "Which vehicle has been involved in the highest number of lessons, and what are its details and ID?",
            "Identify the vehicle that is utilized the most for lessons, including its ID and descriptions.",
            "What is the identifier and information of the vehicle that is used in lessons the most frequently?",
            "Can you provide the ID and details of the vehicle that has participated in the greatest number of lessons?"
        ],
        "ref_sql": "SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "MQL": "db.Vehicles.aggregate([\n  {\n    $unwind: \"$Lessons\"\n  },\n  {\n    $group: {\n      _id: \"$Lessons.vehicle_id\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 1\n  },\n  {\n    $lookup: {\n      from: \"Vehicles\",\n      localField: \"_id\",\n      foreignField: \"vehicle_id\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      vehicle_id: \"$_id\",\n      vehicle_details: { $arrayElemAt: [\"$Docs1.vehicle_details\", 0] }\n    }\n  }\n]);\n"
    },
    {
        "record_id": 489,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "List all employees in the circulation history of the document with id 1. List the employee's name.",
            "Retrieve the names of all employees who have a role in the circulation history for document ID 1.",
            "Show all employee names from the circulation records of the document with ID 1.",
            "List the names of employees involved in the circulation history of the document identified by ID 1.",
            "Provide a list of employee names associated with the circulation history of the document having the ID 1."
        ],
        "ref_sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
        "MQL": "db.Roles.aggregate([\n  {\n    $match: {\n      \"Employees.Circulation_History.document_id\": 1\n    }\n  },\n  {\n    $unwind: \"$Employees\"\n  },\n  {\n    $match: {\n      \"Employees.Circulation_History.document_id\": 1\n    }\n  },\n  {\n    $project: {\n      \"employee_name\": \"$Employees.employee_name\",\n      \"_id\": 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2023,
        "db_id": "book_2",
        "nl_queries": [
            "List the writers who have written more than one book.",
            "Identify writers who have published multiple books.",
            "Show the names of authors who wrote more than one book.",
            "Provide a list of authors with more than one book to their name.",
            "Find all writers that have written a minimum of two books."
        ],
        "ref_sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1",
        "MQL": "db.book.aggregate([\n  {\n    $group: {\n      _id: \"$Writer\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Writer: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3198,
        "db_id": "music_1",
        "nl_queries": [
            "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
            "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
            "Which song IDs correspond to songs that have a resolution exceeding that of any song rated under 8?",
            "Can you provide the IDs of songs that possess a resolution greater than the maximum resolution of songs with a rating less than 8?",
            "What are the IDs of the songs that feature a resolution higher than that of any song that rates below 8?"
        ],
        "ref_sql": "SELECT f_id FROM song WHERE resolution > (SELECT max(resolution) FROM song WHERE rating < 8)",
        "MQL": "db.genre.aggregate([\n  {\n    $unwind: \"$song\"\n  },\n  {\n    $match: {\n      \"song.rating\": { $lt: 8 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      max_resolution: { $max: \"$song.resolution\" }\n    }\n  },\n  {\n    $lookup: {\n      from: \"genre\",\n      let: { max_resolution: \"$max_resolution\" },\n      pipeline: [\n        {\n          $unwind: \"$song\"\n        },\n        {\n          $match: {\n            $expr: { $gt: [\"$song.resolution\", \"$$max_resolution\"] }\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            f_id: \"$song.f_id\"\n          }\n        }\n      ],\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      _id: 0,\n      f_id: \"$Docs1.f_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 978,
        "db_id": "car_1",
        "nl_queries": [
            "What are the countries having at least one car maker? List name and id.",
            "What are the names and ids of all countries with at least one car maker?",
            "Which countries have at least one car manufacturer? Please provide their names and IDs.",
            "Can you list the names and IDs of countries that feature at least one car maker?",
            "Identify the countries with one or more car manufacturers and provide their corresponding names and IDs."
        ],
        "ref_sql": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
        "MQL": "db.continents.aggregate([\n  {\n    $unwind: \"$countries\"\n  },\n  {\n    $project: {\n      CountryName: \"$countries.CountryName\",\n      CountryId: \"$countries.CountryId\",\n      count_car_maker: {\n        $size: \"$countries.car_makers\"\n      }\n    }\n  },\n  {\n    $match: {\n      count_car_maker: {\n        $gt: 0\n      }\n    }\n  },\n  {\n    $project: {\n      CountryName: 1,\n      CountryId: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3122,
        "db_id": "cre_Doc_Template_Mgt",
        "nl_queries": [
            "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "List the document IDs that include paragraph text mentioning 'Brazil' or 'Ireland'.",
            "Retrieve the IDs of documents that have paragraphs containing the text 'Brazil' and 'Ireland'.",
            "Identify the document IDs associated with paragraph texts of 'Brazil' and 'Ireland'."
        ],
        "ref_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
        "MQL": "db.Ref_Template_Types.aggregate([\n  {\n    $unwind: \"$Templates\"\n  },\n  {\n    $unwind: \"$Templates.Documents\"\n  },\n  {\n    $unwind: \"$Templates.Documents.Paragraphs\"\n  },\n  {\n    $match: {\n      $or: [\n        { \"Templates.Documents.Paragraphs.Paragraph_Text\": \"Brazil\" },\n        { \"Templates.Documents.Paragraphs.Paragraph_Text\": \"Ireland\" }\n      ]\n    }\n  },\n  {\n    $group: {\n      _id: \"$Templates.Documents.Document_ID\"\n    },\n  },\n  {\n    $project: {\n      Document_ID: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1318,
        "db_id": "protein_institute",
        "nl_queries": [
            "Show institution names along with the number of proteins for each institution.",
            "List the names of institutions and the total number of proteins associated with each.",
            "Provide a list of institutions alongside their respective counts of proteins.",
            "Extract the institution names together with the count of proteins for every institution.",
            "Display institution names next to the number of proteins linked to each institution."
        ],
        "ref_sql": "SELECT T1.institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
        "MQL": "db.building.aggregate([\n  \n  { $unwind: \"$Institution\" },\n  \n  { $unwind: \"$Institution.protein\" },\n  \n  {\n    $group: {\n      _id: \"$Institution.Institution\",\n      count: { $sum: 1 }\n    }\n  },\n  \n  {\n    $project: {\n      _id: 0,\n      Institution: \"$_id\",\n      count: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2893,
        "db_id": "behavior_monitoring",
        "nl_queries": [
            "How many distinct incident type codes are there?",
            "What is the total number of unique incident type codes?",
            "How many different incident type codes exist?",
            "Can you tell me the number of distinct incident type codes?",
            "What is the count of all unique incident type codes present?"
        ],
        "ref_sql": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident",
        "MQL": "db.Ref_Incident_Type.aggregate([\n  {\n    $group: {\n      _id: \"$incident_type_code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_incident_type_code: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_incident_type_code: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1892,
        "db_id": "college_1",
        "nl_queries": [
            "What is the first and last name of the professor in biology department?",
            "What are the first and last name of all biology professors?",
            "Can you provide the first and last names of the professor working in the Biology department?",
            "What are the forename and surname of every professor in the Biology department?",
            "Who are the professors in the Biology department and what are their first and last names?"
        ],
        "ref_sql": "SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\"",
        "MQL": "db.EMPLOYEE.aggregate([\n  {\n    $unwind: \"$DEPARTMENT\"\n  },\n  {\n    $match: {\n      \"DEPARTMENT.DEPT_NAME\": \"Biology\"\n    }\n  },\n  {\n    $unwind: \"$DEPARTMENT.PROFESSOR\"\n  },\n  {\n    $lookup: {\n      from: \"EMPLOYEE\",\n      localField: \"DEPARTMENT.PROFESSOR.EMP_NUM\",\n      foreignField: \"EMP_NUM\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $unwind: \"$Docs1\"\n  },\n  {\n    $project: {\n      EMP_FNAME: \"$Docs1.EMP_FNAME\",\n      EMP_LNAME: \"$Docs1.EMP_LNAME\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3508,
        "db_id": "storm_record",
        "nl_queries": [
            "List name and damage for all storms in a descending order of max speed.",
            "What are the names and damage in millions for storms, ordered by their max speeds descending?",
            "Provide a list of storm names along with their damage amounts, sorted by maximum speed in descending order.",
            "Show the names and damage in millions of dollars for all storms, arranged in order of their maximum speeds from highest to lowest.",
            "What are the names and damage figures of storms, listed in decreasing order based on their maximum wind speed?"
        ],
        "ref_sql": "SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "MQL": "db.storm.find(\n  {},\n  { \"Name\": 1, \"Damage_millions_USD\": 1, \"_id\": 0 }\n).sort({ \"Max_speed\": -1 });\n"
    },
    {
        "record_id": 4019,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the total revenue for each manufacturer.",
            "What is the total revenue of each manufacturer?",
            "Calculate the total revenue for every manufacturer.",
            "What is the accumulated revenue for each manufacturer?",
            "Determine the overall revenue associated with each manufacturer."
        ],
        "ref_sql": "SELECT sum(revenue) , name FROM manufacturers GROUP BY name",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $group: {\n      _id: \"$Name\",\n      sum_revenue: { $sum: \"$Revenue\" }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      sum_revenue: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3907,
        "db_id": "insurance_fnol",
        "nl_queries": [
            "List all the services in the alphabetical order.",
            "Give me a list of all the service names sorted alphabetically.",
            "Provide an alphabetical list of all available services.",
            "Can you show me all the service names arranged in alphabetical order?",
            "Fetch a list of services sorted by name in ascending order."
        ],
        "ref_sql": "SELECT service_name FROM services ORDER BY service_name",
        "MQL": "db.Services.find({}, { Service_name: 1, _id: 0 }).sort({ Service_name: 1 });\n"
    },
    {
        "record_id": 2844,
        "db_id": "manufactory_1",
        "nl_queries": [
            "Find the number of different products that are produced by companies at different headquarter cities.",
            "How many different products are produced in each headquarter city?",
            "What is the total number of unique products manufactured by companies situated in various headquarter cities?",
            "Count the variety of products produced across different headquarters.",
            "How many unique types of products are created by manufacturers in each city of their headquarters?"
        ],
        "ref_sql": "SELECT count(DISTINCT T1.name) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter",
        "MQL": "db.Manufacturers.aggregate([\n  {\n    $unwind: \"$Products\"\n  },\n  {\n    $group: {\n      _id: \"$Headquarter\",\n      count_DISTINCT_products_name: {\n        $addToSet: \"$Products.Name\"\n      }\n    }\n  },\n  {\n    $project: {\n      count_DISTINCT_products_name: {\n        $size: \"$count_DISTINCT_products_name\"\n      },\n      Headquarter: \"$_id\",\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 649,
        "db_id": "entertainment_awards",
        "nl_queries": [
            "List the name of artworks that are not nominated.",
            "Provide the names of artworks that have not been nominated for awards.",
            "Retrieve the titles of artworks that lack any nominations.",
            "Show me the names of artworks that do not feature any nominations.",
            "Find the names of artworks without any nomination records."
        ],
        "ref_sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
        "MQL": "db.artwork.find({\n  $or: [\n    { \"nomination\": { $exists: false } },\n    { \"nomination\": { $size: 0 } }\n  ]\n}, { \"Name\": 1, \"_id\": 0 });\n"
    },
    {
        "record_id": 906,
        "db_id": "roller_coaster",
        "nl_queries": [
            "List the status shared by more than two roller coaster.",
            "Provide a list of roller coaster statuses associated with more than two rides.",
            "Identify the statuses that are common to more than two roller coasters.",
            "Show the statuses that more than two roller coasters share.",
            "Enumerate the statuses held by over two roller coasters."
        ],
        "ref_sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2",
        "MQL": "db.country.aggregate([\n  {\n    $unwind: \"$roller_coaster\"\n  },\n  {\n    $group: {\n      _id: \"$roller_coaster.Status\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $match: {\n      count: { $gt: 2 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Status: \"$_id\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 3147,
        "db_id": "cre_Doc_Control_Systems",
        "nl_queries": [
            "What is the description of document type 'Paper'?",
            "Can you provide the description for the document type labeled 'Paper'?",
            "What does the document type 'Paper' refer to in terms of its description?",
            "Please tell me the description associated with the document type 'Paper'.",
            "What is the explanation for the document type known as 'Paper'?"
        ],
        "ref_sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";",
        "MQL": "db.Ref_Document_Types.find(\n  { \"document_type_code\": \"Paper\" },\n  { \"document_type_description\": 1, \"_id\": 0 }\n);\n"
    },
    {
        "record_id": 3863,
        "db_id": "cre_Doc_Tracking_DB",
        "nl_queries": [
            "List all role codes, role names, and role descriptions.",
            "What are all the role codes, role names, and role descriptions?",
            "Provide a list of all role codes along with their corresponding names and descriptions.",
            "Can you show me all available role codes, names, and their descriptions?",
            "What role codes, names, and descriptions are present in the system?"
        ],
        "ref_sql": "SELECT role_code , role_name , role_description FROM ROLES",
        "MQL": "db.Roles.find({}, { Role_Code: 1, Role_Name: 1, Role_Description: 1, _id: 0 });\n"
    },
    {
        "record_id": 4177,
        "db_id": "icfp_1",
        "nl_queries": [
            "What are the titles of papers published by \"Jeremy Gibbons\"?",
            "Find the titles of all the papers written by \"Jeremy Gibbons\"",
            "Can you provide the titles of the papers authored by Jeremy Gibbons?",
            "List the paper titles written by \"Jeremy Gibbons\".",
            "What titles correspond to the works of author Jeremy Gibbons?"
        ],
        "ref_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\"",
        "MQL": "db.Papers.aggregate([\n  {\n    $lookup: {\n      from: \"Authors\",\n      localField: \"Authorship.authID\",\n      foreignField: \"authID\",\n      as: \"Docs1\"\n    }\n  },\n  {\n    $match: {\n      \"Docs1.lname\": \"Gibbons\",\n      \"Docs1.fname\": \"Jeremy\"\n    }\n  },\n  {\n    $project: {\n      title: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 843,
        "db_id": "solvency_ii",
        "nl_queries": [
            "Show different type codes of products and the number of products with each type code.",
            "List the various product type codes along with the total number of products for each type.",
            "Provide a summary of product type codes and the count of products related to each type code.",
            "Display the unique product type codes along with how many products correspond to each code.",
            "Generate a report on different types of product codes and the total product count for each category."
        ],
        "ref_sql": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
        "MQL": "db.Products.aggregate([\n  {\n    $group: {\n      _id: \"$Product_Type_Code\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      Product_Type_Code: \"$_id\",\n      COUNT: \"$count\"\n    }\n  }\n]);\n"
    },
    {
        "record_id": 4234,
        "db_id": "tracking_share_transactions",
        "nl_queries": [
            "Show the average transaction amount for different transaction types.",
            "Provide the average amount transacted for each type of transaction.",
            "What is the mean transaction amount across various transaction types?",
            "Display the average transaction amounts categorized by their respective transaction types.",
            "Calculate and show the average monetary amount for different types of transactions."
        ],
        "ref_sql": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "MQL": "db.Investors.aggregate([\n  { $unwind: \"$Transactions\" },\n  {\n    $group: {\n      _id: \"$Transactions.transaction_type_code\",\n      avg_amount_of_transaction: { $avg: \"$Transactions.amount_of_transaction\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      transaction_type_code: \"$_id\",\n      avg_amount_of_transaction: 1\n    }\n  }\n]);\n"
    },
    {
        "record_id": 1602,
        "db_id": "course_teach",
        "nl_queries": [
            "Show names of teachers and the number of courses they teach.",
            "What are the names of the teachers and how many courses do they teach?",
            "List the names of teachers along with how many courses they are responsible for teaching.",
            "Provide the names of the instructors and the total number of courses each one teaches.",
            "Retrieve the teacher names and the count of courses taught by each."
        ],
        "ref_sql": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "MQL": "db.teacher.aggregate([\n  {\n    $unwind: \"$course_arrange\"\n  },\n  {\n    $group: {\n      _id: \"$Name\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $project: {\n      Name: \"$_id\",\n      count: 1,\n      _id: 0\n    }\n  }\n]);\n"
    },
    {
        "record_id": 2903,
        "db_id": "customer_deliveries",
        "nl_queries": [
            "How many different payment methods are there?",
            "What is the total number of unique payment methods available?",
            "Can you tell me how many distinct payment methods exist?",
            "How many unique types of payment methods do we have?",
            "What is the count of different payment methods that are used?"
        ],
        "ref_sql": "SELECT count(DISTINCT payment_method) FROM customers",
        "MQL": "db.Customers.aggregate([\n  {\n    $group: {\n      _id: null,\n      count_DISTINCT_payment_method: { $addToSet: \"$payment_method\" }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      count_DISTINCT_payment_method: { $size: \"$count_DISTINCT_payment_method\" }\n    }\n  }\n]);\n"
    }
]